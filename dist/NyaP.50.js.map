{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../component/NyaP-Core/index.js","../component/NyaP-Core/lib/Object2HTML.js","../component/NyaP-Core/node_modules/@juggle/resize-observer/lib/exports/resize-observer.umd.js","../component/NyaP-Core/src/core.js","../component/NyaP-Core/src/domTools.js","../component/NyaP-Core/src/i18n.js","../component/NyaP-Core/src/utils.js","../component/NyaP-Danmaku/index.js","../component/NyaP-Danmaku/lib/Mat/Mat.js","../component/NyaP-Danmaku/src/danmaku-frame.js","../component/NyaP-Danmaku/src/danmaku-text/TextCanvas2D.js","../component/NyaP-Danmaku/src/danmaku-text/TextCss.js","../component/NyaP-Danmaku/src/danmaku-text/TextWebGL.js","../component/NyaP-Danmaku/src/danmaku-text/Textoff.js","../component/NyaP-Danmaku/src/danmaku-text/danmaku-text.js","../component/NyaP-Danmaku/src/danmaku-text/textModuleTemplate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js","../node_modules/@babel/runtime-corejs3/core-js-stable/date/now.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/copy-within.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/fill.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/repeat.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/assign.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js","../node_modules/@babel/runtime-corejs3/core-js-stable/promise.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-immediate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-interval.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js","../node_modules/@babel/runtime-corejs3/core-js/object/define-property.js","../node_modules/@babel/runtime-corejs3/helpers/defineProperty.js","../node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js","../node_modules/core-js-pure/es/array/is-array.js","../node_modules/core-js-pure/es/array/virtual/copy-within.js","../node_modules/core-js-pure/es/array/virtual/fill.js","../node_modules/core-js-pure/es/array/virtual/for-each.js","../node_modules/core-js-pure/es/array/virtual/index-of.js","../node_modules/core-js-pure/es/array/virtual/slice.js","../node_modules/core-js-pure/es/array/virtual/sort.js","../node_modules/core-js-pure/es/array/virtual/splice.js","../node_modules/core-js-pure/es/date/now.js","../node_modules/core-js-pure/es/function/virtual/bind.js","../node_modules/core-js-pure/es/instance/bind.js","../node_modules/core-js-pure/es/instance/copy-within.js","../node_modules/core-js-pure/es/instance/fill.js","../node_modules/core-js-pure/es/instance/index-of.js","../node_modules/core-js-pure/es/instance/repeat.js","../node_modules/core-js-pure/es/instance/slice.js","../node_modules/core-js-pure/es/instance/sort.js","../node_modules/core-js-pure/es/instance/splice.js","../node_modules/core-js-pure/es/instance/starts-with.js","../node_modules/core-js-pure/es/instance/trim.js","../node_modules/core-js-pure/es/object/assign.js","../node_modules/core-js-pure/es/object/create.js","../node_modules/core-js-pure/es/object/define-property.js","../node_modules/core-js-pure/es/object/entries.js","../node_modules/core-js-pure/es/object/get-own-property-descriptor.js","../node_modules/core-js-pure/es/promise/index.js","../node_modules/core-js-pure/es/string/virtual/repeat.js","../node_modules/core-js-pure/es/string/virtual/starts-with.js","../node_modules/core-js-pure/es/string/virtual/trim.js","../node_modules/core-js-pure/features/object/define-property.js","../node_modules/core-js-pure/internals/a-function.js","../node_modules/core-js-pure/internals/a-possible-prototype.js","../node_modules/core-js-pure/internals/add-to-unscopables.js","../node_modules/core-js-pure/internals/an-instance.js","../node_modules/core-js-pure/internals/an-object.js","../node_modules/core-js-pure/internals/array-copy-within.js","../node_modules/core-js-pure/internals/array-fill.js","../node_modules/core-js-pure/internals/array-for-each.js","../node_modules/core-js-pure/internals/array-includes.js","../node_modules/core-js-pure/internals/array-iteration.js","../node_modules/core-js-pure/internals/array-method-has-species-support.js","../node_modules/core-js-pure/internals/array-method-is-strict.js","../node_modules/core-js-pure/internals/array-method-uses-to-length.js","../node_modules/core-js-pure/internals/array-species-create.js","../node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js","../node_modules/core-js-pure/internals/check-correctness-of-iteration.js","../node_modules/core-js-pure/internals/classof-raw.js","../node_modules/core-js-pure/internals/classof.js","../node_modules/core-js-pure/internals/correct-is-regexp-logic.js","../node_modules/core-js-pure/internals/correct-prototype-getter.js","../node_modules/core-js-pure/internals/create-iterator-constructor.js","../node_modules/core-js-pure/internals/create-non-enumerable-property.js","../node_modules/core-js-pure/internals/create-property-descriptor.js","../node_modules/core-js-pure/internals/create-property.js","../node_modules/core-js-pure/internals/define-iterator.js","../node_modules/core-js-pure/internals/descriptors.js","../node_modules/core-js-pure/internals/document-create-element.js","../node_modules/core-js-pure/internals/dom-iterables.js","../node_modules/core-js-pure/internals/engine-is-ios.js","../node_modules/core-js-pure/internals/engine-user-agent.js","../node_modules/core-js-pure/internals/engine-v8-version.js","../node_modules/core-js-pure/internals/entry-virtual.js","../node_modules/core-js-pure/internals/enum-bug-keys.js","../node_modules/core-js-pure/internals/export.js","../node_modules/core-js-pure/internals/fails.js","../node_modules/core-js-pure/internals/function-bind-context.js","../node_modules/core-js-pure/internals/function-bind.js","../node_modules/core-js-pure/internals/get-built-in.js","../node_modules/core-js-pure/internals/get-iterator-method.js","../node_modules/core-js-pure/internals/global.js","../node_modules/core-js-pure/internals/has.js","../node_modules/core-js-pure/internals/hidden-keys.js","../node_modules/core-js-pure/internals/host-report-errors.js","../node_modules/core-js-pure/internals/html.js","../node_modules/core-js-pure/internals/ie8-dom-define.js","../node_modules/core-js-pure/internals/indexed-object.js","../node_modules/core-js-pure/internals/inspect-source.js","../node_modules/core-js-pure/internals/internal-state.js","../node_modules/core-js-pure/internals/is-array-iterator-method.js","../node_modules/core-js-pure/internals/is-array.js","../node_modules/core-js-pure/internals/is-forced.js","../node_modules/core-js-pure/internals/is-object.js","../node_modules/core-js-pure/internals/is-pure.js","../node_modules/core-js-pure/internals/is-regexp.js","../node_modules/core-js-pure/internals/iterate.js","../node_modules/core-js-pure/internals/iterators-core.js","../node_modules/core-js-pure/internals/microtask.js","../node_modules/core-js-pure/internals/native-promise-constructor.js","../node_modules/core-js-pure/internals/native-symbol.js","../node_modules/core-js-pure/internals/native-weak-map.js","../node_modules/core-js-pure/internals/new-promise-capability.js","../node_modules/core-js-pure/internals/not-a-regexp.js","../node_modules/core-js-pure/internals/object-assign.js","../node_modules/core-js-pure/internals/object-create.js","../node_modules/core-js-pure/internals/object-define-properties.js","../node_modules/core-js-pure/internals/object-define-property.js","../node_modules/core-js-pure/internals/object-get-own-property-descriptor.js","../node_modules/core-js-pure/internals/object-get-own-property-symbols.js","../node_modules/core-js-pure/internals/object-get-prototype-of.js","../node_modules/core-js-pure/internals/object-keys-internal.js","../node_modules/core-js-pure/internals/object-keys.js","../node_modules/core-js-pure/internals/object-property-is-enumerable.js","../node_modules/core-js-pure/internals/object-set-prototype-of.js","../node_modules/core-js-pure/internals/object-to-array.js","../node_modules/core-js-pure/internals/object-to-string.js","../node_modules/core-js-pure/internals/perform.js","../node_modules/core-js-pure/internals/promise-resolve.js","../node_modules/core-js-pure/internals/redefine-all.js","../node_modules/core-js-pure/internals/redefine.js","../node_modules/core-js-pure/internals/require-object-coercible.js","../node_modules/core-js-pure/internals/set-global.js","../node_modules/core-js-pure/internals/set-species.js","../node_modules/core-js-pure/internals/set-to-string-tag.js","../node_modules/core-js-pure/internals/shared-key.js","../node_modules/core-js-pure/internals/shared-store.js","../node_modules/core-js-pure/internals/shared.js","../node_modules/core-js-pure/internals/species-constructor.js","../node_modules/core-js-pure/internals/string-multibyte.js","../node_modules/core-js-pure/internals/string-repeat.js","../node_modules/core-js-pure/internals/string-trim-forced.js","../node_modules/core-js-pure/internals/string-trim.js","../node_modules/core-js-pure/internals/task.js","../node_modules/core-js-pure/internals/to-absolute-index.js","../node_modules/core-js-pure/internals/to-indexed-object.js","../node_modules/core-js-pure/internals/to-integer.js","../node_modules/core-js-pure/internals/to-length.js","../node_modules/core-js-pure/internals/to-object.js","../node_modules/core-js-pure/internals/to-primitive.js","../node_modules/core-js-pure/internals/to-string-tag-support.js","../node_modules/core-js-pure/internals/uid.js","../node_modules/core-js-pure/internals/use-symbol-as-uid.js","../node_modules/core-js-pure/internals/well-known-symbol.js","../node_modules/core-js-pure/internals/whitespaces.js","../node_modules/core-js-pure/modules/es.array.copy-within.js","../node_modules/core-js-pure/modules/es.array.fill.js","../node_modules/core-js-pure/modules/es.array.for-each.js","../node_modules/core-js-pure/modules/es.array.index-of.js","../node_modules/core-js-pure/modules/es.array.is-array.js","../node_modules/core-js-pure/modules/es.array.iterator.js","../node_modules/core-js-pure/modules/es.array.slice.js","../node_modules/core-js-pure/modules/es.array.sort.js","../node_modules/core-js-pure/modules/es.array.splice.js","../node_modules/core-js-pure/modules/es.date.now.js","../node_modules/core-js-pure/modules/es.function.bind.js","../node_modules/core-js-pure/modules/es.object.assign.js","../node_modules/core-js-pure/modules/es.object.create.js","../node_modules/core-js-pure/modules/es.object.define-property.js","../node_modules/core-js-pure/modules/es.object.entries.js","../node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js","../node_modules/core-js-pure/modules/es.object.to-string.js","../node_modules/core-js-pure/modules/es.promise.all-settled.js","../node_modules/core-js-pure/modules/es.promise.finally.js","../node_modules/core-js-pure/modules/es.promise.js","../node_modules/core-js-pure/modules/es.string.iterator.js","../node_modules/core-js-pure/modules/es.string.repeat.js","../node_modules/core-js-pure/modules/es.string.starts-with.js","../node_modules/core-js-pure/modules/es.string.trim.js","../node_modules/core-js-pure/modules/web.dom-collections.iterator.js","../node_modules/core-js-pure/modules/web.immediate.js","../node_modules/core-js-pure/modules/web.timers.js","../node_modules/core-js-pure/stable/array/is-array.js","../node_modules/core-js-pure/stable/array/virtual/for-each.js","../node_modules/core-js-pure/stable/date/now.js","../node_modules/core-js-pure/stable/instance/bind.js","../node_modules/core-js-pure/stable/instance/copy-within.js","../node_modules/core-js-pure/stable/instance/fill.js","../node_modules/core-js-pure/stable/instance/for-each.js","../node_modules/core-js-pure/stable/instance/index-of.js","../node_modules/core-js-pure/stable/instance/repeat.js","../node_modules/core-js-pure/stable/instance/slice.js","../node_modules/core-js-pure/stable/instance/sort.js","../node_modules/core-js-pure/stable/instance/splice.js","../node_modules/core-js-pure/stable/instance/starts-with.js","../node_modules/core-js-pure/stable/instance/trim.js","../node_modules/core-js-pure/stable/object/assign.js","../node_modules/core-js-pure/stable/object/create.js","../node_modules/core-js-pure/stable/object/entries.js","../node_modules/core-js-pure/stable/object/get-own-property-descriptor.js","../node_modules/core-js-pure/stable/promise/index.js","../node_modules/core-js-pure/stable/set-immediate.js","../node_modules/core-js-pure/stable/set-interval.js","../node_modules/core-js-pure/stable/set-timeout.js","NyaP.js","NyaPCommon.js","langs.json"],"names":[],"mappings":"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AACjB,SAAK,KAAL,GAAW,KAAX;AACA;;AACD,EAAA,IAAI,GAAE,CAAE,CALe,CAKf;;;AACR,EAAA,IAAI,GAAE,CAAE,CANe,CAMf;;;AACR,EAAA,KAAK,GAAE,CAAE,CAPc,CAOd;;;AACT,EAAA,IAAI,GAAE,CAAE,CARe,CAQf;;;AACR,EAAA,KAAK,GAAE,CAAE,CATc,CASd;;;AACT,EAAA,MAAM,GAAE,CAAE,CAVa,CAUb;;;AACV,EAAA,MAAM,GAAE,CAAE,CAXa,CAWb;;;AACV,EAAA,MAAM,GAAE,CAAE,CAZa,CAYb;;;AACV,EAAA,OAAO,GAAE,CAAE,CAbY,CAaZ;;;AACX,EAAA,UAAU,GAAE,CAAE,CAdS,CAcT;;;AACd,EAAA,uBAAuB,GAAE,CAAE;;AAfJ;;eAkBT,kB;;;;ACtBf;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA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","file":"NyaP.50.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nexport {NyaPlayerCore} from './src/core.js'\nexport {DomTools} from './src/domTools.js'\nexport {i18n} from './src/i18n.js'\nexport {Utils} from './src/utils.js'","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nfunction Object2HTML(obj,func){\n\tlet ele,o={},a=[];\n\tif(obj===null || typeof obj !=='object')ele=document.createTextNode(String(obj));//text node\n\telse if(obj instanceof Node)ele=obj;\n\telse{\n\t\tif(obj===undefined)throw(new TypeError(`'undefined' received, object or string expect.`));\n\t\tif(!obj._)obj._='div';\n\t\tele||(ele=document.createElement(obj._));\n\t\t//attributes\n\t\tfor(let [attr,value] of Object.entries(obj.attr||obj.a||o))\n\t\t\tele.setAttribute(attr,value);\n\t\t//properties\n\t\tfor(let [prop,value] of Object.entries(obj.prop||obj.p||o))\n\t\t\tele[prop]=value;\n\t\t//events\n\t\tfor(let [e,cb] of Object.entries(obj.event||obj.e||o))\n\t\t\tele.addEventListener(e,cb);\n\t\t//childNodes\n\t\tfor(let c of (obj.child||obj.c||a)){\n\t\t\tlet e=Object2HTML(c,func);\n\t\t\t(e instanceof Node)&&ele.appendChild(e);\n\t\t}\n\t}\n\tfunc&&func(ele);\n\treturn ele;\n}\n\nexport default Object2HTML;\nexport {Object2HTML}","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = global || self, factory(global.ResizeObserver = {}));\n}(this, (function (exports) { 'use strict';\n\n    var resizeObservers = [];\n\n    var hasActiveObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n    };\n\n    var hasSkippedObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n    };\n\n    var msg = 'ResizeObserver loop completed with undelivered notifications.';\n    var deliverResizeLoopError = function () {\n        var event;\n        if (typeof ErrorEvent === 'function') {\n            event = new ErrorEvent('error', {\n                message: msg\n            });\n        }\n        else {\n            event = document.createEvent('Event');\n            event.initEvent('error', false, false);\n            event.message = msg;\n        }\n        window.dispatchEvent(event);\n    };\n\n    var ResizeObserverBoxOptions;\n    (function (ResizeObserverBoxOptions) {\n        ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n        ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n        ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n    })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n    var DOMRectReadOnly = (function () {\n        function DOMRectReadOnly(x, y, width, height) {\n            this.x = x;\n            this.y = y;\n            this.width = width;\n            this.height = height;\n            this.top = this.y;\n            this.left = this.x;\n            this.bottom = this.top + this.height;\n            this.right = this.left + this.width;\n            return Object.freeze(this);\n        }\n        DOMRectReadOnly.prototype.toJSON = function () {\n            var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n            return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n        };\n        DOMRectReadOnly.fromRect = function (rectangle) {\n            return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n        };\n        return DOMRectReadOnly;\n    }());\n\n    var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\n    var isHidden = function (target) {\n        if (isSVG(target)) {\n            var _a = target.getBBox(), width = _a.width, height = _a.height;\n            return !width && !height;\n        }\n        var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n        return !(offsetWidth || offsetHeight || target.getClientRects().length);\n    };\n    var isElement = function (obj) {\n        var _a, _b;\n        var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n        return !!(scope && obj instanceof scope.Element);\n    };\n    var isReplacedElement = function (target) {\n        switch (target.tagName) {\n            case 'INPUT':\n                if (target.type !== 'image') {\n                    break;\n                }\n            case 'VIDEO':\n            case 'AUDIO':\n            case 'EMBED':\n            case 'OBJECT':\n            case 'CANVAS':\n            case 'IFRAME':\n            case 'IMG':\n                return true;\n        }\n        return false;\n    };\n\n    var global = typeof window !== 'undefined' ? window : {};\n\n    var cache = new Map();\n    var scrollRegexp = /auto|scroll/;\n    var verticalRegexp = /^tb|vertical/;\n    var IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);\n    var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\n    var size = function (inlineSize, blockSize, switchSizes) {\n        if (inlineSize === void 0) { inlineSize = 0; }\n        if (blockSize === void 0) { blockSize = 0; }\n        if (switchSizes === void 0) { switchSizes = false; }\n        return Object.freeze({\n            inlineSize: (switchSizes ? blockSize : inlineSize) || 0,\n            blockSize: (switchSizes ? inlineSize : blockSize) || 0\n        });\n    };\n    var zeroBoxes = Object.freeze({\n        devicePixelContentBoxSize: size(),\n        borderBoxSize: size(),\n        contentBoxSize: size(),\n        contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n    });\n    var calculateBoxSizes = function (target) {\n        if (cache.has(target)) {\n            return cache.get(target);\n        }\n        if (isHidden(target)) {\n            cache.set(target, zeroBoxes);\n            return zeroBoxes;\n        }\n        var cs = getComputedStyle(target);\n        var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();\n        var removePadding = !IE && cs.boxSizing === 'border-box';\n        var switchSizes = verticalRegexp.test(cs.writingMode || '');\n        var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n        var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n        var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n        var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n        var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n        var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n        var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n        var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n        var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n        var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n        var horizontalPadding = paddingLeft + paddingRight;\n        var verticalPadding = paddingTop + paddingBottom;\n        var horizontalBorderArea = borderLeft + borderRight;\n        var verticalBorderArea = borderTop + borderBottom;\n        var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n        var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n        var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n        var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n        var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n        var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n        var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n        var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n        var boxes = Object.freeze({\n            devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n            borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n            contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n            contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n        });\n        cache.set(target, boxes);\n        return boxes;\n    };\n    var calculateBoxSize = function (target, observedBox) {\n        var _a = calculateBoxSizes(target), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n        switch (observedBox) {\n            case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n                return devicePixelContentBoxSize;\n            case ResizeObserverBoxOptions.BORDER_BOX:\n                return borderBoxSize;\n            default:\n                return contentBoxSize;\n        }\n    };\n\n    var ResizeObserverEntry = (function () {\n        function ResizeObserverEntry(target) {\n            var boxes = calculateBoxSizes(target);\n            this.target = target;\n            this.contentRect = boxes.contentRect;\n            this.borderBoxSize = [boxes.borderBoxSize];\n            this.contentBoxSize = [boxes.contentBoxSize];\n            this.devicePixelContentBoxSize = [boxes.devicePixelContentBoxSize];\n        }\n        return ResizeObserverEntry;\n    }());\n\n    var calculateDepthForNode = function (node) {\n        if (isHidden(node)) {\n            return Infinity;\n        }\n        var depth = 0;\n        var parent = node.parentNode;\n        while (parent) {\n            depth += 1;\n            parent = parent.parentNode;\n        }\n        return depth;\n    };\n\n    var broadcastActiveObservations = function () {\n        var shallowestDepth = Infinity;\n        var callbacks = [];\n        resizeObservers.forEach(function processObserver(ro) {\n            if (ro.activeTargets.length === 0) {\n                return;\n            }\n            var entries = [];\n            ro.activeTargets.forEach(function processTarget(ot) {\n                var entry = new ResizeObserverEntry(ot.target);\n                var targetDepth = calculateDepthForNode(ot.target);\n                entries.push(entry);\n                ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n                if (targetDepth < shallowestDepth) {\n                    shallowestDepth = targetDepth;\n                }\n            });\n            callbacks.push(function resizeObserverCallback() {\n                ro.callback.call(ro.observer, entries, ro.observer);\n            });\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n        });\n        for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n            var callback = callbacks_1[_i];\n            callback();\n        }\n        return shallowestDepth;\n    };\n\n    var gatherActiveObservationsAtDepth = function (depth) {\n        cache.clear();\n        resizeObservers.forEach(function processObserver(ro) {\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n            ro.skippedTargets.splice(0, ro.skippedTargets.length);\n            ro.observationTargets.forEach(function processTarget(ot) {\n                if (ot.isActive()) {\n                    if (calculateDepthForNode(ot.target) > depth) {\n                        ro.activeTargets.push(ot);\n                    }\n                    else {\n                        ro.skippedTargets.push(ot);\n                    }\n                }\n            });\n        });\n    };\n\n    var process = function () {\n        var depth = 0;\n        gatherActiveObservationsAtDepth(depth);\n        while (hasActiveObservations()) {\n            depth = broadcastActiveObservations();\n            gatherActiveObservationsAtDepth(depth);\n        }\n        if (hasSkippedObservations()) {\n            deliverResizeLoopError();\n        }\n        return depth > 0;\n    };\n\n    var trigger;\n    var callbacks = [];\n    var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\n    var queueMicroTask = function (callback) {\n        if (!trigger) {\n            var el_1 = document.createTextNode('');\n            var config = { characterData: true };\n            new MutationObserver(function () { return notify(); }).observe(el_1, config);\n            trigger = function () { el_1.textContent = ''; };\n        }\n        callbacks.push(callback);\n        trigger();\n    };\n\n    var queueResizeObserver = function (cb) {\n        queueMicroTask(function ResizeObserver() {\n            requestAnimationFrame(cb);\n        });\n    };\n\n    var watching = 0;\n    var isWatching = function () { return !!watching; };\n    var CATCH_FRAMES = 60 / 5;\n    var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\n    var events = [\n        'resize',\n        'load',\n        'transitionend',\n        'animationend',\n        'animationstart',\n        'animationiteration',\n        'keyup',\n        'keydown',\n        'mouseup',\n        'mousedown',\n        'mouseover',\n        'mouseout',\n        'blur',\n        'focus'\n    ];\n    var scheduled = false;\n    var Scheduler = (function () {\n        function Scheduler() {\n            var _this = this;\n            this.stopped = true;\n            this.listener = function () { return _this.schedule(); };\n        }\n        Scheduler.prototype.run = function (frames) {\n            var _this = this;\n            if (scheduled) {\n                return;\n            }\n            scheduled = true;\n            queueResizeObserver(function () {\n                var elementsHaveResized = false;\n                try {\n                    elementsHaveResized = process();\n                }\n                finally {\n                    scheduled = false;\n                    if (!isWatching()) {\n                        return;\n                    }\n                    if (elementsHaveResized) {\n                        _this.run(60);\n                    }\n                    else if (frames) {\n                        _this.run(frames - 1);\n                    }\n                    else {\n                        _this.start();\n                    }\n                }\n            });\n        };\n        Scheduler.prototype.schedule = function () {\n            this.stop();\n            this.run(CATCH_FRAMES);\n        };\n        Scheduler.prototype.observe = function () {\n            var _this = this;\n            var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n            document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);\n        };\n        Scheduler.prototype.start = function () {\n            var _this = this;\n            if (this.stopped) {\n                this.stopped = false;\n                this.observer = new MutationObserver(this.listener);\n                this.observe();\n                events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });\n            }\n        };\n        Scheduler.prototype.stop = function () {\n            var _this = this;\n            if (!this.stopped) {\n                this.observer && this.observer.disconnect();\n                events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });\n                this.stopped = true;\n            }\n        };\n        return Scheduler;\n    }());\n    var scheduler = new Scheduler();\n    var updateCount = function (n) {\n        !watching && n > 0 && scheduler.start();\n        watching += n;\n        !watching && scheduler.stop();\n    };\n\n    var skipNotifyOnElement = function (target) {\n        return !isSVG(target)\n            && !isReplacedElement(target)\n            && getComputedStyle(target).display === 'inline';\n    };\n    var ResizeObservation = (function () {\n        function ResizeObservation(target, observedBox) {\n            this.target = target;\n            this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n            this.lastReportedSize = {\n                inlineSize: 0,\n                blockSize: 0\n            };\n        }\n        ResizeObservation.prototype.isActive = function () {\n            var size = calculateBoxSize(this.target, this.observedBox);\n            if (skipNotifyOnElement(this.target)) {\n                this.lastReportedSize = size;\n            }\n            if (this.lastReportedSize.inlineSize !== size.inlineSize\n                || this.lastReportedSize.blockSize !== size.blockSize) {\n                return true;\n            }\n            return false;\n        };\n        return ResizeObservation;\n    }());\n\n    var ResizeObserverDetail = (function () {\n        function ResizeObserverDetail(resizeObserver, callback) {\n            this.activeTargets = [];\n            this.skippedTargets = [];\n            this.observationTargets = [];\n            this.observer = resizeObserver;\n            this.callback = callback;\n        }\n        return ResizeObserverDetail;\n    }());\n\n    var observerMap = new Map();\n    var getObservationIndex = function (observationTargets, target) {\n        for (var i = 0; i < observationTargets.length; i += 1) {\n            if (observationTargets[i].target === target) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    var ResizeObserverController = (function () {\n        function ResizeObserverController() {\n        }\n        ResizeObserverController.connect = function (resizeObserver, callback) {\n            var detail = new ResizeObserverDetail(resizeObserver, callback);\n            resizeObservers.push(detail);\n            observerMap.set(resizeObserver, detail);\n        };\n        ResizeObserverController.observe = function (resizeObserver, target, options) {\n            if (observerMap.has(resizeObserver)) {\n                var detail = observerMap.get(resizeObserver);\n                if (getObservationIndex(detail.observationTargets, target) < 0) {\n                    detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n                    updateCount(1);\n                    scheduler.schedule();\n                }\n            }\n        };\n        ResizeObserverController.unobserve = function (resizeObserver, target) {\n            if (observerMap.has(resizeObserver)) {\n                var detail = observerMap.get(resizeObserver);\n                var index = getObservationIndex(detail.observationTargets, target);\n                if (index >= 0) {\n                    detail.observationTargets.splice(index, 1);\n                    updateCount(-1);\n                }\n            }\n        };\n        ResizeObserverController.disconnect = function (resizeObserver) {\n            if (observerMap.has(resizeObserver)) {\n                var detail = observerMap.get(resizeObserver);\n                resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n                observerMap.delete(resizeObserver);\n                updateCount(-detail.observationTargets.length);\n            }\n        };\n        return ResizeObserverController;\n    }());\n\n    var ResizeObserver = (function () {\n        function ResizeObserver(callback) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (typeof callback !== 'function') {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n            }\n            ResizeObserverController.connect(this, callback);\n        }\n        ResizeObserver.prototype.observe = function (target, options) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.observe(this, target, options);\n        };\n        ResizeObserver.prototype.unobserve = function (target) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.unobserve(this, target);\n        };\n        ResizeObserver.prototype.disconnect = function () {\n            ResizeObserverController.disconnect(this);\n        };\n        ResizeObserver.toString = function () {\n            return 'function ResizeObserver () { [polyfill code] }';\n        };\n        return ResizeObserver;\n    }());\n\n    exports.ResizeObserver = ResizeObserver;\n    exports.ResizeObserverEntry = ResizeObserverEntry;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\n\nimport {i18n} from './i18n.js';\nimport {DomTools} from './domTools.js';\nimport {Utils} from './utils.js';\n\n//default options\nconst NyaPCoreOptions={\n\t//for video\n\tmuted:false,//set video muted\n\tvolume:1,//set volume (0 ~ 1) \n\tloop:false,//set video loop\n\tvideoSrc:'',\n\tplugins:[],//NyaP dynamic plugins list\n}\n\n\nclass NyaPEventEmitter{\n\tconstructor(){\n\t\tthis._events={};\n\t}\n\temit(e,...args){\n\t\tthis._resolve(e,...args);\n\t\tthis.globalListener(e,...args);\n\t\treturn this;\n\t}\n\t_resolve(e,...args){\n\t\tif(e in this._events){\n\t\t\tconst hs=this._events[e];\n\t\t\ttry{\n\t\t\t\tfor(let h of hs){\n\t\t\t\t\tif(h.apply(this,args)===false)return;\n\t\t\t\t}\n\t\t\t}catch(err){\n\t\t\t\tconsole.error(`NyaP event callback error for \"${e}\"`,err);\n\t\t\t}\n\t\t}\n\t}\n\taddEventListener(...args){\n\t\treturn this.on(...args);\n\t}\n\ton(e,handle,top=false){\n\t\tif(!(handle instanceof Function))return this;\n\t\tif(!(e in this._events))this._events[e]=[];\n\t\tif(top)\n\t\t\tthis._events[e].unshift(handle);\n\t\telse\n\t\t\tthis._events[e].push(handle);\n\t\treturn this;\n\t}\n\tremoveEvent(e,handle){\n\t\tif(!(e in this._events))return this;\n\t\tif(arguments.length===1){delete this._events[e];return this;}\n\t\tlet ind;\n\t\tif(ind=(this._events[e].indexOf(handle))>=0)this._events[e].splice(ind,1);\n\t\tif(this._events[e].length===0)delete this._events[e];\n\t\treturn this;\n\t}\n\tglobalListener(name,...args){}//all events will be passed to this function\n}\n\nclass NyaPlayerCore extends NyaPEventEmitter{\n\tstatic i18n=i18n;\n\tstatic Utils=Utils;\n\tstatic DomTools=DomTools;\n\tstatic NyaPCoreOptions=NyaPCoreOptions;\n\tstats=[];//stats of the player. Item: [[time,name,promise or result],...]\n\tdebugs=[];//debug messages. Item: [[time,...msgs],...]\n\tplugins={};//loaded core plugins. name=>plugin object\n\ti18n=new i18n();//core i18n instanse\n\t_={//for private variables, do not change vars here\n\t\tvideoSrc:'',\n\t\tvideo:DomTools.Object2HTML({_:'video',attr:{id:'main_video',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'webkit-playsinline':'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'playsinline':'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-playsinline':'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x-webkit-airplay':'allow',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'controlsList':\"nodownload\" ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-video-player-type':'h5',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'preload':'auto',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'poster':'',\n\t\t\t\t\t\t\t\t\t\t\t\t}}),\n\t\turlResolvers:[],//functions to resolve urls. Item: [priority,func]\n\t};\n\tget video(){return this._.video;}//get video element\n\tget videoSize(){return [this.video.videoWidth,this.video.videoHeight];}\n\tget videoSrc(){return this._.videoSrc;}//get current video src\n\n\tconstructor(opt){\n\t\tsuper();\n\t\tlet _=this.i18n;\n\t\t{\n\t\t\tlet done=this.stat('loading_core');\n\t\t\tthis.on('coreLoad',()=>done());\n\t\t\tthis.on('coreLoadError',e=>done(e));\n\t\t}\n\t\tthis.log('%c https://github.com/JiaJiaJiang/NyaP-Core/ ','log',\"background:#6f8fa2;color:#ccc;padding:.3em\");\n\t\tthis.debug('Languages:'+this.i18n.langsArr.join(','));\n\n\t\topt=this.opt=Utils.deepAssign({},NyaPCoreOptions,opt);\n\t\t//add events\n\t\t{\n\t\t\t//video:video_loopChange\n\t\t\tlet LoopDesc=Object.getOwnPropertyDescriptor(HTMLMediaElement.prototype,'loop');\n\t\t\tObject.defineProperty(this.video,'loop',{\n\t\t\t\tget:LoopDesc.get,\n\t\t\t\tset:bool=>{\n\t\t\t\t\tif(bool===this.video.loop)return;\n\t\t\t\t\tthis.emit('video_loopChange',bool);\n\t\t\t\t\tLoopDesc.set.call(this.video,bool);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tDomTools.addEvents(this.video,{\n\t\t\tloadedmetadata:e=>this.debug('Video loadded'),\n\t\t\terror:e=>this.debug('Video error:',e),\n\t\t\tloadstart:e=>{this.stat('loading_video')},\n\t\t});\n\t\t\n\t\t//define default src resolver\n\t\tthis.addURLResolver((url)=>{\n\t\t\treturn Promise.resolve(url);//return the url\n\t\t},999);//most lower priority\n\n\t\t/*opts*/\n\t\trequestAnimationFrame(()=>{//active after events are attached\n\t\t\t['muted','volume','loop'].forEach(o=>{//dont change the order\n\t\t\t\t(opt[o]!==undefined)&&(this.video[o]=opt[o]);\n\t\t\t});\n\t\t\tif(opt.videoSrc)this.setVideoSrc(opt.videoSrc);//videoSrc\n\t\t});\n\n\n\t\tif(Array.isArray(opt.plugins)){//load plugins,opt.plugins is a list of url for plugins\n\t\t\tlet done=this.stat('loading_plugin');\n\t\t\tlet pluginList=[];\n\t\t\tfor(let url of opt.plugins){\n\t\t\t\tpluginList.push(this.loadPlugin(url));\n\t\t\t}\n\t\t\tPromise.all(pluginList).then(()=>{\n\t\t\t\tdone();\n\t\t\t\tthis.emit('coreLoad');\n\t\t\t}).catch(e=>{\n\t\t\t\tdone(e);\n\t\t\t\tthis.debug('coreLoadError',e);\n\t\t\t\tthis.emit('coreLoadError',e);\n\t\t\t})\n\t\t\treturn;\n\t\t}\n\n\t\t\n\t\tthis.emit('coreLoad');\n\t}\n\tstat(statusName,cb){\n\t\tlet doneFunc,failFunc;\n\t\tlet resultFunc=r=>{\n\t\t\tif(r instanceof Error){\n\t\t\t\tthis.debug(r);\n\t\t\t\tfailFunc(r.message);\n\t\t\t}else{\n\t\t\t\tdoneFunc(r);\n\t\t\t}\n\t\t}\n\t\tlet p=new Promise((ok,no)=>{\n\t\t\tdoneFunc=ok;\n\t\t\tfailFunc=no;\n\t\t});\n\t\tp.catch(e=>{\n\t\t\tthis.debug(`fail stat:${e}`);\n\t\t});\n\t\tlet s=[Date.now(),statusName,p,doneFunc,failFunc];\n\t\tthis.stats.push(s);//add to core debug log\n\t\tif(cb){\n\t\t\t(async ()=>{\n\t\t\t\ttry{\n\t\t\t\t\tresultFunc(await cb());\n\t\t\t\t}catch(err){\n\t\t\t\t\tresultFunc(err);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\tsetTimeout(()=>this.emit('stat',s),0);\n\t\treturn resultFunc;\n\t}\n\tstatResult(statusName,result){\n\t\tfor(let i=this.stats.length,s;i--;){\n\t\t\ts=this.stats[i];\n\t\t\tif(s[1]===statusName){\n\t\t\t\tif(result instanceof Error){\n\t\t\t\t\ts[4](result.message);\n\t\t\t\t}else{\n\t\t\t\t\ts[3](result);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\taddURLResolver(func,priority=0){\n\t\tthis._.urlResolvers.push([priority,func]);\n\t\tthis._.urlResolvers.sort((a,b)=>a[0]-b[0]);//sort by priority\n\t}\n\tasync resolveURL(url){//resolve the url by url resolvers\n\t\tfor(let n of this._.urlResolvers){\n\t\t\tlet func=n[1];\n\t\t\tlet r=await func(url);\n\t\t\tif(r===false){\n\t\t\t\tthis.debug(`Stop resolving url: ${url}`);\n\t\t\t\treturn false;//stop resolving the url\n\t\t\t}\n\t\t\tif(r){\n\t\t\t\tthis.debug('URL resolver: ['+url+'] => ['+r+']');\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject('No url resolver hit');\n\t}\n\tasync setVideoSrc(s){\n\t\ts=s.trim();\n\t\tlet url=await this.resolveURL(s);\n\t\tif(url===false)return;//won't change the url if false returned\n\t\tthis._.videoSrc=s;\n\t\tthis.emit('srcChanged',s);\n\t\tthis.video.src=url;\n\t\treturn;\n\t}\n\tplayToggle(Switch=this.video.paused){\n\t\treturn this.video[Switch?'play':'pause']();\n\t}\n\tloadPlugin(url,name){//load js plugins for NyaP\n\t\tif(name&&this.plugins[name]){//check if exists\n\t\t\tthis.debug(`Plugin already loaded: ${name}`);\n\t\t\treturn this.plugins[name];\n\t\t}\n\t\tlet p=fetch(url)\n\t\t.then(res=>res.text())\n\t\t.then(async script=>{\n\t\t\tscript=script.trim();\n\t\t\tlet plugin=eval(script);\n\t\t\tif((typeof plugin.name!=='string')||!plugin.name)\n\t\t\t\tthrow(new TypeError('Invalid plugin name'));\n\t\t\tif(this.plugins[plugin.name]){//check if exists\n\t\t\t\tthis.debug(`Plugin already loaded: ${plugin.name}`);\n\t\t\t\treturn plugin;\n\t\t\t}\n\t\t\tif(typeof plugin.init==='function')\n\t\t\t\tawait plugin.init(this);//init the plugin\n\t\t\tthis.plugins[plugin.name]=plugin;\n\t\t\tthis.debug('Plugin loaded',plugin.name);\n\t\t\treturn plugin;\n\t\t});\n\t\tp.catch(e=>{\n\t\t\tthis.debug('Plugin loading error:',e);\n\t\t\t// this.emit('pluginLoadError',e);\n\t\t});\n\t\treturn p;\n\t}\n\tlog(content,type='log',...styles){//log to console\n\t\tconsole[type](`%c NyaP %c${content}`,\"background:#e0e0e0;padding:.2em\",\"background:unset\",...styles);\n\t}\n\tdebug(...msg){//debug messages\n\t\tconsole.debug('NyaP[debug]',...msg);\n\t\tmsg.unshift(Date.now());\n\t\tthis.debugs.push(msg);\n\t\tthis.emit('debug',msg);\n\t}\n}\n\nexport {\n\tNyaPlayerCore,\n}\n","import {ResizeObserver as ResizeObserverPolyfill} from '@juggle/resize-observer';\nimport {Object2HTML as O2H} from '../lib/Object2HTML.js';\nimport {Utils} from './utils.js';\n\nexport class DomTools{\n\tstatic addEvents(target,events){\n\t\tif(!Array.isArray(target))target=[target];\n\t\ttarget.forEach(function(t){\n\t\t\tif(!Utils.isObject(t.__NyaPEvents__)){\n\t\t\t\tt.__NyaPEvents__=[];\n\t\t\t}\n\t\t\tfor(let e in events)\n\t\t\t\te.split(/\\,/g).forEach(function(e2){\n\t\t\t\t\tt.addEventListener(e2,events[e]);\n\t\t\t\t\tt.__NyaPEvents__.push([e2,events[e]]);\n\t\t\t\t});\n\t\t});\n\t}\n\tstatic fullscreenElement(){\n\t\tconst d=document;\n\t\treturn d.webkitFullscreenElement\n\t\t\t\t||d.msFullscreenElement\n\t\t\t\t||d.mozFullScreenElement\n\t\t\t\t||d.fullscreenElement;\n\t}\n\tstatic requestFullscreen(d=document){\n\t\ttry{\n\t\t\treturn (d.requestFullscreen||\n\t\t\td.msRequestFullscreen||\n\t\t\td.mozRequestFullScreen||\n\t\t\td.webkitRequestFullScreen||\n\t\t\td.webkitEnterFullScreen)\n\t\t\t.call(d);\n\t\t}catch(e){\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\tstatic exitFullscreen(d=document){\n\t\ttry{\n\t\t\treturn (d.exitFullscreen||\n\t\t\t\td.msExitFullscreen||\n\t\t\t\td.mozCancelFullScreen||\n\t\t\t\td.webkitExitFullScreen||\n\t\t\t\td.webkitCancelFullScreen).call(d);\n\t\t}catch(e){\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\tstatic isFullscreen(d=document){\n\t\treturn !!(d.fullscreen || d.mozFullScreen || d.webkitIsFullScreen || d.msFullscreenElement || d.webkitDisplayingFullscreen);\n\t}\n\tstatic Object2HTML(...args){\n\t\treturn O2H(...args);\n\t}\n\tstatic resizeEvent={\n\t\tresizeObserverInstance:null,\n\t\tobserve(dom){\n\t\t\tif(!this.resizeObserverInstance){\n\t\t\t\tlet ResizeObserver=window.ResizeObserver;\n\t\t\t\tif(typeof  ResizeObserver!== 'function'){\n\t\t\t\t\tResizeObserver=ResizeObserverPolyfill;\n\t\t\t\t}\n\t\t\t\tthis.resizeObserverInstance=new ResizeObserver(entries => {\n\t\t\t\t\tfor (let entry of entries) {\n\t\t\t\t\t\tlet el = entry.target;\n\t\t\t\t\t\tlet e=new Event('resize',{bubbles:false,cancelable:true});\n\t\t\t\t\t\te.contentRect=entry.contentRect;\n\t\t\t\t\t\tel.dispatchEvent(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.resizeObserverInstance.observe(dom);\n\t\t},\n\t\tunobserve(dom){\n\t\t\tif(!this.resizeObserverInstance)\n\t\t\t\tthrow(new Error('resizeObserver not initialized'));\n\t\t\tthis.resizeObserverInstance.unobserve(dom);\n\t\t},\n\t}\n}\n\n ","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n\n\n//polyfill\nif(!navigator.languages){\n\tnavigator.languages=[navigator.language||navigator.browserLanguage];\n}\n\n\nclass i18n{\n\t/*\n\t*@param{object}langs Language text object indexed by language code\n\t*@param{array}langsArr Language priority array\n\t*/\n\tconstructor(langs={},langsArr=[...navigator.languages]){\n\t\tthis.langs=langs;//defines texts\n\t\tthis.langsArr=langsArr;\n\t\tthis.langsArr.push('zh-CN');//add zh-CN as default language\n\t}\n\tlangsArr=[];//language priority array\n\t_(str,...args){//translate\n\t\tlet s=this.findTranslation(str);\n\t\targs.length&&args.forEach((arg,ind)=>{s=s.replace(`$${ind}`,arg)});//fill args in the string\n\t\treturn s;\n\t}\n\tfindTranslation(text){\n\t\tfor(let lang of this.langsArr){//find by language priority\n\t\t\tif((lang in this.langs) && (text in this.langs[lang])){\n\t\t\t\treturn this.langs[lang][text];\n\t\t\t}\n\t\t\t//fallback to other same main code\n\t\t\tlet code=lang.match(/^\\w+/)[0];\n\t\t\tfor(let c in this.langs){\n\t\t\t\tif(c.startsWith(code) && (text in this.langs[c])){\n\t\t\t\t\treturn this.langs[c][text];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn text;\n\t}\n\tadd(langCode,texts){\n\t\tthis.langs[langCode]=texts;\n\t}\n}\n\nexport {i18n};","\nfunction padTime(n){//pad number to 2 chars\n    return n>9&&n||`0${n}`;\n}\n\nexport class Utils{\n    static clamp(num,min,max){\n        return num<min?min:(num>max?max:num);\n    }\n    static isObject(obj){\n        return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n    static deepAssign(target,...args){\n        //本函数不处理循环引用\n        let obj=args.shift();\n        if(target===null || target===undefined || typeof target !== 'object'){\n            throw(new TypeError('target should be an object'));\n        }\n        if(!Utils.isObject(obj)){//obj不是对象则跳过\n            if(args.length===0)return target;//没有参数了就返回结果\n            return Utils.deepAssign(target,...args);//提取一个参数出来继续\n        }\n        for(let i in obj){//遍历obj\n            if(Utils.isObject(obj[i])){//是个子对象\n                if(!Utils.isObject(target[i]))target[i]={};\n                Utils.deepAssign(target[i],obj[i]);//递归\n            }else{\n                target[i]=obj[i];//直接赋值\n            }\n        }\n        if(args.length===0)return target;\n        return Utils.deepAssign(target,...args);\n    }\n    static formatTime(sec,total){\n        if(total==undefined)total=sec;\n        let r,s=sec|0,h=(s/3600)|0;\n        if(total>=3600)s=s%3600;\n        r=[padTime((s/60)|0),padTime(s%60)];\n        (total>=3600)&&r.unshift(h);\n        return r.join(':');\n    }\n    static setAttrs(ele,obj){//set multi attrs to a Element\n        for(let a in obj)\n            ele.setAttribute(a,obj[a]);\n        return ele;\n    }\n    static rand(min, max) {\n        return (min+Math.random()*(max-min)+0.5)|0;\n    }\n    static toArray(obj){\n        if(obj instanceof Array)return obj.slice();\n        if(obj.length!==undefined)\n            return Array.prototype.slice.call(obj);\n        return [...obj];\n    }\n    static animationFrameLoop(cb){\n        requestAnimationFrame(()=>{\n           if(cb()===false)return;;\n           Utils.animationFrameLoop(cb);\n        });\n    }\n    static requestIdleCallback=window.requestIdleCallback?.bind(window)||setImmediate;\n}\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\nimport {Utils} from '../NyaP-Core/index.js';//load DomTools from NyaP-Core project\nimport {DanmakuFrame} from './src/danmaku-frame.js'\nimport initTextDanmaku from './src/danmaku-text/danmaku-text.js'\ninitTextDanmaku(DanmakuFrame);//init TextDanmaku mod\n\nconst colorChars='0123456789abcdef';\nconst danmakuProp=['color','text','size','mode','time'];\nclass NyaPDanmaku extends DanmakuFrame{\n\tget opt(){return this.core.opt.danmaku};\n\tconstructor(core){\n\t\tsuper(core,core.opt.danmaku);\n\n\t\t//init mods\n\t\tfor(let mod in DanmakuFrame.availableModules){\n\t\t\tif(this.opt.modules[mod]?.enable===true)\n\t\t\t\tthis.initModule(mod);\n\t\t\t\tthis.enable(mod);\n\t\t}\n\n\t\tthis.setMedia(core.video);\n\t}\n\ttoggle(name,bool){\n\t\tif(typeof name==='boolean' || name==undefined){//danmaku frame switch mode\n\t\t\tbool=(name!=undefined)?name:!this.enabled;\n\t\t\tthis[bool?'enable':'disable']();\n\t\t\treturn bool;\n\t\t}\n\t\ttry{//module switch mode\n\t\t\tif(bool==undefined)bool=!this.module(name).enabled;\n\t\t\tthis[bool?'enable':'disable'](name);\n\t\t\tthis.core.emit('danmakuModuleToggle',name,this.module(name)?.enabled);\n\t\t}catch(e){\n\t\t\tthis.core.log('','error',e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tmodule(name){\n\t\treturn super.modules[name];\n\t}\n\tsend(obj,callback){\n\t\tfor(let i of danmakuProp)\n\t\t\tif((i in obj)===false)return false;\n\t\tif((obj.text||'').match(/^\\s*$/))return false;\n\t\tobj.color=this.isVaildColor(obj.color);\n\t\tif(obj.color){\n\t\t\tobj.color=obj.color.replace(/\\$/g,()=>{\n\t\t\t\treturn colorChars[Utils.clamp((16*Math.random())|0,0,15)];\n\t\t\t});\n\t\t}else{\n\t\t\tobj.color=null;\n\t\t}\n\t\tif(this.opt.send instanceof Function){\n\t\t\tthis.opt.send(obj,callback||(()=>{}));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tisVaildColor(co){\n\t\tif(typeof co !== 'string')return false;\n\t\treturn (co=co.match(/^\\#?(([\\da-f\\$]{3}){1,2})$/i))?co[1]:false;\n\t}\n}\n\nexport default NyaPDanmaku;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\n\n(function(f){\n\tif (typeof define === \"function\" && define.amd) {\n\t    define(f);\n\t}else if (typeof exports === \"object\") {\n\t    module.exports = f();\n\t}else {\n\t    (0,eval)('this').Mat = f();\n\t}\n})(function(){\nconst global= (0,eval)('this');\nconst TypedArray=global.Float32Array&&global.Float32Array.prototype;\n\nfunction createClass(Constructor){\n\tclass Matrix{\n\t\tconstructor(l,c,fill=0){\n\t\t\tthis.array=new Constructor(l*c);\n\t\t\tObject.defineProperty(this.array,'row',{value:l});\n\t\t\tObject.defineProperty(this.array,'column',{value:c});\n\t\t\tif(arguments.length==3){\n\t\t\t\tif(Matrix._instanceofTypedArray&&(fill===0)){}\n\t\t\t\telse if(typeof fill === 'number'){\n\t\t\t\t\tthis.fill(fill);\n\t\t\t\t}else if(fill.length){\n\t\t\t\t\tthis.set(fill);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tget length(){return this.array.length;}\n\t\tget row(){return this.array.row;}\n\t\tget column(){return this.array.column;}\n\t\tleftMultiply(m){\n\t\t\treturn this.set(Matrix.multiply(m,this,new Matrix(m.row,this.column)));\n\t\t}\n\t\trightMultiply(m){\n\t\t\treturn this.set(Matrix.multiply(this,m,new Matrix(this.row,m,column)));\n\t\t}\n\t\tfill(n){\n\t\t\targuments.length||(n=0);\n\t\t\tfor(let i=this.length;i--;)this.array[i]=n;\n\t\t\treturn this;\n\t\t}\n\t\tset(arr,offset){\n\t\t\toffset||(offset=0);\n\t\t\t(arr instanceof Matrix)&&(arr=arr.array);\n\t\t\tfor(let i=(arr.length+offset)<=this.length?arr.length:(this.length-offset);i--;)\n\t\t\t\tthis.array[offset+i]=arr[i];\n\t\t\treturn this;\n\t\t}\n\t\tput(m,row,column){\n\t\t\tMatrix.put(this,m,row||0,column||0);\n\t\t\treturn this;\n\t\t}\n\t\trotate2d(t){\n\t\t\treturn this.set(Matrix.rotate2d(this,t,Matrix.Matrixes.T3));\n\t\t}\n\t\ttranslate2d(x,y){\n\t\t\treturn this.set(Matrix.translate2d(this,x,y,Matrix.Matrixes.T3));\n\t\t}\n\t\tscale2d(x,y){\n\t\t\treturn this.set(Matrix.scale2d(this,x,y,Matrix.Matrixes.T3));\n\t\t}\n\t\trotate3d(tx,ty,tz){\n\t\t\treturn this.set(Matrix.rotate3d(this,tx,ty,tz,Matrix.Matrixes.T4));\n\t\t}\n\t\tscale3d(x,y,z){\n\t\t\treturn this.set(Matrix.scale3d(this,x,y,z,Matrix.Matrixes.T4));\n\t\t}\n\t\ttranslate3d(x,y,z){\n\t\t\treturn this.set(Matrix.translate3d(this,x,y,z,Matrix.Matrixes.T4));\n\t\t}\n\t\trotateX(t){\n\t\t\treturn this.set(Matrix.rotateX(this,t,Matrix.Matrixes.T4));\n\t\t}\n\t\trotateY(t){\n\t\t\treturn this.set(Matrix.rotateY(this,t,Matrix.Matrixes.T4));\n\t\t}\n\t\trotateZ(t){\n\t\t\treturn this.set(Matrix.rotateZ(this,t,Matrix.Matrixes.T4));\n\t\t}\n\t\tclone(){\n\t\t\treturn new Matrix(this.row,this.column,this);\n\t\t}\n\t\ttoString(){\n\t\t\tif(this.length === 0)return '';\n\t\t\tfor(var i=0,lines=[],tmp=[];i<this.length;i++){\n\t\t\t\tif(i && (i%this.column === 0)){\n\t\t\t\t\tlines.push(tmp.join('\\t'));\n\t\t\t\t\ttmp.length=0;\n\t\t\t\t}\n\t\t\t\ttmp.push(this.array[i]||0);\n\t\t\t}\n\t\t\tlines.push(tmp.join('\t'));\n\t\t\treturn lines.join('\\n');\n\t\t}\n\n\t\t//static methods\n\t\tstatic Identity(n){//return a new Identity Matrix\n\t\t\tlet m=new Matrix(n,n,0);\n\t\t\tfor(let i=n;i--;)m.array[i*n+i]=1;\n\t\t\treturn m;\n\t\t}\n\t\tstatic Perspective(fovy,aspect,znear,zfar,result){\n\t\t\tvar y1=znear*Math.tan(fovy*Math.PI/360.0),\n\t\t\t\tx1=y1*aspect,\n\t\t\t\tm=result||new Matrix(4,4,0),\n\t\t\t\tarr=m.array;\n\n\t\t\tarr[0]=2*znear/(x1+x1);\n\t\t\tarr[5]=2*znear/(y1+y1);\n\t\t\tarr[10]=-(zfar+znear)/(zfar-znear);\n\t\t\tarr[14]=-2*zfar*znear/(zfar-znear);\n\t\t\tarr[11]=-1;\n\t\t    if(result)arr[1]=arr[2]=arr[3]=arr[4]=arr[6]=arr[7]=arr[8]=arr[9]=arr[12]=arr[13]=arr[15]=0;\n\t\t    return m;\n\t\t}\n\t\tstatic multiply(a,b,result){\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\n\t\t\tlet row=a.row,column=Math.min(a.column,b.column),r=result||new Matrix(row,column),c,i,ind;\n\t\t\tfor(let l=row;l--;){\n\t\t\t\tfor(c=column;c--;){\n\t\t\t\t\tr.array[ind=(l*r.column+c)]=0;\n\t\t\t\t\tfor(i=a.column;i--;){\n\t\t\t\t\t\tr.array[ind]+=(a.array[l*a.column+i]*b.array[c+i*b.column]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\tstatic multiplyString(a,b,array,ignoreZero=true){//work out the equation for every elements,only for debug and only works with Array matrixes\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\n\t\t\tvar r=array||new Matrix(a.row,b.column),l,c,i,ind;\n\t\t\tfor(l=a.row;l--;){\n\t\t\t\tfor(c=b.column;c--;){\n\t\t\t\t\tr.array[ind=(l*b.column+c)]='';\n\t\t\t\t\tfor(i=0;i<a.column;i++){\n\t\t\t\t\t\tif(ignoreZero && (a.array[l*a.column+i]==0 ||b.array[c+i*b.column]==0))continue;\n\t\t\t\t\t\tr.array[ind]+=(((i&&r.array[ind])?'+':'')+'('+a.array[l*a.column+i]+')*('+b.array[c+i*b.column])+')';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\tstatic add(a,b,result){\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\n\t\t\tlet r=result||new Matrix(a.row,b.column);\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]+b.array[i];\n\t\t\treturn r;\n\t\t}\n\t\tstatic minus(a,b,result){\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\n\t\t\tlet r=result||new Matrix(a.row,b.column);\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]-b.array[i];\n\t\t\treturn r;\n\t\t}\n\t\tstatic rotate2d(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotate2d;\n\t\t\tMr.array[0]=Mr.array[4]=Math.cos(t);\n\t\t\tMr.array[1]=-(Mr.array[3]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\n\t\t}\n\t\tstatic scale2d(m,x,y,result){\n\t\t\tconst Mr=Matrix.Matrixes.scale2d;\n\t\t\tMr.array[0]=x;\n\t\t\tMr.array[4]=y;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\n\t\t}\n\t\tstatic translate2d(m,x,y,result){\n\t\t\tconst Mr=Matrix.Matrixes.translate2d;\n\t\t\tMr.array[2]=x;\n\t\t\tMr.array[5]=y;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\n\t\t}\n\t\tstatic rotate3d(m,tx,ty,tz,result){\n\t\t\tconst Xc=Math.cos(tx),Xs=Math.sin(tx),\n\t\t\t\tYc=Math.cos(ty),Ys=Math.sin(ty),\n\t\t\t\tZc=Math.cos(tz),Zs=Math.sin(tz),\n\t\t\t\tMr=Matrix.Matrixes.rotate3d;\n\t\t\tMr.array[0]=Zc*Yc;\n\t\t\tMr.array[1]=Zc*Ys*Xs-Zs*Xc;\n\t\t\tMr.array[2]=Zc*Ys*Xc+Zs*Xs;\n\t\t\tMr.array[4]=Zs*Yc;\n\t\t\tMr.array[5]=Zs*Ys*Xs+Zc*Xc;\n\t\t\tMr.array[6]=Zs*Ys*Xc-Zc*Xs;\n\t\t\tMr.array[8]=-Ys;\n\t\t\tMr.array[9]=Yc*Xs;\n\t\t\tMr.array[10]=Yc*Xc;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic rotateX(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotateX;\n\t\t\tMr.array[10]=Mr.array[5]=Math.cos(t);\n\t\t\tMr.array[6]=-(Mr.array[9]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic rotateY(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotateY;\n\t\t\tMr.array[10]=Mr.array[0]=Math.cos(t);\n\t\t\tMr.array[8]=-(Mr.array[2]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic rotateZ(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotateZ;\n\t\t\tMr.array[5]=Mr.array[0]=Math.cos(t);\n\t\t\tMr.array[1]=-(Mr.array[4]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic scale3d(m,x,y,z,result){\n\t\t\tconst Mr=Matrix.Matrixes.scale3d;\n\t\t\tMr.array[0]=x;\n\t\t\tMr.array[5]=y;\n\t\t\tMr.array[10]=z;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic translate3d(m,x,y,z,result){\n\t\t\tconst Mr=Matrix.Matrixes.translate3d;\n\t\t\tMr.array[12]=x;\n\t\t\tMr.array[13]=y;\n\t\t\tMr.array[14]=z;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic put(m,sub,row,column){\n\t\t\tlet c,ind,i;\n\t\t\trow||(row=0);\n\t\t\tcolumn||(column=0);\n\t\t\tfor(let l=sub.row;l--;){\n\t\t\t\tif(l+row>=m.row)continue;\n\t\t\t\tfor(c=sub.column;c--;){\n\t\t\t\t\tif(c+column>=m.column)continue;\n\t\t\t\t\tm.array[(l+row)*m.column+c+column]=sub.array[l*sub.column+c];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstatic createClass(Constructor){\n\t\t\treturn createClass(Constructor);\n\t\t}\n\t}\n\n\tvar testArray=new Constructor(1);\n\tObject.defineProperty(Matrix,'_instanceofTypedArray',{value:!!(TypedArray&&TypedArray.isPrototypeOf(testArray))});\n\ttestArray=null;\n\n\tMatrix.Matrixes={//do not modify these matrixes manually and dont use them\n\t\tI2:Matrix.Identity(2),\n\t\tI3:Matrix.Identity(3),\n\t\tI4:Matrix.Identity(4),\n\t\tT3:new Matrix(3,3,0),\n\t\tT4:new Matrix(4,4,0),\n\t\trotate2d:Matrix.Identity(3),\n\t\ttranslate2d:Matrix.Identity(3),\n\t\tscale2d:Matrix.Identity(3),\n\t\ttranslate3d:Matrix.Identity(4),\n\t\trotate3d:Matrix.Identity(4),\n\t\trotateX:Matrix.Identity(4),\n\t\trotateY:Matrix.Identity(4),\n\t\trotateZ:Matrix.Identity(4),\n\t\tscale3d:Matrix.Identity(4),\n\t}\n\treturn Matrix;\n}\nreturn createClass(global.Float32Array?Float32Array:Array);\n});\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\nimport {\n\tDomTools,\n\tUtils\n} from '../../NyaP-Core/index.js';//load from NyaP-Core project\n\nexport {\n\tDomTools,\n\tUtils\n} \n\nclass DanmakuFrameModule{\n\tconstructor(frame){\n\t\tthis.frame=frame;\n\t\tthis.enabled=false;\n\t}\n\tget width(){return this.frame.width;}\n\tget height(){return this.frame.height;}\n}\n\n\nclass DanmakuFrame{\n\tstatic availableModules={};\n\tstatic addModule(name,module){\n\t\tif(name in this.availableModules){\n\t\t\tconsole.warn('The module \"'+name+'\" has already been added.');\n\t\t\treturn;\n\t\t}\n\t\tthis.availableModules[name]=module;\n\t} \n\tget availableModules(){return this.constructor.availableModules;}\n\tget opt(){return this._opt||{}};\n\tset time(t){//current media time (ms)\n\t\tthis.media||(this.timeBase=Date.now()-t);\n\t\tthis.moduleFunction('time',t);//let all mods know when the time be set\n\t}\n\tget time(){return this.media?(this.media.currentTime*1000):(Date.now()-this.timeBase);}\n\tget area(){return this.width*this.height;}\n\t_opt;\n\trate=1;\n\ttimeBase=0;//for no fixed duration evn\n\twidth=0;\n\theight=0;\n\tfpsLimit=0;\n\tfps=0;//fps result\n\tfpsRec=new Uint32Array(9);//frame time record\n\tmedia=null;\n\tworking=false;//set working stat\n\tenabled=true;//is enabled\n\tmodules={};//constructed module list\n\tconstructor(core,opt){\n\t\tthis.core=core;\n\t\tthis._opt=opt;\n\t\tthis.container=core.danmakuContainer||document.createElement('div');\n\t\t// create a styleSheet\n\t\tconst style=document.createElement(\"style\");\n\t\tdocument.head.appendChild(style);\n\t\tthis.styleSheet=style.sheet;\n\t\t\n\t\tsetImmediate(()=>{//container size sensor\n\t\t\tDomTools.resizeEvent.observe(this.container);\n\t\t\tDomTools.addEvents(this.container,{\n\t\t\t\tresize:e=>this.resize(e.contentRect),\n\t\t\t});\n\t\t\tthis.resize();\n\t\t},0);\n\t\t\n\t\tUtils.animationFrameLoop(()=>{//fps recorder\n\t\t\tlet rec=this.fpsRec,length=rec.length;\n\t\t\t//move left\n\t\t\trec.copyWithin(rec,1);\n\t\t\trec[length-1]=Date.now();//set this frame's time\n\t\t\tlet result=0;\n\t\t\tfor(let i=1;i<length;i++){//weighted average\n\t\t\t\tresult+=i*(rec[i]-rec[i-1]);\n\t\t\t}\n\t\t\tresult/=length*(length-1)/2;\n\t\t\tthis.fps=1000/result;\n\t\t});\n\n\t\tthis.draw=this.draw.bind(this);\n\n\t}\n\tenable(name){//enable a amdule\n\t\tif(name===undefined){//no name means enable this frame\n\t\t\tthis.enabled=true;\n\t\t\tif(this.media){\n\t\t\t\tthis.media.paused||this.play();\n\t\t\t}\n\t\t\tthis.container.style.display='';\n\t\t\tthis.core.emit('danmakuFrameToggle',true);\n\t\t\tthis.core.debug('danmaku frame enabled');\n\t\t\treturn;\n\t\t}else if(!name){\n\t\t\tthrow(new Error(`Wrong name: ${name}`));\n\t\t}\n\t\tlet module=this.modules[name]||this.initModule(name);\n\t\tif(!module)return false;\n\t\tmodule.enabled=true;\n\t\tmodule.enable&&module.enable();\n\t\treturn true;\n\t}\n\tdisable(name){\n\t\tif(name===undefined){\n\t\t\tthis.pause();\n\t\t\tthis.moduleFunction('clear');\n\t\t\tthis.enabled=false;\n\t\t\tthis.container.style.display='none';\n\t\t\tthis.core.emit('danmakuFrameToggle',false);\n\t\t\tthis.core.debug('danmaku frame disabled');\n\t\t\treturn;\n\t\t}\n\t\tlet module=this.modules[name];\n\t\tif(!module)return false;\n\t\tmodule.enabled=false;\n\t\tmodule.disable&&module.disable();\n\t\treturn true;\n\t}\n\taddStyle(s){\n\t\tif(typeof s === 'string')s=[s];\n\t\tif(s instanceof Array === false)return;\n\t\ts.forEach(r=>this.styleSheet.insertRule(r,this.styleSheet.cssRules.length));\n\t}\n\tinitModule(name,arg=this.opt.modules[name]){\n\t\tif(this.modules[name]){\n\t\t\tconsole.warn(`The module [${name}] has already inited.`);\n\t\t\treturn this.modules[name];\n\t\t}\n\t\tlet mod=DanmakuFrame.availableModules[name];\n\t\tif(!mod)throw('Module ['+name+'] does not exist.');\n\t\tlet module=new mod(this,arg);\n\t\tif(module instanceof DanmakuFrameModule === false)\n\t\t\tthrow('Constructor of '+name+' is not child class of DanmakuFrameModule');\n\t\tthis.modules[name]=module;\n\t\tconsole.debug(`Mod Inited: ${name}`);\n\t\treturn module;\n\t}\n\tdraw(force){\n\t\tif(!this.working)return;\n\t\tthis.moduleFunction('draw',force);\n\t\tif(this.fpsLimit<=0){\n\t\t\trequestAnimationFrame(()=>this.draw());\n\t\t}else{\n\t\t\tsetTimeout(this.draw,1000/this.fpsLimit);\n\t\t}\n\t}\n\tload(...danmakuObj){\n\t\tthis.moduleFunction('load',...danmakuObj);\n\t}\n\tloadList(danmakuArray){\n\t\tthis.moduleFunction('loadList',danmakuArray);\n\t}\n\tunload(danmakuObj){\n\t\tthis.moduleFunction('unload',danmakuObj);\n\t}\n\tplay(){\n\t\tif(this.working||!this.enabled)return;\n\t\tthis.working=true;\n\t\tthis.moduleFunction('play');\n\t\tthis.draw(true);\n\t}\n\tpause(){\n\t\tif(!this.enabled)return;\n\t\tthis.working=false;\n\t\tthis.moduleFunction('pause');\n\t}\n\tresize(rect=this.container.getBoundingClientRect()){\n\t\tthis.width=rect.width;\n\t\tthis.height=rect.height;\n\t\tthis.moduleFunction('resize',rect);\n\t}\n\tmoduleFunction(name,...arg){\n\t\tlet m;\n\t\tfor(let n in this.modules){\n\t\t\tm=this.modules[n];\n\t\t\tif(m.enabled&&m[name])m[name](...arg);\n\t\t}\n\t}\n\tsetMedia(media){\n\t\tconst F=this;\n\t\tF.media=media;\n\t\tDomTools.addEvents(media,{\n\t\t\tplaying:()=>F.play(),\n\t\t\t'pause,stalled,seeking,waiting':()=>F.pause(),\n\t\t\tratechange:()=>{\n\t\t\t\tF.rate=F.media.playbackRate;\n\t\t\t\tF.moduleFunction('rate',F.rate);\n\t\t\t},\n\t\t});\n\t\tF.moduleFunction('media',media);\n\t}\n}\n\n\nexport {DanmakuFrame,DanmakuFrameModule}\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Template from './textModuleTemplate.js';\n\nclass TextCanvas2D extends Template{\n\tcanvas;\n\tcontext2d;\n\tget container(){return this.canvas;}\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tthis.canvas=document.createElement('canvas');//the canvas\n\t\tthis.context2d=this.canvas.getContext('2d');//the canvas contex\n\t\tif(!this.context2d){\n\t\t\tconsole.warn('text 2d not supported');\n\t\t\treturn;\n\t\t}\n\t\tthis.canvas.classList.add(`${dText.randomText}_fullfill`);\n\t\tthis.canvas.id=`${dText.randomText}_text2d`;\n\t\tthis.supported=true;\n\t}\n\tdraw(force){\n\t\tlet ctx=this.context2d,\n\t\t\tcW=ctx.canvas.width,\n\t\t\tdT=this.dText.DanmakuText,\n\t\t\ti=dT.length,\n\t\t\tt,\n\t\t\tleft,\n\t\t\tright,\n\t\t\tvW;\n\t\tlet debug=false;\n\t\tctx.globalCompositeOperation='destination-over';\n\t\tthis.clear(force);\n\t\tfor(;i--;){\n\t\t\tif(!(t=dT[i]).drawn)(t.drawn=true);\n\t\t\tleft=t.style.x-t.estimatePadding;\n\t\t\tright=left+t._cache.width;\n\t\t\tif(left>cW || right<0){continue;}//ignore danmakus out of the screen\n\t\t\tif(debug){\n\t\t\t\tctx.save();\n\t\t\t\tctx.fillStyle='rgba(255,255,255,0.3)';\n\t\t\t\tctx.fillRect(left,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t\tif(cW>=t._cache.width){//danmaku which is smaller than canvas width\n\t\t\t\tctx.drawImage(t._bitmap||t._cache, left, t.style.y-t.estimatePadding);\n\t\t\t}else{//only draw the part on screen if the danmau overflow\n\t\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0)\n\t\t\t\tctx.drawImage(t._bitmap||t._cache,\n\t\t\t\t\t(left<0)?-left:0,0,\n\t\t\t\t\t\t\tvW,t._cache.height,\n\t\t\t\t\t(left<0)?0:left,t.style.y-t.estimatePadding,\n\t\t\t\t\t\t\tvW,t._cache.height);\n\t\t\t}\n\t\t}\n\t}\n\tclear(force){\n\t\tconst D=this.dText;\n\t\tif(force||this._evaluateIfFullClearMode()){\n\t\t\tthis.context2d.clearRect(0,0,this.canvas.width,this.canvas.height);\n\t\t\treturn;\n\t\t}\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\n\t\t\tt=D.DanmakuText[i];\n\t\t\tif(t.drawn)\n\t\t\t\tthis.context2d.clearRect(t.style.x-t.estimatePadding,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\n\t\t}\n\t}\n\t_evaluateIfFullClearMode(){\n\t\tif(this.dText.DanmakuText.length>3)return true;\n\t\treturn false;\n\t}\n\tdeleteRelatedTextObject(t){\n\t\tif(t._bitmap){\n\t\t\tt._bitmap.close();\n\t\t\tt._bitmap=null;\n\t\t}\n\t}\n\tresize(){\n\t\tlet D=this.dText,C=this.canvas;\n\t\tC.width=D.width;\n\t\tC.height=D.height;\n\t}\n\tenable(){\n\t\tthis.draw();\n\t\tthis.dText.useImageBitmap=true;\n\t}\n\tdisable(){\n\t\tfor(let tobj of this.dText.DanmakuText){\n\t\t\tthis.deleteRelatedTextObject(tobj);\n\t\t}\n\t\tthis.clear(true);\n\t}\n}\n\nexport default TextCanvas2D;","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Template from './textModuleTemplate.js';\n\nclass TextCss extends Template{\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tthis.supported=dText.text2d.supported;\n\t\tif(!this.supported)return;\n\t\tdText.frame.addStyle([`#${dText.randomText}_textCanvasContainer canvas{will-change:transform;top:0;left:0;position:absolute;}`,\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer.moving canvas{transition:transform 500s linear;}`,\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer{will-change:transform;pointer-events:none;overflow:hidden;}`]);\n\n\t\tthis.container=document.createElement('div');//for text canvas\n\t\tthis.container.classList.add(`${dText.randomText}_fullfill`);\n\t\tthis.container.id=`${dText.randomText}_textCanvasContainer`;\n\t}\n\t_toggle(s){\n\t\tlet D=this.dText,T=D.frame.time;\n\t\tthis.container.classList[s?'add':'remove']('moving');\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\n\t\t\tif((t=D.DanmakuText[i]).danmaku.mode>=2)continue;\n\t\t\tif(s){requestAnimationFrame(()=>this._move(t));}\n\t\t\telse{this._move(t,T);}\n\t\t}\n\t}\n\tclear(){\n\t\tthis.container.innerHTML='';\n\t}\n\tpause(){\n\t\tthis._toggle(false);\n\t}\n\tplay(){\n\t\tthis._toggle(true);\n\t}\n\trate(){\n\t\tthis.resetPos();\n\t}\n\t_move(t,T){\n\t\tif(!t.danmaku)return;\n\t\tif(T===undefined)T=this.dText.frame.time+500000;\n\t\tt._cache.style.transform=`translate(${(((this.dText._calcSideDanmakuPosition(t,T)-t.estimatePadding)*10)|0)/10}px,${t.style.y-t.estimatePadding}px)`;\n\t}\n\tresetPos(){\n\t\tthis.pause();\n\t\tthis.dText.paused||requestAnimationFrame(()=>this.play());\n\t}\n\tresize(){\n\t\tthis.resetPos();\n\t}\n\tremove(t){\n\t\tt._cache.parentNode&&this.container.removeChild(t._cache);\n\t}\n\tenable(){\n\t\tthis.dText.useImageBitmap=false;\n\t\trequestAnimationFrame(()=>{\n\t\t\tthis.dText.DanmakuText.forEach(t=>this.newDanmaku(t));\n\t\t});\n\t}\n\tdisable(){\n\t\tthis.container.innerHTML='';\n\t}\n\tnewDanmaku(t){\n\t\tt._cache.style.transform=`translate(${t.style.x-t.estimatePadding}px,${t.style.y-t.estimatePadding}px)`;\n\t\tthis.container.appendChild(t._cache);\n\t\tt.danmaku.mode<2&&!this.dText.paused&&requestAnimationFrame(()=>this._move(t));\n\t}\n}\n\n\nexport default TextCss;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Mat from '../../lib/Mat/Mat.js'\nimport Template from './textModuleTemplate.js';\nimport {Utils} from '../danmaku-frame.js';\n\nclass TextWebGL extends Template{\n\tget container(){return this.c3d;}\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tlet c3d=this.c3d=document.createElement('canvas');\n\t\tc3d.classList.add(`${dText.randomText}_fullfill`);\n\t\tc3d.id=`${dText.randomText}_text3d`;\n\t\t//init webgl\n\t\tconst gl=this.gl=c3d.getContext('webgl')||c3d.getContext('experimental-webgl');//the canvas3d context\n\t\tif(!gl){\n\t\t\tconsole.warn('text 3d not supported');\n\t\t\treturn;\n\t\t}\n\t\t//shader\n\t\tvar shaders={\n\t\t\tdanmakuFrag:[gl.FRAGMENT_SHADER,`\n\t\t\t\t#pragma optimize(on)\n\t\t\t\tprecision lowp float;\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\n\t\t\t\tuniform sampler2D uSampler;\n\t\t\t\tvoid main(void) {\n\t\t\t\t\tvec4 co=texture2D(uSampler,vDanmakuTexCoord);\n\t\t\t\t\tif(co.a == 0.0)discard;\n\t\t\t\t\tgl_FragColor = co;\n\t\t\t\t}`\n\t\t\t],\n\t\t\tdanmakuVert:[gl.VERTEX_SHADER,`\n\t\t\t\t#pragma optimize(on)\n\t\t\t\tattribute vec2 aVertexPosition;\n\t\t\t\tattribute vec2 aDanmakuTexCoord;\n\t\t\t\tuniform mat4 u2dCoordinate;\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\n\t\t\t\tvoid main(void) {\n\t\t\t\t\tgl_Position = u2dCoordinate * vec4(aVertexPosition,0,1);\n\t\t\t\t\tvDanmakuTexCoord = aDanmakuTexCoord;\n\t\t\t\t}`\n\t\t\t],\n\t\t}\n\t\tfunction shader(name){\n\t\t\tvar s=gl.createShader(shaders[name][0]);\n\t\t\tgl.shaderSource(s,shaders[name][1]);\n\t\t\tgl.compileShader(s);\n\t\t\tif (!gl.getShaderParameter(s,gl.COMPILE_STATUS))\n\t\t\t\tthrow(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(s));\n\t\t\treturn s;\n\t\t}\n\t\tvar fragmentShader = shader(\"danmakuFrag\");\n\t\tvar vertexShader = shader(\"danmakuVert\");\n\t\tvar shaderProgram = this.shaderProgram = gl.createProgram();\n\t\tgl.attachShader(shaderProgram,vertexShader);\n\t\tgl.attachShader(shaderProgram,fragmentShader);\n\t\tgl.linkProgram(shaderProgram);\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\t\tconsole.error(\"Unable to initialize the shader program.\");\n\t\t\treturn;\n\t\t}\n\t\tgl.useProgram(shaderProgram);\n\n\t\t//scene\n\t\tgl.clearColor(0, 0, 0, 0.0);\n\t\tgl.enable(gl.BLEND);\n\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA ,gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n\t\tthis.maxTexSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n\t\tthis.uSampler=gl.getUniformLocation(shaderProgram,\"uSampler\");\n\t\tthis.u2dCoord=gl.getUniformLocation(shaderProgram,\"u2dCoordinate\");\n\t\tthis.aVertexPosition=gl.getAttribLocation(shaderProgram,\"aVertexPosition\");\n\t\tthis.atextureCoord=gl.getAttribLocation(shaderProgram,\"aDanmakuTexCoord\");\n\n\t\tgl.enableVertexAttribArray(this.aVertexPosition);\n\t\tgl.enableVertexAttribArray(this.atextureCoord);\n\n\t\tthis.commonTexCoordBuffer=gl.createBuffer();\n\t\tthis.commonVertCoordBuffer=gl.createBuffer();\n\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.uniform1i(this.uSampler,0);\n\n\t\tthis.supported=true;\n\t}\n\tdraw(force){\n\t\tconst gl=this.gl,l=this.dText.DanmakuText.length;\n\t\tlet cW=this.c3d.width,left,right,vW;\n\t\tfor(let i=0,t;i<l;i++){\n\t\t\tt=this.dText.DanmakuText[i];\n\t\t\tif(!t || !t.glDanmaku)continue;\n\t\t\tleft=t.style.x-t.estimatePadding;\n\t\t\tright=left+t._cache.width,\n\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0);\n\t\t\tif(left>cW || right<0)continue;\n\n\t\t\t//vert\n\t\t\tt.vertCoord[0]=t.vertCoord[4]=(left<0)?0:left;\n\t\t\tt.vertCoord[2]=t.vertCoord[6]=t.vertCoord[0]+vW;\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonVertCoordBuffer);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,t.vertCoord,gl.DYNAMIC_DRAW);\n\t\t\tgl.vertexAttribPointer(this.aVertexPosition,2,gl.FLOAT,false,0,0);\n\n\t\t\t//tex\n\t\t\tcommonTextureCoord[0]=commonTextureCoord[4]=(left<0)?-left/t._cache.width:0;\n\t\t\tcommonTextureCoord[2]=commonTextureCoord[6]=commonTextureCoord[0]+vW/t._cache.width;\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonTexCoordBuffer);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,commonTextureCoord,gl.DYNAMIC_DRAW);\n\t\t\tgl.vertexAttribPointer(this.atextureCoord,2,gl.FLOAT,false,0,0);\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,t.texture);\n\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP,0,4);\n\t\t}\n\t\tgl.flush();\n\t}\n\tclear(){\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\t}\n\tdeleteRelatedTextObject(t){\n\t\tif(t.texture)this.gl.deleteTexture(t.texture);\n\t\tt.texture=null;\n\t\tt.vertCoord=null;\n\t\tdelete t.glDanmaku;\n\t}\n\tresize(w,h){\n\t\tconst gl=this.gl,C=this.c3d;\n\t\tC.width=this.dText.width;\n\t\tC.height=this.dText.height;\n\t\tgl.viewport(0,0,C.width,C.height);\n\t\tgl.uniformMatrix4fv(this.u2dCoord,false,(Mat.Identity(4).translate3d(-1,1,0).scale3d(2/C.width,-2/C.height,0)).array);\n\t}\n\tenable(){\n\t\tthis.dText.DanmakuText.forEach(t=>{\n\t\t\tthis.newDanmaku(t,false);\n\t\t});\n\t\tthis.dText.useImageBitmap=false;\n\t\trequestAnimationFrame(()=>this.draw());\n\t}\n\tdisable(){\n\t\t//clean related objects\n\t\tfor(let tobj of this.dText.DanmakuText){\n\t\t\tthis.deleteRelatedTextObject(tobj);\n\t\t}\n\t\tthis.clear();\n\t}\n\tnewDanmaku(t,async=true){\n\t\tconst gl=this.gl;\n\t\tt.glDanmaku=false;\n\t\tif(t._cache.height>this.maxTexSize || t._cache.width>this.maxTexSize){//ignore too large danmaku image\n\t\t\tconsole.warn('Ignore a danmaku width too large size',t.danmaku);\n\t\t\treturn;\n\t\t}\n\t\tlet tex;\n\t\tif(!(tex=t.texture)){\n\t\t\ttex=t.texture=gl.createTexture();\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);\n\t\t}\n\t\tif(async){\n\t\t\tUtils.requestIdleCallback(()=>{\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\n\t\t\t\tt.glDanmaku=true;\n\t\t\t});\n\t\t}else{\n\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\n\t\t\tt.glDanmaku=true;\n\t\t}\n\n\t\t//vert\n\t\tlet y=t.style.y-t.estimatePadding;\n\t\tt.vertCoord=new Float32Array([\n\t\t\t0,y,\n\t\t\t0,y,\n\t\t\t0,y+t._cache.height,\n\t\t\t0,y+t._cache.height,\n\t\t]);\n\t}\n}\n\n\n\nconst commonTextureCoord=new Float32Array([\n\t0.0,  0.0,//↖\n\t1.0,  0.0,//↗\n\t0.0,  1.0,//↙\n\t1.0,  1.0,//↘\n]);\n\n\nexport default TextWebGL;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Template from './textModuleTemplate.js';\n\nclass TextOff extends Template{\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tthis.supported=true;\n        this.container=document.createElement('div');\n        this.container.style.display='none';\n\t}\n}\n\nexport default TextOff;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n\ndanmaku-frame mod\n*/\n'use strict';\nimport {DomTools,Utils} from '../danmaku-frame.js';\nimport TextCanvas2D from './TextCanvas2D.js';\nimport TextWebGL from './TextWebGL.js';\nimport TextCss from './TextCss.js';\nimport Textoff from './Textoff.js';\nimport {DanmakuFrameModule} from '../danmaku-frame.js'\n\n/*\ndanmaku obj struct\n{\n\t_:'text',\n\ttime:(number)msec time,\n\ttext:(string),\n\tstyle:(object)to be combined whit default style,\n\tmode:(number)\n}\n\ndanmaku mode\n\t0:right\n\t1:left\n\t2:bottom\n\t3:top\n*/\nconst defProp=Object.defineProperty;\nlet useImageBitmap=false;\n\nclass TextDanmaku extends DanmakuFrameModule{\n\tget paused(){return !this.frame.working;}\n\tlist=[];//danmaku object array\n\tindexMark=0;//to record the index of last danmaku loaded to screen in the DanmakuText\n\trandomText=`danmaku_text_${(Math.random()*999999)|0}`;\n\tlastRendererMode=0;\n\t//time record\n\tcacheCleanTime=0;\n\tdanmakuMoveTime=0;\n\tdanmakuCheckTime=0;\n\tdanmakuCheckSwitch=true;\n\tGraphCache=[];//text graph cache, for reusable TextGraph obj\n\tDanmakuText=[];//TextGraph on screen\n\tdefaultStyle={//these styles can be overwrote by the 'font' property of danmaku object\n\t\tfontStyle: null,\n\t\tfontWeight: 300,\n\t\tfontVariant: null,\n\t\tcolor: \"#fff\",\n\t\tfontSize: 24,\n\t\tfontFamily: \"Arial\",\n\t\tstrokeWidth: 1,//outline width\n\t\tstrokeColor: \"#888\",\n\t\tshadowBlur: 5,\n\t\ttextAlign:'start',//left right center start end\n\t\tshadowColor: \"#000\",\n\t\tshadowOffsetX:0,\n\t\tshadowOffsetY:0,\n\t\tfill:true,//if the text should be filled\n\t};\n\toptions={\n\t\tallowLines:false,//allow multi-line danmaku\n\t\tscreenLimit:0,//the most area% of danmaku on the screen\n\t\tclearWhenTimeReset:true,//clear danmaku on screen when the time is reset\n\t\tspeed:6.5,\n\t\tdanmakuSizeScale:1,//scale for the default size\n\t\tautoShiftRenderingMode:true,//auto shift to a low load mode\n\t\trenderingMode:1,//default to css mode\n\t}\n\tconstructor(frame,arg={}){\n\t\tsuper(frame);\n\t\tif(arg.defaultStyle)\n\t\t\tObject.assign(this.defaultStyle,arg.defaultStyle);\n\t\tif(arg.options)\n\t\t\tUtils.deepAssign(this.options,arg.options);\n\t\t\n\t\tframe.addStyle(`.${this.randomText}_fullfill{top:0;left:0;width:100%;height:100%;position:absolute;}`);\n\n\t\tdefProp(this,'rendererMode',{configurable:true});\n\t\tdefProp(this,'activeRendererMode',{configurable:true,value:null});\n\t\tconst con=this.container=document.createElement('div');\n\t\tcon.id=`${this.randomText}_textDanmakuContainer`;\n\t\tcon.classList.add(`${this.randomText}_fullfill`);\n\n\t\t//init modes\n\t\tthis.modes={\n\t\t\t0:this.textoff=new Textoff(this),//off\n\t\t\t2:this.text2d=new TextCanvas2D(this),\n\t\t\t1:this.textCss=new TextCss(this),\n\t\t\t3:this.text3d=new TextWebGL(this),\n\t\t};\n\n\t\t\n\t\tthis.rendering=new RenderingDanmakuManager(this);\n\n\t\tDomTools.addEvents(document,{\n\t\t\tvisibilitychange:e=>{\n\t\t\t\t//?\n\t\t\t}\n\t\t});\n\t\tthis._checkNewDanmaku=this._checkNewDanmaku.bind(this);\n\t\tthis._cleanCache=this._cleanCache.bind(this);\n\t\tsetInterval(this._cleanCache,5000);//set an interval for cache cleaning\n\t\t\n\t\tthis.setRendererMode(this.lastRendererMode=(this.options.renderingMode||1));\n\t}\n\tsetRendererMode(n){\n\t\tif(this.rendererMode===n || !(n in this.modes) || !this.modes[n].supported)return false;\n\t\tif(this.activeRendererMode){\n\t\t\tthis.lastRendererMode=this.rendererMode;\n\t\t\tthis.activeRendererMode.disable();\n\t\t\tthis.container.removeChild(this.activeRendererMode.container);\n\t\t}\n\t\tdefProp(this,'activeRendererMode',{value:this.modes[n]});\n\t\tdefProp(this,'rendererMode',{value:n});\n\t\tthis.container.appendChild(this.activeRendererMode.container);\n\t\tthis.activeRendererMode.resize();\n\t\tthis.activeRendererMode.enable();\n\t\tthis.frame.core.debug('rendererMode:',this.rendererMode);\n\t\treturn true;\n\t}\n\tmedia(media){\n\t\tDomTools.addEvents(media,{\n\t\t\tseeked:()=>this.time(),\n\t\t\tseeking:()=>this.pause(),\n\t\t});\n\t}\n\tplay(){\n\t\tthis.recheckIndexMark();\n\t\tthis.activeRendererMode.play();\n\t}\n\tpause(){\n\t\tthis.activeRendererMode.pause();\n\t}\n\tload(d,autoAddToScreen){\n\t\tif(d?._!=='text'){\n\t\t\treturn false;\n\t\t}\n\t\tif(typeof d.text !== 'string'){\n\t\t\tconsole.error('wrong danmaku object:',d);\n\t\t\treturn false;\n\t\t}\n\t\tlet ind,arr=this.list;\n\t\tind=dichotomy(arr,d.time,0,arr.length-1,false);//find a place for this obj in the list in time order\n\t\tarr.splice(ind,0,d);//insert the obj\n\t\tif(ind<this.indexMark)this.indexMark++;\n\t\t//round d.style.fontSize to prevent Iifinity loop in tunnel\n\t\tif(typeof d.style!=='object')d.style={};\n\t\td.style.fontSize=Math.round((d.style.fontSize||this.defaultStyle.fontSize)*this.options.danmakuSizeScale);\n\t\tif(isNaN(d.style.fontSize)|| d.style.fontSize===Infinity || d.style.fontSize===0)d.style.fontSize=this.defaultStyle.fontSize*this.options.danmakuSizeScale;\n\t\tif(typeof d.mode !== 'number')d.mode=0;\n\t\tif(autoAddToScreen&&(ind<this.indexMark))this._addNewDanmaku(d);\n\t\treturn d;\n\t}\n\tloadList(danmakuArray){\n\t\tdanmakuArray.forEach(d=>this.load(d));\n\t}\n\tunload(d){\n\t\tif(!d || d._!=='text')return false;\n\t\tconst i=this.list.indexOf(d);\n\t\tif(i<0)return false;\n\t\tthis.list.splice(i,1);\n\t\tif(i<this.indexMark)this.indexMark--;\n\t\treturn true;\n\t}\n\t_checkNewDanmaku(force){\n\t\tif(this.paused&&!force)return;\n\t\tlet d,time=this.frame.time;\n\t\tif(this.danmakuCheckTime===time || !this.danmakuCheckSwitch)return;\n\t\tif(this.list.length)\n\t\tfor(;(this.indexMark<this.list.length)&&(d=this.list[this.indexMark])&&(d.time<=time);this.indexMark++){//add new danmaku\n\t\t\tif(this.options.screenLimit>0 && this.rendering.onScreenArea>=this.options.screenLimit/100*this.frame.area){continue;}//continue if the number of danmaku on screen has up to limit or doc is not visible\n\t\t\tthis._addNewDanmaku(d);\n\t\t}\n\t\tthis.danmakuCheckTime=time;\n\t}\n\t_addNewDanmaku(d){\n\t\tconst cHeight=this.height,cWidth=this.width;\n\t\tlet t=this.GraphCache.length?this.GraphCache.shift():new TextGraph();\n\t\tif(!this.options.allowLines){\n\t\t\td=Object.create(d);\n\t\t\td.text=d.text.replace(/\\n/g,' ');\n\t\t}\n\t\tlet font=Object.create(this.defaultStyle);\n\t\tt.init(d,Object.assign(font,d.style));\n\t\tt.prepare(false);\n\t\t//find tunnel number\n\t\tconst tnum=this.rendering.tunnelManager.getTunnel(t,cHeight);\n\t\t//calc margin\n\t\tlet margin=(tnum<0?0:tnum)%cHeight;\n\t\tswitch(d.mode){\n\t\t\tcase 0:case 1:case 3:{\n\t\t\t\tt.style.y=margin;break;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tt.style.y=cHeight-margin-t.style.height-1;\n\t\t\t}\n\t\t}\n\t\tswitch(d.mode){\n\t\t\tcase 0:{t.style.x=cWidth;break;}\n\t\t\tcase 1:{t.style.x=-t.style.width;break;}\n\t\t\tcase 2:case 3:{t.style.x=(cWidth-t.style.width)/2;}\n\t\t}\n\t\tthis.rendering.add(t);\n\t}\n\t_calcSideDanmakuPosition(t,T=this.frame.time){\n\t\tlet R=!t.danmaku.mode,style=t.style;//R:from right\n\t\treturn (R?this.frame.width:(-style.width))\n\t\t\t\t+(R?-1:1)*this.frame.rate*(style.width+1024)*(T-t.time)*this.options.speed/60000;\n\t}\n\t_calcDanmakusPosition(force){\n\t\tlet T=this.frame.time;\n\t\tif(this.paused&&!force)return;\n\t\tconst cWidth=this.width,rate=this.frame.rate;\n\t\tlet R,i,t,style,X;\n\t\tthis.danmakuMoveTime=T;\n\t\tfor(i=this.DanmakuText.length;i--;){\n\t\t\tt=this.DanmakuText[i];\n\t\t\tif(t.time>T){\n\t\t\t\tthis.removeText(t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tstyle=t.style;\n\n\t\t\tswitch(t.danmaku.mode){\n\t\t\t\tcase 0:case 1:{\n\t\t\t\t\tR=!t.danmaku.mode;\n\t\t\t\t\tstyle.x=X=this._calcSideDanmakuPosition(t,T);\n\t\t\t\t\tif(t.tunnelNumber>=0 && ((R&&(X+style.width)+10<cWidth) || (!R&&X>10)) ){\n\t\t\t\t\t\tthis.rendering.tunnelManager.removeMark(t);\n\t\t\t\t\t}else if( (R&&(X<-style.width-20)) || (!R&&(X>cWidth+style.width+20)) ){//go out the canvas\n\t\t\t\t\t\tthis.removeText(t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 2:case 3:{\n\t\t\t\t\tif((T-t.time)>this.options.speed*1000/rate){\n\t\t\t\t\t\tthis.removeText(t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t_cleanCache(force){//clean text object cache\n\t\tforce&&this.frame.core.debug('force cleaning graph cache');\n\t\tconst now=Date.now();\n\t\tif(this.GraphCache.length>30 || force){//save 30 cached danmaku\n\t\t\tfor(let ti = 0;ti<this.GraphCache.length;ti++){\n\t\t\t\tif(force || (now-this.GraphCache[ti].removeTime) > 10000){//delete cache which has not been used for 10s\n\t\t\t\t\tthis.GraphCache[ti].destructor();\n\t\t\t\t\tthis.GraphCache.splice(ti,1);\n\t\t\t\t}else{break;}\n\t\t\t}\n\t\t}\n\t}\n\tdraw(force){\n\t\tif((!force&&this.paused)||!this.enabled)return;\n\t\tthis._calcDanmakusPosition(force);\n\t\tthis.activeRendererMode.draw(force);\n\t\trequestAnimationFrame(()=>{this._checkNewDanmaku(force)});\n\t}\n\tremoveText(t){//remove the danmaku from screen\n\t\tthis.rendering.remove(t);\n\t}\n\tresize(){\n\t\tif(this.activeRendererMode)this.activeRendererMode.resize();\n\t\tthis.draw(true);\n\t}\n\t_clearScreen(forceFull){\n\t\tthis.activeRendererMode&&this.activeRendererMode.clear(forceFull);\n\t}\n\tclear(){//clear danmaku on the screen\n\t\tthis.rendering.clear();\n\t\tthis._clearScreen(true);\n\t}\n\trecheckIndexMark(t=this.frame.time){\n\t\tthis.indexMark=dichotomy(this.list,t,0,this.list.length-1,true);\n\t}\n\trate(r){\n\t\tif(this.activeRendererMode)this.activeRendererMode.rate(r);\n\t}\n\ttime(t=this.frame.time){//reset time,you should invoke it when the media has seeked to another time\n\t\tthis.recheckIndexMark(t);\n\t\tif(this.options.clearWhenTimeReset){this.clear();}\n\t\telse{this.resetTimeOfDanmakuOnScreen();}\n\t}\n\tresetTimeOfDanmakuOnScreen(cTime){\n\t\t//cause the position of the danmaku is based on time\n\t\t//and if you don't want these danmaku on the screen to disappear after seeking,their time should be reset\n\t\tif(cTime===undefined)cTime=this.frame.time;\n\t\tthis.DanmakuText.forEach(t=>{\n\t\t\tif(!t.danmaku)return;\n\t\t\tt.time=cTime-(this.danmakuMoveTime-t.time);\n\t\t});\n\t}\n\tdanmakuAt(x,y){//return a list of danmaku which covers this position\n\t\tconst list=[];\n\t\tif(!this.enabled)return list;\n\t\tthis.DanmakuText.forEach(t=>{\n\t\t\tif(!t.danmaku)return;\n\t\t\tif(t.style.x<=x && t.style.x+t.style.width>=x && t.style.y<=y && t.style.y+t.style.height>=y)\n\t\t\t\tlist.push(t.danmaku);\n\t\t});\n\t\treturn list;\n\t}\n\tenable(){//enable the plugin\n\t\tthis.setRendererMode(this.lastRendererMode);\n\t\tthis.frame.container.appendChild(this.container);\n\t\tif(this.frame.working)this.play();\n\t}\n\tdisable(){//disable the plugin\n\t\tthis.frame.container.removeChild(this.container);\n\t\tthis.pause();\n\t\tthis.clear();\n\t\tthis.setRendererMode(0);\n\t}\n\tset useImageBitmap(v){\n\t\tuseImageBitmap=(typeof createImageBitmap ==='function')?v:false;\n\t}\n\tget useImageBitmap(){return useImageBitmap;}\n}\n\n\nclass TextGraph{//code copied from CanvasObjLibrary\n\t_fontString='';\n\t_renderList;\n\t_cache;\n\t_bitmap;\n\tfont={};\n\ttime;\n\tstyle={};\n\tdrawn=false;//bool: \n\tdanmaku;\n\tremoveTime;//number: remove time of the danmaku\n\ttunnelNumber;//number: tunnel number in the tunner manager\n\ttunnelHeight;//number: tunnel height\n\testimatePadding;//number: padding of the canvas\n\tget text(){return this.danmaku.text;}\n\tconstructor(danmakuObj,font){\n\t\tthis._renderToCache=this._renderToCache.bind(this);\n\t\tdanmakuObj&&this.init(danmakuObj,font);\n\t}\n\tinit(d,font){\n\t\tthis.danmaku=d;\n\t\tthis.drawn=false;\n\t\tthis.time=d.time;\n\t\tthis.font=font;\n\t\tif(!this.font.lineHeight)this.font.lineHeight=(this.font.fontSize+2)||1;\n\t\tif(d.style.color){\n\t\t\tif(this.font.color && this.font.color[0]!=='#'){\n\t\t\t\tthis.font.color='#'+d.style.color;\n\t\t\t}\n\t\t}\n\t\tif(d.mode>1)this.font.textAlign='center';\n\t}\n\tprepare(async=false){//prepare text details\n\t\tif(!this._cache){\n\t\t\tthis._cache=document.createElement(\"canvas\");\n\t\t}\n\t\tlet ta=[];\n\t\t(this.font.fontStyle)&&ta.push(this.font.fontStyle);\n\t\t(this.font.fontVariant)&&ta.push(this.font.fontVariant);\n\t\t(this.font.fontWeight)&&ta.push(this.font.fontWeight);\n\t\tta.push(`${this.font.fontSize}px`);\n\t\t(this.font.fontFamily)&&ta.push(this.font.fontFamily);\n\t\tthis._fontString = ta.join(' ');\n\n\t\tconst canvas = this._cache,\n\t\t\tct = (canvas.ctx2d||(canvas.ctx2d=canvas.getContext(\"2d\")));\n\t\tct.font = this._fontString;\n\t\tthis._renderList = this.text.split(/\\n/g);\n\t\tthis.estimatePadding=Math.max(\n\t\t\tthis.font.shadowBlur+5+Math.max(Math.abs(this.font.shadowOffsetY),Math.abs(this.font.shadowOffsetX)),\n\t\t\tthis.font.strokeWidth+3\n\t\t);\n\t\tlet w = 0,tw,lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize;\n\t\tfor (let i = this._renderList.length; i -- ;) {\n\t\t\ttw = ct.measureText(this._renderList[i]).width;\n\t\t\t(tw>w)&&(w=tw);//max\n\t\t}\n\t\tcanvas.width = (this.style.width = w) + this.estimatePadding*2;\n\t\tcanvas.height = (this.style.height = this._renderList.length * lh)+ ((lh<this.font.fontSize)?this.font.fontSize*2:0) + this.estimatePadding*2;\n\n\t\tct.translate(this.estimatePadding, this.estimatePadding);\n\t\tif(async){\n\t\t\tUtils.requestIdleCallback(this._renderToCache);\n\t\t}else{\n\t\t\tthis._renderToCache();\n\t\t}\n\t}\n\t_renderToCache(){\n\t\tif(!this.danmaku)return;\n\t\tthis.render(this._cache.ctx2d);\n\t\tif(useImageBitmap){//use ImageBitmap\n\t\t\tif(this._bitmap){\n\t\t\t\tthis._bitmap.close();\n\t\t\t\tthis._bitmap=null;\n\t\t\t}\n\t\t\tcreateImageBitmap(this._cache).then(bitmap=>{\n\t\t\t\tthis._bitmap=bitmap;\n\t\t\t});\n\t\t}\n\t}\n\trender(ct){//render text\n\t\tif(!this._renderList)return;\n\t\tct.save();\n\t\tif(this.danmaku.highlight){\n\t\t\tct.fillStyle='rgba(255,255,255,0.3)';\n\t\t\tct.beginPath();\n\t\t\tct.rect(0,0,this.style.width,this.style.height);\n\t\t\tct.fill();\n\t\t}\n\t\tct.font=this._fontString;//set font\n\t\tct.textBaseline = 'middle';\n\t\tct.lineWidth = this.font.strokeWidth;\n\t\tct.fillStyle = this.font.color;\n\t\tct.strokeStyle = this.font.strokeColor;\n\t\tct.shadowBlur = this.font.shadowBlur;\n\t\tct.shadowColor= this.font.shadowColor;\n\t\tct.shadowOffsetX = this.font.shadowOffsetX;\n\t\tct.shadowOffsetY = this.font.shadowOffsetY;\n\t\tct.textAlign = this.font.textAlign;\n\t\tlet lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize,\n\t\t\tx;\n\t\tswitch(this.font.textAlign){\n\t\t\tcase 'left':case 'start':{\n\t\t\t\tx=0;break;\n\t\t\t}\n\t\t\tcase 'center':{\n\t\t\t\tx=this.style.width/2;break;\n\t\t\t}\n\t\t\tcase 'right':case 'end':{\n\t\t\t\tx=this.style.width;\n\t\t\t}\n\t\t}\n\t\tfor (let i = this._renderList.length;i--;) {\n\t\t\tthis.font.strokeWidth&&ct.strokeText(this._renderList[i],x,lh*(i+0.5));\n\t\t\tthis.font.fill&&ct.fillText(this._renderList[i],x, lh*(i+0.5));\n\t\t}\n\t\tct.restore();\n\t\tthis._renderList=undefined;\n\t}\n\tdestructor(){\n\t\tthis._fontString=undefined;\n\t\tthis._renderList=undefined;\n\t\tthis.danmaku=undefined;\n\t\tthis.style=undefined;\n\t\tthis.font=undefined;\n\t\tif(this._bitmap){\n\t\t\tthis._bitmap.close();\n\t\t\tthis._bitmap=null;\n\t\t}\n\t}\n}\n\nconst tunnels=['right','left','bottom','top'];\nclass TunnelManager{\n\tconstructor(){\n\t\tthis.reset();\n\t}\n\treset(){\n\t\tthis.right={};\n\t\tthis.left={};\n\t\tthis.bottom={};\n\t\tthis.top={};\n\t}\n\tgetTunnel(tobj,cHeight){//get the tunnel index that can contain the danmaku of the sizes\n\t\tlet tunnel=this.tunnel(tobj.danmaku.mode),\n\t\t\tsize=tobj.style.height,\n\t\t\tti=0,\n\t\t\ttnum=-1;\n\t\tif(typeof size !=='number' || size<=0){\n\t\t\tconsole.error('Incorrect size:'+size);\n\t\t\tsize=24;\n\t\t}\n\t\tif(size>cHeight)return 0;\n\n\t\twhile(tnum<0){\n\t\t\tfor(let t=ti+size-1;ti<=t;){\n\t\t\t\tif(tunnel[ti]){//used\n\t\t\t\t\tti+=tunnel[ti].tunnelHeight;\n\t\t\t\t\tbreak;\n\t\t\t\t}else if((ti!==0)&&(ti%(cHeight-1))===0){//new page\n\t\t\t\t\tti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}else if(ti===t){//get\n\t\t\t\t\ttnum=ti-size+1;\n\t\t\t\t\tbreak;\n\t\t\t\t}else{\n\t\t\t\t\tti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttobj.tunnelNumber=tnum;\n\t\ttobj.tunnelHeight=(((tobj.style.y+size)>cHeight)?1:size);\n\t\tthis.addMark(tobj);\n\t\treturn tnum;\n\t}\n\taddMark(tobj){\n\t\tlet t=this.tunnel(tobj.danmaku.mode);\n\t\tif(!t[tobj.tunnelNumber])t[tobj.tunnelNumber]=tobj;\n\t}\n\tremoveMark(tobj){\n\t\tlet t,tun=tobj.tunnelNumber;\n\t\tif(tun>=0&&(t=this.tunnel(tobj.danmaku.mode))[tun]===tobj){\n\t\t\tdelete t[tun];\n\t\t\ttobj.tunnelNumber=-1;\n\t\t}\n\t}\n\ttunnel(id){\n\t\treturn this[tunnels[id]];\n\t}\n}\n\n\nclass RenderingDanmakuManager{\n\ttotalArea=0;\n\tonScreenArea=0;\n\tlimitArea=Infinity;//limit danmaku area on the screen(auto change)\n\ttunnelManager=new TunnelManager();\n\tconstructor(dText){//dText:TextDanmaku\n\t\tthis.dText=dText;\n\t\tif(dText.text2d.supported)this.timer=setInterval(()=>this.rendererModeCheck(),1500);\n\t}\n\tadd(t){\n\t\tthis.dText.DanmakuText.push(t);\n\t\tthis.totalArea+=t._cache.width*t._cache.height;//cumulate danmaku area\n\t\tthis.onScreenArea+=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\n\t\tthis.dText.activeRendererMode.newDanmaku(t);\n\t}\n\tremove(t){\n\t\tlet ind=this.dText.DanmakuText.indexOf(t);\n\t\tif(ind>=0){\n\t\t\tthis.dText.DanmakuText.splice(ind,1);\n\t\t\tthis.totalArea-=t._cache.width*t._cache.height;\n\t\t\tthis.onScreenArea-=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\n\t\t}\n\t\tthis.tunnelManager.removeMark(t);\n\t\tthis.dText.activeRendererMode.remove(t);\n\t\tthis.dText.activeRendererMode.deleteRelatedTextObject(t);\n\t\tt.removeTime=Date.now();\n\t\tt.danmaku=null;\n\t\tthis.dText.GraphCache.push(t);\n\t}\n\tclear(){\n\t\tfor(let i=0,T;i<this.dText.DanmakuText.length;i++){\n\t\t\tT=this.dText.DanmakuText[i];\n\t\t\tthis.remove(T);\n\t\t}\n\t\tthis.tunnelManager.reset();\n\t}\n\trendererModeCheck(){//auto shift rendering mode\n\t\tlet D=this.dText;\n\t\tif(!this.dText.options.autoShiftRenderingMode || D.paused)return;\n\t\tif(D.frame.fps<(D.frame.fpsLimit||60)*0.9){//when frame rate low\n\t\t\tif(this.limitArea>this.totalArea)this.limitArea=this.totalArea;//reduce area limit\n\t\t}else if(this.limitArea<this.totalArea){//increase area limit\n\t\t\tthis.limitArea=this.totalArea;\n\t\t}\n\t\tif(D.rendererMode===1 && this.totalArea>this.limitArea){//switch to canvas mode when fps low\n\t\t\tD.text2d.supported&&D.setRendererMode(2);\n\t\t}else if(D.rendererMode===2&& this.totalArea<this.limitArea*0.5){//recover to css mode when animation is fluent enough\n\t\t\tD.textCss.supported&&D.setRendererMode(1);\n\t\t}\n\t}\n}\n\nfunction dichotomy(arr,t,start,end,position=false){\n\tif(arr.length===0)return 0;\n\tlet m=start/* ,s=start,e=end */;\n\twhile(start <= end){//dichotomy\n\t\tm=(start+end)>>1;\n\t\tif(t<=arr[m].time)end=m-1;\n\t\telse{start=m+1;}\n\t}\n\tif(position){//find to top\n\t\twhile(start>0 && (arr[start-1].time===t))\n\t\t\tstart--;\n\t}else{//find to end\n\t\twhile(start<=end && (arr[start].time===t))\n\t\t\tstart++;\n\t}\n\treturn start;\n}\n\n\nexport default function init(DanmakuFrame){\n\tDanmakuFrame.addModule('TextDanmaku',TextDanmaku);\n};;","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nclass textModuleTemplate{\n\tsupported=false;\n\tconstructor(dText){\n\t\tthis.dText=dText;\n\t}\n\tdraw(){}//draw call from danmaku-frame on every animation frame\n\trate(){}//playback rate\n\tpause(){}//the media is paused\n\tplay(){}//the media is starting\n\tclear(){}//clear all danmaku on screen\n\tresize(){}//the container is resized\n\tremove(){}//remove a danmaku freom the screen\n\tenable(){}//this module is enabled\n\tdisable(){}//this module is disabled\n\tnewDanmaku(){}//add danmaku to the screen\n\tdeleteRelatedTextObject(){}\n}\n\nexport default textModuleTemplate;\n","module.exports = require(\"core-js-pure/stable/array/is-array\");","module.exports = require(\"core-js-pure/stable/date/now\");","module.exports = require(\"core-js-pure/stable/instance/bind\");","module.exports = require(\"core-js-pure/stable/instance/copy-within\");","module.exports = require(\"core-js-pure/stable/instance/fill\");","module.exports = require(\"core-js-pure/stable/instance/for-each\");","module.exports = require(\"core-js-pure/stable/instance/index-of\");","module.exports = require(\"core-js-pure/stable/instance/repeat\");","module.exports = require(\"core-js-pure/stable/instance/slice\");","module.exports = require(\"core-js-pure/stable/instance/sort\");","module.exports = require(\"core-js-pure/stable/instance/splice\");","module.exports = require(\"core-js-pure/stable/instance/starts-with\");","module.exports = require(\"core-js-pure/stable/instance/trim\");","module.exports = require(\"core-js-pure/stable/object/assign\");","module.exports = require(\"core-js-pure/stable/object/create\");","module.exports = require(\"core-js-pure/stable/object/define-property\");","module.exports = require(\"core-js-pure/stable/object/entries\");","module.exports = require(\"core-js-pure/stable/object/get-own-property-descriptor\");","module.exports = require(\"core-js-pure/stable/promise\");","module.exports = require(\"core-js-pure/stable/set-immediate\");","module.exports = require(\"core-js-pure/stable/set-interval\");","module.exports = require(\"core-js-pure/stable/set-timeout\");","module.exports = require(\"core-js-pure/features/object/define-property\");","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","require('../../modules/es.array.is-array');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Array.isArray;\n","require('../../../modules/es.array.copy-within');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').copyWithin;\n","require('../../../modules/es.array.fill');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').fill;\n","require('../../../modules/es.array.for-each');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').forEach;\n","require('../../../modules/es.array.index-of');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').indexOf;\n","require('../../../modules/es.array.slice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').slice;\n","require('../../../modules/es.array.sort');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').sort;\n","require('../../../modules/es.array.splice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').splice;\n","require('../../modules/es.date.now');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Date.now;\n","require('../../../modules/es.function.bind');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Function').bind;\n","var bind = require('../function/virtual/bind');\n\nvar FunctionPrototype = Function.prototype;\n\nmodule.exports = function (it) {\n  var own = it.bind;\n  return it === FunctionPrototype || (it instanceof Function && own === FunctionPrototype.bind) ? bind : own;\n};\n","var copyWithin = require('../array/virtual/copy-within');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.copyWithin;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.copyWithin) ? copyWithin : own;\n};\n","var fill = require('../array/virtual/fill');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.fill;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.fill) ? fill : own;\n};\n","var indexOf = require('../array/virtual/index-of');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.indexOf;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.indexOf) ? indexOf : own;\n};\n","var repeat = require('../string/virtual/repeat');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.repeat;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.repeat) ? repeat : own;\n};\n","var slice = require('../array/virtual/slice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.slice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.slice) ? slice : own;\n};\n","var sort = require('../array/virtual/sort');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.sort;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.sort) ? sort : own;\n};\n","var splice = require('../array/virtual/splice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.splice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.splice) ? splice : own;\n};\n","var startsWith = require('../string/virtual/starts-with');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.startsWith;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.startsWith) ? startsWith : own;\n};\n","var trim = require('../string/virtual/trim');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.trim;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.trim) ? trim : own;\n};\n","require('../../modules/es.object.assign');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.assign;\n","require('../../modules/es.object.create');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nmodule.exports = function create(P, D) {\n  return Object.create(P, D);\n};\n","require('../../modules/es.object.define-property');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar defineProperty = module.exports = function defineProperty(it, key, desc) {\n  return Object.defineProperty(it, key, desc);\n};\n\nif (Object.defineProperty.sham) defineProperty.sham = true;\n","require('../../modules/es.object.entries');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.entries;\n","require('../../modules/es.object.get-own-property-descriptor');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {\n  return Object.getOwnPropertyDescriptor(it, key);\n};\n\nif (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;\n","require('../../modules/es.object.to-string');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\nrequire('../../modules/es.promise');\nrequire('../../modules/es.promise.all-settled');\nrequire('../../modules/es.promise.finally');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Promise;\n","require('../../../modules/es.string.repeat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').repeat;\n","require('../../../modules/es.string.starts-with');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').startsWith;\n","require('../../../modules/es.string.trim');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').trim;\n","var parent = require('../../es/object/define-property');\n\nmodule.exports = parent;\n","module.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name) {\n  if (!(it instanceof Constructor)) {\n    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\nvar min = Math.min;\n\n// `Array.prototype.copyWithin` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.fill` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else if (IS_EVERY) return false;  // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6)\n};\n","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\n\nvar defineProperty = Object.defineProperty;\nvar cache = {};\n\nvar thrower = function (it) { throw it; };\n\nmodule.exports = function (METHOD_NAME, options) {\n  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n  if (!options) options = {};\n  var method = [][METHOD_NAME];\n  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n  var argument0 = has(options, 0) ? options[0] : thrower;\n  var argument1 = has(options, 1) ? options[1] : undefined;\n\n  return cache[METHOD_NAME] = !!method && !fails(function () {\n    if (ACCESSORS && !DESCRIPTORS) return true;\n    var O = { length: -1 };\n\n    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n    else O[1] = 1;\n\n    method.call(O, argument0, argument1);\n  });\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","var anObject = require('../internals/an-object');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (error) {\n    var returnMethod = iterator['return'];\n    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));\n    throw error;\n  }\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n  }\n  Iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n","var fails = require('../internals/fails');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !fails(function () {\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","var userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n","var path = require('../internals/path');\n\nmodule.exports = function (CONSTRUCTOR) {\n  return path[CONSTRUCTOR + 'Prototype'];\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","'use strict';\nvar global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar isForced = require('../internals/is-forced');\nvar path = require('../internals/path');\nvar bind = require('../internals/function-bind-context');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\n\nvar wrapConstructor = function (NativeConstructor) {\n  var Wrapper = function (a, b, c) {\n    if (this instanceof NativeConstructor) {\n      switch (arguments.length) {\n        case 0: return new NativeConstructor();\n        case 1: return new NativeConstructor(a);\n        case 2: return new NativeConstructor(a, b);\n      } return new NativeConstructor(a, b, c);\n    } return NativeConstructor.apply(this, arguments);\n  };\n  Wrapper.prototype = NativeConstructor.prototype;\n  return Wrapper;\n};\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var PROTO = options.proto;\n\n  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;\n\n  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});\n  var targetPrototype = target.prototype;\n\n  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n\n  for (key in source) {\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contains in native\n    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);\n\n    targetProperty = target[key];\n\n    if (USE_NATIVE) if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(nativeSource, key);\n      nativeProperty = descriptor && descriptor.value;\n    } else nativeProperty = nativeSource[key];\n\n    // export native or implementation\n    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];\n\n    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;\n\n    // bind timers to global for call from export context\n    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global);\n    // wrap global constructors for prevent changs in this version\n    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);\n    // make static versions for prototype methods\n    else if (PROTO && typeof sourceProperty == 'function') resultProperty = bind(Function.call, sourceProperty);\n    // default case\n    else resultProperty = sourceProperty;\n\n    // add a flag to not completely full polyfills\n    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(resultProperty, 'sham', true);\n    }\n\n    target[key] = resultProperty;\n\n    if (PROTO) {\n      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n      if (!has(path, VIRTUAL_PROTOTYPE)) {\n        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});\n      }\n      // export virtual prototype methods\n      path[VIRTUAL_PROTOTYPE][key] = sourceProperty;\n      // export real prototype methods\n      if (options.real && targetPrototype && !targetPrototype[key]) {\n        createNonEnumerableProperty(targetPrototype, key, sourceProperty);\n      }\n    }\n  }\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\nvar aFunction = require('../internals/a-function');\nvar isObject = require('../internals/is-object');\n\nvar slice = [].slice;\nvar factories = {};\n\nvar construct = function (C, argsLength, args) {\n  if (!(argsLength in factories)) {\n    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');\n  } return factories[argsLength](C, args);\n};\n\n// `Function.prototype.bind` method implementation\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = slice.call(arguments, 1);\n  var boundFunction = function bound(/* args... */) {\n    var args = partArgs.concat(slice.call(arguments));\n    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);\n  };\n  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;\n  return boundFunction;\n};\n","var path = require('../internals/path');\nvar global = require('../internals/global');\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","var classof = require('../internals/classof');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n","var hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = {};\n","var global = require('../internals/global');\n\nmodule.exports = function (a, b) {\n  var console = global.console;\n  if (console && console.error) {\n    arguments.length === 1 ? console.error(a) : console.error(a, b);\n  }\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","var store = require('../internals/shared-store');\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar objectHas = require('../internals/has');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = new WeakMap();\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var fails = require('../internals/fails');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","module.exports = true;\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","var anObject = require('../internals/an-object');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, next, step;\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = AS_ENTRIES\n          ? boundFunction(anObject(step = iterable[index])[0], step[1])\n          : boundFunction(iterable[index]);\n        if (result && result instanceof Result) return result;\n      } return new Result(false);\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n  while (!(step = next.call(iterator)).done) {\n    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  } return new Result(false);\n};\n\niterate.stop = function (result) {\n  return new Result(true, result);\n};\n","'use strict';\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nif (IteratorPrototype == undefined) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar classof = require('../internals/classof-raw');\nvar macrotask = require('../internals/task').set;\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar IS_NODE = classof(process) == 'process';\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  } else if (MutationObserver && !IS_IOS) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    then = promise.then;\n    notify = function () {\n      then.call(promise, flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n}\n\nmodule.exports = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify();\n  } last = task;\n};\n","var global = require('../internals/global');\n\nmodule.exports = global.Promise;\n","var fails = require('../internals/fails');\n\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n","var global = require('../internals/global');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n","'use strict';\nvar aFunction = require('../internals/a-function');\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n};\n\n// 25.4.1.5 NewPromiseCapability(C)\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\n\nvar nativeAssign = Object.assign;\nvar defineProperty = Object.defineProperty;\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\nmodule.exports = !nativeAssign || fails(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject(arguments[index++]);\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : nativeAssign;\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","var has = require('../internals/has');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype : null;\n};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","'use strict';\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n","var anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.github.io/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.github.io/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n","module.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n","var anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar newPromiseCapability = require('../internals/new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var redefine = require('../internals/redefine');\n\nmodule.exports = function (target, src, options) {\n  for (var key in src) {\n    if (options && options.unsafe && target[key]) target[key] = src[key];\n    else redefine(target, key, src[key], options);\n  } return target;\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (target, key, value, options) {\n  if (options && options.enumerable) target[key] = value;\n  else createNonEnumerableProperty(target, key, value);\n};\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar definePropertyModule = require('../internals/object-define-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule.f;\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineProperty(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar defineProperty = require('../internals/object-define-property').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar toString = require('../internals/object-to-string');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC, SET_METHOD) {\n  if (it) {\n    var target = STATIC ? it : it.prototype;\n    if (!has(target, TO_STRING_TAG)) {\n      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });\n    }\n    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n      createNonEnumerableProperty(target, 'toString', toString);\n    }\n  }\n};\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.6.4',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n","var anObject = require('../internals/an-object');\nvar aFunction = require('../internals/a-function');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.github.io/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\n};\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var global = require('../internals/global');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\nvar bind = require('../internals/function-bind-context');\nvar html = require('../internals/html');\nvar createElement = require('../internals/document-create-element');\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar location = global.location;\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\n\nvar run = function (id) {\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global.postMessage(id + '', location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (classof(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    typeof postMessage == 'function' &&\n    !global.importScripts &&\n    !fails(post) &&\n    location.protocol !== 'file:'\n  ) {\n    defer = post;\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n","var toInteger = require('../internals/to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","var toInteger = require('../internals/to-integer');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n","var NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  // eslint-disable-next-line no-undef\n  && !Symbol.sham\n  // eslint-disable-next-line no-undef\n  && typeof Symbol.iterator == 'symbol';\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar has = require('../internals/has');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name)) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];\n    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var $ = require('../internals/export');\nvar copyWithin = require('../internals/array-copy-within');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.copyWithin` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\n$({ target: 'Array', proto: true }, {\n  copyWithin: copyWithin\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('copyWithin');\n","var $ = require('../internals/export');\nvar fill = require('../internals/array-fill');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n","'use strict';\nvar $ = require('../internals/export');\nvar forEach = require('../internals/array-for-each');\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {\n  forEach: forEach\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var $ = require('../internals/export');\nvar isArray = require('../internals/is-array');\n\n// `Array.isArray` method\n// https://tc39.github.io/ecma262/#sec-array.isarray\n$({ target: 'Array', stat: true }, {\n  isArray: isArray\n});\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.github.io/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar test = [];\nvar nativeSort = test.sort;\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;\n\n// `Array.prototype.sort` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? nativeSort.call(toObject(this))\n      : nativeSort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\n\n// `Date.now` method\n// https://tc39.github.io/ecma262/#sec-date.now\n$({ target: 'Date', stat: true }, {\n  now: function now() {\n    return new Date().getTime();\n  }\n});\n","var $ = require('../internals/export');\nvar bind = require('../internals/function-bind');\n\n// `Function.prototype.bind` method\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\n$({ target: 'Function', proto: true }, {\n  bind: bind\n});\n","var $ = require('../internals/export');\nvar assign = require('../internals/object-assign');\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {\n  assign: assign\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar create = require('../internals/object-create');\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\n$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {\n  create: create\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar objectDefinePropertyModile = require('../internals/object-define-property');\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\n$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {\n  defineProperty: objectDefinePropertyModile.f\n});\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.github.io/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });\nvar FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\n$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);\n  }\n});\n","// empty\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://github.com/tc39/proposal-promise-allSettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (e) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: e };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.github.io/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = typeof onFinally == 'function';\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// patch native Promise.prototype for native async functions\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar setSpecies = require('../internals/set-species');\nvar isObject = require('../internals/is-object');\nvar aFunction = require('../internals/a-function');\nvar anInstance = require('../internals/an-instance');\nvar classof = require('../internals/classof-raw');\nvar inspectSource = require('../internals/inspect-source');\nvar iterate = require('../internals/iterate');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar speciesConstructor = require('../internals/species-constructor');\nvar task = require('../internals/task').set;\nvar microtask = require('../internals/microtask');\nvar promiseResolve = require('../internals/promise-resolve');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar InternalStateModule = require('../internals/internal-state');\nvar isForced = require('../internals/is-forced');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\nvar PROMISE = 'Promise';\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar PromiseConstructor = NativePromise;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar $fetch = getBuiltIn('fetch');\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\nvar IS_NODE = classof(process) == 'process';\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\nvar FORCED = isForced(PROMISE, function () {\n  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);\n  if (!GLOBAL_CORE_JS_PROMISE) {\n    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n    // We can't detect it synchronously, so just check versions\n    if (V8_VERSION === 66) return true;\n    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;\n  }\n  // We need Promise#finally in the pure version for preventing prototype pollution\n  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = PromiseConstructor.resolve(1);\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES] = FakePromise;\n  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);\n});\n\nvar INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {\n  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });\n});\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\n\nvar notify = function (promise, state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  var chain = state.reactions;\n  microtask(function () {\n    var value = state.value;\n    var ok = state.state == FULFILLED;\n    var index = 0;\n    // variable length - can't use forEach\n    while (chain.length > index) {\n      var reaction = chain[index++];\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);\n            state.rejection = HANDLED;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // can throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (error) {\n        if (domain && !exited) domain.exit();\n        reject(error);\n      }\n    }\n    state.reactions = [];\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(promise, state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (handler = global['on' + name]) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (promise, state) {\n  task.call(global, function () {\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (promise, state) {\n  task.call(global, function () {\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, promise, state, unwrap) {\n  return function (value) {\n    fn(promise, state, value, unwrap);\n  };\n};\n\nvar internalReject = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(promise, state, true);\n};\n\nvar internalResolve = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          then.call(value,\n            bind(internalResolve, promise, wrapper, state),\n            bind(internalReject, promise, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(promise, wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(promise, state, false);\n    }\n  } catch (error) {\n    internalReject(promise, { done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromiseConstructor, PROMISE);\n    aFunction(executor);\n    Internal.call(this);\n    var state = getInternalState(this);\n    try {\n      executor(bind(internalResolve, this, state), bind(internalReject, this, state));\n    } catch (error) {\n      internalReject(this, state, error);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: [],\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n  Internal.prototype = redefineAll(PromiseConstructor.prototype, {\n    // `Promise.prototype.then` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.then\n    then: function then(onFulfilled, onRejected) {\n      var state = getInternalPromiseState(this);\n      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = IS_NODE ? process.domain : undefined;\n      state.parent = true;\n      state.reactions.push(reaction);\n      if (state.state != PENDING) notify(this, state, false);\n      return reaction.promise;\n    },\n    // `Promise.prototype.catch` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, promise, state);\n    this.reject = bind(internalReject, promise, state);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && typeof NativePromise == 'function') {\n    nativeThen = NativePromise.prototype.then;\n\n    // wrap native Promise#then for native async functions\n    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {\n      var that = this;\n      return new PromiseConstructor(function (resolve, reject) {\n        nativeThen.call(that, resolve, reject);\n      }).then(onFulfilled, onRejected);\n    // https://github.com/zloirock/core-js/issues/640\n    }, { unsafe: true });\n\n    // wrap fetch result\n    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {\n      // eslint-disable-next-line no-unused-vars\n      fetch: function fetch(input /* , init */) {\n        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));\n      }\n    });\n  }\n}\n\n$({ global: true, wrap: true, forced: FORCED }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n\nPromiseWrapper = getBuiltIn(PROMISE);\n\n// statics\n$({ target: PROMISE, stat: true, forced: FORCED }, {\n  // `Promise.reject` method\n  // https://tc39.github.io/ecma262/#sec-promise.reject\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    capability.reject.call(undefined, r);\n    return capability.promise;\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {\n  // `Promise.resolve` method\n  // https://tc39.github.io/ecma262/#sec-promise.resolve\n  resolve: function resolve(x) {\n    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {\n  // `Promise.all` method\n  // https://tc39.github.io/ecma262/#sec-promise.all\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        $promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  },\n  // `Promise.race` method\n  // https://tc39.github.io/ecma262/#sec-promise.race\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      iterate(iterable, function (promise) {\n        $promiseResolve.call(C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n","var $ = require('../internals/export');\nvar repeat = require('../internals/string-repeat');\n\n// `String.prototype.repeat` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\n$({ target: 'String', proto: true }, {\n  repeat: repeat\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar toLength = require('../internals/to-length');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\nvar IS_PURE = require('../internals/is-pure');\n\nvar nativeStartsWith = ''.startsWith;\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith\n      ? nativeStartsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","require('./es.array.iterator');\nvar DOMIterables = require('../internals/dom-iterables');\nvar global = require('../internals/global');\nvar classof = require('../internals/classof');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {\n    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n  }\n  Iterators[COLLECTION_NAME] = Iterators.Array;\n}\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar task = require('../internals/task');\n\nvar FORCED = !global.setImmediate || !global.clearImmediate;\n\n// http://w3c.github.io/setImmediate/\n$({ global: true, bind: true, enumerable: true, forced: FORCED }, {\n  // `setImmediate` method\n  // http://w3c.github.io/setImmediate/#si-setImmediate\n  setImmediate: task.set,\n  // `clearImmediate` method\n  // http://w3c.github.io/setImmediate/#si-clearImmediate\n  clearImmediate: task.clear\n});\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\n\nvar wrap = function (scheduler) {\n  return function (handler, timeout /* , ...arguments */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : undefined;\n    return scheduler(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);\n    } : handler, timeout);\n  };\n};\n\n// ie9- setTimeout & setInterval additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n$({ global: true, bind: true, forced: MSIE }, {\n  // `setTimeout` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\n  setTimeout: wrap(global.setTimeout),\n  // `setInterval` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\n  setInterval: wrap(global.setInterval)\n});\n","var parent = require('../../es/array/is-array');\n\nmodule.exports = parent;\n","var parent = require('../../../es/array/virtual/for-each');\n\nmodule.exports = parent;\n","var parent = require('../../es/date/now');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/bind');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/copy-within');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/fill');\n\nmodule.exports = parent;\n","require('../../modules/web.dom-collections.iterator');\nvar forEach = require('../array/virtual/for-each');\nvar classof = require('../../internals/classof');\nvar ArrayPrototype = Array.prototype;\n\nvar DOMIterables = {\n  DOMTokenList: true,\n  NodeList: true\n};\n\nmodule.exports = function (it) {\n  var own = it.forEach;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.forEach)\n    // eslint-disable-next-line no-prototype-builtins\n    || DOMIterables.hasOwnProperty(classof(it)) ? forEach : own;\n};\n","var parent = require('../../es/instance/index-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/repeat');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/slice');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/sort');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/splice');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/starts-with');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/trim');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/assign');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/create');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/entries');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/get-own-property-descriptor');\n\nmodule.exports = parent;\n","var parent = require('../../es/promise');\n\nmodule.exports = parent;\n","require('../modules/web.immediate');\nvar path = require('../internals/path');\n\nmodule.exports = path.setImmediate;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setInterval;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setTimeout;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\n\nimport {NyaPCommon,\n\t\tDomTools,\n\t\tUtils\n} from './NyaPCommon.js';\nconst O2H=DomTools.Object2HTML;\n\n\n//NyaP options\nconst NyaPOptions={\n\tautoHideDanmakuInput:true,//hide danmakuinput after danmaku sending\n\tdanmakuColors:['fff','6cf','ff0','f00','0f0','00f','f0f','000'],//colors in the danmaku style pannel\n\tdanmakuModes:[0,3,2,1],//0:right\t1:left\t2:bottom\t3:top  ;; mode in the danmaku style pannel\n\tdanmakuSizes:[20,24,36],//danmaku size buttons in the danmaku style pannel\n}\n\n//normal player\nclass NyaP extends NyaPCommon{\n\tget icons(){return this.opt.icons;}\n\tconstructor(opt){\n\t\tsuper(Utils.deepAssign({},NyaPOptions,opt));\n\t\topt=this.opt;\n\t\tconst NP=this,\n\t\t\t_t=this._t,\n\t\t\t$=this.$,\n\t\t\tvideo=this.video;\n\t\t//set icons\n\t\tfunction icon(name,event,attr={}){\n\t\t\tconst ico=opt.icons[name];\n\t\t\treturn O2H({_:'span',event,attr,prop:{id:`icon_span_${name}`,\n\t\t\t\tinnerHTML:`<svg height=${ico[1]} width=${ico[0]} id=\"icon_${name}\"\">${ico[2]}</svg>`}});\n\t\t}\n\t\t\n\t\tthis.stat('creating_player');\n\n\t\t//create player elements\n\t\tNP._.player=O2H({\n\t\t\t_:'div',attr:{class:'NyaP',id:'NyaP',tabindex:0},child:[\n\t\t\t\tNP.videoFrame,\n\t\t\t\t{_:'div',attr:{id:'controls'},child:[\n\t\t\t\t\t{_:'div',attr:{id:'control'},child:[\n\t\t\t\t\t\t{_:'span',attr:{id:'control_left'},child:[\n\t\t\t\t\t\t\ticon('play',{click:e=>NP.playToggle()},{title:_t('play')}),\n\t\t\t\t\t\t]},\n\t\t\t\t\t\t{_:'span',attr:{id:'control_center'},child:[\n\t\t\t\t\t\t\t{_:'div',prop:{id:'progress_info'},child:[\n\t\t\t\t\t\t\t\t{_:'span',child:[\n\t\t\t\t\t\t\t\t\t{_:'canvas',prop:{id:'progress',pad:10}},\n\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'time'},child:[\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'current_time'},child:['00:00']},\n\t\t\t\t\t\t\t\t\t'/',\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'total_time'},child:['00:00']},\n\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t{_:'div',prop:{id:'danmaku_input_frame'},child:[\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'danmaku_style'},child:[\n\t\t\t\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_style_pannel'},child:[\n\t\t\t\t\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_color_box'}},\n\t\t\t\t\t\t\t\t\t\t{_:'input',attr:{id:'danmaku_color',placeholder:_t('hex color'),maxlength:\"6\"}},\n\t\t\t\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_mode_box'}},\n\t\t\t\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_size_box'}},\n\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t\ticon('danmakuStyle'),\n\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t{_:'input',attr:{id:'danmaku_input',placeholder:_t('Input danmaku here')}},\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'danmaku_submit',innerHTML:_t('Send')}},\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t]},\n\t\t\t\t\t\t{_:'span',attr:{id:'control_right'},child:[\n\t\t\t\t\t\t\ticon('addDanmaku',{click:e=>NP.danmakuInput()},{title:_t('danmaku input(Enter)')}),\n\t\t\t\t\t\t\ticon('danmakuToggle',{click:e=>NP.Danmaku.toggle()},{title:_t('danmaku toggle(D)'),class:'active_icon'}),\n\t\t\t\t\t\t\ticon('volume',{},{title:`${_t('volume')}:(${video.muted?_t('muted'):(video.volume*100|0)+'%'})([shift]+↑↓)(${_t('wheeling')})`}),\n\t\t\t\t\t\t\ticon('loop',{click:e=>{video.loop=!video.loop;}},{title:_t('loop')+'(L)'}),\n\t\t\t\t\t\t\t{_:'span',prop:{id:'player_mode'},child:[\n\t\t\t\t\t\t\t\ticon('fullScreen',{click:e=>NP.playerMode('fullScreen')},{title:_t('full screen(F)')}),\n\t\t\t\t\t\t\t\ticon('fullPage',{click:e=>NP.playerMode('fullPage')},{title:_t('full page(P)')})\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t]},\n\t\t\t\t\t]}\n\t\t\t\t]},\n\t\t\t]\n\t\t});\n\n\n\t\t//progress\n\t\tsetTimeout(()=>{//add resize event\n\t\t\tDomTools.resizeEvent.observe($('#control'));\n\t\t\tDomTools.addEvents($('#control'),{\n\t\t\t\tresize:e=>NP.resizeProgress(),\n\t\t\t});\n\t\t\tNP.resizeProgress();\n\t\t},0);\n\t\tNP._.progressContext=$('#progress').getContext('2d');\n\n\t\t//events\n\t\tconst events={\n\t\t\tmain_video:{\n\t\t\t\tplaying:e=>NP._iconActive('play',true),\n\t\t\t\tpause:e=>{\n\t\t\t\t\tNP._iconActive('play',false);\n\t\t\t\t},\n\t\t\t\ttimeupdate:(e)=>{\n\t\t\t\t\tif(Date.now()-NP._.lastTimeUpdate <30)return;\n\t\t\t\t\tNP._setDisplayTime(Utils.formatTime(video.currentTime,video.duration));\n\t\t\t\t\tNP.drawProgress();\n\t\t\t\t\tNP._.lastTimeUpdate=Date.now();\n\t\t\t\t},\n\t\t\t\tloadedmetadata:e=>{\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\n\t\t\t\t},\n\t\t\t\tvolumechange:e=>{\n\t\t\t\t\t//show volume msg\n\t\t\t\t\tNP._.volumeBox.renew(`${_t('volume')}:${(video.volume*100).toFixed(0)}%`+`${video.muted?('('+_t('muted')+')'):''}`,3000);\n\t\t\t\t\t//change icon style\n\t\t\t\t\tUtils.setAttrs($('#volume_circle'),{'stroke-dasharray':`${video.volume*12*Math.PI} 90`,style:`fill-opacity:${video.muted?.2:.6}!important`});\n\t\t\t\t\t//change icon tip\n\t\t\t\t\t$('#icon_span_volume').setAttribute('title',`${_t('volume')}:(${video.muted?_t('muted'):((video.volume*100|0)+'%')})([shift]+↑↓)(${_t('wheeling')})`);\n\t\t\t\t},\n\t\t\t\tprogress:e=>NP.drawProgress(),\n\t\t\t\tclick:e=>NP.playToggle(),\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\n\t\t\t\terror:()=>{\n\t\t\t\t\tNP.msg(`视频加载错误`,'error');\n\t\t\t\t\tthis.log('video error','error');\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_container:{\n\t\t\t\tclick:e=>NP.playToggle(),\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\n\t\t\t},\n\t\t\tprogress:{\n\t\t\t\t'mousemove,click':e=>{\n\t\t\t\t\tlet t=e.target,\n\t\t\t\t\t\tpre=Utils.clamp((e.offsetX-t.pad)/(t.offsetWidth-2*t.pad),0,1);\n\t\t\t\t\tif(e.type==='mousemove'){\n\t\t\t\t\t\tNP._.progressX=e.offsetX;NP.drawProgress();\n\t\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(pre*video.duration,video.duration));\t\n\t\t\t\t\t}else if(e.type==='click'){\n\t\t\t\t\t\tvideo.currentTime=pre*video.duration;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmouseout:e=>{\n\t\t\t\t\tNP._.progressX=undefined;NP.drawProgress();\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\n\t\t\t\t},\n\t\t\t},\n\t\t\tdanmaku_style_pannel:{\n\t\t\t\tclick:e=>{if(e.target.tagName!=='INPUT')setImmediate(a=>NP.$('#danmaku_input').focus())},\n\t\t\t},\n\t\t\tdanmaku_color:{\n\t\t\t\t'input,change':e=>{\n\t\t\t\t\tlet i=e.target,c=NP.Danmaku.isVaildColor(i.value);\n\t\t\t\t\tif(c){//match valid hex color code\n\t\t\t\t\t\ti.style.backgroundColor=`#${c}`;\n\t\t\t\t\t\tNP._.danmakuColor=c;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tNP._.danmakuColor=undefined;\n\t\t\t\t\t\tc=NP.Danmaku.isVaildColor(NP.opt.defaultDanmakuColor);\n\t\t\t\t\t\ti.style.backgroundColor=c?`#${c}`:'';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ticon_span_volume:{\n\t\t\t\tclick:e=>video.muted=!video.muted,\n\t\t\t\twheel:e=>{\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tlet d=e.wheelDeltaY;\n\t\t\t\t\tif(e.shiftKey)d=d>0?10:-10;\n\t\t\t\t\tvideo.volume=Utils.clamp(video.volume+d/900,0,1);\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_input:{\n\t\t\t\tkeydown:e=>{if(e.key==='Enter'){NP.send();}else if(e.key==='Escape'){NP.danmakuInput(false);}}\n\t\t\t},\n\t\t\tdanmaku_submit:{\n\t\t\t\tclick:e=>NP.send(),\n\t\t\t},\n\t\t\tdanmaku_mode_box:{\n\t\t\t\tclick:e=>{\n\t\t\t\t\tlet t=e.target;\n\t\t\t\t\tif(t.id.startsWith('icon_span_danmakuMode')){\n\t\t\t\t\t\tlet m=1*t.id.match(/\\d$/)[0];\n\t\t\t\t\t\tif(NP._.danmakuMode!==undefined)\n\t\t\t\t\t\t\t$(`#icon_span_danmakuMode${NP._.danmakuMode}`).classList.remove('active');\n\t\t\t\t\t\t$(`#icon_span_danmakuMode${m}`).classList.add('active');\n\t\t\t\t\t\tNP._.danmakuMode=m;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_size_box:{\n\t\t\t\tclick:e=>{\n\t\t\t\t\tlet t=e.target;\n\t\t\t\t\tif(!t.size)return;\n\t\t\t\t\tUtils.toArray($('#danmaku_size_box').childNodes).forEach(sp=>{\n\t\t\t\t\t\tif(NP._.danmakuSize===sp.size)sp.classList.remove('active');\n\t\t\t\t\t});\n\t\t\t\t\tt.classList.add('active');\n\t\t\t\t\tNP._.danmakuSize=t.size;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_color_box:{\n\t\t\t\tclick:e=>{\n\t\t\t\t\tif(e.target.color){\n\t\t\t\t\t\t$('#danmaku_color').value=e.target.color;\n\t\t\t\t\t\t$('#danmaku_color').dispatchEvent(new Event('change'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t\tfor(let eleid in events){//add events to elements\n\t\t\tlet el=$(`#${eleid}`);\n\t\t\tif(!el)continue;\n\t\t\tlet eves=events[eleid];\n\t\t\teves&&DomTools.addEvents($(`#${eleid}`),eves);\n\t\t}\n\t\tDomTools.addEvents(this,{\n\t\t\tdanmakuFrameToggle:bool=>NP._iconActive('danmakuToggle',bool),//listen danmakuToggle event to change button style\n\t\t\tplayerModeChange:mode=>{\n\t\t\t\t['fullPage','fullScreen'].forEach(m=>{\n\t\t\t\t\tNP._iconActive(m,mode===m);\n\t\t\t\t});\n\t\t\t},\n\t\t\tvideo_loopChange:value=>NP._iconActive('loop',value),\n\t\t});\n\t\tDomTools.addEvents(this._.player,{\n\t\t\tkeydown:e=>NP._playerKeyHandle(e),\n\t\t\tmousemove:e=>{\n\t\t\t\tthis._userActiveWatcher(true);\n\t\t\t}\n\t\t});\n\t\tDomTools.addEvents(document,{\n\t\t\t'fullscreenchange,mozfullscreenchange,webkitfullscreenchange,msfullscreenchange':e=>{\n\t\t\t\tif(NP.currentPlayerMode=='fullScreen' && !DomTools.isFullscreen())\n\t\t\t\t\tNP.playerMode('normal');\n\t\t\t}\n\t\t});\n\n\n\t\t\n\t\t//danmaku ui\n\t\tif(this._danmakuEnabled){\n\t\t\t//danmaku sizes\n\t\t\topt.danmakuSizes&&opt.danmakuSizes.forEach((s,ind)=>{\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`font-size:${12+ind*3}px;`,title:s},prop:{size:s},child:['A']});\n\t\t\t\t$('#danmaku_size_box').appendChild(e);\n\t\t\t\tif(s===opt?.uiOptions?.danmakuSize){//click specified button\n\t\t\t\t\te.click();\n\t\t\t\t}\n\t\t\t});\n\t\t\t//danmaku colors\n\t\t\topt.danmakuColors&&opt.danmakuColors.forEach(c=>{\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`background-color:#${c};`,title:c},prop:{color:c}});\n\t\t\t\t$('#danmaku_color_box').appendChild(e);\n\t\t\t});\n\t\t\tif(opt?.uiOptions?.danmakuColor){//set default color\n\t\t\t\t$('#danmaku_color').value=opt.uiOptions.danmakuColor;\n\t\t\t}\n\t\t\t//danmaku modes\n\t\t\topt.danmakuModes&&opt.danmakuModes.forEach(m=>{\n\t\t\t\tlet e=icon(`danmakuMode${m}`);\n\t\t\t\t$('#danmaku_mode_box').appendChild(e);\n\t\t\t\tif(m===opt?.uiOptions?.danmakuMode){//click specified button\n\t\t\t\t\te.click();\n\t\t\t\t}\n\t\t\t});\n\t\t}else{\n\t\t\tthis.$$('[id*=danmaku]').forEach(el=>{//remove danmaku buttons\n\t\t\t\tel.parentNode,removeChild(el);\n\t\t\t});\n\t\t}\n\t\t\n\t\t//put into the container\n\t\tif(opt.playerContainer instanceof HTMLElement)\n\t\t\topt.playerContainer.appendChild(NP.player);\n\n\t\tthis.statResult('creating_player');\n\t}\n\t_userActiveWatcher(active=false){//watch user active,for auto hiding ui\n\t\tlet delay=5000,t=Date.now();\n\t\tif(active){\n\t\t\tthis._.lastUserActive=t;\n\t\t\tif(this._.userInactive){\n\t\t\t\tthis._.userInactive=false;\n\t\t\t\tthis.player.classList.remove('user-inactive');\n\t\t\t}\n\t\t}\n\t\tif(this._.userActiveTimer)return;\n\t\tthis._.userActiveTimer=setTimeout(()=>{\n\t\t\tthis._.userActiveTimer=0;\n\t\t\tlet now=Date.now();\n\t\t\tif(now-this._.lastUserActive<delay){\n\t\t\t\tthis._userActiveWatcher();\n\t\t\t}else{\n\t\t\t\tthis.player.classList.add('user-inactive');\n\t\t\t\tthis._.userInactive=true;\n\t\t\t}\n\t\t},delay-t+this._.lastUserActive);\n\t}\n\t_playerKeyHandle(e){//hot keys\n\t\tif(e.target.tagName==='INPUT')return;\n\t\tconst V=this.video,_SH=e.shiftKey,_RE=e.repeat;\n\t\t//to prevent default,use break.otherwise,use return.\n\t\tswitch(e.key){\n\t\t\tcase ' ':{\n\t\t\t\tif(_RE)return;//ignore repeat keys\n\t\t\t\tthis.playToggle();break;\n\t\t\t}\n\t\t\tcase 'ArrowRight':{//seek forward\n\t\t\t\tV.currentTime+=(3*(_SH?2:1));break;\n\t\t\t}\n\t\t\tcase 'ArrowLeft':{//seek backward\n\t\t\t\tV.currentTime-=(1.5*(_SH?2:1));break;\n\t\t\t}\n\t\t\tcase 'ArrowUp':{//volume up\n\t\t\t\tV.volume=Utils.clamp(V.volume+(0.03*(_SH?2:1)),0,1);break;\n\t\t\t}\n\t\t\tcase 'ArrowDown':{//volume down\n\t\t\t\tV.volume=Utils.clamp(V.volume-(0.03*(_SH?2:1)),0,1);break;\n\t\t\t}\n\t\t\tcase 'p':{//full page\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis.playerMode('fullPage');break;\n\t\t\t}\n\t\t\tcase 'f':{//fullscreen\n\t\t\t\tthis.playerMode('fullScreen');break;\n\t\t\t}\n\t\t\tcase 'd':{//danmaku toggle\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis._danmakuEnabled&&this.Danmaku.toggle();break;\n\t\t\t}\n\t\t\tcase 'm':{//mute\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis.video.muted=!this.video.muted;break;\n\t\t\t}\n\t\t\tcase 'l':{//loop\n\t\t\t\tthis.video.loop=!this.video.loop;break;\n\t\t\t}\n\t\t\tcase 'Enter':{//danmaku input toggle\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis._danmakuEnabled&&this.danmakuInput();break;\n\t\t\t}\n\t\t\tcase 'Escape':{//exit full page mode\n\t\t\t\tif(this.currentPlayerMode==='fullPage'){\n\t\t\t\t\tthis.playerMode('normal');break;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdefault:return;\n\t\t}\n\t\te.preventDefault();\n\t}\n\tdanmakuInput(bool=!this.$('#danmaku_input_frame').offsetHeight){//hide or show danmaku input\n\t\tlet $=this.$;\n\t\t$('#danmaku_input_frame').style.display=bool?'flex':'';\n\t\tthis._iconActive('addDanmaku',bool);\n\t\tsetImmediate(()=>{bool?$('#danmaku_input').focus():this._.player.focus();});\n\t}\n\tresizeProgress(){\n\t\tconst c=this.$('#progress');\n\t\tc.width=c.offsetWidth;\n\t\tc.height=c.offsetHeight;\n\t\tthis.drawProgress();\n\t\tthis.emit('progressRefresh');\n\t}\n\tsend(){\n\t\tlet color=this._.danmakuColor||this.opt.defaultDanmakuColor,\n\t\t\ttext=this.$('#danmaku_input').value,\n\t\t\tsize=this._.danmakuSize,\n\t\t\tmode=this._.danmakuMode,\n\t\t\ttime=this.time,\n\t\t\td={color,text,size,mode,time};\n\n\t\tlet S=this.Danmaku.send(d,danmaku=>{\n\t\t\tif(danmaku&&danmaku._==='text')\n\t\t\t\tthis.$('#danmaku_input').value='';\n\t\t\tdanmaku.highlight=true;\n\t\t\tthis.Danmaku.load(danmaku,true);\n\t\t\tif(this.opt.autoHideDanmakuInput){this.danmakuInput(false);}\n\t\t});\n\n\t\tif(!S){\n\t\t\tthis.danmakuInput(false);\n\t\t\treturn;\n\t\t}\n\t}\n\t_progressDrawer(){\n\t\tconst ctx=this._.progressContext,\n\t\t\t\tc=this.$('#progress'),\n\t\t\t\tw=c.width,\n\t\t\t\th=c.height,\n\t\t\t\tv=this.video,\n\t\t\t\td=v.duration,\n\t\t\t\tcT=v.currentTime,\n\t\t\t\tpad=c.pad,\n\t\t\t\tlen=w-2*pad;\n\t\tlet i;\n\t\tctx.clearRect(0,0,w,h);\n\t\tctx.lineCap = \"round\";\n\t\t//background\n\t\tctx.beginPath();\n\t\tctx.strokeStyle='#eee';\n\t\tctx.lineWidth=7;\n\t\tctx.moveTo(pad, 15);\n\t\tctx.lineTo(pad+len, 15);\n\t\tctx.stroke();\n\t\t//buffered\n\t\tctx.beginPath();\n\t\tctx.strokeStyle = '#C0BBBB';\n\t\tctx.lineWidth = 2;\n\t\tlet tr = v.buffered;\n\t\tfor (i = tr.length;i--;) {\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 18);\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 18);\n\t\t}\n\t\tctx.stroke();\n\t\t//progress\n\t\tctx.beginPath();\n\t\tctx.strokeStyle='#6cf';\n\t\tctx.lineWidth = 5;\n\t\tctx.moveTo(pad,15);\n\t\tctx.lineTo(pad+len*cT/d,15);\n\t\tctx.stroke();\n\t\t//already played\n\t\tctx.beginPath();\n\t\tctx.strokeStyle = 'rgba(255,255,255,.3)';\n\t\tctx.lineWidth = 5;\n\t\ttr = v.played;\n\t\tfor (i = tr.length;i--;) {\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 15);\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 15);\n\t\t}\n\t\tctx.stroke();\n\t\t//mouse\n\t\tif(this._.progressX){\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle='rgba(0,0,0,.05)';\n\t\t\tctx.moveTo(pad+len*cT/d,15);\n\t\t\tctx.lineTo(Utils.clamp(this._.progressX,pad,pad+len),15);\n\t\t\tctx.stroke();\n\t\t}\n\t\tthis._.drawingProgress=false;\n\t}\n\tdrawProgress(){\n\t\tif(this._.drawingProgress)return;\n\t\tthis._.drawingProgress=true;\n\t\trequestAnimationFrame(()=>this._progressDrawer());//prevent progress bar drawing multi times in a frame\n\t}\n}\n\n\n\n\nwindow.NyaP=NyaP;\n","import {\n    NyaPlayerCore,\n\tDomTools,\n\tUtils,\n} from '../component/NyaP-Core/index.js';\n\nimport NyaPDanmaku from '../component/NyaP-Danmaku/index.js';\n\nconst O2H=DomTools.Object2HTML;\n\n//default options\nconst NyaPCommonOptions={\n\t//for danmaku frame\n\tdanmaku:{\n\t\tenable:true,\n\t\tmodules:{\n\t\t\tTextDanmaku:{\n\t\t\t\tenable:true,\n\t\t\t\tdefaultStyles:{},\n\t\t\t\toptions:{},\n\t\t\t},\n\t\t},\n\t\tsend:d=>{return Promise.reject();},//the method for sending danmaku\n\t},\n\t// for ui\n\tuiOptions:{\n\t\tdanmakuColor:null,//a hex color(without #),when the color inputed is invalid,this color will be applied\n\t\tdanmakuMode:0,//0: right to left.\n\t\tdanmakuSize:24,\n\t},\n\n\tloadingInfo:{//text replacement at loading time (for left-bottom message)\n\t\tdoneText:'ok',\n\t\tfailText:'failed',\n\t\tcontentSpliter:'...',\n\t},\n\tloadingAnimation:true,\n\n\t//other common options\n\tplayerContainer:null,//the element for containing the player\n\ticons:{\n\t\tplay:[30,30,'<path d=\"m10.063,8.856l9.873,6.143l-9.873,6.143v-12.287z\" stroke-width=\"3\" stroke-linejoin=\"round\"/>'],\n\t\taddDanmaku:[30,30,'<path style=\"fill-opacity:0!important;\" stroke-width=\"1.4\" d=\"m21.004,8.995c-0.513,-0.513 -1.135,-0.770 -1.864,-0.770l-8.281,0c-0.729,0 -1.350,0.256 -1.864,0.770c-0.513,0.513 -0.770,1.135 -0.770,1.864l0,8.281c0,0.721 0.256,1.341 0.770,1.858c0.513,0.517 1.135,0.776 1.864,0.776l8.281,0c0.729,0 1.350,-0.258 1.864,-0.776c0.513,-0.517 0.770,-1.136 0.770,-1.858l0,-8.281c0,-0.729 -0.257,-1.350 -0.770,-1.864z\" stroke-linejoin=\"round\"/>'\n\t\t\t\t\t\t\t+'<path d=\"m12.142,14.031l1.888,0l0,-1.888l1.937,0l0,1.888l1.888,0l0,1.937l-1.888,0l0,1.888l-1.937,0l0,-1.888l-1.888,0l0,-1.937z\" stroke-width=\"1\"/>'],\n\t\tdanmakuToggle:[30,30,'<path d=\"m8.569,10.455l0,0c0,-0.767 0.659,-1.389 1.473,-1.389l0.669,0l0,0l3.215,0l6.028,0c0.390,0 0.765,0.146 1.041,0.406c0.276,0.260 0.431,0.613 0.431,0.982l0,3.473l0,0l0,2.083l0,0c0,0.767 -0.659,1.389 -1.473,1.389l-6.028,0l-4.200,3.532l0.985,-3.532l-0.669,0c-0.813,0 -1.473,-0.621 -1.473,-1.389l0,0l0,-2.083l0,0l0,-3.473z\"/>'],\n\t\tdanmakuStyle:[30,30,'<path style=\"fill-opacity:1!important\" d=\"m21.781,9.872l-1.500,-1.530c-0.378,-0.385 -0.997,-0.391 -1.384,-0.012l-0.959,0.941l2.870,2.926l0.960,-0.940c0.385,-0.379 0.392,-0.998 0.013,-1.383zm-12.134,7.532l2.871,2.926l7.593,-7.448l-2.872,-2.927l-7.591,7.449l0.000,0.000zm-1.158,2.571l-0.549,1.974l1.984,-0.511l1.843,-0.474l-2.769,-2.824l-0.509,1.835z\" stroke-width=\"0\"/>'],\n\t\tfullScreen:[30,30,'<path stroke-linejoin=\"round\" d=\"m11.166,9.761l-5.237,5.239l5.237,5.238l1.905,-1.905l-3.333,-3.333l3.332,-3.333l-1.904,-1.906zm7.665,0l-1.903,1.905l3.332,3.333l-3.332,3.332l1.903,1.905l5.238,-5.238l-5.238,-5.237z\" stroke-width=\"1.3\" />'],\n\t\tfullPage:[30,30,'<rect stroke-linejoin=\"round\" height=\"11.169\" width=\"17.655\" y=\"9.415\" x=\"6.172\" stroke-width=\"1.5\"/>'\n\t\t\t\t\t\t  +'<path stroke-linejoin=\"round\" d=\"m12.361,11.394l-3.604,3.605l3.605,3.605l1.311,-1.311l-2.294,-2.294l2.293,-2.294l-1.311,-1.311zm5.275,0l-1.310,1.311l2.293,2.294l-2.293,2.293l1.310,1.311l3.605,-3.605l-3.605,-3.605z\"/>'],\n\t\tloop:[30,30,'<path stroke-linejoin=\"round\" stroke-width=\"1\" d=\"m20.945,15.282c-0.204,-0.245 -0.504,-0.387 -0.823,-0.387c-0.583,0 -1.079,0.398 -1.205,0.969c-0.400,1.799 -2.027,3.106 -3.870,3.106c-2.188,0 -3.969,-1.780 -3.969,-3.969c0,-2.189 1.781,-3.969 3.969,-3.969c0.720,0 1.412,0.192 2.024,0.561l-0.334,0.338c-0.098,0.100 -0.127,0.250 -0.073,0.380c0.055,0.130 0.183,0.213 0.324,0.212l2.176,0.001c0.255,-0.002 0.467,-0.231 0.466,-0.482l-0.008,-2.183c-0.000,-0.144 -0.085,-0.272 -0.217,-0.325c-0.131,-0.052 -0.280,-0.022 -0.379,0.077l-0.329,0.334c-1.058,-0.765 -2.340,-1.182 -3.649,-1.182c-3.438,0 -6.236,2.797 -6.236,6.236c0,3.438 2.797,6.236 6.236,6.236c2.993,0 5.569,-2.133 6.126,-5.072c0.059,-0.314 -0.022,-0.635 -0.227,-0.882z\"/>'],\n\t\tvolume:[30,30,'<ellipse id=\"volume_circle\" style=\"fill-opacity:.6!important\" ry=\"6\" rx=\"6\" cy=\"15\" cx=\"15\" stroke-dasharray=\"38 90\" stroke-width=\"1.8\"/>'],\n\t\tdanmakuMode0:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m14.981,17.821l-7.937,-2.821l7.937,-2.821l0,1.409l7.975,0l0,2.821l-7.975,0l0,1.409l0,0.002z\"/>'],\n\t\tdanmakuMode1:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m15.019,12.178l7.937,2.821l-7.937,2.821l0,-1.409l-7.975,0l0,-2.821l7.975,0l0,-1.409l0,-0.002z\"/>'],\n\t\tdanmakuMode3:[30,30,'<path stroke-width=\"3\" d=\"m7.972,7.486l14.054,0\"/>'],\n\t\tdanmakuMode2:[30,30,'<path stroke-width=\"3\" d=\"m7.972,22.513l14.054,0\"/>'],\n\t},\n}\n\n//NyaP classic theme Core\nclass NyaPCommon extends NyaPlayerCore{\n\tget frame(){return this._.player||this.videoFrame;}\n\tget player(){return this._.player;}\n\tget currentPlayerMode(){return this.player.getAttribute('playerMode')||'normal';}\n\tget _danmakuEnabled(){return this.opt.danmaku.enable;}\n\tconstructor(opt){\n\t\tsuper(Utils.deepAssign({},NyaPCommonOptions,opt));\n\t\tthis.log('%c https://github.com/JiaJiaJiang/NyaP/ ','log',\"background:#6f8fa2;color:#ccc;padding:.3em\");\n\t\topt=this.opt;\n\n\t\tthis.$=this.$.bind(this);\n\t\tthis.$$=this.$$.bind(this);\n\n\t\t//language\n\t\tconst _t=this._t=this.i18n._.bind(this.i18n);//translate\n\t\t//load languages to the core\n\t\tlet langs=require('./langs.json');\n\t\tfor(let l in langs){\n\t\t\tthis.i18n.add(l,langs[l]);\n\t\t}\n\n\t\t//the video frame for NyaP and NyaPTouch\n\t\tthis.videoFrame=O2H(\n\t\t\t{_:'div',attr:{id:'video_frame'},child:[\n\t\t\t\tthis.video,\n\t\t\t\t//this.container,\n\t\t\t\t{_:'div',attr:{id:'loading_frame'},child:[\n\t\t\t\t\t{_:'div',attr:{id:'loading_anime'}},\n\t\t\t\t\t{_:'div',attr:{id:'loading_info'}},\n\t\t\t\t]},\n\t\t\t\t{_:'div',attr:{id:'msg_box'}},\n\t\t\t]}\n\t\t);\n\n\t\t//add private vars\n\t\tthis._.selectorCache={};\n\t\tthis._.volumeBox=new MsgBox('','info',this.$('#msg_box'));\n\t\tthis._.ios=!!navigator.userAgent.match(/i[A-z]+?; CPU .+?like Mac OS/);\n\t\tthis._.mobileX5=!!navigator.userAgent.match(/MQQBrowser/);\n\n\t\t//receive stat requests\n\t\tthis.on('stat',stat=>{\n\t\t\tlet name=_t(stat[1]);\n\t\t\tthis.debug('stat:',name);\n\t\t\tlet d=O2H({_:'div',child:[name]});\n\t\t\td.append(this.opt.loadingInfo.contentSpliter);\n\t\t\tthis.$('#loading_info').appendChild(d);\n\t\t\tstat[2].then(result=>{//wait for the result\n\t\t\t\td.append(result||this.opt.loadingInfo.doneText);\n\t\t\t}).catch(e=>{\n\t\t\t\td.append(e.message||e||this.opt.loadingInfo.failText);\n\t\t\t});\n\t\t});\n\n\t\t//loading animation\n\t\tif(opt.loadingAnimation){\n\t\t\tthis.$('#loading_anime').innerHTML='(๑•́ ω •̀๑)';\n\t\t\tthis._.loadingAnimationInterval=setInterval(()=>{//loading animation\n\t\t\t\tthis.$('#loading_anime').style.transform=\"translate(\"+Utils.rand(-20,20)+\"px,\"+Utils.rand(-20,20)+\"px) rotate(\"+Utils.rand(-10,10)+\"deg)\";\n\t\t\t},80);\n\t\t}\n\t\tDomTools.addEvents(this.video,{\n\t\t\tloadedmetadata:e=>{\n\t\t\t\tthis.statResult('loading_video');\n\t\t\t\tclearInterval(this._.loadingAnimationInterval);\n\t\t\t\tlet lf=this.$('#loading_frame');\n\t\t\t\tif(lf.parentNode)//remove loading animation\n\t\t\t\t\tlf.parentNode.removeChild(lf);\n\t\t\t},\n\t\t\terror:e=>{\n\t\t\t\tthis.statResult('loading_video',e?.message);\n\t\t\t\tclearInterval(this._.loadingAnimationInterval);\n\t\t\t\tthis.$('#loading_anime').innerHTML='(๑• . •๑)';\n\t\t\t\tthis.$('#loading_anime').style.transform=\"\";\n\t\t\t},\n\t\t});\n\n\t\t//load danmaku frame\n\t\tif(this._danmakuEnabled){\n\t\t\tthis.danmakuContainer=O2H({_:'div',prop:{id:'danmaku_container'}});\n\t\t\tthis.stat('loading_danmakuFrame',()=>{\n\t\t\t\tthis.Danmaku=new NyaPDanmaku(this);\n\t\t\t\tthis.videoFrame.insertBefore(this.danmakuContainer,this.$('#loading_frame'));\n\t\t\t});\n\t\t}\n\n\t\t//stupid x5 core\n\t\tif(this._.mobileX5){\n\t\t\ttry{\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.setRendererMode(1);//force css mode\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.text2d.supported=false;\n\t\t\t}catch(e){\n\t\t\t\talert(e.message);\n\t\t\t}\n\t\t}\n\t}\n\t$(selector,useCache=true){//querySelector for the frame element\n\t\tif(useCache&&this._.selectorCache[selector])\n\t\t\treturn this._.selectorCache[selector];\n\t\tlet el=this.frame.querySelector(selector);\n\t\tif(el)this._.selectorCache[selector]=el;\n\t\treturn el;\n\t}\n\t$$(selector){//querySelectorAll for the frame element\n\t\treturn this.frame.querySelectorAll(selector);\n\t}\n\tplayerMode(mode='normal'){\n\t\tlet ios=this._.ios;\n\t\tif(mode==='normal' && this.currentPlayerMode===mode)return;\n\t\tif(this.currentPlayerMode==='fullScreen'){\n\t\t\tios||DomTools.exitFullscreen().catch(e=>{});\n\t\t}\n\t\tif(mode!=='normal' && this.currentPlayerMode===mode)mode='normal';//back to normal mode\n\t\tswitch(mode){\n\t\t\tcase 'fullPage':{\n\t\t\t\tthis.player.setAttribute('playerMode','fullPage');\n\t\t\t\tthis.emit('playerModeChange',mode);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'fullScreen':{\n\t\t\t\tif(ios){//for ios, only fullscreen video, not the player\n\t\t\t\t\tDomTools.requestFullscreen(this.video);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tDomTools.requestFullscreen(this.player).then(()=>{\n\t\t\t\t\tthis.player.setAttribute('playerMode','fullScreen');\n\t\t\t\t\tthis.emit('playerModeChange',mode);\n\t\t\t\t}).catch(e=>{alert('Failed to enter screen mode')});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\tthis.player.setAttribute('playerMode','normal');\n\t\t\t\tthis.emit('playerModeChange',mode);\n\t\t\t}\n\t\t}\n\t}\n\tmsg(text,type='tip'){//type:tip|info|error\n\t\tlet msg=new MsgBox(text,type,this.$('#msg_box'));\n\t\trequestAnimationFrame(()=>msg.show());\n\t}\n\t_iconActive(name,bool){\n\t\tif(name==='loop')\n\t\tthis.$(`#icon_span_${name}`).classList[bool?'add':'remove']('active_icon');\n\t}\n\t_setDisplayTime(current=null,total=null){\n\t\t\tif(current!==null)this.$('#current_time').innerHTML=current;\n\t\t\tif(total!==null)this.$('#total_time').innerHTML=total;\n\t}\n}\n\nclass MsgBox{\n\tconstructor(text,type,parentNode){\n\t\tthis.using=false;\n\t\tlet msg=this.msg=O2H({_:'div',attr:{class:`msg_type_${type}`}});\n\t\tmsg.addEventListener('click',()=>this.remove());\n\t\tthis.parentNode=parentNode;\n\t\tthis.setText(text);\n\t}\n\tsetTimeout(time){\n\t\tif(this.timeout)clearTimeout(this.timeout);\n\t\tthis.timeout=setTimeout(()=>this.remove(),time||Math.max((this.texts?this.texts.length:0)*0.6*1000,5000));\n\t}\n\tsetText(text){\n\t\tthis.msg.innerHTML='';\n\t\tlet e=O2H(text);\n\t\te&&this.msg.appendChild(e);\n\t\tif(text instanceof HTMLElement)text=text.textContent;\n\t\tlet texts=String(text).match(/\\w+|\\S/g);\n\t\tthis.text=text;\n\t\tthis.texts=texts;\n\t}\n\trenew(text,time){\n\t\tthis.setText(text);\n\t\tthis.setTimeout(time);\n\t\tif(!this.using)this.show();\n\t}\n\tshow(){\n\t\tif(this.using)return;\n\t\tthis.msg.style.opacity=0;\n\t\tif(this.parentNode && this.parentNode!==this.msg.parentNode){\n\t\t\tthis.parentNode.appendChild(this.msg);\n\t\t}\n\t\tthis.msg.parentNode&&setTimeout(()=>{\n\t\t\tthis.using=true;\n\t\t\tthis.msg.style.opacity=1;\n\t\t},0);\n\t\tthis.setTimeout();\n\t}\n\tremove(){\n\t\tif(!this.using)return;\n\t\tthis.using=false;\n\t\tthis.msg.style.opacity=0;\n\t\tif(this.timeout){\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout=0;\n\t\t}\n\t\tsetTimeout(()=>{\n\t\t\tthis.msg.parentNode&&this.msg.parentNode.removeChild(this.msg);\n\t\t},600);\n\t}\n}\n\nexport {\n\tNyaPCommon,\n\tDomTools,\n\tUtils,\n}\n","module.exports={\"zh-CN\":{\"play\":\"播放\",\"Send\":\"发送\",\"Done\":\"完成\",\"loop\":\"循环\",\"pause\":\"暂停\",\"muted\":\"静音\",\"volume\":\"音量\",\"settings\":\"设置\",\"wheeling\":\"滚轮\",\"hex color\":\"Hex颜色\",\"Loading core\":\"加载核心\",\"Loading video\":\"加载视频\",\"Loading plugin\":\"加载插件\",\"full page(P)\":\"全页模式(P)\",\"Loading danmaku\":\"加载弹幕\",\"Creating player\":\"创建播放器\",\"full screen(F)\":\"全屏模式(F)\",\"danmaku toggle(D)\":\"弹幕开关(D)\",\"Input danmaku here\":\"在这里输入弹幕\",\"Loading danmaku frame\":\"加载弹幕框架\",\"danmaku input(Enter)\":\"弹幕输入框(回车)\",\"Failed to change to fullscreen mode\":\"无法切换到全屏模式\",\"loading_core\":\"加载核心\",\"loading_plugin\":\"加载插件\",\"loading_danmakuFrame\":\"加载弹幕框架\",\"creating_player\":\"创建播放器\",\"loading_danmaku\":\"加载弹幕\",\"loading_video\":\"加载视频\"}}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}