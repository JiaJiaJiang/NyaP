{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../component/NyaP-Core/index.js","../component/NyaP-Core/lib/Object2HTML.js","../component/NyaP-Core/src/core.js","../component/NyaP-Core/src/domTools.js","../component/NyaP-Core/src/i18n.js","../component/NyaP-Core/src/utils.js","../component/NyaP-Danmaku/index.js","../component/NyaP-Danmaku/lib/Mat/Mat.js","../component/NyaP-Danmaku/src/danmaku-frame.js","../component/NyaP-Danmaku/src/danmaku-text/TextCanvas2D.js","../component/NyaP-Danmaku/src/danmaku-text/TextCss.js","../component/NyaP-Danmaku/src/danmaku-text/TextWebGL.js","../component/NyaP-Danmaku/src/danmaku-text/Textoff.js","../component/NyaP-Danmaku/src/danmaku-text/danmaku-text.js","../component/NyaP-Danmaku/src/danmaku-text/textModuleTemplate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js","../node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js","../node_modules/@babel/runtime-corejs3/core-js-stable/date/now.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/copy-within.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/fill.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/repeat.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/assign.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/set-prototype-of.js","../node_modules/@babel/runtime-corejs3/core-js-stable/promise.js","../node_modules/@babel/runtime-corejs3/core-js-stable/reflect/construct.js","../node_modules/@babel/runtime-corejs3/core-js-stable/reflect/get.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-immediate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-interval.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js","../node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js","../node_modules/@babel/runtime-corejs3/core-js-stable/symbol/iterator.js","../node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js","../node_modules/@babel/runtime-corejs3/core-js/get-iterator.js","../node_modules/@babel/runtime-corejs3/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs3/regenerator/index.js","../node_modules/@juggle/resize-observer/lib/exports/resize-observer.umd.js","../node_modules/core-js-pure/es/array/from.js","../node_modules/core-js-pure/es/array/is-array.js","../node_modules/core-js-pure/es/array/virtual/concat.js","../node_modules/core-js-pure/es/array/virtual/copy-within.js","../node_modules/core-js-pure/es/array/virtual/fill.js","../node_modules/core-js-pure/es/array/virtual/for-each.js","../node_modules/core-js-pure/es/array/virtual/index-of.js","../node_modules/core-js-pure/es/array/virtual/slice.js","../node_modules/core-js-pure/es/array/virtual/sort.js","../node_modules/core-js-pure/es/array/virtual/splice.js","../node_modules/core-js-pure/es/date/now.js","../node_modules/core-js-pure/es/function/virtual/bind.js","../node_modules/core-js-pure/es/instance/bind.js","../node_modules/core-js-pure/es/instance/concat.js","../node_modules/core-js-pure/es/instance/copy-within.js","../node_modules/core-js-pure/es/instance/fill.js","../node_modules/core-js-pure/es/instance/index-of.js","../node_modules/core-js-pure/es/instance/repeat.js","../node_modules/core-js-pure/es/instance/slice.js","../node_modules/core-js-pure/es/instance/sort.js","../node_modules/core-js-pure/es/instance/splice.js","../node_modules/core-js-pure/es/instance/starts-with.js","../node_modules/core-js-pure/es/instance/trim.js","../node_modules/core-js-pure/es/object/assign.js","../node_modules/core-js-pure/es/object/create.js","../node_modules/core-js-pure/es/object/define-property.js","../node_modules/core-js-pure/es/object/entries.js","../node_modules/core-js-pure/es/object/get-own-property-descriptor.js","../node_modules/core-js-pure/es/object/get-prototype-of.js","../node_modules/core-js-pure/es/object/set-prototype-of.js","../node_modules/core-js-pure/es/promise/index.js","../node_modules/core-js-pure/es/reflect/construct.js","../node_modules/core-js-pure/es/reflect/get.js","../node_modules/core-js-pure/es/string/virtual/repeat.js","../node_modules/core-js-pure/es/string/virtual/starts-with.js","../node_modules/core-js-pure/es/string/virtual/trim.js","../node_modules/core-js-pure/es/symbol/index.js","../node_modules/core-js-pure/es/symbol/iterator.js","../node_modules/core-js-pure/features/get-iterator-method.js","../node_modules/core-js-pure/features/get-iterator.js","../node_modules/core-js-pure/features/is-iterable.js","../node_modules/core-js-pure/internals/a-function.js","../node_modules/core-js-pure/internals/a-possible-prototype.js","../node_modules/core-js-pure/internals/add-to-unscopables.js","../node_modules/core-js-pure/internals/an-instance.js","../node_modules/core-js-pure/internals/an-object.js","../node_modules/core-js-pure/internals/array-copy-within.js","../node_modules/core-js-pure/internals/array-fill.js","../node_modules/core-js-pure/internals/array-for-each.js","../node_modules/core-js-pure/internals/array-from.js","../node_modules/core-js-pure/internals/array-includes.js","../node_modules/core-js-pure/internals/array-iteration.js","../node_modules/core-js-pure/internals/array-method-has-species-support.js","../node_modules/core-js-pure/internals/array-method-is-strict.js","../node_modules/core-js-pure/internals/array-method-uses-to-length.js","../node_modules/core-js-pure/internals/array-species-create.js","../node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js","../node_modules/core-js-pure/internals/check-correctness-of-iteration.js","../node_modules/core-js-pure/internals/classof-raw.js","../node_modules/core-js-pure/internals/classof.js","../node_modules/core-js-pure/internals/correct-is-regexp-logic.js","../node_modules/core-js-pure/internals/correct-prototype-getter.js","../node_modules/core-js-pure/internals/create-iterator-constructor.js","../node_modules/core-js-pure/internals/create-non-enumerable-property.js","../node_modules/core-js-pure/internals/create-property-descriptor.js","../node_modules/core-js-pure/internals/create-property.js","../node_modules/core-js-pure/internals/define-iterator.js","../node_modules/core-js-pure/internals/define-well-known-symbol.js","../node_modules/core-js-pure/internals/descriptors.js","../node_modules/core-js-pure/internals/document-create-element.js","../node_modules/core-js-pure/internals/dom-iterables.js","../node_modules/core-js-pure/internals/engine-is-ios.js","../node_modules/core-js-pure/internals/engine-user-agent.js","../node_modules/core-js-pure/internals/engine-v8-version.js","../node_modules/core-js-pure/internals/entry-virtual.js","../node_modules/core-js-pure/internals/enum-bug-keys.js","../node_modules/core-js-pure/internals/export.js","../node_modules/core-js-pure/internals/fails.js","../node_modules/core-js-pure/internals/function-bind-context.js","../node_modules/core-js-pure/internals/function-bind.js","../node_modules/core-js-pure/internals/get-built-in.js","../node_modules/core-js-pure/internals/get-iterator-method.js","../node_modules/core-js-pure/internals/get-iterator.js","../node_modules/core-js-pure/internals/global.js","../node_modules/core-js-pure/internals/has.js","../node_modules/core-js-pure/internals/hidden-keys.js","../node_modules/core-js-pure/internals/host-report-errors.js","../node_modules/core-js-pure/internals/html.js","../node_modules/core-js-pure/internals/ie8-dom-define.js","../node_modules/core-js-pure/internals/indexed-object.js","../node_modules/core-js-pure/internals/inspect-source.js","../node_modules/core-js-pure/internals/internal-state.js","../node_modules/core-js-pure/internals/is-array-iterator-method.js","../node_modules/core-js-pure/internals/is-array.js","../node_modules/core-js-pure/internals/is-forced.js","../node_modules/core-js-pure/internals/is-iterable.js","../node_modules/core-js-pure/internals/is-object.js","../node_modules/core-js-pure/internals/is-pure.js","../node_modules/core-js-pure/internals/is-regexp.js","../node_modules/core-js-pure/internals/iterate.js","../node_modules/core-js-pure/internals/iterators-core.js","../node_modules/core-js-pure/internals/microtask.js","../node_modules/core-js-pure/internals/native-promise-constructor.js","../node_modules/core-js-pure/internals/native-symbol.js","../node_modules/core-js-pure/internals/native-weak-map.js","../node_modules/core-js-pure/internals/new-promise-capability.js","../node_modules/core-js-pure/internals/not-a-regexp.js","../node_modules/core-js-pure/internals/object-assign.js","../node_modules/core-js-pure/internals/object-create.js","../node_modules/core-js-pure/internals/object-define-properties.js","../node_modules/core-js-pure/internals/object-define-property.js","../node_modules/core-js-pure/internals/object-get-own-property-descriptor.js","../node_modules/core-js-pure/internals/object-get-own-property-names-external.js","../node_modules/core-js-pure/internals/object-get-own-property-names.js","../node_modules/core-js-pure/internals/object-get-own-property-symbols.js","../node_modules/core-js-pure/internals/object-get-prototype-of.js","../node_modules/core-js-pure/internals/object-keys-internal.js","../node_modules/core-js-pure/internals/object-keys.js","../node_modules/core-js-pure/internals/object-property-is-enumerable.js","../node_modules/core-js-pure/internals/object-set-prototype-of.js","../node_modules/core-js-pure/internals/object-to-array.js","../node_modules/core-js-pure/internals/object-to-string.js","../node_modules/core-js-pure/internals/perform.js","../node_modules/core-js-pure/internals/promise-resolve.js","../node_modules/core-js-pure/internals/redefine-all.js","../node_modules/core-js-pure/internals/redefine.js","../node_modules/core-js-pure/internals/require-object-coercible.js","../node_modules/core-js-pure/internals/set-global.js","../node_modules/core-js-pure/internals/set-species.js","../node_modules/core-js-pure/internals/set-to-string-tag.js","../node_modules/core-js-pure/internals/shared-key.js","../node_modules/core-js-pure/internals/shared-store.js","../node_modules/core-js-pure/internals/shared.js","../node_modules/core-js-pure/internals/species-constructor.js","../node_modules/core-js-pure/internals/string-multibyte.js","../node_modules/core-js-pure/internals/string-repeat.js","../node_modules/core-js-pure/internals/string-trim-forced.js","../node_modules/core-js-pure/internals/string-trim.js","../node_modules/core-js-pure/internals/task.js","../node_modules/core-js-pure/internals/to-absolute-index.js","../node_modules/core-js-pure/internals/to-indexed-object.js","../node_modules/core-js-pure/internals/to-integer.js","../node_modules/core-js-pure/internals/to-length.js","../node_modules/core-js-pure/internals/to-object.js","../node_modules/core-js-pure/internals/to-primitive.js","../node_modules/core-js-pure/internals/to-string-tag-support.js","../node_modules/core-js-pure/internals/uid.js","../node_modules/core-js-pure/internals/use-symbol-as-uid.js","../node_modules/core-js-pure/internals/well-known-symbol-wrapped.js","../node_modules/core-js-pure/internals/well-known-symbol.js","../node_modules/core-js-pure/internals/whitespaces.js","../node_modules/core-js-pure/modules/es.array.concat.js","../node_modules/core-js-pure/modules/es.array.copy-within.js","../node_modules/core-js-pure/modules/es.array.fill.js","../node_modules/core-js-pure/modules/es.array.for-each.js","../node_modules/core-js-pure/modules/es.array.from.js","../node_modules/core-js-pure/modules/es.array.index-of.js","../node_modules/core-js-pure/modules/es.array.is-array.js","../node_modules/core-js-pure/modules/es.array.iterator.js","../node_modules/core-js-pure/modules/es.array.slice.js","../node_modules/core-js-pure/modules/es.array.sort.js","../node_modules/core-js-pure/modules/es.array.splice.js","../node_modules/core-js-pure/modules/es.date.now.js","../node_modules/core-js-pure/modules/es.function.bind.js","../node_modules/core-js-pure/modules/es.json.to-string-tag.js","../node_modules/core-js-pure/modules/es.math.to-string-tag.js","../node_modules/core-js-pure/modules/es.object.assign.js","../node_modules/core-js-pure/modules/es.object.create.js","../node_modules/core-js-pure/modules/es.object.define-property.js","../node_modules/core-js-pure/modules/es.object.entries.js","../node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js","../node_modules/core-js-pure/modules/es.object.get-prototype-of.js","../node_modules/core-js-pure/modules/es.object.set-prototype-of.js","../node_modules/core-js-pure/modules/es.object.to-string.js","../node_modules/core-js-pure/modules/es.promise.all-settled.js","../node_modules/core-js-pure/modules/es.promise.finally.js","../node_modules/core-js-pure/modules/es.promise.js","../node_modules/core-js-pure/modules/es.reflect.construct.js","../node_modules/core-js-pure/modules/es.reflect.get.js","../node_modules/core-js-pure/modules/es.string.iterator.js","../node_modules/core-js-pure/modules/es.string.repeat.js","../node_modules/core-js-pure/modules/es.string.starts-with.js","../node_modules/core-js-pure/modules/es.string.trim.js","../node_modules/core-js-pure/modules/es.symbol.async-iterator.js","../node_modules/core-js-pure/modules/es.symbol.has-instance.js","../node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js","../node_modules/core-js-pure/modules/es.symbol.iterator.js","../node_modules/core-js-pure/modules/es.symbol.js","../node_modules/core-js-pure/modules/es.symbol.match-all.js","../node_modules/core-js-pure/modules/es.symbol.match.js","../node_modules/core-js-pure/modules/es.symbol.replace.js","../node_modules/core-js-pure/modules/es.symbol.search.js","../node_modules/core-js-pure/modules/es.symbol.species.js","../node_modules/core-js-pure/modules/es.symbol.split.js","../node_modules/core-js-pure/modules/es.symbol.to-primitive.js","../node_modules/core-js-pure/modules/es.symbol.to-string-tag.js","../node_modules/core-js-pure/modules/es.symbol.unscopables.js","../node_modules/core-js-pure/modules/web.dom-collections.iterator.js","../node_modules/core-js-pure/modules/web.immediate.js","../node_modules/core-js-pure/modules/web.timers.js","../node_modules/core-js-pure/stable/array/from.js","../node_modules/core-js-pure/stable/array/is-array.js","../node_modules/core-js-pure/stable/array/virtual/for-each.js","../node_modules/core-js-pure/stable/date/now.js","../node_modules/core-js-pure/stable/instance/bind.js","../node_modules/core-js-pure/stable/instance/concat.js","../node_modules/core-js-pure/stable/instance/copy-within.js","../node_modules/core-js-pure/stable/instance/fill.js","../node_modules/core-js-pure/stable/instance/for-each.js","../node_modules/core-js-pure/stable/instance/index-of.js","../node_modules/core-js-pure/stable/instance/repeat.js","../node_modules/core-js-pure/stable/instance/slice.js","../node_modules/core-js-pure/stable/instance/sort.js","../node_modules/core-js-pure/stable/instance/splice.js","../node_modules/core-js-pure/stable/instance/starts-with.js","../node_modules/core-js-pure/stable/instance/trim.js","../node_modules/core-js-pure/stable/object/assign.js","../node_modules/core-js-pure/stable/object/create.js","../node_modules/core-js-pure/stable/object/define-property.js","../node_modules/core-js-pure/stable/object/entries.js","../node_modules/core-js-pure/stable/object/get-own-property-descriptor.js","../node_modules/core-js-pure/stable/object/get-prototype-of.js","../node_modules/core-js-pure/stable/object/set-prototype-of.js","../node_modules/core-js-pure/stable/promise/index.js","../node_modules/core-js-pure/stable/reflect/construct.js","../node_modules/core-js-pure/stable/reflect/get.js","../node_modules/core-js-pure/stable/set-immediate.js","../node_modules/core-js-pure/stable/set-interval.js","../node_modules/core-js-pure/stable/set-timeout.js","../node_modules/core-js-pure/stable/symbol/index.js","../node_modules/core-js-pure/stable/symbol/iterator.js","../node_modules/core-js/internals/add-to-unscopables.js","../node_modules/core-js/internals/advance-string-index.js","../node_modules/core-js/internals/array-buffer-native.js","../node_modules/core-js/internals/array-buffer-view-core.js","../node_modules/core-js/internals/array-buffer.js","../node_modules/core-js/internals/array-last-index-of.js","../node_modules/core-js/internals/array-reduce.js","../node_modules/core-js/internals/copy-constructor-properties.js","../node_modules/core-js/internals/export.js","../node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../node_modules/core-js/internals/global.js","../node_modules/core-js/internals/ieee754.js","../node_modules/core-js/internals/inherit-if-required.js","../node_modules/core-js/internals/is-pure.js","../node_modules/core-js/internals/own-keys.js","../node_modules/core-js/internals/path.js","../node_modules/core-js/internals/redefine-all.js","../node_modules/core-js/internals/redefine.js","../node_modules/core-js/internals/regexp-exec-abstract.js","../node_modules/core-js/internals/regexp-exec.js","../node_modules/core-js/internals/regexp-flags.js","../node_modules/core-js/internals/regexp-sticky-helpers.js","../node_modules/core-js/internals/set-to-string-tag.js","../node_modules/core-js/internals/shared.js","../node_modules/core-js/internals/this-number-value.js","../node_modules/core-js/internals/to-index.js","../node_modules/core-js/internals/to-offset.js","../node_modules/core-js/internals/to-positive-integer.js","../node_modules/core-js/internals/typed-array-constructor.js","../node_modules/core-js/internals/typed-array-constructors-require-wrappers.js","../node_modules/core-js/internals/typed-array-from.js","../node_modules/core-js/modules/es.array.join.js","../node_modules/core-js/modules/es.function.name.js","../node_modules/core-js/modules/es.number.to-fixed.js","../node_modules/core-js/modules/es.object.to-string.js","../node_modules/core-js/modules/es.regexp.exec.js","../node_modules/core-js/modules/es.regexp.to-string.js","../node_modules/core-js/modules/es.string.match.js","../node_modules/core-js/modules/es.string.replace.js","../node_modules/core-js/modules/es.string.split.js","../node_modules/core-js/modules/es.symbol.description.js","../node_modules/core-js/modules/es.typed-array.copy-within.js","../node_modules/core-js/modules/es.typed-array.every.js","../node_modules/core-js/modules/es.typed-array.fill.js","../node_modules/core-js/modules/es.typed-array.filter.js","../node_modules/core-js/modules/es.typed-array.find-index.js","../node_modules/core-js/modules/es.typed-array.find.js","../node_modules/core-js/modules/es.typed-array.float32-array.js","../node_modules/core-js/modules/es.typed-array.for-each.js","../node_modules/core-js/modules/es.typed-array.includes.js","../node_modules/core-js/modules/es.typed-array.index-of.js","../node_modules/core-js/modules/es.typed-array.iterator.js","../node_modules/core-js/modules/es.typed-array.join.js","../node_modules/core-js/modules/es.typed-array.last-index-of.js","../node_modules/core-js/modules/es.typed-array.map.js","../node_modules/core-js/modules/es.typed-array.reduce-right.js","../node_modules/core-js/modules/es.typed-array.reduce.js","../node_modules/core-js/modules/es.typed-array.reverse.js","../node_modules/core-js/modules/es.typed-array.set.js","../node_modules/core-js/modules/es.typed-array.slice.js","../node_modules/core-js/modules/es.typed-array.some.js","../node_modules/core-js/modules/es.typed-array.sort.js","../node_modules/core-js/modules/es.typed-array.subarray.js","../node_modules/core-js/modules/es.typed-array.to-locale-string.js","../node_modules/core-js/modules/es.typed-array.to-string.js","../node_modules/core-js/modules/es.typed-array.uint32-array.js","../node_modules/core-js/modules/web.dom-collections.iterator.js","../node_modules/regenerator-runtime/runtime.js","NyaP.js","NyaPCommon.js","langs.json"],"names":[],"mappings":"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K;AADN;AAEA;;AACD,SAAA,KAAA;AACA;;AAGc,SAAA,IAAA,CAAA,YAAA,EAA2B;AACzC,EAAA,YAAY,CAAZ,SAAA,CAAA,aAAA,EAAA,WAAA;AACA;;AAAA;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnlBF;;;;;;IAIM,kB;AAEL,WAAA,kBAAA,CAAA,KAAA,EAAkB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EADR,KACQ,CAAA;;AACjB,SAAA,KAAA,GAAA,KAAA;AACA;;;;2BACK,C,EAAE;;;;2BACF,C,EAAE;;;;4BACD,C,EAAE;;;;2BACH,C,EAAE;;;;4BACD,C,EAAE;;;;6BACD,C,EAAE;;;;6BACF,C,EAAE;;;;6BACF,C,EAAE;;;;8BACD,C,EAAE;;;;iCACC,C,EAAE;;;;8CACW,CAAE;;;;;;eAGb,kB;;;;ACtBfpfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AClOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzvtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"NyaP.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nexport {NyaPlayerCore} from './src/core.js'\r\nexport {DomTools} from './src/domTools.js'\r\nexport {i18n} from './src/i18n.js'\r\nexport {Utils} from './src/utils.js'","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nfunction Object2HTML(obj,func){\r\n\tlet ele,o={},a=[];\r\n\tif(obj===null || typeof obj !=='object')ele=document.createTextNode(String(obj));//text node\r\n\telse if(obj instanceof Node)ele=obj;\r\n\telse{\r\n\t\tif(obj===undefined)throw(new TypeError(`'undefined' received, object or string expect.`));\r\n\t\tif(!obj._)obj._='div';\r\n\t\tele||(ele=document.createElement(obj._));\r\n\t\t//attributes\r\n\t\tfor(let [attr,value] of Object.entries(obj.attr||obj.a||o))\r\n\t\t\tele.setAttribute(attr,value);\r\n\t\t//properties\r\n\t\tfor(let [prop,value] of Object.entries(obj.prop||obj.p||o))\r\n\t\t\tele[prop]=value;\r\n\t\t//events\r\n\t\tfor(let [e,cb] of Object.entries(obj.event||obj.e||o))\r\n\t\t\tele.addEventListener(e,cb);\r\n\t\t//childNodes\r\n\t\tfor(let c of (obj.child||obj.c||a)){\r\n\t\t\tlet e=Object2HTML(c,func);\r\n\t\t\t(e instanceof Node)&&ele.appendChild(e);\r\n\t\t}\r\n\t}\r\n\tfunc&&func(ele);\r\n\treturn ele;\r\n}\r\n\r\nexport default Object2HTML;\r\nexport {Object2HTML}","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\nimport {i18n} from './i18n.js';\r\nimport {DomTools} from './domTools.js';\r\nimport {Utils} from './utils.js';\r\n\r\n//default options\r\nconst NyaPCoreOptions={\r\n\t//for video\r\n\tmuted:false,//set video muted\r\n\tvolume:1,//set volume (0 ~ 1) \r\n\tloop:false,//set video loop\r\n\tvideoSrc:'',\r\n\tplugins:[],//NyaP dynamic plugins list\r\n}\r\n\r\n\r\nclass NyaPEventEmitter{\r\n\tconstructor(){\r\n\t\tthis._events={};\r\n\t}\r\n\temit(e,...args){\r\n\t\tthis._resolve(e,...args);\r\n\t\tthis.globalListener(e,...args);\r\n\t\treturn this;\r\n\t}\r\n\t_resolve(e,...args){\r\n\t\tif(e in this._events){\r\n\t\t\tconst hs=this._events[e];\r\n\t\t\ttry{\r\n\t\t\t\tfor(let h of hs){\r\n\t\t\t\t\tif(h.apply(this,args)===false)return;\r\n\t\t\t\t}\r\n\t\t\t}catch(err){\r\n\t\t\t\tconsole.error(`NyaP event callback error for \"${e}\"`,err);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\taddEventListener(...args){\r\n\t\treturn this.on(...args);\r\n\t}\r\n\ton(e,handle,top=false){\r\n\t\tif(!(handle instanceof Function))return this;\r\n\t\tif(!(e in this._events))this._events[e]=[];\r\n\t\tif(top)\r\n\t\t\tthis._events[e].unshift(handle);\r\n\t\telse\r\n\t\t\tthis._events[e].push(handle);\r\n\t\treturn this;\r\n\t}\r\n\tremoveEvent(e,handle){\r\n\t\tif(!(e in this._events))return this;\r\n\t\tif(arguments.length===1){delete this._events[e];return this;}\r\n\t\tlet ind;\r\n\t\tif(ind=(this._events[e].indexOf(handle))>=0)this._events[e].splice(ind,1);\r\n\t\tif(this._events[e].length===0)delete this._events[e];\r\n\t\treturn this;\r\n\t}\r\n\tglobalListener(name,...args){}//all events will be passed to this function\r\n}\r\n\r\nclass NyaPlayerCore extends NyaPEventEmitter{\r\n\tstatic i18n=i18n;\r\n\tstatic Utils=Utils;\r\n\tstatic DomTools=DomTools;\r\n\tstatic NyaPCoreOptions=NyaPCoreOptions;\r\n\tstats=[];//stats of the player. Item: [[time,name,promise or result],...]\r\n\tdebugs=[];//debug messages. Item: [[time,...msgs],...]\r\n\tplugins={};//loaded core plugins. name=>plugin object\r\n\ti18n=new i18n();//core i18n instanse\r\n\t_={//for private variables, do not change vars here\r\n\t\tvideoSrc:'',\r\n\t\tvideo:DomTools.Object2HTML({_:'video',attr:{id:'main_video',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'webkit-playsinline':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'playsinline':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-playsinline':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x-webkit-airplay':'allow',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'controlsList':\"nodownload\" ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-video-player-type':'h5',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'preload':'auto',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'poster':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}),\r\n\t\turlResolvers:[],//functions to resolve urls. Item: [priority,func]\r\n\t};\r\n\tget video(){return this._.video;}//get video element\r\n\tget videoSize(){return [this.video.videoWidth,this.video.videoHeight];}\r\n\tget videoSrc(){return this._.videoSrc;}//get current video src\r\n\r\n\tconstructor(opt){\r\n\t\tsuper();\r\n\t\tlet _=this.i18n;\r\n\t\t{\r\n\t\t\tlet done=this.stat('loading_core');\r\n\t\t\tthis.on('coreLoad',()=>done());\r\n\t\t\tthis.on('coreLoadError',e=>done(e));\r\n\t\t}\r\n\t\tthis.debug('Languages:'+this.i18n.langsArr.join(','));\r\n\r\n\t\topt=this.opt=Utils.deepAssign({},NyaPCoreOptions,opt);\r\n\t\t//add events\r\n\t\t{\r\n\t\t\t//video:video_loopChange\r\n\t\t\tlet LoopDesc=Object.getOwnPropertyDescriptor(HTMLMediaElement.prototype,'loop');\r\n\t\t\tObject.defineProperty(this.video,'loop',{\r\n\t\t\t\tget:LoopDesc.get,\r\n\t\t\t\tset:bool=>{\r\n\t\t\t\t\tif(bool===this.video.loop)return;\r\n\t\t\t\t\tthis.emit('video_loopChange',bool);\r\n\t\t\t\t\tLoopDesc.set.call(this.video,bool);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\tDomTools.addEvents(this.video,{\r\n\t\t\tloadedmetadata:e=>this.debug('Video loadded'),\r\n\t\t\terror:e=>this.debug('Video error:',e),\r\n\t\t\tloadstart:e=>{this.stat('loading_video')},\r\n\t\t});\r\n\t\t\r\n\t\t//define default src resolver\r\n\t\tthis.addURLResolver((url)=>{\r\n\t\t\treturn Promise.resolve(url);//return the url\r\n\t\t},999);//most lower priority\r\n\r\n\t\t/*opts*/\r\n\t\trequestAnimationFrame(()=>{//active after events are attached\r\n\t\t\t['muted','volume','loop'].forEach(o=>{//dont change the order\r\n\t\t\t\t(opt[o]!==undefined)&&(this.video[o]=opt[o]);\r\n\t\t\t});\r\n\t\t\tif(opt.videoSrc)this.setVideoSrc(opt.videoSrc);//videoSrc\r\n\t\t});\r\n\r\n\r\n\t\tif(Array.isArray(opt.plugins)){//load plugins,opt.plugins is a list of url for plugins\r\n\t\t\tlet done=this.stat('loading_plugin');\r\n\t\t\tlet pluginList=[];\r\n\t\t\tfor(let url of opt.plugins){\r\n\t\t\t\tpluginList.push(this.loadPlugin(url));\r\n\t\t\t}\r\n\t\t\tPromise.all(pluginList).then(()=>{\r\n\t\t\t\tdone();\r\n\t\t\t\tthis.emit('coreLoad');\r\n\t\t\t}).catch(e=>{\r\n\t\t\t\tdone(e);\r\n\t\t\t\tthis.debug('coreLoadError',e);\r\n\t\t\t\tthis.emit('coreLoadError',e);\r\n\t\t\t})\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tthis.emit('coreLoad');\r\n\t}\r\n\tstat(statusName,cb){\r\n\t\tlet doneFunc,failFunc;\r\n\t\tlet resultFunc=r=>{\r\n\t\t\tif(r instanceof Error){\r\n\t\t\t\tthis.debug(r);\r\n\t\t\t\tfailFunc(r.message);\r\n\t\t\t}else{\r\n\t\t\t\tdoneFunc(r);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet p=new Promise((ok,no)=>{\r\n\t\t\tdoneFunc=ok;\r\n\t\t\tfailFunc=no;\r\n\t\t});\r\n\t\tp.catch(e=>{\r\n\t\t\tthis.debug(`fail stat:${e}`);\r\n\t\t});\r\n\t\tlet s=[Date.now(),statusName,p,doneFunc,failFunc];\r\n\t\tthis.stats.push(s);//add to core debug log\r\n\t\tif(cb){\r\n\t\t\t(async ()=>{\r\n\t\t\t\ttry{\r\n\t\t\t\t\tresultFunc(await cb());\r\n\t\t\t\t}catch(err){\r\n\t\t\t\t\tresultFunc(err);\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t}\r\n\t\tsetTimeout(()=>this.emit('stat',s),0);\r\n\t\treturn resultFunc;\r\n\t}\r\n\tstatResult(statusName,result){\r\n\t\tfor(let i=this.stats.length,s;i--;){\r\n\t\t\ts=this.stats[i];\r\n\t\t\tif(s[1]===statusName){\r\n\t\t\t\tif(result instanceof Error){\r\n\t\t\t\t\ts[4](result.message);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ts[3](result);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\taddURLResolver(func,priority=0){\r\n\t\tthis._.urlResolvers.push([priority,func]);\r\n\t\tthis._.urlResolvers.sort((a,b)=>a[0]-b[0]);//sort by priority\r\n\t}\r\n\tasync resolveURL(url){//resolve the url by url resolvers\r\n\t\tfor(let n of this._.urlResolvers){\r\n\t\t\tlet func=n[1];\r\n\t\t\tlet r=await func(url);\r\n\t\t\tif(r===false){\r\n\t\t\t\tthis.debug(`Stop resolving url: ${url}`);\r\n\t\t\t\treturn false;//stop resolving the url\r\n\t\t\t}\r\n\t\t\tif(r){\r\n\t\t\t\tthis.debug('URL resolver: ['+url+'] => ['+r+']');\r\n\t\t\t\treturn r;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Promise.reject('No url resolver hit');\r\n\t}\r\n\tasync setVideoSrc(s){\r\n\t\ts=s.trim();\r\n\t\tlet url=await this.resolveURL(s);\r\n\t\tif(url===false)return;//won't change the url if false returned\r\n\t\tthis._.videoSrc=s;\r\n\t\tthis.emit('srcChanged',s);\r\n\t\tthis.video.src=url;\r\n\t\treturn;\r\n\t}\r\n\tplayToggle(Switch=this.video.paused){\r\n\t\treturn this.video[Switch?'play':'pause']();\r\n\t}\r\n\tloadPlugin(url,name){//load js plugins for NyaP\r\n\t\tif(name&&this.plugins[name]){//check if exists\r\n\t\t\tthis.debug(`Plugin already loaded: ${name}`);\r\n\t\t\treturn this.plugins[name];\r\n\t\t}\r\n\t\tlet p=fetch(url)\r\n\t\t.then(res=>res.text())\r\n\t\t.then(async script=>{\r\n\t\t\tscript=script.trim();\r\n\t\t\tlet plugin=eval(script);\r\n\t\t\tif((typeof plugin.name!=='string')||!plugin.name)\r\n\t\t\t\tthrow(new TypeError('Invalid plugin name'));\r\n\t\t\tif(this.plugins[plugin.name]){//check if exists\r\n\t\t\t\tthis.debug(`Plugin already loaded: ${plugin.name}`);\r\n\t\t\t\treturn plugin;\r\n\t\t\t}\r\n\t\t\tif(typeof plugin.init==='function')\r\n\t\t\t\tawait plugin.init(this);//init the plugin\r\n\t\t\tthis.plugins[plugin.name]=plugin;\r\n\t\t\tthis.debug('Plugin loaded',plugin.name);\r\n\t\t\treturn plugin;\r\n\t\t});\r\n\t\tp.catch(e=>{\r\n\t\t\tthis.debug('Plugin loading error:',e);\r\n\t\t\t// this.emit('pluginLoadError',e);\r\n\t\t});\r\n\t\treturn p;\r\n\t}\r\n\tlog(content,type='log',...styles){//log to console\r\n\t\tconsole[type](`%c NyaP %c${content}`,\"background:#e0e0e0;padding:.2em\",\"background:unset\",...styles);\r\n\t}\r\n\tdebug(...msg){//debug messages\r\n\t\tconsole.debug('NyaP[debug]',...msg);\r\n\t\tmsg.unshift(Date.now());\r\n\t\tthis.debugs.push(msg);\r\n\t\tthis.emit('debug',msg);\r\n\t}\r\n}\r\n\r\nexport {\r\n\tNyaPlayerCore,\r\n}\r\n","import {ResizeObserver as ResizeObserverPolyfill} from '@juggle/resize-observer';\r\nimport {Object2HTML as O2H} from '../lib/Object2HTML.js';\r\nimport {Utils} from './utils.js';\r\n\r\nexport class DomTools{\r\n\tstatic addEvents(target,events){\r\n\t\tif(!Array.isArray(target))target=[target];\r\n\t\ttarget.forEach(function(t){\r\n\t\t\tif(!Utils.isObject(t.__NyaPEvents__)){\r\n\t\t\t\tt.__NyaPEvents__=[];\r\n\t\t\t}\r\n\t\t\tfor(let e in events)\r\n\t\t\t\te.split(/\\,/g).forEach(function(e2){\r\n\t\t\t\t\tt.addEventListener(e2,events[e]);\r\n\t\t\t\t\tt.__NyaPEvents__.push([e2,events[e]]);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n    static setAttrs(ele,obj){//set multi attrs to a Element\r\n        for(let a in obj)\r\n            ele.setAttribute(a,obj[a]);\r\n        return ele;\r\n    }\r\n\tstatic fullscreenElement(){\r\n\t\tconst d=document;\r\n\t\treturn d.webkitFullscreenElement\r\n\t\t\t\t||d.msFullscreenElement\r\n\t\t\t\t||d.mozFullScreenElement\r\n\t\t\t\t||d.fullscreenElement;\r\n\t}\r\n\tstatic requestFullscreen(d=document){\r\n\t\ttry{\r\n\t\t\treturn (d.requestFullscreen||\r\n\t\t\td.msRequestFullscreen||\r\n\t\t\td.mozRequestFullScreen||\r\n\t\t\td.webkitRequestFullScreen||\r\n\t\t\td.webkitEnterFullScreen)\r\n\t\t\t.call(d);\r\n\t\t}catch(e){\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t}\r\n\tstatic exitFullscreen(d=document){\r\n\t\ttry{\r\n\t\t\treturn (d.exitFullscreen||\r\n\t\t\t\td.msExitFullscreen||\r\n\t\t\t\td.mozCancelFullScreen||\r\n\t\t\t\td.webkitExitFullScreen||\r\n\t\t\t\td.webkitCancelFullScreen).call(d);\r\n\t\t}catch(e){\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t}\r\n\tstatic isFullscreen(d=document){\r\n\t\treturn !!(d.fullscreen || d.mozFullScreen || d.webkitIsFullScreen || d.msFullscreenElement || d.webkitDisplayingFullscreen);\r\n\t}\r\n\tstatic Object2HTML(...args){\r\n\t\treturn O2H(...args);\r\n\t}\r\n\tstatic resizeEvent={\r\n\t\tresizeObserverInstance:null,\r\n\t\tobserve(dom){\r\n\t\t\tif(!this.resizeObserverInstance){\r\n\t\t\t\tlet ResizeObserver=window.ResizeObserver;\r\n\t\t\t\tif(typeof  ResizeObserver!== 'function'){\r\n\t\t\t\t\tResizeObserver=ResizeObserverPolyfill;\r\n\t\t\t\t}\r\n\t\t\t\tthis.resizeObserverInstance=new ResizeObserver(entries => {\r\n\t\t\t\t\tfor (let entry of entries) {\r\n\t\t\t\t\t\tlet el = entry.target;\r\n\t\t\t\t\t\tlet e=new Event('resize',{bubbles:false,cancelable:true});\r\n\t\t\t\t\t\te.contentRect=entry.contentRect;\r\n\t\t\t\t\t\tel.dispatchEvent(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.resizeObserverInstance.observe(dom);\r\n\t\t},\r\n\t\tunobserve(dom){\r\n\t\t\tif(!this.resizeObserverInstance)\r\n\t\t\t\tthrow(new Error('resizeObserver not initialized'));\r\n\t\t\tthis.resizeObserverInstance.unobserve(dom);\r\n\t\t},\r\n\t}\r\n}\r\n\r\n ","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n\r\n\r\n//polyfill\r\nif(!navigator.languages){\r\n\tnavigator.languages=[navigator.language||navigator.browserLanguage];\r\n}\r\n\r\n\r\nclass i18n{\r\n\t/*\r\n\t*@param{object}langs Language text object indexed by language code\r\n\t*@param{array}langsArr Language priority array\r\n\t*/\r\n\tconstructor(langs={},langsArr=[...navigator.languages]){\r\n\t\tthis.langs=langs;//defines texts\r\n\t\tthis.langsArr=langsArr;\r\n\t\tthis.langsArr.push('zh-CN');//add zh-CN as default language\r\n\t}\r\n\tlangsArr=[];//language priority array\r\n\t_(str,...args){//translate\r\n\t\tlet s=this.findTranslation(str);\r\n\t\targs.length&&args.forEach((arg,ind)=>{s=s.replace(`$${ind}`,arg)});//fill args in the string\r\n\t\treturn s;\r\n\t}\r\n\tfindTranslation(text){\r\n\t\tfor(let lang of this.langsArr){//find by language priority\r\n\t\t\tif((lang in this.langs) && (text in this.langs[lang])){\r\n\t\t\t\treturn this.langs[lang][text];\r\n\t\t\t}\r\n\t\t\t//fallback to other same main code\r\n\t\t\tlet code=lang.match(/^\\w+/)[0];\r\n\t\t\tfor(let c in this.langs){\r\n\t\t\t\tif(c.startsWith(code) && (text in this.langs[c])){\r\n\t\t\t\t\treturn this.langs[c][text];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\tadd(langCode,texts){\r\n\t\tif(!this.langs[langCode])\r\n\t\t\tthis.langs[langCode]={};\r\n\t\tObject.assign(this.langs[langCode],texts);\r\n\t}\r\n}\r\n\r\nexport {i18n};","\r\nfunction padTime(n){//pad number to 2 chars\r\n    return n>9&&n||`0${n}`;\r\n}\r\n\r\nexport class Utils{\r\n    static clamp(num,min,max){\r\n        return num<min?min:(num>max?max:num);\r\n    }\r\n    static isObject(obj){\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    }\r\n    static deepAssign(target,...args){\r\n        //本函数不处理循环引用\r\n        let obj=args.shift();\r\n        if(target===null || target===undefined || typeof target !== 'object'){\r\n            throw(new TypeError('target should be an object'));\r\n        }\r\n        if(!Utils.isObject(obj)){//obj不是对象则跳过\r\n            if(args.length===0)return target;//没有参数了就返回结果\r\n            return Utils.deepAssign(target,...args);//提取一个参数出来继续\r\n        }\r\n        for(let i in obj){//遍历obj\r\n            if(Utils.isObject(obj[i])){//是个子对象\r\n                if(!Utils.isObject(target[i]))target[i]={};\r\n                Utils.deepAssign(target[i],obj[i]);//递归\r\n            }else{\r\n                target[i]=obj[i];//直接赋值\r\n            }\r\n        }\r\n        if(args.length===0)return target;\r\n        return Utils.deepAssign(target,...args);\r\n    }\r\n    static formatTime(sec,total){\r\n        if(total==undefined)total=sec;\r\n        let r,s=sec|0,h=(s/3600)|0;\r\n        if(total>=3600)s=s%3600;\r\n        r=[padTime((s/60)|0),padTime(s%60)];\r\n        (total>=3600)&&r.unshift(h);\r\n        return r.join(':');\r\n    }\r\n    static rand(min, max) {\r\n        return (min+Math.random()*(max-min)+0.5)|0;\r\n    }\r\n    static toArray(obj){\r\n        if(obj instanceof Array)return obj.slice();\r\n        if(obj.length!==undefined)\r\n            return Array.prototype.slice.call(obj);\r\n        return [...obj];\r\n    }\r\n    static animationFrameLoop(cb){\r\n        requestAnimationFrame(()=>{\r\n           if(cb()===false)return;;\r\n           Utils.animationFrameLoop(cb);\r\n        });\r\n    }\r\n    static requestIdleCallback=window.requestIdleCallback?.bind(window)||setImmediate;\r\n}\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\nimport {Utils} from '../NyaP-Core/index.js';//load DomTools from NyaP-Core project\r\nimport {DanmakuFrame} from './src/danmaku-frame.js'\r\nimport initTextDanmaku from './src/danmaku-text/danmaku-text.js'\r\ninitTextDanmaku(DanmakuFrame);//init TextDanmaku mod\r\n\r\nconst colorChars='0123456789abcdef';\r\nconst danmakuProp=['color','text','size','mode','time'];\r\nclass NyaPDanmaku extends DanmakuFrame{\r\n\tget opt(){return this.core.opt.danmaku};\r\n\tconstructor(core){\r\n\t\tsuper(core,core.opt.danmaku);\r\n\r\n\t\t//init mods\r\n\t\tfor(let mod in DanmakuFrame.availableModules){\r\n\t\t\tif(this.opt.modules[mod]?.enable===true)\r\n\t\t\t\tthis.initModule(mod);\r\n\t\t\t\tthis.enable(mod);\r\n\t\t}\r\n\r\n\t\tthis.setMedia(core.video);\r\n\t}\r\n\ttoggle(name,bool){\r\n\t\tif(typeof name==='boolean' || name==undefined){//danmaku frame switch mode\r\n\t\t\tbool=(name!=undefined)?name:!this.enabled;\r\n\t\t\tthis[bool?'enable':'disable']();\r\n\t\t\treturn bool;\r\n\t\t}\r\n\t\ttry{//module switch mode\r\n\t\t\tif(bool==undefined)bool=!this.module(name).enabled;\r\n\t\t\tthis[bool?'enable':'disable'](name);\r\n\t\t\tthis.core.emit('danmakuModuleToggle',name,this.module(name)?.enabled);\r\n\t\t}catch(e){\r\n\t\t\tthis.core.log('','error',e);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tmodule(name){\r\n\t\treturn super.modules[name];\r\n\t}\r\n\tsend(obj,callback){\r\n\t\tfor(let i of danmakuProp)\r\n\t\t\tif((i in obj)===false)return false;\r\n\t\tif((obj.text||'').match(/^\\s*$/))return false;\r\n\t\tobj.color=this.isVaildColor(obj.color);\r\n\t\tif(obj.color){\r\n\t\t\tobj.color=obj.color.replace(/\\$/g,()=>{\r\n\t\t\t\treturn colorChars[Utils.clamp((16*Math.random())|0,0,15)];\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tobj.color=null;\r\n\t\t}\r\n\t\tif(this.opt.send instanceof Function){\r\n\t\t\tthis.opt.send(obj,callback||(()=>{}));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tisVaildColor(co){\r\n\t\tif(typeof co !== 'string')return false;\r\n\t\treturn (co=co.match(/^\\#?(([\\da-f\\$]{3}){1,2})$/i))?co[1]:false;\r\n\t}\r\n}\r\n\r\nexport default NyaPDanmaku;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\n(function(f){\r\n\tif (typeof define === \"function\" && define.amd) {\r\n\t    define(f);\r\n\t}else if (typeof exports === \"object\") {\r\n\t    module.exports = f();\r\n\t}else {\r\n\t    (0,eval)('this').Mat = f();\r\n\t}\r\n})(function(){\r\nconst global= (0,eval)('this');\r\nconst TypedArray=global.Float32Array&&global.Float32Array.prototype;\r\n\r\nfunction createClass(Constructor){\r\n\tclass Matrix{\r\n\t\tconstructor(l,c,fill=0){\r\n\t\t\tthis.array=new Constructor(l*c);\r\n\t\t\tObject.defineProperty(this.array,'row',{value:l});\r\n\t\t\tObject.defineProperty(this.array,'column',{value:c});\r\n\t\t\tif(arguments.length==3){\r\n\t\t\t\tif(Matrix._instanceofTypedArray&&(fill===0)){}\r\n\t\t\t\telse if(typeof fill === 'number'){\r\n\t\t\t\t\tthis.fill(fill);\r\n\t\t\t\t}else if(fill.length){\r\n\t\t\t\t\tthis.set(fill);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tget length(){return this.array.length;}\r\n\t\tget row(){return this.array.row;}\r\n\t\tget column(){return this.array.column;}\r\n\t\tleftMultiply(m){\r\n\t\t\treturn this.set(Matrix.multiply(m,this,new Matrix(m.row,this.column)));\r\n\t\t}\r\n\t\trightMultiply(m){\r\n\t\t\treturn this.set(Matrix.multiply(this,m,new Matrix(this.row,m,column)));\r\n\t\t}\r\n\t\tfill(n){\r\n\t\t\targuments.length||(n=0);\r\n\t\t\tfor(let i=this.length;i--;)this.array[i]=n;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tset(arr,offset){\r\n\t\t\toffset||(offset=0);\r\n\t\t\t(arr instanceof Matrix)&&(arr=arr.array);\r\n\t\t\tfor(let i=(arr.length+offset)<=this.length?arr.length:(this.length-offset);i--;)\r\n\t\t\t\tthis.array[offset+i]=arr[i];\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tput(m,row,column){\r\n\t\t\tMatrix.put(this,m,row||0,column||0);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\trotate2d(t){\r\n\t\t\treturn this.set(Matrix.rotate2d(this,t,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\ttranslate2d(x,y){\r\n\t\t\treturn this.set(Matrix.translate2d(this,x,y,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\tscale2d(x,y){\r\n\t\t\treturn this.set(Matrix.scale2d(this,x,y,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\trotate3d(tx,ty,tz){\r\n\t\t\treturn this.set(Matrix.rotate3d(this,tx,ty,tz,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\tscale3d(x,y,z){\r\n\t\t\treturn this.set(Matrix.scale3d(this,x,y,z,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\ttranslate3d(x,y,z){\r\n\t\t\treturn this.set(Matrix.translate3d(this,x,y,z,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateX(t){\r\n\t\t\treturn this.set(Matrix.rotateX(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateY(t){\r\n\t\t\treturn this.set(Matrix.rotateY(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateZ(t){\r\n\t\t\treturn this.set(Matrix.rotateZ(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\tclone(){\r\n\t\t\treturn new Matrix(this.row,this.column,this);\r\n\t\t}\r\n\t\ttoString(){\r\n\t\t\tif(this.length === 0)return '';\r\n\t\t\tfor(var i=0,lines=[],tmp=[];i<this.length;i++){\r\n\t\t\t\tif(i && (i%this.column === 0)){\r\n\t\t\t\t\tlines.push(tmp.join('\\t'));\r\n\t\t\t\t\ttmp.length=0;\r\n\t\t\t\t}\r\n\t\t\t\ttmp.push(this.array[i]||0);\r\n\t\t\t}\r\n\t\t\tlines.push(tmp.join('\t'));\r\n\t\t\treturn lines.join('\\n');\r\n\t\t}\r\n\r\n\t\t//static methods\r\n\t\tstatic Identity(n){//return a new Identity Matrix\r\n\t\t\tlet m=new Matrix(n,n,0);\r\n\t\t\tfor(let i=n;i--;)m.array[i*n+i]=1;\r\n\t\t\treturn m;\r\n\t\t}\r\n\t\tstatic Perspective(fovy,aspect,znear,zfar,result){\r\n\t\t\tvar y1=znear*Math.tan(fovy*Math.PI/360.0),\r\n\t\t\t\tx1=y1*aspect,\r\n\t\t\t\tm=result||new Matrix(4,4,0),\r\n\t\t\t\tarr=m.array;\r\n\r\n\t\t\tarr[0]=2*znear/(x1+x1);\r\n\t\t\tarr[5]=2*znear/(y1+y1);\r\n\t\t\tarr[10]=-(zfar+znear)/(zfar-znear);\r\n\t\t\tarr[14]=-2*zfar*znear/(zfar-znear);\r\n\t\t\tarr[11]=-1;\r\n\t\t    if(result)arr[1]=arr[2]=arr[3]=arr[4]=arr[6]=arr[7]=arr[8]=arr[9]=arr[12]=arr[13]=arr[15]=0;\r\n\t\t    return m;\r\n\t\t}\r\n\t\tstatic multiply(a,b,result){\r\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\r\n\t\t\tlet row=a.row,column=Math.min(a.column,b.column),r=result||new Matrix(row,column),c,i,ind;\r\n\t\t\tfor(let l=row;l--;){\r\n\t\t\t\tfor(c=column;c--;){\r\n\t\t\t\t\tr.array[ind=(l*r.column+c)]=0;\r\n\t\t\t\t\tfor(i=a.column;i--;){\r\n\t\t\t\t\t\tr.array[ind]+=(a.array[l*a.column+i]*b.array[c+i*b.column]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic multiplyString(a,b,array,ignoreZero=true){//work out the equation for every elements,only for debug and only works with Array matrixes\r\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\r\n\t\t\tvar r=array||new Matrix(a.row,b.column),l,c,i,ind;\r\n\t\t\tfor(l=a.row;l--;){\r\n\t\t\t\tfor(c=b.column;c--;){\r\n\t\t\t\t\tr.array[ind=(l*b.column+c)]='';\r\n\t\t\t\t\tfor(i=0;i<a.column;i++){\r\n\t\t\t\t\t\tif(ignoreZero && (a.array[l*a.column+i]==0 ||b.array[c+i*b.column]==0))continue;\r\n\t\t\t\t\t\tr.array[ind]+=(((i&&r.array[ind])?'+':'')+'('+a.array[l*a.column+i]+')*('+b.array[c+i*b.column])+')';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic add(a,b,result){\r\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\r\n\t\t\tlet r=result||new Matrix(a.row,b.column);\r\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]+b.array[i];\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic minus(a,b,result){\r\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\r\n\t\t\tlet r=result||new Matrix(a.row,b.column);\r\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]-b.array[i];\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic rotate2d(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotate2d;\r\n\t\t\tMr.array[0]=Mr.array[4]=Math.cos(t);\r\n\t\t\tMr.array[1]=-(Mr.array[3]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic scale2d(m,x,y,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.scale2d;\r\n\t\t\tMr.array[0]=x;\r\n\t\t\tMr.array[4]=y;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic translate2d(m,x,y,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.translate2d;\r\n\t\t\tMr.array[2]=x;\r\n\t\t\tMr.array[5]=y;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic rotate3d(m,tx,ty,tz,result){\r\n\t\t\tconst Xc=Math.cos(tx),Xs=Math.sin(tx),\r\n\t\t\t\tYc=Math.cos(ty),Ys=Math.sin(ty),\r\n\t\t\t\tZc=Math.cos(tz),Zs=Math.sin(tz),\r\n\t\t\t\tMr=Matrix.Matrixes.rotate3d;\r\n\t\t\tMr.array[0]=Zc*Yc;\r\n\t\t\tMr.array[1]=Zc*Ys*Xs-Zs*Xc;\r\n\t\t\tMr.array[2]=Zc*Ys*Xc+Zs*Xs;\r\n\t\t\tMr.array[4]=Zs*Yc;\r\n\t\t\tMr.array[5]=Zs*Ys*Xs+Zc*Xc;\r\n\t\t\tMr.array[6]=Zs*Ys*Xc-Zc*Xs;\r\n\t\t\tMr.array[8]=-Ys;\r\n\t\t\tMr.array[9]=Yc*Xs;\r\n\t\t\tMr.array[10]=Yc*Xc;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateX(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateX;\r\n\t\t\tMr.array[10]=Mr.array[5]=Math.cos(t);\r\n\t\t\tMr.array[6]=-(Mr.array[9]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateY(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateY;\r\n\t\t\tMr.array[10]=Mr.array[0]=Math.cos(t);\r\n\t\t\tMr.array[8]=-(Mr.array[2]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateZ(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateZ;\r\n\t\t\tMr.array[5]=Mr.array[0]=Math.cos(t);\r\n\t\t\tMr.array[1]=-(Mr.array[4]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic scale3d(m,x,y,z,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.scale3d;\r\n\t\t\tMr.array[0]=x;\r\n\t\t\tMr.array[5]=y;\r\n\t\t\tMr.array[10]=z;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic translate3d(m,x,y,z,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.translate3d;\r\n\t\t\tMr.array[12]=x;\r\n\t\t\tMr.array[13]=y;\r\n\t\t\tMr.array[14]=z;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic put(m,sub,row,column){\r\n\t\t\tlet c,ind,i;\r\n\t\t\trow||(row=0);\r\n\t\t\tcolumn||(column=0);\r\n\t\t\tfor(let l=sub.row;l--;){\r\n\t\t\t\tif(l+row>=m.row)continue;\r\n\t\t\t\tfor(c=sub.column;c--;){\r\n\t\t\t\t\tif(c+column>=m.column)continue;\r\n\t\t\t\t\tm.array[(l+row)*m.column+c+column]=sub.array[l*sub.column+c];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstatic createClass(Constructor){\r\n\t\t\treturn createClass(Constructor);\r\n\t\t}\r\n\t}\r\n\r\n\tvar testArray=new Constructor(1);\r\n\tObject.defineProperty(Matrix,'_instanceofTypedArray',{value:!!(TypedArray&&TypedArray.isPrototypeOf(testArray))});\r\n\ttestArray=null;\r\n\r\n\tMatrix.Matrixes={//do not modify these matrixes manually and dont use them\r\n\t\tI2:Matrix.Identity(2),\r\n\t\tI3:Matrix.Identity(3),\r\n\t\tI4:Matrix.Identity(4),\r\n\t\tT3:new Matrix(3,3,0),\r\n\t\tT4:new Matrix(4,4,0),\r\n\t\trotate2d:Matrix.Identity(3),\r\n\t\ttranslate2d:Matrix.Identity(3),\r\n\t\tscale2d:Matrix.Identity(3),\r\n\t\ttranslate3d:Matrix.Identity(4),\r\n\t\trotate3d:Matrix.Identity(4),\r\n\t\trotateX:Matrix.Identity(4),\r\n\t\trotateY:Matrix.Identity(4),\r\n\t\trotateZ:Matrix.Identity(4),\r\n\t\tscale3d:Matrix.Identity(4),\r\n\t}\r\n\treturn Matrix;\r\n}\r\nreturn createClass(global.Float32Array?Float32Array:Array);\r\n});\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\nimport {\r\n\tDomTools,\r\n\tUtils\r\n} from '../../NyaP-Core/index.js';//load from NyaP-Core project\r\n\r\nexport {\r\n\tDomTools,\r\n\tUtils\r\n} \r\n\r\nclass DanmakuFrameModule{\r\n\tconstructor(frame){\r\n\t\tthis.frame=frame;\r\n\t\tthis.enabled=false;\r\n\t}\r\n\tget width(){return this.frame.width;}\r\n\tget height(){return this.frame.height;}\r\n}\r\n\r\n\r\nclass DanmakuFrame{\r\n\tstatic availableModules={};\r\n\tstatic addModule(name,module){\r\n\t\tif(name in this.availableModules){\r\n\t\t\tconsole.warn('The module \"'+name+'\" has already been added.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.availableModules[name]=module;\r\n\t} \r\n\tget availableModules(){return this.constructor.availableModules;}\r\n\tget opt(){return this._opt||{}};\r\n\tset time(t){//current media time (ms)\r\n\t\tthis.media||(this.timeBase=Date.now()-t);\r\n\t\tthis.moduleFunction('time',t);//let all mods know when the time be set\r\n\t}\r\n\tget time(){return this.media?(this.media.currentTime*1000):(Date.now()-this.timeBase);}\r\n\tget area(){return this.width*this.height;}\r\n\t_opt;\r\n\trate=1;\r\n\ttimeBase=0;//for no fixed duration evn\r\n\twidth=0;\r\n\theight=0;\r\n\tfpsLimit=0;\r\n\tfps=0;//fps result\r\n\tfpsRec=new Uint32Array(9);//frame time record\r\n\tmedia=null;\r\n\tworking=false;//set working stat\r\n\tenabled=true;//is enabled\r\n\tmodules={};//constructed module list\r\n\tconstructor(core,opt){\r\n\t\tthis.core=core;\r\n\t\tthis._opt=opt;\r\n\t\tthis.container=core.danmakuContainer||document.createElement('div');\r\n\t\t// create a styleSheet\r\n\t\tconst style=document.createElement(\"style\");\r\n\t\tdocument.head.appendChild(style);\r\n\t\tthis.styleSheet=style.sheet;\r\n\t\t\r\n\t\tsetImmediate(()=>{//container size sensor\r\n\t\t\tDomTools.resizeEvent.observe(this.container);\r\n\t\t\tDomTools.addEvents(this.container,{\r\n\t\t\t\tresize:e=>this.resize(e.contentRect),\r\n\t\t\t});\r\n\t\t\tthis.resize();\r\n\t\t},0);\r\n\t\t\r\n\t\tUtils.animationFrameLoop(()=>{//fps recorder\r\n\t\t\tlet rec=this.fpsRec,length=rec.length;\r\n\t\t\t//move left\r\n\t\t\trec.copyWithin(rec,1);\r\n\t\t\trec[length-1]=Date.now();//set this frame's time\r\n\t\t\tlet result=0;\r\n\t\t\tfor(let i=1;i<length;i++){//weighted average\r\n\t\t\t\tresult+=i*(rec[i]-rec[i-1]);\r\n\t\t\t}\r\n\t\t\tresult/=length*(length-1)/2;\r\n\t\t\tthis.fps=1000/result;\r\n\t\t});\r\n\r\n\t\tthis.draw=this.draw.bind(this);\r\n\r\n\t}\r\n\tenable(name){//enable a amdule\r\n\t\tif(name===undefined){//no name means enable this frame\r\n\t\t\tthis.enabled=true;\r\n\t\t\tif(this.media){\r\n\t\t\t\tthis.media.paused||this.play();\r\n\t\t\t}\r\n\t\t\tthis.container.style.display='';\r\n\t\t\tthis.core.emit('danmakuFrameToggle',true);\r\n\t\t\tthis.core.debug('danmaku frame enabled');\r\n\t\t\treturn;\r\n\t\t}else if(!name){\r\n\t\t\tthrow(new Error(`Wrong name: ${name}`));\r\n\t\t}\r\n\t\tlet module=this.modules[name]||this.initModule(name);\r\n\t\tif(!module)return false;\r\n\t\tmodule.enabled=true;\r\n\t\tmodule.enable&&module.enable();\r\n\t\treturn true;\r\n\t}\r\n\tdisable(name){\r\n\t\tif(name===undefined){\r\n\t\t\tthis.pause();\r\n\t\t\tthis.moduleFunction('clear');\r\n\t\t\tthis.enabled=false;\r\n\t\t\tthis.container.style.display='none';\r\n\t\t\tthis.core.emit('danmakuFrameToggle',false);\r\n\t\t\tthis.core.debug('danmaku frame disabled');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet module=this.modules[name];\r\n\t\tif(!module)return false;\r\n\t\tmodule.enabled=false;\r\n\t\tmodule.disable&&module.disable();\r\n\t\treturn true;\r\n\t}\r\n\taddStyle(s){\r\n\t\tif(typeof s === 'string')s=[s];\r\n\t\tif(s instanceof Array === false)return;\r\n\t\ts.forEach(r=>this.styleSheet.insertRule(r,this.styleSheet.cssRules.length));\r\n\t}\r\n\tinitModule(name,arg=this.opt.modules[name]){\r\n\t\tif(this.modules[name]){\r\n\t\t\tconsole.warn(`The module [${name}] has already inited.`);\r\n\t\t\treturn this.modules[name];\r\n\t\t}\r\n\t\tlet mod=DanmakuFrame.availableModules[name];\r\n\t\tif(!mod)throw('Module ['+name+'] does not exist.');\r\n\t\tlet module=new mod(this,arg);\r\n\t\tif(module instanceof DanmakuFrameModule === false)\r\n\t\t\tthrow('Constructor of '+name+' is not child class of DanmakuFrameModule');\r\n\t\tthis.modules[name]=module;\r\n\t\tconsole.debug(`Mod Inited: ${name}`);\r\n\t\treturn module;\r\n\t}\r\n\tdraw(force){\r\n\t\tif(!this.working)return;\r\n\t\tthis.moduleFunction('draw',force);\r\n\t\tif(this.fpsLimit<=0){\r\n\t\t\trequestAnimationFrame(()=>this.draw());\r\n\t\t}else{\r\n\t\t\tsetTimeout(this.draw,1000/this.fpsLimit);\r\n\t\t}\r\n\t}\r\n\tload(...danmakuObj){\r\n\t\tthis.moduleFunction('load',...danmakuObj);\r\n\t}\r\n\tloadList(danmakuArray){\r\n\t\tthis.moduleFunction('loadList',danmakuArray);\r\n\t}\r\n\tunload(danmakuObj){\r\n\t\tthis.moduleFunction('unload',danmakuObj);\r\n\t}\r\n\tplay(){\r\n\t\tif(this.working||!this.enabled)return;\r\n\t\tthis.working=true;\r\n\t\tthis.moduleFunction('play');\r\n\t\tthis.draw(true);\r\n\t}\r\n\tpause(){\r\n\t\tif(!this.enabled)return;\r\n\t\tthis.working=false;\r\n\t\tthis.moduleFunction('pause');\r\n\t}\r\n\tresize(rect=this.container.getBoundingClientRect()){\r\n\t\tthis.width=rect.width;\r\n\t\tthis.height=rect.height;\r\n\t\tthis.moduleFunction('resize',rect);\r\n\t}\r\n\tmoduleFunction(name,...arg){\r\n\t\tlet m;\r\n\t\tfor(let n in this.modules){\r\n\t\t\tm=this.modules[n];\r\n\t\t\tif(m.enabled&&m[name])m[name](...arg);\r\n\t\t}\r\n\t}\r\n\tsetMedia(media){\r\n\t\tconst F=this;\r\n\t\tF.media=media;\r\n\t\tDomTools.addEvents(media,{\r\n\t\t\tplaying:()=>F.play(),\r\n\t\t\t'pause,stalled,seeking,waiting':()=>F.pause(),\r\n\t\t\tratechange:()=>{\r\n\t\t\t\tF.rate=F.media.playbackRate;\r\n\t\t\t\tF.moduleFunction('rate',F.rate);\r\n\t\t\t},\r\n\t\t});\r\n\t\tF.moduleFunction('media',media);\r\n\t}\r\n}\r\n\r\n\r\nexport {DanmakuFrame,DanmakuFrameModule}\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass TextCanvas2D extends Template{\r\n\tcanvas;\r\n\tcontext2d;\r\n\tget container(){return this.canvas;}\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.canvas=document.createElement('canvas');//the canvas\r\n\t\tthis.context2d=this.canvas.getContext('2d');//the canvas contex\r\n\t\tif(!this.context2d){\r\n\t\t\tconsole.warn('text 2d not supported');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.canvas.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tthis.canvas.id=`${dText.randomText}_text2d`;\r\n\t\tthis.supported=true;\r\n\t}\r\n\tdraw(force){\r\n\t\tlet ctx=this.context2d,\r\n\t\t\tcW=ctx.canvas.width,\r\n\t\t\tdT=this.dText.DanmakuText,\r\n\t\t\ti=dT.length,\r\n\t\t\tt,\r\n\t\t\tleft,\r\n\t\t\tright,\r\n\t\t\tvW;\r\n\t\tlet debug=false;\r\n\t\tctx.globalCompositeOperation='destination-over';\r\n\t\tthis.clear(force);\r\n\t\tfor(;i--;){\r\n\t\t\tif(!(t=dT[i]).drawn)(t.drawn=true);\r\n\t\t\tleft=t.style.x-t.estimatePadding;\r\n\t\t\tright=left+t._cache.width;\r\n\t\t\tif(left>cW || right<0){continue;}//ignore danmakus out of the screen\r\n\t\t\tif(debug){\r\n\t\t\t\tctx.save();\r\n\t\t\t\tctx.fillStyle='rgba(255,255,255,0.3)';\r\n\t\t\t\tctx.fillRect(left,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\r\n\t\t\t\tctx.restore();\r\n\t\t\t}\r\n\t\t\tif(cW>=t._cache.width){//danmaku which is smaller than canvas width\r\n\t\t\t\tctx.drawImage(t._bitmap||t._cache, left, t.style.y-t.estimatePadding);\r\n\t\t\t}else{//only draw the part on screen if the danmau overflow\r\n\t\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0)\r\n\t\t\t\tctx.drawImage(t._bitmap||t._cache,\r\n\t\t\t\t\t(left<0)?-left:0,0,\r\n\t\t\t\t\t\t\tvW,t._cache.height,\r\n\t\t\t\t\t(left<0)?0:left,t.style.y-t.estimatePadding,\r\n\t\t\t\t\t\t\tvW,t._cache.height);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tclear(force){\r\n\t\tconst D=this.dText;\r\n\t\tif(force||this._evaluateIfFullClearMode()){\r\n\t\t\tthis.context2d.clearRect(0,0,this.canvas.width,this.canvas.height);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\r\n\t\t\tt=D.DanmakuText[i];\r\n\t\t\tif(t.drawn)\r\n\t\t\t\tthis.context2d.clearRect(t.style.x-t.estimatePadding,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\r\n\t\t}\r\n\t}\r\n\t_evaluateIfFullClearMode(){\r\n\t\tif(this.dText.DanmakuText.length>3)return true;\r\n\t\treturn false;\r\n\t}\r\n\tdeleteRelatedTextObject(t){\r\n\t\tif(t._bitmap){\r\n\t\t\tt._bitmap.close();\r\n\t\t\tt._bitmap=null;\r\n\t\t}\r\n\t}\r\n\tresize(){\r\n\t\tlet D=this.dText,C=this.canvas;\r\n\t\tC.width=D.width;\r\n\t\tC.height=D.height;\r\n\t}\r\n\tenable(){\r\n\t\tthis.draw();\r\n\t\tthis.dText.useImageBitmap=true;\r\n\t}\r\n\tdisable(){\r\n\t\tfor(let tobj of this.dText.DanmakuText){\r\n\t\t\tthis.deleteRelatedTextObject(tobj);\r\n\t\t}\r\n\t\tthis.clear(true);\r\n\t}\r\n}\r\n\r\nexport default TextCanvas2D;","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass TextCss extends Template{\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.supported=dText.text2d.supported;\r\n\t\tif(!this.supported)return;\r\n\t\tdText.frame.addStyle([`#${dText.randomText}_textCanvasContainer canvas{will-change:transform;top:0;left:0;position:absolute;}`,\r\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer.moving canvas{transition:transform 500s linear;}`,\r\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer{will-change:transform;pointer-events:none;overflow:hidden;}`]);\r\n\r\n\t\tthis.container=document.createElement('div');//for text canvas\r\n\t\tthis.container.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tthis.container.id=`${dText.randomText}_textCanvasContainer`;\r\n\t}\r\n\t_toggle(s){\r\n\t\tlet D=this.dText,T=D.frame.time;\r\n\t\tthis.container.classList[s?'add':'remove']('moving');\r\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\r\n\t\t\tif((t=D.DanmakuText[i]).danmaku.mode>=2)continue;\r\n\t\t\tif(s){requestAnimationFrame(()=>this._move(t));}\r\n\t\t\telse{this._move(t,T);}\r\n\t\t}\r\n\t}\r\n\tclear(){\r\n\t\tthis.container.innerHTML='';\r\n\t}\r\n\tpause(){\r\n\t\tthis._toggle(false);\r\n\t}\r\n\tplay(){\r\n\t\tthis._toggle(true);\r\n\t}\r\n\trate(){\r\n\t\tthis.resetPos();\r\n\t}\r\n\t_move(t,T){\r\n\t\tif(!t.danmaku)return;\r\n\t\tif(T===undefined)T=this.dText.frame.time+500000;\r\n\t\tt._cache.style.transform=`translate(${(((this.dText._calcSideDanmakuPosition(t,T)-t.estimatePadding)*10)|0)/10}px,${t.style.y-t.estimatePadding}px)`;\r\n\t}\r\n\tresetPos(){\r\n\t\tthis.pause();\r\n\t\tthis.dText.paused||requestAnimationFrame(()=>this.play());\r\n\t}\r\n\tresize(){\r\n\t\tthis.resetPos();\r\n\t}\r\n\tremove(t){\r\n\t\tt._cache.parentNode&&this.container.removeChild(t._cache);\r\n\t}\r\n\tenable(){\r\n\t\tthis.dText.useImageBitmap=false;\r\n\t\trequestAnimationFrame(()=>{\r\n\t\t\tthis.dText.DanmakuText.forEach(t=>this.newDanmaku(t));\r\n\t\t});\r\n\t}\r\n\tdisable(){\r\n\t\tthis.container.innerHTML='';\r\n\t}\r\n\tnewDanmaku(t){\r\n\t\tt._cache.style.transform=`translate(${t.style.x-t.estimatePadding}px,${t.style.y-t.estimatePadding}px)`;\r\n\t\tthis.container.appendChild(t._cache);\r\n\t\tt.danmaku.mode<2&&!this.dText.paused&&requestAnimationFrame(()=>this._move(t));\r\n\t}\r\n}\r\n\r\n\r\nexport default TextCss;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Mat from '../../lib/Mat/Mat.js'\r\nimport Template from './textModuleTemplate.js';\r\nimport {Utils} from '../danmaku-frame.js';\r\n\r\nclass TextWebGL extends Template{\r\n\tget container(){return this.c3d;}\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tlet c3d=this.c3d=document.createElement('canvas');\r\n\t\tc3d.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tc3d.id=`${dText.randomText}_text3d`;\r\n\t\t//init webgl\r\n\t\tconst gl=this.gl=c3d.getContext('webgl')||c3d.getContext('experimental-webgl');//the canvas3d context\r\n\t\tif(!gl){\r\n\t\t\tconsole.warn('text 3d not supported');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//shader\r\n\t\tvar shaders={\r\n\t\t\tdanmakuFrag:[gl.FRAGMENT_SHADER,`\r\n\t\t\t\t#pragma optimize(on)\r\n\t\t\t\tprecision lowp float;\r\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\r\n\t\t\t\tuniform sampler2D uSampler;\r\n\t\t\t\tvoid main(void) {\r\n\t\t\t\t\tvec4 co=texture2D(uSampler,vDanmakuTexCoord);\r\n\t\t\t\t\tif(co.a == 0.0)discard;\r\n\t\t\t\t\tgl_FragColor = co;\r\n\t\t\t\t}`\r\n\t\t\t],\r\n\t\t\tdanmakuVert:[gl.VERTEX_SHADER,`\r\n\t\t\t\t#pragma optimize(on)\r\n\t\t\t\tattribute vec2 aVertexPosition;\r\n\t\t\t\tattribute vec2 aDanmakuTexCoord;\r\n\t\t\t\tuniform mat4 u2dCoordinate;\r\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\r\n\t\t\t\tvoid main(void) {\r\n\t\t\t\t\tgl_Position = u2dCoordinate * vec4(aVertexPosition,0,1);\r\n\t\t\t\t\tvDanmakuTexCoord = aDanmakuTexCoord;\r\n\t\t\t\t}`\r\n\t\t\t],\r\n\t\t}\r\n\t\tfunction shader(name){\r\n\t\t\tvar s=gl.createShader(shaders[name][0]);\r\n\t\t\tgl.shaderSource(s,shaders[name][1]);\r\n\t\t\tgl.compileShader(s);\r\n\t\t\tif (!gl.getShaderParameter(s,gl.COMPILE_STATUS))\r\n\t\t\t\tthrow(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(s));\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\tvar fragmentShader = shader(\"danmakuFrag\");\r\n\t\tvar vertexShader = shader(\"danmakuVert\");\r\n\t\tvar shaderProgram = this.shaderProgram = gl.createProgram();\r\n\t\tgl.attachShader(shaderProgram,vertexShader);\r\n\t\tgl.attachShader(shaderProgram,fragmentShader);\r\n\t\tgl.linkProgram(shaderProgram);\r\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n\t\t\tconsole.error(\"Unable to initialize the shader program.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tgl.useProgram(shaderProgram);\r\n\r\n\t\t//scene\r\n\t\tgl.clearColor(0, 0, 0, 0.0);\r\n\t\tgl.enable(gl.BLEND);\r\n\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA ,gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\t\tthis.maxTexSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n\r\n\t\tthis.uSampler=gl.getUniformLocation(shaderProgram,\"uSampler\");\r\n\t\tthis.u2dCoord=gl.getUniformLocation(shaderProgram,\"u2dCoordinate\");\r\n\t\tthis.aVertexPosition=gl.getAttribLocation(shaderProgram,\"aVertexPosition\");\r\n\t\tthis.atextureCoord=gl.getAttribLocation(shaderProgram,\"aDanmakuTexCoord\");\r\n\r\n\t\tgl.enableVertexAttribArray(this.aVertexPosition);\r\n\t\tgl.enableVertexAttribArray(this.atextureCoord);\r\n\r\n\t\tthis.commonTexCoordBuffer=gl.createBuffer();\r\n\t\tthis.commonVertCoordBuffer=gl.createBuffer();\r\n\r\n\t\tgl.activeTexture(gl.TEXTURE0);\r\n\t\tgl.uniform1i(this.uSampler,0);\r\n\r\n\t\tthis.supported=true;\r\n\t}\r\n\tdraw(force){\r\n\t\tconst gl=this.gl,l=this.dText.DanmakuText.length;\r\n\t\tlet cW=this.c3d.width,left,right,vW;\r\n\t\tfor(let i=0,t;i<l;i++){\r\n\t\t\tt=this.dText.DanmakuText[i];\r\n\t\t\tif(!t || !t.glDanmaku)continue;\r\n\t\t\tleft=t.style.x-t.estimatePadding;\r\n\t\t\tright=left+t._cache.width,\r\n\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0);\r\n\t\t\tif(left>cW || right<0)continue;\r\n\r\n\t\t\t//vert\r\n\t\t\tt.vertCoord[0]=t.vertCoord[4]=(left<0)?0:left;\r\n\t\t\tt.vertCoord[2]=t.vertCoord[6]=t.vertCoord[0]+vW;\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonVertCoordBuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,t.vertCoord,gl.DYNAMIC_DRAW);\r\n\t\t\tgl.vertexAttribPointer(this.aVertexPosition,2,gl.FLOAT,false,0,0);\r\n\r\n\t\t\t//tex\r\n\t\t\tcommonTextureCoord[0]=commonTextureCoord[4]=(left<0)?-left/t._cache.width:0;\r\n\t\t\tcommonTextureCoord[2]=commonTextureCoord[6]=commonTextureCoord[0]+vW/t._cache.width;\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonTexCoordBuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,commonTextureCoord,gl.DYNAMIC_DRAW);\r\n\t\t\tgl.vertexAttribPointer(this.atextureCoord,2,gl.FLOAT,false,0,0);\r\n\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,t.texture);\r\n\r\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP,0,4);\r\n\t\t}\r\n\t\tgl.flush();\r\n\t}\r\n\tclear(){\r\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n\t}\r\n\tdeleteRelatedTextObject(t){\r\n\t\tif(t.texture)this.gl.deleteTexture(t.texture);\r\n\t\tt.texture=null;\r\n\t\tt.vertCoord=null;\r\n\t\tdelete t.glDanmaku;\r\n\t}\r\n\tresize(w,h){\r\n\t\tconst gl=this.gl,C=this.c3d;\r\n\t\tC.width=this.dText.width;\r\n\t\tC.height=this.dText.height;\r\n\t\tgl.viewport(0,0,C.width,C.height);\r\n\t\tgl.uniformMatrix4fv(this.u2dCoord,false,(Mat.Identity(4).translate3d(-1,1,0).scale3d(2/C.width,-2/C.height,0)).array);\r\n\t}\r\n\tenable(){\r\n\t\tthis.dText.DanmakuText.forEach(t=>{\r\n\t\t\tthis.newDanmaku(t,false);\r\n\t\t});\r\n\t\tthis.dText.useImageBitmap=false;\r\n\t\trequestAnimationFrame(()=>this.draw());\r\n\t}\r\n\tdisable(){\r\n\t\t//clean related objects\r\n\t\tfor(let tobj of this.dText.DanmakuText){\r\n\t\t\tthis.deleteRelatedTextObject(tobj);\r\n\t\t}\r\n\t\tthis.clear();\r\n\t}\r\n\tnewDanmaku(t,async=true){\r\n\t\tconst gl=this.gl;\r\n\t\tt.glDanmaku=false;\r\n\t\tif(t._cache.height>this.maxTexSize || t._cache.width>this.maxTexSize){//ignore too large danmaku image\r\n\t\t\tconsole.warn('Ignore a danmaku width too large size',t.danmaku);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet tex;\r\n\t\tif(!(tex=t.texture)){\r\n\t\t\ttex=t.texture=gl.createTexture();\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);\r\n\t\t}\r\n\t\tif(async){\r\n\t\t\tUtils.requestIdleCallback(()=>{\r\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\r\n\t\t\t\tt.glDanmaku=true;\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\r\n\t\t\tt.glDanmaku=true;\r\n\t\t}\r\n\r\n\t\t//vert\r\n\t\tlet y=t.style.y-t.estimatePadding;\r\n\t\tt.vertCoord=new Float32Array([\r\n\t\t\t0,y,\r\n\t\t\t0,y,\r\n\t\t\t0,y+t._cache.height,\r\n\t\t\t0,y+t._cache.height,\r\n\t\t]);\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst commonTextureCoord=new Float32Array([\r\n\t0.0,  0.0,//↖\r\n\t1.0,  0.0,//↗\r\n\t0.0,  1.0,//↙\r\n\t1.0,  1.0,//↘\r\n]);\r\n\r\n\r\nexport default TextWebGL;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass TextOff extends Template{\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.supported=true;\r\n        this.container=document.createElement('div');\r\n        this.container.style.display='none';\r\n\t}\r\n}\r\n\r\nexport default TextOff;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n\r\ndanmaku-frame mod\r\n*/\r\n'use strict';\r\nimport {DomTools,Utils} from '../danmaku-frame.js';\r\nimport TextCanvas2D from './TextCanvas2D.js';\r\nimport TextWebGL from './TextWebGL.js';\r\nimport TextCss from './TextCss.js';\r\nimport Textoff from './Textoff.js';\r\nimport {DanmakuFrameModule} from '../danmaku-frame.js'\r\n\r\n/*\r\ndanmaku obj struct\r\n{\r\n\t_:'text',\r\n\ttime:(number)msec time,\r\n\ttext:(string),\r\n\tstyle:(object)to be combined whit default style,\r\n\tmode:(number),\r\n\tonScreen:(bool)on the screen\r\n}\r\n\r\ndanmaku mode\r\n\t0:right\r\n\t1:left\r\n\t2:bottom\r\n\t3:top\r\n*/\r\nconst defProp=Object.defineProperty;\r\nlet useImageBitmap=false;\r\n\r\nclass TextDanmaku extends DanmakuFrameModule{\r\n\tget paused(){return !this.frame.working;}\r\n\tlist=[];//danmaku object array\r\n\tindexMark=0;//to record the index of last danmaku loaded to screen in the DanmakuText\r\n\trandomText=`danmaku_text_${(Math.random()*999999)|0}`;\r\n\tlastRendererMode=0;\r\n\t//time record\r\n\tcacheCleanTime=0;\r\n\tdanmakuMoveTime=0;\r\n\tdanmakuCheckTime=0;\r\n\tdanmakuCheckSwitch=true;\r\n\tGraphCache=[];//text graph cache, for reusable TextGraph obj\r\n\tDanmakuText=[];//TextGraph on screen\r\n\tdefaultStyle={//these styles can be overwrote by the 'font' property of danmaku object\r\n\t\tfontStyle: null,\r\n\t\tfontWeight: 300,\r\n\t\tfontVariant: null,\r\n\t\tcolor: \"#fff\",\r\n\t\tfontSize: 24,\r\n\t\tfontFamily: \"Arial\",\r\n\t\tstrokeWidth: 1,//outline width\r\n\t\tstrokeColor: \"#888\",\r\n\t\tshadowBlur: 5,\r\n\t\ttextAlign:'start',//left right center start end\r\n\t\tshadowColor: \"#000\",\r\n\t\tshadowOffsetX:0,\r\n\t\tshadowOffsetY:0,\r\n\t\tfill:true,//if the text should be filled\r\n\t};\r\n\toptions={\r\n\t\tallowLines:false,//allow multi-line danmaku\r\n\t\tscreenLimit:0,//the most area% of danmaku on the screen\r\n\t\tclearWhenTimeReset:true,//clear danmaku on screen when the time is reset\r\n\t\tspeed:6.5,\r\n\t\tdanmakuSizeScale:1,//scale for the default size\r\n\t\tautoShiftRenderingMode:true,//auto shift to a low load mode\r\n\t\trenderingMode:1,//default to css mode\r\n\t}\r\n\tconstructor(frame,arg={}){\r\n\t\tsuper(frame);\r\n\t\tif(arg.defaultStyle)\r\n\t\t\tObject.assign(this.defaultStyle,arg.defaultStyle);\r\n\t\tif(arg.options)\r\n\t\t\tUtils.deepAssign(this.options,arg.options);\r\n\t\t\r\n\t\tframe.addStyle(`.${this.randomText}_fullfill{top:0;left:0;width:100%;height:100%;position:absolute;}`);\r\n\r\n\t\tdefProp(this,'rendererMode',{configurable:true});\r\n\t\tdefProp(this,'activeRendererMode',{configurable:true,value:null});\r\n\t\tconst con=this.container=document.createElement('div');\r\n\t\tcon.id=`${this.randomText}_textDanmakuContainer`;\r\n\t\tcon.classList.add(`${this.randomText}_fullfill`);\r\n\r\n\t\t//init modes\r\n\t\tthis.modes={\r\n\t\t\t0:this.textoff=new Textoff(this),//off\r\n\t\t\t2:this.text2d=new TextCanvas2D(this),\r\n\t\t\t1:this.textCss=new TextCss(this),\r\n\t\t\t3:this.text3d=new TextWebGL(this),\r\n\t\t};\r\n\r\n\t\t\r\n\t\tthis.rendering=new RenderingDanmakuManager(this);\r\n\r\n\t\tDomTools.addEvents(document,{\r\n\t\t\tvisibilitychange:e=>{\r\n\t\t\t\t//?\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis._checkNewDanmaku=this._checkNewDanmaku.bind(this);\r\n\t\tthis._cleanCache=this._cleanCache.bind(this);\r\n\t\tsetInterval(this._cleanCache,5000);//set an interval for cache cleaning\r\n\t\t\r\n\t\tthis.setRendererMode(this.lastRendererMode=(this.options.renderingMode||1));\r\n\t}\r\n\tsetRendererMode(n){\r\n\t\tif(this.rendererMode===n || !(n in this.modes) || !this.modes[n].supported)return false;\r\n\t\tif(this.activeRendererMode){\r\n\t\t\tthis.lastRendererMode=this.rendererMode;\r\n\t\t\tthis.activeRendererMode.disable();\r\n\t\t\tthis.container.removeChild(this.activeRendererMode.container);\r\n\t\t}\r\n\t\tdefProp(this,'activeRendererMode',{value:this.modes[n]});\r\n\t\tdefProp(this,'rendererMode',{value:n});\r\n\t\tthis.container.appendChild(this.activeRendererMode.container);\r\n\t\tthis.activeRendererMode.resize();\r\n\t\tthis.activeRendererMode.enable();\r\n\t\tthis.frame.core.debug('rendererMode:',this.rendererMode);\r\n\t\treturn true;\r\n\t}\r\n\tmedia(media){\r\n\t\tDomTools.addEvents(media,{\r\n\t\t\tseeked:()=>this.time(),\r\n\t\t\tseeking:()=>this.pause(),\r\n\t\t});\r\n\t}\r\n\tplay(){\r\n\t\tthis.recheckIndexMark();\r\n\t\tthis.activeRendererMode.play();\r\n\t}\r\n\tpause(){\r\n\t\tthis.activeRendererMode.pause();\r\n\t}\r\n\tload(d,autoAddToScreen){\r\n\t\tif(d?._!=='text'){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(typeof d.text !== 'string'){\r\n\t\t\tconsole.error('wrong danmaku object:',d);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet ind,arr=this.list;\r\n\t\tind=dichotomy(arr,d.time,0,arr.length-1,false);//find a place for this obj in the list in time order\r\n\t\tarr.splice(ind,0,d);//insert the obj\r\n\t\tif(ind<this.indexMark)this.indexMark++;\r\n\t\t//round d.style.fontSize to prevent Iifinity loop in tunnel\r\n\t\tif(typeof d.style!=='object')d.style={};\r\n\t\td.style.fontSize=Math.round((d.style.fontSize||this.defaultStyle.fontSize)*this.options.danmakuSizeScale);\r\n\t\tif(isNaN(d.style.fontSize)|| d.style.fontSize===Infinity || d.style.fontSize===0)d.style.fontSize=this.defaultStyle.fontSize*this.options.danmakuSizeScale;\r\n\t\tif(typeof d.mode !== 'number')d.mode=0;\r\n\t\tif(autoAddToScreen)this._addNewDanmaku(d);\r\n\t\treturn d;\r\n\t}\r\n\tloadList(danmakuArray){\r\n\t\tdanmakuArray.forEach(d=>this.load(d));\r\n\t}\r\n\tunload(d){\r\n\t\tif(!d || d._!=='text')return false;\r\n\t\tconst i=this.list.indexOf(d);\r\n\t\tif(i<0)return false;\r\n\t\tthis.list.splice(i,1);\r\n\t\tif(i<this.indexMark)this.indexMark--;\r\n\t\treturn true;\r\n\t}\r\n\t_checkNewDanmaku(force){\r\n\t\tif(this.paused&&!force)return;\r\n\t\tlet d,time=this.frame.time;\r\n\t\tif(this.danmakuCheckTime===time || !this.danmakuCheckSwitch)return;\r\n\t\tif(this.list.length)\r\n\t\tfor(;(this.indexMark<this.list.length)&&(d=this.list[this.indexMark])&&(d.time<=time);this.indexMark++){//add new danmaku\r\n\t\t\tif(this.options.screenLimit>0 && this.rendering.onScreenArea>=this.options.screenLimit/100*this.frame.area){continue;}//continue if the number of danmaku on screen has up to limit or doc is not visible\r\n\t\t\tthis._addNewDanmaku(d);\r\n\t\t}\r\n\t\tthis.danmakuCheckTime=time;\r\n\t}\r\n\t_addNewDanmaku(d){\r\n\t\tconst cHeight=this.height,cWidth=this.width;\r\n\t\tlet t=this.GraphCache.length?this.GraphCache.shift():new TextGraph();\r\n\t\tif(!this.options.allowLines){\r\n\t\t\td=Object.create(d);\r\n\t\t\td.text=d.text.replace(/\\n/g,' ');\r\n\t\t}\r\n\t\tlet font=Object.create(this.defaultStyle);\r\n\t\tt.init(d,Object.assign(font,d.style));\r\n\t\tt.prepare(false);\r\n\t\t//find tunnel number\r\n\t\tconst tnum=this.rendering.tunnelManager.getTunnel(t,cHeight);\r\n\t\t//calc margin\r\n\t\tlet margin=(tnum<0?0:tnum)%cHeight;\r\n\t\tswitch(d.mode){\r\n\t\t\tcase 0:case 1:case 3:{\r\n\t\t\t\tt.style.y=margin;break;\r\n\t\t\t}\r\n\t\t\tcase 2:{\r\n\t\t\t\tt.style.y=cHeight-margin-t.style.height-1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tswitch(d.mode){\r\n\t\t\tcase 0:{t.style.x=cWidth;break;}\r\n\t\t\tcase 1:{t.style.x=-t.style.width;break;}\r\n\t\t\tcase 2:case 3:{t.style.x=(cWidth-t.style.width)/2;}\r\n\t\t}\r\n\t\tthis.rendering.add(t);\r\n\t}\r\n\t_calcSideDanmakuPosition(t,T=this.frame.time){\r\n\t\tlet R=!t.danmaku.mode,style=t.style;//R:from right\r\n\t\treturn (R?this.frame.width:(-style.width))\r\n\t\t\t\t+(R?-1:1)*this.frame.rate*(style.width+1024)*(T-t.time)*this.options.speed/60000;\r\n\t}\r\n\t_calcDanmakusPosition(force){\r\n\t\tlet T=this.frame.time;\r\n\t\tif(this.paused&&!force)return;\r\n\t\tconst cWidth=this.width,rate=this.frame.rate;\r\n\t\tlet R,i,t,style,X;\r\n\t\tthis.danmakuMoveTime=T;\r\n\t\tfor(i=this.DanmakuText.length;i--;){\r\n\t\t\tt=this.DanmakuText[i];\r\n\t\t\tif(t.time>T){\r\n\t\t\t\tthis.removeText(t);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tstyle=t.style;\r\n\r\n\t\t\tswitch(t.danmaku.mode){\r\n\t\t\t\tcase 0:case 1:{\r\n\t\t\t\t\tR=!t.danmaku.mode;\r\n\t\t\t\t\tstyle.x=X=this._calcSideDanmakuPosition(t,T);\r\n\t\t\t\t\tif(t.tunnelNumber>=0 && ((R&&(X+style.width)+10<cWidth) || (!R&&X>10)) ){\r\n\t\t\t\t\t\tthis.rendering.tunnelManager.removeMark(t);\r\n\t\t\t\t\t}else if( (R&&(X<-style.width-20)) || (!R&&(X>cWidth+style.width+20)) ){//go out the canvas\r\n\t\t\t\t\t\tthis.removeText(t);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 2:case 3:{\r\n\t\t\t\t\tif((T-t.time)>this.options.speed*1000/rate){\r\n\t\t\t\t\t\tthis.removeText(t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t_cleanCache(force){//clean text object cache\r\n\t\tforce&&this.frame.core.debug('force cleaning graph cache');\r\n\t\tconst now=Date.now();\r\n\t\tif(this.GraphCache.length>30 || force){//save 30 cached danmaku\r\n\t\t\tfor(let ti = 0;ti<this.GraphCache.length;ti++){\r\n\t\t\t\tif(force || (now-this.GraphCache[ti].removeTime) > 10000){//delete cache which has not been used for 10s\r\n\t\t\t\t\tthis.GraphCache[ti].destructor();\r\n\t\t\t\t\tthis.GraphCache.splice(ti,1);\r\n\t\t\t\t}else{break;}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tdraw(force){\r\n\t\tif((!force&&this.paused)||!this.enabled)return;\r\n\t\tthis._calcDanmakusPosition(force);\r\n\t\tthis.activeRendererMode.draw(force);\r\n\t\trequestAnimationFrame(()=>{this._checkNewDanmaku(force)});\r\n\t}\r\n\tremoveText(t){//remove the danmaku from screen\r\n\t\tthis.rendering.remove(t);\r\n\t}\r\n\tresize(){\r\n\t\tif(this.activeRendererMode)this.activeRendererMode.resize();\r\n\t\tthis.draw(true);\r\n\t}\r\n\t_clearScreen(forceFull){\r\n\t\tthis.activeRendererMode&&this.activeRendererMode.clear(forceFull);\r\n\t}\r\n\tclear(){//clear danmaku on the screen\r\n\t\tthis.rendering.clear();\r\n\t\tthis._clearScreen(true);\r\n\t}\r\n\trecheckIndexMark(t=this.frame.time){\r\n\t\tthis.indexMark=dichotomy(this.list,t,0,this.list.length-1,true);\r\n\t}\r\n\trate(r){\r\n\t\tif(this.activeRendererMode)this.activeRendererMode.rate(r);\r\n\t}\r\n\ttime(t=this.frame.time){//reset time,you should invoke it when the media has seeked to another time\r\n\t\tthis.recheckIndexMark(t);\r\n\t\tif(this.options.clearWhenTimeReset){this.clear();}\r\n\t\telse{this.resetTimeOfDanmakuOnScreen();}\r\n\t}\r\n\tresetTimeOfDanmakuOnScreen(cTime){\r\n\t\t//cause the position of the danmaku is based on time\r\n\t\t//and if you don't want these danmaku on the screen to disappear after seeking,their time should be reset\r\n\t\tif(cTime===undefined)cTime=this.frame.time;\r\n\t\tthis.DanmakuText.forEach(t=>{\r\n\t\t\tif(!t.danmaku)return;\r\n\t\t\tt.time=cTime-(this.danmakuMoveTime-t.time);\r\n\t\t});\r\n\t}\r\n\tdanmakuAt(x,y){//return a list of danmaku which covers this position\r\n\t\tconst list=[];\r\n\t\tif(!this.enabled)return list;\r\n\t\tthis.DanmakuText.forEach(t=>{\r\n\t\t\tif(!t.danmaku)return;\r\n\t\t\tif(t.style.x<=x && t.style.x+t.style.width>=x && t.style.y<=y && t.style.y+t.style.height>=y)\r\n\t\t\t\tlist.push(t.danmaku);\r\n\t\t});\r\n\t\treturn list;\r\n\t}\r\n\tenable(){//enable the plugin\r\n\t\tthis.setRendererMode(this.lastRendererMode);\r\n\t\tthis.frame.container.appendChild(this.container);\r\n\t\tif(this.frame.working)this.play();\r\n\t}\r\n\tdisable(){//disable the plugin\r\n\t\tthis.frame.container.removeChild(this.container);\r\n\t\tthis.pause();\r\n\t\tthis.clear();\r\n\t\tthis.setRendererMode(0);\r\n\t}\r\n\tset useImageBitmap(v){\r\n\t\tuseImageBitmap=(typeof createImageBitmap ==='function')?v:false;\r\n\t}\r\n\tget useImageBitmap(){return useImageBitmap;}\r\n}\r\n\r\n\r\nclass TextGraph{//code copied from CanvasObjLibrary\r\n\t_fontString='';\r\n\t_renderList;\r\n\t_cache;\r\n\t_bitmap;\r\n\tfont={};\r\n\ttime;\r\n\tstyle={};\r\n\tdrawn=false;//bool: \r\n\tdanmaku;\r\n\tremoveTime;//number: remove time of the danmaku\r\n\ttunnelNumber;//number: tunnel number in the tunner manager\r\n\ttunnelHeight;//number: tunnel height\r\n\testimatePadding;//number: padding of the canvas\r\n\tget text(){return this.danmaku.text;}\r\n\tconstructor(danmakuObj,font){\r\n\t\tthis._renderToCache=this._renderToCache.bind(this);\r\n\t\tdanmakuObj&&this.init(danmakuObj,font);\r\n\t}\r\n\tinit(d,font){\r\n\t\tthis.danmaku=d;\r\n\t\tthis.drawn=false;\r\n\t\tthis.time=d.time;\r\n\t\tthis.font=font;\r\n\t\tif(!this.font.lineHeight)this.font.lineHeight=(this.font.fontSize+2)||1;\r\n\t\tif(d.style.color){\r\n\t\t\tif(this.font.color && this.font.color[0]!=='#'){\r\n\t\t\t\tthis.font.color='#'+d.style.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(d.mode>1)this.font.textAlign='center';\r\n\t}\r\n\tprepare(async=false){//prepare text details\r\n\t\tif(!this._cache){\r\n\t\t\tthis._cache=document.createElement(\"canvas\");\r\n\t\t}\r\n\t\tlet ta=[];\r\n\t\t(this.font.fontStyle)&&ta.push(this.font.fontStyle);\r\n\t\t(this.font.fontVariant)&&ta.push(this.font.fontVariant);\r\n\t\t(this.font.fontWeight)&&ta.push(this.font.fontWeight);\r\n\t\tta.push(`${this.font.fontSize}px`);\r\n\t\t(this.font.fontFamily)&&ta.push(this.font.fontFamily);\r\n\t\tthis._fontString = ta.join(' ');\r\n\r\n\t\tconst canvas = this._cache,\r\n\t\t\tct = (canvas.ctx2d||(canvas.ctx2d=canvas.getContext(\"2d\")));\r\n\t\tct.font = this._fontString;\r\n\t\tthis._renderList = this.text.split(/\\n/g);\r\n\t\tthis.estimatePadding=Math.max(\r\n\t\t\tthis.font.shadowBlur+5+Math.max(Math.abs(this.font.shadowOffsetY),Math.abs(this.font.shadowOffsetX)),\r\n\t\t\tthis.font.strokeWidth+3\r\n\t\t);\r\n\t\tlet w = 0,tw,lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize;\r\n\t\tfor (let i = this._renderList.length; i -- ;) {\r\n\t\t\ttw = ct.measureText(this._renderList[i]).width;\r\n\t\t\t(tw>w)&&(w=tw);//max\r\n\t\t}\r\n\t\tcanvas.width = (this.style.width = w) + this.estimatePadding*2;\r\n\t\tcanvas.height = (this.style.height = this._renderList.length * lh)+ ((lh<this.font.fontSize)?this.font.fontSize*2:0) + this.estimatePadding*2;\r\n\r\n\t\tct.translate(this.estimatePadding, this.estimatePadding);\r\n\t\tif(async){\r\n\t\t\tUtils.requestIdleCallback(this._renderToCache);\r\n\t\t}else{\r\n\t\t\tthis._renderToCache();\r\n\t\t}\r\n\t}\r\n\t_renderToCache(){\r\n\t\tif(!this.danmaku)return;\r\n\t\tthis.render(this._cache.ctx2d);\r\n\t\tif(useImageBitmap){//use ImageBitmap\r\n\t\t\tif(this._bitmap){\r\n\t\t\t\tthis._bitmap.close();\r\n\t\t\t\tthis._bitmap=null;\r\n\t\t\t}\r\n\t\t\tcreateImageBitmap(this._cache).then(bitmap=>{\r\n\t\t\t\tthis._bitmap=bitmap;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\trender(ct){//render text\r\n\t\tif(!this._renderList)return;\r\n\t\tct.save();\r\n\t\tif(this.danmaku.highlight){\r\n\t\t\tct.fillStyle='rgba(255,255,255,0.3)';\r\n\t\t\tct.beginPath();\r\n\t\t\tct.rect(0,0,this.style.width,this.style.height);\r\n\t\t\tct.fill();\r\n\t\t}\r\n\t\tct.font=this._fontString;//set font\r\n\t\tct.textBaseline = 'middle';\r\n\t\tct.lineWidth = this.font.strokeWidth;\r\n\t\tct.fillStyle = this.font.color;\r\n\t\tct.strokeStyle = this.font.strokeColor;\r\n\t\tct.shadowBlur = this.font.shadowBlur;\r\n\t\tct.shadowColor= this.font.shadowColor;\r\n\t\tct.shadowOffsetX = this.font.shadowOffsetX;\r\n\t\tct.shadowOffsetY = this.font.shadowOffsetY;\r\n\t\tct.textAlign = this.font.textAlign;\r\n\t\tlet lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize,\r\n\t\t\tx;\r\n\t\tswitch(this.font.textAlign){\r\n\t\t\tcase 'left':case 'start':{\r\n\t\t\t\tx=0;break;\r\n\t\t\t}\r\n\t\t\tcase 'center':{\r\n\t\t\t\tx=this.style.width/2;break;\r\n\t\t\t}\r\n\t\t\tcase 'right':case 'end':{\r\n\t\t\t\tx=this.style.width;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = this._renderList.length;i--;) {\r\n\t\t\tthis.font.strokeWidth&&ct.strokeText(this._renderList[i],x,lh*(i+0.5));\r\n\t\t\tthis.font.fill&&ct.fillText(this._renderList[i],x, lh*(i+0.5));\r\n\t\t}\r\n\t\tct.restore();\r\n\t\tthis._renderList=undefined;\r\n\t}\r\n\tdestructor(){\r\n\t\tthis._fontString=undefined;\r\n\t\tthis._renderList=undefined;\r\n\t\tthis.danmaku=undefined;\r\n\t\tthis.style=undefined;\r\n\t\tthis.font=undefined;\r\n\t\tif(this._bitmap){\r\n\t\t\tthis._bitmap.close();\r\n\t\t\tthis._bitmap=null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst tunnels=['right','left','bottom','top'];\r\nclass TunnelManager{\r\n\tconstructor(){\r\n\t\tthis.reset();\r\n\t}\r\n\treset(){\r\n\t\tthis.right={};\r\n\t\tthis.left={};\r\n\t\tthis.bottom={};\r\n\t\tthis.top={};\r\n\t}\r\n\tgetTunnel(tobj,cHeight){//get the tunnel index that can contain the danmaku of the sizes\r\n\t\tlet tunnel=this.tunnel(tobj.danmaku.mode),\r\n\t\t\tsize=tobj.style.height,\r\n\t\t\tti=0,\r\n\t\t\ttnum=-1;\r\n\t\tif(typeof size !=='number' || size<=0){\r\n\t\t\tconsole.error('Incorrect size:'+size);\r\n\t\t\tsize=24;\r\n\t\t}\r\n\t\tif(size>cHeight)return 0;\r\n\r\n\t\twhile(tnum<0){\r\n\t\t\tfor(let t=ti+size-1;ti<=t;){\r\n\t\t\t\tif(tunnel[ti]){//used\r\n\t\t\t\t\tti+=tunnel[ti].tunnelHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}else if((ti!==0)&&(ti%(cHeight-1))===0){//new page\r\n\t\t\t\t\tti++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}else if(ti===t){//get\r\n\t\t\t\t\ttnum=ti-size+1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tti++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ttobj.tunnelNumber=tnum;\r\n\t\ttobj.tunnelHeight=(((tobj.style.y+size)>cHeight)?1:size);\r\n\t\tthis.addMark(tobj);\r\n\t\treturn tnum;\r\n\t}\r\n\taddMark(tobj){\r\n\t\tlet t=this.tunnel(tobj.danmaku.mode);\r\n\t\tif(!t[tobj.tunnelNumber])t[tobj.tunnelNumber]=tobj;\r\n\t}\r\n\tremoveMark(tobj){\r\n\t\tlet t,tun=tobj.tunnelNumber;\r\n\t\tif(tun>=0&&(t=this.tunnel(tobj.danmaku.mode))[tun]===tobj){\r\n\t\t\tdelete t[tun];\r\n\t\t\ttobj.tunnelNumber=-1;\r\n\t\t}\r\n\t}\r\n\ttunnel(id){\r\n\t\treturn this[tunnels[id]];\r\n\t}\r\n}\r\n\r\n\r\nclass RenderingDanmakuManager{\r\n\ttotalArea=0;\r\n\tonScreenArea=0;\r\n\tlimitArea=Infinity;//limit danmaku area on the screen(auto change)\r\n\ttunnelManager=new TunnelManager();\r\n\tconstructor(dText){//dText:TextDanmaku\r\n\t\tthis.dText=dText;\r\n\t\tif(dText.text2d.supported)this.timer=setInterval(()=>this.rendererModeCheck(),1500);\r\n\t}\r\n\tadd(t){\r\n\t\tif(t.danmaku.onScreen)return;\r\n\t\tt.danmaku.onScreen=true;\r\n\t\tthis.dText.DanmakuText.push(t);\r\n\t\tthis.totalArea+=t._cache.width*t._cache.height;//cumulate danmaku area\r\n\t\tthis.onScreenArea+=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\r\n\t\tthis.dText.activeRendererMode.newDanmaku(t);\r\n\t}\r\n\tremove(t){\r\n\t\tt.danmaku.onScreen=false;\r\n\t\tlet ind=this.dText.DanmakuText.indexOf(t);\r\n\t\tif(ind>=0){\r\n\t\t\tthis.dText.DanmakuText.splice(ind,1);\r\n\t\t\tthis.totalArea-=t._cache.width*t._cache.height;\r\n\t\t\tthis.onScreenArea-=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\r\n\t\t}\r\n\t\tthis.tunnelManager.removeMark(t);\r\n\t\tthis.dText.activeRendererMode.remove(t);\r\n\t\tthis.dText.activeRendererMode.deleteRelatedTextObject(t);\r\n\t\tt.removeTime=Date.now();\r\n\t\tt.danmaku=null;\r\n\t\tthis.dText.GraphCache.push(t);\r\n\t}\r\n\tclear(){\r\n\t\tfor(let i=0,T;i<this.dText.DanmakuText.length;i++){\r\n\t\t\tT=this.dText.DanmakuText[i];\r\n\t\t\tthis.remove(T);\r\n\t\t}\r\n\t\tthis.tunnelManager.reset();\r\n\t}\r\n\trendererModeCheck(){//auto shift rendering mode\r\n\t\tlet D=this.dText;\r\n\t\tif(!this.dText.options.autoShiftRenderingMode || D.paused)return;\r\n\t\tif(D.frame.fps<(D.frame.fpsLimit||60)*0.9){//when frame rate low\r\n\t\t\tif(this.limitArea>this.totalArea)this.limitArea=this.totalArea;//reduce area limit\r\n\t\t}else if(this.limitArea<this.totalArea){//increase area limit\r\n\t\t\tthis.limitArea=this.totalArea;\r\n\t\t}\r\n\t\tif(D.rendererMode===1 && this.totalArea>this.limitArea){//switch to canvas mode when fps low\r\n\t\t\tD.text2d.supported&&D.setRendererMode(2);\r\n\t\t}else if(D.rendererMode===2&& this.totalArea<this.limitArea*0.5){//recover to css mode when animation is fluent enough\r\n\t\t\tD.textCss.supported&&D.setRendererMode(1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction dichotomy(arr,t,start,end,position=false){\r\n\tif(arr.length===0)return 0;\r\n\tlet m=start/* ,s=start,e=end */;\r\n\twhile(start <= end){//dichotomy\r\n\t\tm=(start+end)>>1;\r\n\t\tif(t<=arr[m].time)end=m-1;\r\n\t\telse{start=m+1;}\r\n\t}\r\n\tif(position){//find to top\r\n\t\twhile(start>0 && (arr[start-1].time===t))\r\n\t\t\tstart--;\r\n\t}else{//find to end\r\n\t\twhile(start<=end && (arr[start].time===t))\r\n\t\t\tstart++;\r\n\t}\r\n\treturn start;\r\n}\r\n\r\n\r\nexport default function init(DanmakuFrame){\r\n\tDanmakuFrame.addModule('TextDanmaku',TextDanmaku);\r\n};;","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nclass textModuleTemplate{\r\n\tsupported=false;\r\n\tconstructor(dText){\r\n\t\tthis.dText=dText;\r\n\t}\r\n\tdraw(){}//draw call from danmaku-frame on every animation frame\r\n\trate(){}//playback rate\r\n\tpause(){}//the media is paused\r\n\tplay(){}//the media is starting\r\n\tclear(){}//clear all danmaku on screen\r\n\tresize(){}//the container is resized\r\n\tremove(){}//remove a danmaku freom the screen\r\n\tenable(){}//this module is enabled\r\n\tdisable(){}//this module is disabled\r\n\tnewDanmaku(){}//add danmaku to the screen\r\n\tdeleteRelatedTextObject(){}\r\n}\r\n\r\nexport default textModuleTemplate;\r\n","module.exports = require(\"core-js-pure/stable/array/from\");","module.exports = require(\"core-js-pure/stable/array/is-array\");","module.exports = require(\"core-js-pure/stable/date/now\");","module.exports = require(\"core-js-pure/stable/instance/bind\");","module.exports = require(\"core-js-pure/stable/instance/concat\");","module.exports = require(\"core-js-pure/stable/instance/copy-within\");","module.exports = require(\"core-js-pure/stable/instance/fill\");","module.exports = require(\"core-js-pure/stable/instance/for-each\");","module.exports = require(\"core-js-pure/stable/instance/index-of\");","module.exports = require(\"core-js-pure/stable/instance/repeat\");","module.exports = require(\"core-js-pure/stable/instance/slice\");","module.exports = require(\"core-js-pure/stable/instance/sort\");","module.exports = require(\"core-js-pure/stable/instance/splice\");","module.exports = require(\"core-js-pure/stable/instance/starts-with\");","module.exports = require(\"core-js-pure/stable/instance/trim\");","module.exports = require(\"core-js-pure/stable/object/assign\");","module.exports = require(\"core-js-pure/stable/object/create\");","module.exports = require(\"core-js-pure/stable/object/define-property\");","module.exports = require(\"core-js-pure/stable/object/entries\");","module.exports = require(\"core-js-pure/stable/object/get-own-property-descriptor\");","module.exports = require(\"core-js-pure/stable/object/get-prototype-of\");","module.exports = require(\"core-js-pure/stable/object/set-prototype-of\");","module.exports = require(\"core-js-pure/stable/promise\");","module.exports = require(\"core-js-pure/stable/reflect/construct\");","module.exports = require(\"core-js-pure/stable/reflect/get\");","module.exports = require(\"core-js-pure/stable/set-immediate\");","module.exports = require(\"core-js-pure/stable/set-interval\");","module.exports = require(\"core-js-pure/stable/set-timeout\");","module.exports = require(\"core-js-pure/stable/symbol\");","module.exports = require(\"core-js-pure/stable/symbol/iterator\");","module.exports = require(\"core-js-pure/features/get-iterator-method\");","module.exports = require(\"core-js-pure/features/get-iterator\");","module.exports = require(\"core-js-pure/features/is-iterable\");","module.exports = require(\"regenerator-runtime\");\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = global || self, factory(global.ResizeObserver = {}));\n}(this, (function (exports) { 'use strict';\n\n    var resizeObservers = [];\n\n    var hasActiveObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n    };\n\n    var hasSkippedObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n    };\n\n    var msg = 'ResizeObserver loop completed with undelivered notifications.';\n    var deliverResizeLoopError = function () {\n        var event;\n        if (typeof ErrorEvent === 'function') {\n            event = new ErrorEvent('error', {\n                message: msg\n            });\n        }\n        else {\n            event = document.createEvent('Event');\n            event.initEvent('error', false, false);\n            event.message = msg;\n        }\n        window.dispatchEvent(event);\n    };\n\n    var ResizeObserverBoxOptions;\n    (function (ResizeObserverBoxOptions) {\n        ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n        ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n        ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n    })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n    var DOMRectReadOnly = (function () {\n        function DOMRectReadOnly(x, y, width, height) {\n            this.x = x;\n            this.y = y;\n            this.width = width;\n            this.height = height;\n            this.top = this.y;\n            this.left = this.x;\n            this.bottom = this.top + this.height;\n            this.right = this.left + this.width;\n            return Object.freeze(this);\n        }\n        DOMRectReadOnly.prototype.toJSON = function () {\n            var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n            return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n        };\n        DOMRectReadOnly.fromRect = function (rectangle) {\n            return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n        };\n        return DOMRectReadOnly;\n    }());\n\n    var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\n    var isHidden = function (target) {\n        if (isSVG(target)) {\n            var _a = target.getBBox(), width = _a.width, height = _a.height;\n            return !width && !height;\n        }\n        var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n        return !(offsetWidth || offsetHeight || target.getClientRects().length);\n    };\n    var isElement = function (obj) {\n        var _a, _b;\n        var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n        return !!(scope && obj instanceof scope.Element);\n    };\n    var isReplacedElement = function (target) {\n        switch (target.tagName) {\n            case 'INPUT':\n                if (target.type !== 'image') {\n                    break;\n                }\n            case 'VIDEO':\n            case 'AUDIO':\n            case 'EMBED':\n            case 'OBJECT':\n            case 'CANVAS':\n            case 'IFRAME':\n            case 'IMG':\n                return true;\n        }\n        return false;\n    };\n\n    var global = typeof window !== 'undefined' ? window : {};\n\n    var cache = new WeakMap();\n    var scrollRegexp = /auto|scroll/;\n    var verticalRegexp = /^tb|vertical/;\n    var IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);\n    var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\n    var size = function (inlineSize, blockSize, switchSizes) {\n        if (inlineSize === void 0) { inlineSize = 0; }\n        if (blockSize === void 0) { blockSize = 0; }\n        if (switchSizes === void 0) { switchSizes = false; }\n        return Object.freeze({\n            inlineSize: (switchSizes ? blockSize : inlineSize) || 0,\n            blockSize: (switchSizes ? inlineSize : blockSize) || 0\n        });\n    };\n    var zeroBoxes = Object.freeze({\n        devicePixelContentBoxSize: size(),\n        borderBoxSize: size(),\n        contentBoxSize: size(),\n        contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n    });\n    var calculateBoxSizes = function (target, forceRecalculation) {\n        if (forceRecalculation === void 0) { forceRecalculation = false; }\n        if (cache.has(target) && !forceRecalculation) {\n            return cache.get(target);\n        }\n        if (isHidden(target)) {\n            cache.set(target, zeroBoxes);\n            return zeroBoxes;\n        }\n        var cs = getComputedStyle(target);\n        var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();\n        var removePadding = !IE && cs.boxSizing === 'border-box';\n        var switchSizes = verticalRegexp.test(cs.writingMode || '');\n        var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n        var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n        var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n        var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n        var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n        var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n        var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n        var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n        var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n        var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n        var horizontalPadding = paddingLeft + paddingRight;\n        var verticalPadding = paddingTop + paddingBottom;\n        var horizontalBorderArea = borderLeft + borderRight;\n        var verticalBorderArea = borderTop + borderBottom;\n        var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n        var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n        var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n        var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n        var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n        var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n        var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n        var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n        var boxes = Object.freeze({\n            devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n            borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n            contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n            contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n        });\n        cache.set(target, boxes);\n        return boxes;\n    };\n    var calculateBoxSize = function (target, observedBox, forceRecalculation) {\n        var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n        switch (observedBox) {\n            case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n                return devicePixelContentBoxSize;\n            case ResizeObserverBoxOptions.BORDER_BOX:\n                return borderBoxSize;\n            default:\n                return contentBoxSize;\n        }\n    };\n\n    var ResizeObserverEntry = (function () {\n        function ResizeObserverEntry(target) {\n            var boxes = calculateBoxSizes(target);\n            this.target = target;\n            this.contentRect = boxes.contentRect;\n            this.borderBoxSize = [boxes.borderBoxSize];\n            this.contentBoxSize = [boxes.contentBoxSize];\n            this.devicePixelContentBoxSize = [boxes.devicePixelContentBoxSize];\n        }\n        return ResizeObserverEntry;\n    }());\n\n    var calculateDepthForNode = function (node) {\n        if (isHidden(node)) {\n            return Infinity;\n        }\n        var depth = 0;\n        var parent = node.parentNode;\n        while (parent) {\n            depth += 1;\n            parent = parent.parentNode;\n        }\n        return depth;\n    };\n\n    var broadcastActiveObservations = function () {\n        var shallowestDepth = Infinity;\n        var callbacks = [];\n        resizeObservers.forEach(function processObserver(ro) {\n            if (ro.activeTargets.length === 0) {\n                return;\n            }\n            var entries = [];\n            ro.activeTargets.forEach(function processTarget(ot) {\n                var entry = new ResizeObserverEntry(ot.target);\n                var targetDepth = calculateDepthForNode(ot.target);\n                entries.push(entry);\n                ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n                if (targetDepth < shallowestDepth) {\n                    shallowestDepth = targetDepth;\n                }\n            });\n            callbacks.push(function resizeObserverCallback() {\n                ro.callback.call(ro.observer, entries, ro.observer);\n            });\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n        });\n        for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n            var callback = callbacks_1[_i];\n            callback();\n        }\n        return shallowestDepth;\n    };\n\n    var gatherActiveObservationsAtDepth = function (depth) {\n        resizeObservers.forEach(function processObserver(ro) {\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n            ro.skippedTargets.splice(0, ro.skippedTargets.length);\n            ro.observationTargets.forEach(function processTarget(ot) {\n                if (ot.isActive()) {\n                    if (calculateDepthForNode(ot.target) > depth) {\n                        ro.activeTargets.push(ot);\n                    }\n                    else {\n                        ro.skippedTargets.push(ot);\n                    }\n                }\n            });\n        });\n    };\n\n    var process = function () {\n        var depth = 0;\n        gatherActiveObservationsAtDepth(depth);\n        while (hasActiveObservations()) {\n            depth = broadcastActiveObservations();\n            gatherActiveObservationsAtDepth(depth);\n        }\n        if (hasSkippedObservations()) {\n            deliverResizeLoopError();\n        }\n        return depth > 0;\n    };\n\n    var trigger;\n    var callbacks = [];\n    var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\n    var queueMicroTask = function (callback) {\n        if (!trigger) {\n            var toggle_1 = 0;\n            var el_1 = document.createTextNode('');\n            var config = { characterData: true };\n            new MutationObserver(function () { return notify(); }).observe(el_1, config);\n            trigger = function () { el_1.textContent = \"\" + (toggle_1 ? toggle_1-- : toggle_1++); };\n        }\n        callbacks.push(callback);\n        trigger();\n    };\n\n    var queueResizeObserver = function (cb) {\n        queueMicroTask(function ResizeObserver() {\n            requestAnimationFrame(cb);\n        });\n    };\n\n    var watching = 0;\n    var isWatching = function () { return !!watching; };\n    var CATCH_PERIOD = 250;\n    var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\n    var events = [\n        'resize',\n        'load',\n        'transitionend',\n        'animationend',\n        'animationstart',\n        'animationiteration',\n        'keyup',\n        'keydown',\n        'mouseup',\n        'mousedown',\n        'mouseover',\n        'mouseout',\n        'blur',\n        'focus'\n    ];\n    var time = function (timeout) {\n        if (timeout === void 0) { timeout = 0; }\n        return Date.now() + timeout;\n    };\n    var scheduled = false;\n    var Scheduler = (function () {\n        function Scheduler() {\n            var _this = this;\n            this.stopped = true;\n            this.listener = function () { return _this.schedule(); };\n        }\n        Scheduler.prototype.run = function (timeout) {\n            var _this = this;\n            if (timeout === void 0) { timeout = CATCH_PERIOD; }\n            if (scheduled) {\n                return;\n            }\n            scheduled = true;\n            var until = time(timeout);\n            queueResizeObserver(function () {\n                var elementsHaveResized = false;\n                try {\n                    elementsHaveResized = process();\n                }\n                finally {\n                    scheduled = false;\n                    timeout = until - time();\n                    if (!isWatching()) {\n                        return;\n                    }\n                    if (elementsHaveResized) {\n                        _this.run(1000);\n                    }\n                    else if (timeout > 0) {\n                        _this.run(timeout);\n                    }\n                    else {\n                        _this.start();\n                    }\n                }\n            });\n        };\n        Scheduler.prototype.schedule = function () {\n            this.stop();\n            this.run();\n        };\n        Scheduler.prototype.observe = function () {\n            var _this = this;\n            var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n            document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);\n        };\n        Scheduler.prototype.start = function () {\n            var _this = this;\n            if (this.stopped) {\n                this.stopped = false;\n                this.observer = new MutationObserver(this.listener);\n                this.observe();\n                events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });\n            }\n        };\n        Scheduler.prototype.stop = function () {\n            var _this = this;\n            if (!this.stopped) {\n                this.observer && this.observer.disconnect();\n                events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });\n                this.stopped = true;\n            }\n        };\n        return Scheduler;\n    }());\n    var scheduler = new Scheduler();\n    var updateCount = function (n) {\n        !watching && n > 0 && scheduler.start();\n        watching += n;\n        !watching && scheduler.stop();\n    };\n\n    var skipNotifyOnElement = function (target) {\n        return !isSVG(target)\n            && !isReplacedElement(target)\n            && getComputedStyle(target).display === 'inline';\n    };\n    var ResizeObservation = (function () {\n        function ResizeObservation(target, observedBox) {\n            this.target = target;\n            this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n            this.lastReportedSize = {\n                inlineSize: 0,\n                blockSize: 0\n            };\n        }\n        ResizeObservation.prototype.isActive = function () {\n            var size = calculateBoxSize(this.target, this.observedBox, true);\n            if (skipNotifyOnElement(this.target)) {\n                this.lastReportedSize = size;\n            }\n            if (this.lastReportedSize.inlineSize !== size.inlineSize\n                || this.lastReportedSize.blockSize !== size.blockSize) {\n                return true;\n            }\n            return false;\n        };\n        return ResizeObservation;\n    }());\n\n    var ResizeObserverDetail = (function () {\n        function ResizeObserverDetail(resizeObserver, callback) {\n            this.activeTargets = [];\n            this.skippedTargets = [];\n            this.observationTargets = [];\n            this.observer = resizeObserver;\n            this.callback = callback;\n        }\n        return ResizeObserverDetail;\n    }());\n\n    var observerMap = new WeakMap();\n    var getObservationIndex = function (observationTargets, target) {\n        for (var i = 0; i < observationTargets.length; i += 1) {\n            if (observationTargets[i].target === target) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    var ResizeObserverController = (function () {\n        function ResizeObserverController() {\n        }\n        ResizeObserverController.connect = function (resizeObserver, callback) {\n            var detail = new ResizeObserverDetail(resizeObserver, callback);\n            observerMap.set(resizeObserver, detail);\n        };\n        ResizeObserverController.observe = function (resizeObserver, target, options) {\n            var detail = observerMap.get(resizeObserver);\n            var firstObservation = detail.observationTargets.length === 0;\n            if (getObservationIndex(detail.observationTargets, target) < 0) {\n                firstObservation && resizeObservers.push(detail);\n                detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n                updateCount(1);\n                scheduler.schedule();\n            }\n        };\n        ResizeObserverController.unobserve = function (resizeObserver, target) {\n            var detail = observerMap.get(resizeObserver);\n            var index = getObservationIndex(detail.observationTargets, target);\n            var lastObservation = detail.observationTargets.length === 1;\n            if (index >= 0) {\n                lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n                detail.observationTargets.splice(index, 1);\n                updateCount(-1);\n            }\n        };\n        ResizeObserverController.disconnect = function (resizeObserver) {\n            var _this = this;\n            var detail = observerMap.get(resizeObserver);\n            detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n            detail.activeTargets.splice(0, detail.activeTargets.length);\n        };\n        return ResizeObserverController;\n    }());\n\n    var ResizeObserver = (function () {\n        function ResizeObserver(callback) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (typeof callback !== 'function') {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n            }\n            ResizeObserverController.connect(this, callback);\n        }\n        ResizeObserver.prototype.observe = function (target, options) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.observe(this, target, options);\n        };\n        ResizeObserver.prototype.unobserve = function (target) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.unobserve(this, target);\n        };\n        ResizeObserver.prototype.disconnect = function () {\n            ResizeObserverController.disconnect(this);\n        };\n        ResizeObserver.toString = function () {\n            return 'function ResizeObserver () { [polyfill code] }';\n        };\n        return ResizeObserver;\n    }());\n\n    exports.ResizeObserver = ResizeObserver;\n    exports.ResizeObserverEntry = ResizeObserverEntry;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","require('../../modules/es.string.iterator');\nrequire('../../modules/es.array.from');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Array.from;\n","require('../../modules/es.array.is-array');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Array.isArray;\n","require('../../../modules/es.array.concat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').concat;\n","require('../../../modules/es.array.copy-within');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').copyWithin;\n","require('../../../modules/es.array.fill');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').fill;\n","require('../../../modules/es.array.for-each');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').forEach;\n","require('../../../modules/es.array.index-of');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').indexOf;\n","require('../../../modules/es.array.slice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').slice;\n","require('../../../modules/es.array.sort');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').sort;\n","require('../../../modules/es.array.splice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').splice;\n","require('../../modules/es.date.now');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Date.now;\n","require('../../../modules/es.function.bind');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Function').bind;\n","var bind = require('../function/virtual/bind');\n\nvar FunctionPrototype = Function.prototype;\n\nmodule.exports = function (it) {\n  var own = it.bind;\n  return it === FunctionPrototype || (it instanceof Function && own === FunctionPrototype.bind) ? bind : own;\n};\n","var concat = require('../array/virtual/concat');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.concat;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.concat) ? concat : own;\n};\n","var copyWithin = require('../array/virtual/copy-within');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.copyWithin;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.copyWithin) ? copyWithin : own;\n};\n","var fill = require('../array/virtual/fill');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.fill;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.fill) ? fill : own;\n};\n","var indexOf = require('../array/virtual/index-of');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.indexOf;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.indexOf) ? indexOf : own;\n};\n","var repeat = require('../string/virtual/repeat');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.repeat;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.repeat) ? repeat : own;\n};\n","var slice = require('../array/virtual/slice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.slice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.slice) ? slice : own;\n};\n","var sort = require('../array/virtual/sort');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.sort;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.sort) ? sort : own;\n};\n","var splice = require('../array/virtual/splice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.splice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.splice) ? splice : own;\n};\n","var startsWith = require('../string/virtual/starts-with');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.startsWith;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.startsWith) ? startsWith : own;\n};\n","var trim = require('../string/virtual/trim');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.trim;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.trim) ? trim : own;\n};\n","require('../../modules/es.object.assign');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.assign;\n","require('../../modules/es.object.create');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nmodule.exports = function create(P, D) {\n  return Object.create(P, D);\n};\n","require('../../modules/es.object.define-property');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar defineProperty = module.exports = function defineProperty(it, key, desc) {\n  return Object.defineProperty(it, key, desc);\n};\n\nif (Object.defineProperty.sham) defineProperty.sham = true;\n","require('../../modules/es.object.entries');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.entries;\n","require('../../modules/es.object.get-own-property-descriptor');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {\n  return Object.getOwnPropertyDescriptor(it, key);\n};\n\nif (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;\n","require('../../modules/es.object.get-prototype-of');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.getPrototypeOf;\n","require('../../modules/es.object.set-prototype-of');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.setPrototypeOf;\n","require('../../modules/es.object.to-string');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\nrequire('../../modules/es.promise');\nrequire('../../modules/es.promise.all-settled');\nrequire('../../modules/es.promise.finally');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Promise;\n","require('../../modules/es.reflect.construct');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Reflect.construct;\n","require('../../modules/es.reflect.get');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Reflect.get;\n","require('../../../modules/es.string.repeat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').repeat;\n","require('../../../modules/es.string.starts-with');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').startsWith;\n","require('../../../modules/es.string.trim');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').trim;\n","require('../../modules/es.array.concat');\nrequire('../../modules/es.object.to-string');\nrequire('../../modules/es.symbol');\nrequire('../../modules/es.symbol.async-iterator');\nrequire('../../modules/es.symbol.description');\nrequire('../../modules/es.symbol.has-instance');\nrequire('../../modules/es.symbol.is-concat-spreadable');\nrequire('../../modules/es.symbol.iterator');\nrequire('../../modules/es.symbol.match');\nrequire('../../modules/es.symbol.match-all');\nrequire('../../modules/es.symbol.replace');\nrequire('../../modules/es.symbol.search');\nrequire('../../modules/es.symbol.species');\nrequire('../../modules/es.symbol.split');\nrequire('../../modules/es.symbol.to-primitive');\nrequire('../../modules/es.symbol.to-string-tag');\nrequire('../../modules/es.symbol.unscopables');\nrequire('../../modules/es.math.to-string-tag');\nrequire('../../modules/es.json.to-string-tag');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Symbol;\n","require('../../modules/es.symbol.iterator');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\nvar WrappedWellKnownSymbolModule = require('../../internals/well-known-symbol-wrapped');\n\nmodule.exports = WrappedWellKnownSymbolModule.f('iterator');\n","require('../modules/web.dom-collections.iterator');\nrequire('../modules/es.string.iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nmodule.exports = getIteratorMethod;\n","require('../modules/web.dom-collections.iterator');\nrequire('../modules/es.string.iterator');\nvar getIterator = require('../internals/get-iterator');\n\nmodule.exports = getIterator;\n","require('../modules/web.dom-collections.iterator');\nrequire('../modules/es.string.iterator');\nvar isIterable = require('../internals/is-iterable');\n\nmodule.exports = isIterable;\n","module.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name) {\n  if (!(it instanceof Constructor)) {\n    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\nvar min = Math.min;\n\n// `Array.prototype.copyWithin` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.fill` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n","'use strict';\nvar bind = require('../internals/function-bind-context');\nvar toObject = require('../internals/to-object');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\n// `Array.from` method implementation\n// https://tc39.github.io/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var C = typeof this == 'function' ? this : Array;\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = iteratorMethod.call(O);\n    next = iterator.next;\n    result = new C();\n    for (;!(step = next.call(iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty(result, index, value);\n    }\n  } else {\n    length = toLength(O.length);\n    result = new C(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else if (IS_EVERY) return false;  // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6)\n};\n","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\n\nvar defineProperty = Object.defineProperty;\nvar cache = {};\n\nvar thrower = function (it) { throw it; };\n\nmodule.exports = function (METHOD_NAME, options) {\n  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n  if (!options) options = {};\n  var method = [][METHOD_NAME];\n  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n  var argument0 = has(options, 0) ? options[0] : thrower;\n  var argument1 = has(options, 1) ? options[1] : undefined;\n\n  return cache[METHOD_NAME] = !!method && !fails(function () {\n    if (ACCESSORS && !DESCRIPTORS) return true;\n    var O = { length: -1 };\n\n    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n    else O[1] = 1;\n\n    method.call(O, argument0, argument1);\n  });\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","var anObject = require('../internals/an-object');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (error) {\n    var returnMethod = iterator['return'];\n    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));\n    throw error;\n  }\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n  }\n  Iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n","var path = require('../internals/path');\nvar has = require('../internals/has');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineProperty = require('../internals/object-define-property').f;\n\nmodule.exports = function (NAME) {\n  var Symbol = path.Symbol || (path.Symbol = {});\n  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {\n    value: wrappedWellKnownSymbolModule.f(NAME)\n  });\n};\n","var fails = require('../internals/fails');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !fails(function () {\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","var userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n","var path = require('../internals/path');\n\nmodule.exports = function (CONSTRUCTOR) {\n  return path[CONSTRUCTOR + 'Prototype'];\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","'use strict';\nvar global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar isForced = require('../internals/is-forced');\nvar path = require('../internals/path');\nvar bind = require('../internals/function-bind-context');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\n\nvar wrapConstructor = function (NativeConstructor) {\n  var Wrapper = function (a, b, c) {\n    if (this instanceof NativeConstructor) {\n      switch (arguments.length) {\n        case 0: return new NativeConstructor();\n        case 1: return new NativeConstructor(a);\n        case 2: return new NativeConstructor(a, b);\n      } return new NativeConstructor(a, b, c);\n    } return NativeConstructor.apply(this, arguments);\n  };\n  Wrapper.prototype = NativeConstructor.prototype;\n  return Wrapper;\n};\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var PROTO = options.proto;\n\n  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;\n\n  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});\n  var targetPrototype = target.prototype;\n\n  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n\n  for (key in source) {\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contains in native\n    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);\n\n    targetProperty = target[key];\n\n    if (USE_NATIVE) if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(nativeSource, key);\n      nativeProperty = descriptor && descriptor.value;\n    } else nativeProperty = nativeSource[key];\n\n    // export native or implementation\n    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];\n\n    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;\n\n    // bind timers to global for call from export context\n    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global);\n    // wrap global constructors for prevent changs in this version\n    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);\n    // make static versions for prototype methods\n    else if (PROTO && typeof sourceProperty == 'function') resultProperty = bind(Function.call, sourceProperty);\n    // default case\n    else resultProperty = sourceProperty;\n\n    // add a flag to not completely full polyfills\n    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(resultProperty, 'sham', true);\n    }\n\n    target[key] = resultProperty;\n\n    if (PROTO) {\n      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n      if (!has(path, VIRTUAL_PROTOTYPE)) {\n        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});\n      }\n      // export virtual prototype methods\n      path[VIRTUAL_PROTOTYPE][key] = sourceProperty;\n      // export real prototype methods\n      if (options.real && targetPrototype && !targetPrototype[key]) {\n        createNonEnumerableProperty(targetPrototype, key, sourceProperty);\n      }\n    }\n  }\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\nvar aFunction = require('../internals/a-function');\nvar isObject = require('../internals/is-object');\n\nvar slice = [].slice;\nvar factories = {};\n\nvar construct = function (C, argsLength, args) {\n  if (!(argsLength in factories)) {\n    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');\n  } return factories[argsLength](C, args);\n};\n\n// `Function.prototype.bind` method implementation\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = slice.call(arguments, 1);\n  var boundFunction = function bound(/* args... */) {\n    var args = partArgs.concat(slice.call(arguments));\n    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);\n  };\n  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;\n  return boundFunction;\n};\n","var path = require('../internals/path');\nvar global = require('../internals/global');\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","var classof = require('../internals/classof');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var anObject = require('../internals/an-object');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nmodule.exports = function (it) {\n  var iteratorMethod = getIteratorMethod(it);\n  if (typeof iteratorMethod != 'function') {\n    throw TypeError(String(it) + ' is not iterable');\n  } return anObject(iteratorMethod.call(it));\n};\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n","var hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = {};\n","var global = require('../internals/global');\n\nmodule.exports = function (a, b) {\n  var console = global.console;\n  if (console && console.error) {\n    arguments.length === 1 ? console.error(a) : console.error(a, b);\n  }\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","var store = require('../internals/shared-store');\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar objectHas = require('../internals/has');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = new WeakMap();\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var fails = require('../internals/fails');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","var classof = require('../internals/classof');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","module.exports = true;\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","var anObject = require('../internals/an-object');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, next, step;\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = AS_ENTRIES\n          ? boundFunction(anObject(step = iterable[index])[0], step[1])\n          : boundFunction(iterable[index]);\n        if (result && result instanceof Result) return result;\n      } return new Result(false);\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n  while (!(step = next.call(iterator)).done) {\n    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  } return new Result(false);\n};\n\niterate.stop = function (result) {\n  return new Result(true, result);\n};\n","'use strict';\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nif (IteratorPrototype == undefined) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar classof = require('../internals/classof-raw');\nvar macrotask = require('../internals/task').set;\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar IS_NODE = classof(process) == 'process';\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  } else if (MutationObserver && !IS_IOS) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    then = promise.then;\n    notify = function () {\n      then.call(promise, flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n}\n\nmodule.exports = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify();\n  } last = task;\n};\n","var global = require('../internals/global');\n\nmodule.exports = global.Promise;\n","var fails = require('../internals/fails');\n\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n","var global = require('../internals/global');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n","'use strict';\nvar aFunction = require('../internals/a-function');\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n};\n\n// 25.4.1.5 NewPromiseCapability(C)\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\n\nvar nativeAssign = Object.assign;\nvar defineProperty = Object.defineProperty;\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\nmodule.exports = !nativeAssign || fails(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject(arguments[index++]);\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : nativeAssign;\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;\n\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return nativeGetOwnPropertyNames(it);\n  } catch (error) {\n    return windowNames.slice();\n  }\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]'\n    ? getWindowNames(it)\n    : nativeGetOwnPropertyNames(toIndexedObject(it));\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","var has = require('../internals/has');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype : null;\n};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","'use strict';\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n","var anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.github.io/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.github.io/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n","module.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n","var anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar newPromiseCapability = require('../internals/new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var redefine = require('../internals/redefine');\n\nmodule.exports = function (target, src, options) {\n  for (var key in src) {\n    if (options && options.unsafe && target[key]) target[key] = src[key];\n    else redefine(target, key, src[key], options);\n  } return target;\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (target, key, value, options) {\n  if (options && options.enumerable) target[key] = value;\n  else createNonEnumerableProperty(target, key, value);\n};\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar definePropertyModule = require('../internals/object-define-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule.f;\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineProperty(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar defineProperty = require('../internals/object-define-property').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar toString = require('../internals/object-to-string');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC, SET_METHOD) {\n  if (it) {\n    var target = STATIC ? it : it.prototype;\n    if (!has(target, TO_STRING_TAG)) {\n      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });\n    }\n    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n      createNonEnumerableProperty(target, 'toString', toString);\n    }\n  }\n};\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.6.4',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n","var anObject = require('../internals/an-object');\nvar aFunction = require('../internals/a-function');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.github.io/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\n};\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var global = require('../internals/global');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\nvar bind = require('../internals/function-bind-context');\nvar html = require('../internals/html');\nvar createElement = require('../internals/document-create-element');\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar location = global.location;\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\n\nvar run = function (id) {\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global.postMessage(id + '', location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (classof(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    typeof postMessage == 'function' &&\n    !global.importScripts &&\n    !fails(post) &&\n    location.protocol !== 'file:'\n  ) {\n    defer = post;\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n","var toInteger = require('../internals/to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","var toInteger = require('../internals/to-integer');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n","var NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  // eslint-disable-next-line no-undef\n  && !Symbol.sham\n  // eslint-disable-next-line no-undef\n  && typeof Symbol.iterator == 'symbol';\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nexports.f = wellKnownSymbol;\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar has = require('../internals/has');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name)) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];\n    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","'use strict';\nvar $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\nvar copyWithin = require('../internals/array-copy-within');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.copyWithin` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\n$({ target: 'Array', proto: true }, {\n  copyWithin: copyWithin\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('copyWithin');\n","var $ = require('../internals/export');\nvar fill = require('../internals/array-fill');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n","'use strict';\nvar $ = require('../internals/export');\nvar forEach = require('../internals/array-for-each');\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {\n  forEach: forEach\n});\n","var $ = require('../internals/export');\nvar from = require('../internals/array-from');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.github.io/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var $ = require('../internals/export');\nvar isArray = require('../internals/is-array');\n\n// `Array.isArray` method\n// https://tc39.github.io/ecma262/#sec-array.isarray\n$({ target: 'Array', stat: true }, {\n  isArray: isArray\n});\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.github.io/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar test = [];\nvar nativeSort = test.sort;\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;\n\n// `Array.prototype.sort` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? nativeSort.call(toObject(this))\n      : nativeSort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\n\n// `Date.now` method\n// https://tc39.github.io/ecma262/#sec-date.now\n$({ target: 'Date', stat: true }, {\n  now: function now() {\n    return new Date().getTime();\n  }\n});\n","var $ = require('../internals/export');\nvar bind = require('../internals/function-bind');\n\n// `Function.prototype.bind` method\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\n$({ target: 'Function', proto: true }, {\n  bind: bind\n});\n","var global = require('../internals/global');\nvar setToStringTag = require('../internals/set-to-string-tag');\n\n// JSON[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-json-@@tostringtag\nsetToStringTag(global.JSON, 'JSON', true);\n","var setToStringTag = require('../internals/set-to-string-tag');\n\n// Math[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-math-@@tostringtag\nsetToStringTag(Math, 'Math', true);\n","var $ = require('../internals/export');\nvar assign = require('../internals/object-assign');\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {\n  assign: assign\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar create = require('../internals/object-create');\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\n$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {\n  create: create\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar objectDefinePropertyModile = require('../internals/object-define-property');\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\n$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {\n  defineProperty: objectDefinePropertyModile.f\n});\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.github.io/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });\nvar FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\n$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);\n  }\n});\n","var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toObject = require('../internals/to-object');\nvar nativeGetPrototypeOf = require('../internals/object-get-prototype-of');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\n$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {\n  getPrototypeOf: function getPrototypeOf(it) {\n    return nativeGetPrototypeOf(toObject(it));\n  }\n});\n\n","var $ = require('../internals/export');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n$({ target: 'Object', stat: true }, {\n  setPrototypeOf: setPrototypeOf\n});\n","// empty\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://github.com/tc39/proposal-promise-allSettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (e) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: e };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.github.io/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = typeof onFinally == 'function';\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// patch native Promise.prototype for native async functions\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar setSpecies = require('../internals/set-species');\nvar isObject = require('../internals/is-object');\nvar aFunction = require('../internals/a-function');\nvar anInstance = require('../internals/an-instance');\nvar classof = require('../internals/classof-raw');\nvar inspectSource = require('../internals/inspect-source');\nvar iterate = require('../internals/iterate');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar speciesConstructor = require('../internals/species-constructor');\nvar task = require('../internals/task').set;\nvar microtask = require('../internals/microtask');\nvar promiseResolve = require('../internals/promise-resolve');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar InternalStateModule = require('../internals/internal-state');\nvar isForced = require('../internals/is-forced');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\nvar PROMISE = 'Promise';\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar PromiseConstructor = NativePromise;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar $fetch = getBuiltIn('fetch');\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\nvar IS_NODE = classof(process) == 'process';\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\nvar FORCED = isForced(PROMISE, function () {\n  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);\n  if (!GLOBAL_CORE_JS_PROMISE) {\n    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n    // We can't detect it synchronously, so just check versions\n    if (V8_VERSION === 66) return true;\n    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;\n  }\n  // We need Promise#finally in the pure version for preventing prototype pollution\n  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = PromiseConstructor.resolve(1);\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES] = FakePromise;\n  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);\n});\n\nvar INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {\n  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });\n});\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\n\nvar notify = function (promise, state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  var chain = state.reactions;\n  microtask(function () {\n    var value = state.value;\n    var ok = state.state == FULFILLED;\n    var index = 0;\n    // variable length - can't use forEach\n    while (chain.length > index) {\n      var reaction = chain[index++];\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);\n            state.rejection = HANDLED;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // can throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (error) {\n        if (domain && !exited) domain.exit();\n        reject(error);\n      }\n    }\n    state.reactions = [];\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(promise, state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (handler = global['on' + name]) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (promise, state) {\n  task.call(global, function () {\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (promise, state) {\n  task.call(global, function () {\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, promise, state, unwrap) {\n  return function (value) {\n    fn(promise, state, value, unwrap);\n  };\n};\n\nvar internalReject = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(promise, state, true);\n};\n\nvar internalResolve = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          then.call(value,\n            bind(internalResolve, promise, wrapper, state),\n            bind(internalReject, promise, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(promise, wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(promise, state, false);\n    }\n  } catch (error) {\n    internalReject(promise, { done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromiseConstructor, PROMISE);\n    aFunction(executor);\n    Internal.call(this);\n    var state = getInternalState(this);\n    try {\n      executor(bind(internalResolve, this, state), bind(internalReject, this, state));\n    } catch (error) {\n      internalReject(this, state, error);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: [],\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n  Internal.prototype = redefineAll(PromiseConstructor.prototype, {\n    // `Promise.prototype.then` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.then\n    then: function then(onFulfilled, onRejected) {\n      var state = getInternalPromiseState(this);\n      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = IS_NODE ? process.domain : undefined;\n      state.parent = true;\n      state.reactions.push(reaction);\n      if (state.state != PENDING) notify(this, state, false);\n      return reaction.promise;\n    },\n    // `Promise.prototype.catch` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, promise, state);\n    this.reject = bind(internalReject, promise, state);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && typeof NativePromise == 'function') {\n    nativeThen = NativePromise.prototype.then;\n\n    // wrap native Promise#then for native async functions\n    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {\n      var that = this;\n      return new PromiseConstructor(function (resolve, reject) {\n        nativeThen.call(that, resolve, reject);\n      }).then(onFulfilled, onRejected);\n    // https://github.com/zloirock/core-js/issues/640\n    }, { unsafe: true });\n\n    // wrap fetch result\n    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {\n      // eslint-disable-next-line no-unused-vars\n      fetch: function fetch(input /* , init */) {\n        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));\n      }\n    });\n  }\n}\n\n$({ global: true, wrap: true, forced: FORCED }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n\nPromiseWrapper = getBuiltIn(PROMISE);\n\n// statics\n$({ target: PROMISE, stat: true, forced: FORCED }, {\n  // `Promise.reject` method\n  // https://tc39.github.io/ecma262/#sec-promise.reject\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    capability.reject.call(undefined, r);\n    return capability.promise;\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {\n  // `Promise.resolve` method\n  // https://tc39.github.io/ecma262/#sec-promise.resolve\n  resolve: function resolve(x) {\n    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {\n  // `Promise.all` method\n  // https://tc39.github.io/ecma262/#sec-promise.all\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        $promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  },\n  // `Promise.race` method\n  // https://tc39.github.io/ecma262/#sec-promise.race\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      iterate(iterable, function (promise) {\n        $promiseResolve.call(C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","var $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar aFunction = require('../internals/a-function');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar create = require('../internals/object-create');\nvar bind = require('../internals/function-bind');\nvar fails = require('../internals/fails');\n\nvar nativeConstruct = getBuiltIn('Reflect', 'construct');\n\n// `Reflect.construct` method\n// https://tc39.github.io/ecma262/#sec-reflect.construct\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  nativeConstruct(function () { /* empty */ });\n});\nvar FORCED = NEW_TARGET_BUG || ARGS_BUG;\n\n$({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","var $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar anObject = require('../internals/an-object');\nvar has = require('../internals/has');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\n\n// `Reflect.get` method\n// https://tc39.github.io/ecma262/#sec-reflect.get\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var descriptor, prototype;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value')\n    ? descriptor.value\n    : descriptor.get === undefined\n      ? undefined\n      : descriptor.get.call(receiver);\n  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);\n}\n\n$({ target: 'Reflect', stat: true }, {\n  get: get\n});\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n","var $ = require('../internals/export');\nvar repeat = require('../internals/string-repeat');\n\n// `String.prototype.repeat` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\n$({ target: 'String', proto: true }, {\n  repeat: repeat\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar toLength = require('../internals/to-length');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\nvar IS_PURE = require('../internals/is-pure');\n\nvar nativeStartsWith = ''.startsWith;\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith\n      ? nativeStartsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.asyncIterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.asynciterator\ndefineWellKnownSymbol('asyncIterator');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.hasInstance` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.hasinstance\ndefineWellKnownSymbol('hasInstance');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.isConcatSpreadable` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable\ndefineWellKnownSymbol('isConcatSpreadable');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar IS_PURE = require('../internals/is-pure');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar nativeObjectCreate = require('../internals/object-create');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar shared = require('../internals/shared');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar uid = require('../internals/uid');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineWellKnownSymbol = require('../internals/define-well-known-symbol');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar InternalStateModule = require('../internals/internal-state');\nvar $forEach = require('../internals/array-iteration').forEach;\n\nvar HIDDEN = sharedKey('hidden');\nvar SYMBOL = 'Symbol';\nvar PROTOTYPE = 'prototype';\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(SYMBOL);\nvar ObjectPrototype = Object[PROTOTYPE];\nvar $Symbol = global.Symbol;\nvar $stringify = getBuiltIn('JSON', 'stringify');\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\nvar nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\nvar AllSymbols = shared('symbols');\nvar ObjectPrototypeSymbols = shared('op-symbols');\nvar StringToSymbolRegistry = shared('string-to-symbol-registry');\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\nvar WellKnownSymbolsStore = shared('wks');\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDescriptor = DESCRIPTORS && fails(function () {\n  return nativeObjectCreate(nativeDefineProperty({}, 'a', {\n    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (O, P, Attributes) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];\n  nativeDefineProperty(O, P, Attributes);\n  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {\n    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);\n  }\n} : nativeDefineProperty;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);\n  setInternalState(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!DESCRIPTORS) symbol.description = description;\n  return symbol;\n};\n\nvar isSymbol = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return Object(it) instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(O, P, Attributes) {\n  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n  anObject(O);\n  var key = toPrimitive(P, true);\n  anObject(Attributes);\n  if (has(AllSymbols, key)) {\n    if (!Attributes.enumerable) {\n      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));\n      O[HIDDEN][key] = true;\n    } else {\n      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(O, key, Attributes);\n  } return nativeDefineProperty(O, key, Attributes);\n};\n\nvar $defineProperties = function defineProperties(O, Properties) {\n  anObject(O);\n  var properties = toIndexedObject(Properties);\n  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n  $forEach(keys, function (key) {\n    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);\n  });\n  return O;\n};\n\nvar $create = function create(O, Properties) {\n  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(V) {\n  var P = toPrimitive(V, true);\n  var enumerable = nativePropertyIsEnumerable.call(this, P);\n  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;\n  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n  var it = toIndexedObject(O);\n  var key = toPrimitive(P, true);\n  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;\n  var descriptor = nativeGetOwnPropertyDescriptor(it, key);\n  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {\n    descriptor.enumerable = true;\n  }\n  return descriptor;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(O) {\n  var names = nativeGetOwnPropertyNames(toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);\n  });\n  return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(O) {\n  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;\n  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {\n      result.push(AllSymbols[key]);\n    }\n  });\n  return result;\n};\n\n// `Symbol` constructor\n// https://tc39.github.io/ecma262/#sec-symbol-constructor\nif (!NATIVE_SYMBOL) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');\n    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var tag = uid(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n    };\n    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  redefine($Symbol, 'withoutSetter', function (description) {\n    return wrap(uid(description), description);\n  });\n\n  propertyIsEnumerableModule.f = $propertyIsEnumerable;\n  definePropertyModule.f = $defineProperty;\n  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;\n  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;\n\n  wrappedWellKnownSymbolModule.f = function (name) {\n    return wrap(wellKnownSymbol(name), name);\n  };\n\n  if (DESCRIPTORS) {\n    // https://github.com/tc39/proposal-Symbol-description\n    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n    if (!IS_PURE) {\n      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });\n    }\n  }\n}\n\n$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {\n  Symbol: $Symbol\n});\n\n$forEach(objectKeys(WellKnownSymbolsStore), function (name) {\n  defineWellKnownSymbol(name);\n});\n\n$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Symbol.for` method\n  // https://tc39.github.io/ecma262/#sec-symbol.for\n  'for': function (key) {\n    var string = String(key);\n    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n    var symbol = $Symbol(string);\n    StringToSymbolRegistry[string] = symbol;\n    SymbolToStringRegistry[symbol] = string;\n    return symbol;\n  },\n  // `Symbol.keyFor` method\n  // https://tc39.github.io/ecma262/#sec-symbol.keyfor\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');\n    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  },\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {\n  // `Object.create` method\n  // https://tc39.github.io/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // `Object.getOwnPropertySymbols` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\n$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return getOwnPropertySymbolsModule.f(toObject(it));\n  }\n});\n\n// `JSON.stringify` method behavior with symbols\n// https://tc39.github.io/ecma262/#sec-json.stringify\nif ($stringify) {\n  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {\n    var symbol = $Symbol();\n    // MS Edge converts symbol values to JSON as {}\n    return $stringify([symbol]) != '[null]'\n      // WebKit converts symbol values to JSON as null\n      || $stringify({ a: symbol }) != '{}'\n      // V8 throws on boxed symbols\n      || $stringify(Object(symbol)) != '{}';\n  });\n\n  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {\n    // eslint-disable-next-line no-unused-vars\n    stringify: function stringify(it, replacer, space) {\n      var args = [it];\n      var index = 1;\n      var $replacer;\n      while (arguments.length > index) args.push(arguments[index++]);\n      $replacer = replacer;\n      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n      if (!isArray(replacer)) replacer = function (key, value) {\n        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n        if (!isSymbol(value)) return value;\n      };\n      args[1] = replacer;\n      return $stringify.apply(null, args);\n    }\n  });\n}\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive\nif (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {\n  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n}\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag($Symbol, SYMBOL);\n\nhiddenKeys[HIDDEN] = true;\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.matchAll` well-known symbol\ndefineWellKnownSymbol('matchAll');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.match` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.match\ndefineWellKnownSymbol('match');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.replace` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.replace\ndefineWellKnownSymbol('replace');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.search` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.search\ndefineWellKnownSymbol('search');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.species` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.species\ndefineWellKnownSymbol('species');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.split` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.split\ndefineWellKnownSymbol('split');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toStringTag` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.tostringtag\ndefineWellKnownSymbol('toStringTag');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.unscopables` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.unscopables\ndefineWellKnownSymbol('unscopables');\n","require('./es.array.iterator');\nvar DOMIterables = require('../internals/dom-iterables');\nvar global = require('../internals/global');\nvar classof = require('../internals/classof');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {\n    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n  }\n  Iterators[COLLECTION_NAME] = Iterators.Array;\n}\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar task = require('../internals/task');\n\nvar FORCED = !global.setImmediate || !global.clearImmediate;\n\n// http://w3c.github.io/setImmediate/\n$({ global: true, bind: true, enumerable: true, forced: FORCED }, {\n  // `setImmediate` method\n  // http://w3c.github.io/setImmediate/#si-setImmediate\n  setImmediate: task.set,\n  // `clearImmediate` method\n  // http://w3c.github.io/setImmediate/#si-clearImmediate\n  clearImmediate: task.clear\n});\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\n\nvar wrap = function (scheduler) {\n  return function (handler, timeout /* , ...arguments */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : undefined;\n    return scheduler(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);\n    } : handler, timeout);\n  };\n};\n\n// ie9- setTimeout & setInterval additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n$({ global: true, bind: true, forced: MSIE }, {\n  // `setTimeout` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\n  setTimeout: wrap(global.setTimeout),\n  // `setInterval` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\n  setInterval: wrap(global.setInterval)\n});\n","var parent = require('../../es/array/from');\n\nmodule.exports = parent;\n","var parent = require('../../es/array/is-array');\n\nmodule.exports = parent;\n","var parent = require('../../../es/array/virtual/for-each');\n\nmodule.exports = parent;\n","var parent = require('../../es/date/now');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/bind');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/concat');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/copy-within');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/fill');\n\nmodule.exports = parent;\n","require('../../modules/web.dom-collections.iterator');\nvar forEach = require('../array/virtual/for-each');\nvar classof = require('../../internals/classof');\nvar ArrayPrototype = Array.prototype;\n\nvar DOMIterables = {\n  DOMTokenList: true,\n  NodeList: true\n};\n\nmodule.exports = function (it) {\n  var own = it.forEach;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.forEach)\n    // eslint-disable-next-line no-prototype-builtins\n    || DOMIterables.hasOwnProperty(classof(it)) ? forEach : own;\n};\n","var parent = require('../../es/instance/index-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/repeat');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/slice');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/sort');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/splice');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/starts-with');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/trim');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/assign');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/create');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/define-property');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/entries');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/get-own-property-descriptor');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/get-prototype-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/set-prototype-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/promise');\n\nmodule.exports = parent;\n","var parent = require('../../es/reflect/construct');\n\nmodule.exports = parent;\n","var parent = require('../../es/reflect/get');\n\nmodule.exports = parent;\n","require('../modules/web.immediate');\nvar path = require('../internals/path');\n\nmodule.exports = path.setImmediate;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setInterval;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setTimeout;\n","var parent = require('../../es/symbol');\n\nmodule.exports = parent;\n","var parent = require('../../es/symbol/iterator');\n\nmodule.exports = parent;\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar create = require('../internals/object-create');\nvar definePropertyModule = require('../internals/object-define-property');\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';\n","'use strict';\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar defineProperty = require('../internals/object-define-property').f;\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar uid = require('../internals/uid');\n\nvar Int8Array = global.Int8Array;\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\nvar Uint8ClampedArray = global.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\nvar TypedArray = Int8Array && getPrototypeOf(Int8Array);\nvar TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\nvar ObjectPrototype = Object.prototype;\nvar isPrototypeOf = ObjectPrototype.isPrototypeOf;\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQIRED = false;\nvar NAME;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar isView = function isView(it) {\n  var klass = classof(it);\n  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);\n};\n\nvar isTypedArray = function (it) {\n  return isObject(it) && has(TypedArrayConstructorsList, classof(it));\n};\n\nvar aTypedArray = function (it) {\n  if (isTypedArray(it)) return it;\n  throw TypeError('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor = function (C) {\n  if (setPrototypeOf) {\n    if (isPrototypeOf.call(TypedArray, C)) return C;\n  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {\n    var TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {\n      return C;\n    }\n  } throw TypeError('Target is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod = function (KEY, property, forced) {\n  if (!DESCRIPTORS) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {\n      delete TypedArrayConstructor.prototype[KEY];\n    }\n  }\n  if (!TypedArrayPrototype[KEY] || forced) {\n    redefine(TypedArrayPrototype, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);\n  }\n};\n\nvar exportTypedArrayStaticMethod = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS) return;\n  if (setPrototypeOf) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = global[ARRAY];\n      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {\n        delete TypedArrayConstructor[KEY];\n      }\n    }\n    if (!TypedArray[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      redefine(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {\n  // eslint-disable-next-line no-shadow\n  TypedArray = function TypedArray() {\n    throw TypeError('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\n  TypedArrayPrototype = TypedArray.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\n  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\n}\n\nif (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQIRED = true;\n  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {\n    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\n  } });\n  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {\n    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);\n  }\n}\n\nmodule.exports = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,\n  aTypedArray: aTypedArray,\n  aTypedArrayConstructor: aTypedArrayConstructor,\n  exportTypedArrayMethod: exportTypedArrayMethod,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\n  isView: isView,\n  isTypedArray: isTypedArray,\n  TypedArray: TypedArray,\n  TypedArrayPrototype: TypedArrayPrototype\n};\n","'use strict';\nvar global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefineAll = require('../internals/redefine-all');\nvar fails = require('../internals/fails');\nvar anInstance = require('../internals/an-instance');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toIndex = require('../internals/to-index');\nvar IEEE754 = require('../internals/ieee754');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar arrayFill = require('../internals/array-fill');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length';\nvar WRONG_INDEX = 'Wrong index';\nvar NativeArrayBuffer = global[ARRAY_BUFFER];\nvar $ArrayBuffer = NativeArrayBuffer;\nvar $DataView = global[DATA_VIEW];\nvar $DataViewPrototype = $DataView && $DataView[PROTOTYPE];\nvar ObjectPrototype = Object.prototype;\nvar RangeError = global.RangeError;\n\nvar packIEEE754 = IEEE754.pack;\nvar unpackIEEE754 = IEEE754.unpack;\n\nvar packInt8 = function (number) {\n  return [number & 0xFF];\n};\n\nvar packInt16 = function (number) {\n  return [number & 0xFF, number >> 8 & 0xFF];\n};\n\nvar packInt32 = function (number) {\n  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];\n};\n\nvar unpackInt32 = function (buffer) {\n  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];\n};\n\nvar packFloat32 = function (number) {\n  return packIEEE754(number, 23, 4);\n};\n\nvar packFloat64 = function (number) {\n  return packIEEE754(number, 52, 8);\n};\n\nvar addGetter = function (Constructor, key) {\n  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });\n};\n\nvar get = function (view, count, index, isLittleEndian) {\n  var intIndex = toIndex(index);\n  var store = getInternalState(view);\n  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);\n  var bytes = getInternalState(store.buffer).bytes;\n  var start = intIndex + store.byteOffset;\n  var pack = bytes.slice(start, start + count);\n  return isLittleEndian ? pack : pack.reverse();\n};\n\nvar set = function (view, count, index, conversion, value, isLittleEndian) {\n  var intIndex = toIndex(index);\n  var store = getInternalState(view);\n  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);\n  var bytes = getInternalState(store.buffer).bytes;\n  var start = intIndex + store.byteOffset;\n  var pack = conversion(+value);\n  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];\n};\n\nif (!NATIVE_ARRAY_BUFFER) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    setInternalState(this, {\n      bytes: arrayFill.call(new Array(byteLength), 0),\n      byteLength: byteLength\n    });\n    if (!DESCRIPTORS) this.byteLength = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = getInternalState(buffer).byteLength;\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    setInternalState(this, {\n      buffer: buffer,\n      byteLength: byteLength,\n      byteOffset: offset\n    });\n    if (!DESCRIPTORS) {\n      this.buffer = buffer;\n      this.byteLength = byteLength;\n      this.byteOffset = offset;\n    }\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, 'byteLength');\n    addGetter($DataView, 'buffer');\n    addGetter($DataView, 'byteLength');\n    addGetter($DataView, 'byteOffset');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packInt8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packInt8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);\n    }\n  });\n} else {\n  if (!fails(function () {\n    NativeArrayBuffer(1);\n  }) || !fails(function () {\n    new NativeArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new NativeArrayBuffer(); // eslint-disable-line no-new\n    new NativeArrayBuffer(1.5); // eslint-disable-line no-new\n    new NativeArrayBuffer(NaN); // eslint-disable-line no-new\n    return NativeArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new NativeArrayBuffer(toIndex(length));\n    };\n    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];\n    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) {\n        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);\n      }\n    }\n    ArrayBufferPrototype.constructor = $ArrayBuffer;\n  }\n\n  // WebKit bug - the same parent prototype for typed arrays and data view\n  if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {\n    setPrototypeOf($DataViewPrototype, ObjectPrototype);\n  }\n\n  // iOS Safari 7.x bug\n  var testView = new $DataView(new $ArrayBuffer(2));\n  var nativeSetInt8 = $DataViewPrototype.setInt8;\n  testView.setInt8(0, 2147483648);\n  testView.setInt8(1, 2147483649);\n  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {\n    setInt8: function setInt8(byteOffset, value) {\n      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, { unsafe: true });\n}\n\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\n\nmodule.exports = {\n  ArrayBuffer: $ArrayBuffer,\n  DataView: $DataView\n};\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar min = Math.min;\nvar nativeLastIndexOf = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');\n// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\nvar FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;\n\n// `Array.prototype.lastIndexOf` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof\nmodule.exports = FORCED ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n  // convert -0 to +0\n  if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;\n  var O = toIndexedObject(this);\n  var length = toLength(O.length);\n  var index = length - 1;\n  if (arguments.length > 1) index = min(index, toInteger(arguments[1]));\n  if (index < 0) index = length + index;\n  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;\n  return -1;\n} : nativeLastIndexOf;\n","var aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n","var has = require('../internals/has');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar setGlobal = require('../internals/set-global');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty === typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n","'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// IE <= 11 replaces $0 with the whole match, as if it was $&\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\nvar REPLACE_KEEPS_$0 = (function () {\n  return 'a'.replace(/./, '$0') === '$0';\n})();\n\nvar REPLACE = wellKnownSymbol('replace');\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n  if (/./[REPLACE]) {\n    return /./[REPLACE]('a', '$0') === '';\n  }\n  return false;\n})();\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !(\n      REPLACE_SUPPORTS_NAMED_GROUPS &&\n      REPLACE_KEEPS_$0 &&\n      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    )) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    }, {\n      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,\n      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n  }\n\n  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n};\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n","// IEEE754 conversions based on https://github.com/feross/ieee754\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = 1 / 0;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nvar pack = function (number, mantissaLength, bytes) {\n  var buffer = new Array(bytes);\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;\n  var index = 0;\n  var exponent, mantissa, c;\n  number = abs(number);\n  // eslint-disable-next-line no-self-compare\n  if (number != number || number === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    mantissa = number != number ? 1 : 0;\n    exponent = eMax;\n  } else {\n    exponent = floor(log(number) / LN2);\n    if (number * (c = pow(2, -exponent)) < 1) {\n      exponent--;\n      c *= 2;\n    }\n    if (exponent + eBias >= 1) {\n      number += rt / c;\n    } else {\n      number += rt * pow(2, 1 - eBias);\n    }\n    if (number * c >= 2) {\n      exponent++;\n      c /= 2;\n    }\n    if (exponent + eBias >= eMax) {\n      mantissa = 0;\n      exponent = eMax;\n    } else if (exponent + eBias >= 1) {\n      mantissa = (number * c - 1) * pow(2, mantissaLength);\n      exponent = exponent + eBias;\n    } else {\n      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);\n      exponent = 0;\n    }\n  }\n  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);\n  exponent = exponent << mantissaLength | mantissa;\n  exponentLength += mantissaLength;\n  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);\n  buffer[--index] |= sign * 128;\n  return buffer;\n};\n\nvar unpack = function (buffer, mantissaLength) {\n  var bytes = buffer.length;\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var nBits = exponentLength - 7;\n  var index = bytes - 1;\n  var sign = buffer[index--];\n  var exponent = sign & 127;\n  var mantissa;\n  sign >>= 7;\n  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);\n  mantissa = exponent & (1 << -nBits) - 1;\n  exponent >>= -nBits;\n  nBits += mantissaLength;\n  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);\n  if (exponent === 0) {\n    exponent = 1 - eBias;\n  } else if (exponent === eMax) {\n    return mantissa ? NaN : sign ? -Infinity : Infinity;\n  } else {\n    mantissa = mantissa + pow(2, mantissaLength);\n    exponent = exponent - eBias;\n  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);\n};\n\nmodule.exports = {\n  pack: pack,\n  unpack: unpack\n};\n","var isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n","module.exports = false;\n","var getBuiltIn = require('../internals/get-built-in');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n","var global = require('../internals/global');\n\nmodule.exports = global;\n","var redefine = require('../internals/redefine');\n\nmodule.exports = function (target, src, options) {\n  for (var key in src) redefine(target, key, src[key], options);\n  return target;\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar setGlobal = require('../internals/set-global');\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);\n    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n});\n","var classof = require('./classof-raw');\nvar regexpExec = require('./regexp-exec');\n\n// `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n\n  if (classof(R) !== 'RegExp') {\n    throw TypeError('RegExp#exec called on incompatible receiver');\n  }\n\n  return regexpExec.call(R, S);\n};\n\n","'use strict';\nvar regexpFlags = require('./regexp-flags');\nvar stickyHelpers = require('./regexp-sticky-helpers');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = regexpFlags.call(re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = flags.replace('y', '');\n      if (flags.indexOf('g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = String(str).slice(re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = match.input.slice(charsAdded);\n        match[0] = match[0].slice(charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","'use strict';\n\nvar fails = require('./fails');\n\n// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,\n// so we use an intermediate function.\nfunction RE(s, f) {\n  return RegExp(s, f);\n}\n\nexports.UNSUPPORTED_Y = fails(function () {\n  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\n  var re = RE('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\nexports.BROKEN_CARET = fails(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = RE('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n","var defineProperty = require('../internals/object-define-property').f;\nvar has = require('../internals/has');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC) {\n  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.6.5',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n","var classof = require('../internals/classof-raw');\n\n// `thisNumberValue` abstract operation\n// https://tc39.github.io/ecma262/#sec-thisnumbervalue\nmodule.exports = function (value) {\n  if (typeof value != 'number' && classof(value) != 'Number') {\n    throw TypeError('Incorrect invocation');\n  }\n  return +value;\n};\n","var toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\n\n// `ToIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-toindex\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length or index');\n  return length;\n};\n","var toPositiveInteger = require('../internals/to-positive-integer');\n\nmodule.exports = function (it, BYTES) {\n  var offset = toPositiveInteger(it);\n  if (offset % BYTES) throw RangeError('Wrong offset');\n  return offset;\n};\n","var toInteger = require('../internals/to-integer');\n\nmodule.exports = function (it) {\n  var result = toInteger(it);\n  if (result < 0) throw RangeError(\"The argument can't be less than 0\");\n  return result;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar ArrayBufferModule = require('../internals/array-buffer');\nvar anInstance = require('../internals/an-instance');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar toLength = require('../internals/to-length');\nvar toIndex = require('../internals/to-index');\nvar toOffset = require('../internals/to-offset');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof');\nvar isObject = require('../internals/is-object');\nvar create = require('../internals/object-create');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar typedArrayFrom = require('../internals/typed-array-from');\nvar forEach = require('../internals/array-iteration').forEach;\nvar setSpecies = require('../internals/set-species');\nvar definePropertyModule = require('../internals/object-define-property');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar InternalStateModule = require('../internals/internal-state');\nvar inheritIfRequired = require('../internals/inherit-if-required');\n\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar round = Math.round;\nvar RangeError = global.RangeError;\nvar ArrayBuffer = ArrayBufferModule.ArrayBuffer;\nvar DataView = ArrayBufferModule.DataView;\nvar NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;\nvar TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;\nvar TypedArray = ArrayBufferViewCore.TypedArray;\nvar TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar isTypedArray = ArrayBufferViewCore.isTypedArray;\nvar BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\nvar WRONG_LENGTH = 'Wrong length';\n\nvar fromList = function (C, list) {\n  var index = 0;\n  var length = list.length;\n  var result = new (aTypedArrayConstructor(C))(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n};\n\nvar addGetter = function (it, key) {\n  nativeDefineProperty(it, key, { get: function () {\n    return getInternalState(this)[key];\n  } });\n};\n\nvar isArrayBuffer = function (it) {\n  var klass;\n  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';\n};\n\nvar isTypedArrayIndex = function (target, key) {\n  return isTypedArray(target)\n    && typeof key != 'symbol'\n    && key in target\n    && String(+key) == String(key);\n};\n\nvar wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {\n  return isTypedArrayIndex(target, key = toPrimitive(key, true))\n    ? createPropertyDescriptor(2, target[key])\n    : nativeGetOwnPropertyDescriptor(target, key);\n};\n\nvar wrappedDefineProperty = function defineProperty(target, key, descriptor) {\n  if (isTypedArrayIndex(target, key = toPrimitive(key, true))\n    && isObject(descriptor)\n    && has(descriptor, 'value')\n    && !has(descriptor, 'get')\n    && !has(descriptor, 'set')\n    // TODO: add validation descriptor w/o calling accessors\n    && !descriptor.configurable\n    && (!has(descriptor, 'writable') || descriptor.writable)\n    && (!has(descriptor, 'enumerable') || descriptor.enumerable)\n  ) {\n    target[key] = descriptor.value;\n    return target;\n  } return nativeDefineProperty(target, key, descriptor);\n};\n\nif (DESCRIPTORS) {\n  if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;\n    definePropertyModule.f = wrappedDefineProperty;\n    addGetter(TypedArrayPrototype, 'buffer');\n    addGetter(TypedArrayPrototype, 'byteOffset');\n    addGetter(TypedArrayPrototype, 'byteLength');\n    addGetter(TypedArrayPrototype, 'length');\n  }\n\n  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {\n    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,\n    defineProperty: wrappedDefineProperty\n  });\n\n  module.exports = function (TYPE, wrapper, CLAMPED) {\n    var BYTES = TYPE.match(/\\d+$/)[0] / 8;\n    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + TYPE;\n    var SETTER = 'set' + TYPE;\n    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];\n    var TypedArrayConstructor = NativeTypedArrayConstructor;\n    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;\n    var exported = {};\n\n    var getter = function (that, index) {\n      var data = getInternalState(that);\n      return data.view[GETTER](index * BYTES + data.byteOffset, true);\n    };\n\n    var setter = function (that, index, value) {\n      var data = getInternalState(that);\n      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;\n      data.view[SETTER](index * BYTES + data.byteOffset, value, true);\n    };\n\n    var addElement = function (that, index) {\n      nativeDefineProperty(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n\n    if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {\n        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);\n        var index = 0;\n        var byteOffset = 0;\n        var buffer, byteLength, length;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new ArrayBuffer(byteLength);\n        } else if (isArrayBuffer(data)) {\n          buffer = data;\n          byteOffset = toOffset(offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - byteOffset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (isTypedArray(data)) {\n          return fromList(TypedArrayConstructor, data);\n        } else {\n          return typedArrayFrom.call(TypedArrayConstructor, data);\n        }\n        setInternalState(that, {\n          buffer: buffer,\n          byteOffset: byteOffset,\n          byteLength: byteLength,\n          length: length,\n          view: new DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\n      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);\n    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {\n      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {\n        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);\n        return inheritIfRequired(function () {\n          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));\n          if (isArrayBuffer(data)) return $length !== undefined\n            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)\n            : typedArrayOffset !== undefined\n              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))\n              : new NativeTypedArrayConstructor(data);\n          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);\n          return typedArrayFrom.call(TypedArrayConstructor, data);\n        }(), dummy, TypedArrayConstructor);\n      });\n\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\n      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {\n        if (!(key in TypedArrayConstructor)) {\n          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);\n        }\n      });\n      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;\n    }\n\n    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {\n      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);\n    }\n\n    if (TYPED_ARRAY_TAG) {\n      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);\n    }\n\n    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;\n\n    $({\n      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS\n    }, exported);\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {\n      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);\n    }\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {\n      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);\n    }\n\n    setSpecies(CONSTRUCTOR_NAME);\n  };\n} else module.exports = function () { /* empty */ };\n","/* eslint-disable no-new */\nvar global = require('../internals/global');\nvar fails = require('../internals/fails');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar NATIVE_ARRAY_BUFFER_VIEWS = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;\n\nvar ArrayBuffer = global.ArrayBuffer;\nvar Int8Array = global.Int8Array;\n\nmodule.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {\n  Int8Array(1);\n}) || !fails(function () {\n  new Int8Array(-1);\n}) || !checkCorrectnessOfIteration(function (iterable) {\n  new Int8Array();\n  new Int8Array(null);\n  new Int8Array(1.5);\n  new Int8Array(iterable);\n}, true) || fails(function () {\n  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill\n  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;\n});\n","var toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar bind = require('../internals/function-bind-context');\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\n\nmodule.exports = function from(source /* , mapfn, thisArg */) {\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, step, iterator, next;\n  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = iteratorMethod.call(O);\n    next = iterator.next;\n    O = [];\n    while (!(step = next.call(iterator)).done) {\n      O.push(step.value);\n    }\n  }\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2], 2);\n  }\n  length = toLength(O.length);\n  result = new (aTypedArrayConstructor(this))(length);\n  for (i = 0; length > i; i++) {\n    result[i] = mapping ? mapfn(O[i], i) : O[i];\n  }\n  return result;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","var DESCRIPTORS = require('../internals/descriptors');\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar FunctionPrototype = Function.prototype;\nvar FunctionPrototypeToString = FunctionPrototype.toString;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// Function instances `.name` property\n// https://tc39.github.io/ecma262/#sec-function-instances-name\nif (DESCRIPTORS && !(NAME in FunctionPrototype)) {\n  defineProperty(FunctionPrototype, NAME, {\n    configurable: true,\n    get: function () {\n      try {\n        return FunctionPrototypeToString.call(this).match(nameRE)[1];\n      } catch (error) {\n        return '';\n      }\n    }\n  });\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar toInteger = require('../internals/to-integer');\nvar thisNumberValue = require('../internals/this-number-value');\nvar repeat = require('../internals/string-repeat');\nvar fails = require('../internals/fails');\n\nvar nativeToFixed = 1.0.toFixed;\nvar floor = Math.floor;\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar FORCED = nativeToFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !fails(function () {\n  // V8 ~ Android 4.3-\n  nativeToFixed.call({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  // eslint-disable-next-line max-statements\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toInteger(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    var multiply = function (n, c) {\n      var index = -1;\n      var c2 = c;\n      while (++index < 6) {\n        c2 += n * data[index];\n        data[index] = c2 % 1e7;\n        c2 = floor(c2 / 1e7);\n      }\n    };\n\n    var divide = function (n) {\n      var index = 6;\n      var c = 0;\n      while (--index >= 0) {\n        c += data[index];\n        data[index] = floor(c / n);\n        c = (c % n) * 1e7;\n      }\n    };\n\n    var dataToString = function () {\n      var index = 6;\n      var s = '';\n      while (--index >= 0) {\n        if (s !== '' || index === 0 || data[index] !== 0) {\n          var t = String(data[index]);\n          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;\n        }\n      } return s;\n    };\n\n    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        result = dataToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        result = dataToString() + repeat.call('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat.call('0', fractDigits - k) + result\n        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar redefine = require('../internals/redefine');\nvar toString = require('../internals/object-to-string');\n\n// `Object.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nif (!TO_STRING_TAG_SUPPORT) {\n  redefine(Object.prototype, 'toString', toString, { unsafe: true });\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar exec = require('../internals/regexp-exec');\n\n$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {\n  exec: exec\n});\n","'use strict';\nvar redefine = require('../internals/redefine');\nvar anObject = require('../internals/an-object');\nvar fails = require('../internals/fails');\nvar flags = require('../internals/regexp-flags');\n\nvar TO_STRING = 'toString';\nvar RegExpPrototype = RegExp.prototype;\nvar nativeToString = RegExpPrototype[TO_STRING];\n\nvar NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\n// FF44- RegExp#toString has a wrong name\nvar INCORRECT_NAME = nativeToString.name != TO_STRING;\n\n// `RegExp.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring\nif (NOT_GENERIC || INCORRECT_NAME) {\n  redefine(RegExp.prototype, TO_STRING, function toString() {\n    var R = anObject(this);\n    var p = String(R.source);\n    var rf = R.flags;\n    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);\n    return '/' + p + '/' + f;\n  }, { unsafe: true });\n}\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toLength = require('../internals/to-length');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined\n        ? replacer.call(searchValue, O, replaceValue)\n        : nativeReplace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      if (\n        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\n        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\n      ) {\n        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n        if (res.done) return res.value;\n      }\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        results.push(result);\n        if (!global) break;\n\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n  // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return nativeReplace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\n\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SUPPORTS_Y);\n","// `Symbol.prototype.description` getter\n// https://tc39.github.io/ecma262/#sec-symbol.prototype.description\n'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar has = require('../internals/has');\nvar isObject = require('../internals/is-object');\nvar defineProperty = require('../internals/object-define-property').f;\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\n\nvar NativeSymbol = global.Symbol;\n\nif (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||\n  // Safari 12 bug\n  NativeSymbol().description !== undefined\n)) {\n  var EmptyStringDescriptionStore = {};\n  // wrap Symbol constructor for correct work with undefined description\n  var SymbolWrapper = function Symbol() {\n    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var result = this instanceof SymbolWrapper\n      ? new NativeSymbol(description)\n      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'\n      : description === undefined ? NativeSymbol() : NativeSymbol(description);\n    if (description === '') EmptyStringDescriptionStore[result] = true;\n    return result;\n  };\n  copyConstructorProperties(SymbolWrapper, NativeSymbol);\n  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;\n  symbolPrototype.constructor = SymbolWrapper;\n\n  var symbolToString = symbolPrototype.toString;\n  var native = String(NativeSymbol('test')) == 'Symbol(test)';\n  var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n  defineProperty(symbolPrototype, 'description', {\n    configurable: true,\n    get: function description() {\n      var symbol = isObject(this) ? this.valueOf() : this;\n      var string = symbolToString.call(symbol);\n      if (has(EmptyStringDescriptionStore, symbol)) return '';\n      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');\n      return desc === '' ? undefined : desc;\n    }\n  });\n\n  $({ global: true, forced: true }, {\n    Symbol: SymbolWrapper\n  });\n}\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $copyWithin = require('../internals/array-copy-within');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.copyWithin` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin\nexportTypedArrayMethod('copyWithin', function copyWithin(target, start /* , end */) {\n  return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $every = require('../internals/array-iteration').every;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.every` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every\nexportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {\n  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $fill = require('../internals/array-fill');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill\n// eslint-disable-next-line no-unused-vars\nexportTypedArrayMethod('fill', function fill(value /* , start, end */) {\n  return $fill.apply(aTypedArray(this), arguments);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $filter = require('../internals/array-iteration').filter;\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.filter` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter\nexportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {\n  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  var C = speciesConstructor(this, this.constructor);\n  var index = 0;\n  var length = list.length;\n  var result = new (aTypedArrayConstructor(C))(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $findIndex = require('../internals/array-iteration').findIndex;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.findIndex` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex\nexportTypedArrayMethod('findIndex', function findIndex(predicate /* , thisArg */) {\n  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $find = require('../internals/array-iteration').find;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.find` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find\nexportTypedArrayMethod('find', function find(predicate /* , thisArg */) {\n  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n});\n","var createTypedArrayConstructor = require('../internals/typed-array-constructor');\n\n// `Float32Array` constructor\n// https://tc39.github.io/ecma262/#sec-typedarray-objects\ncreateTypedArrayConstructor('Float32', function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $forEach = require('../internals/array-iteration').forEach;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach\nexportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {\n  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $includes = require('../internals/array-includes').includes;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes\nexportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {\n  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $indexOf = require('../internals/array-includes').indexOf;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof\nexportTypedArrayMethod('indexOf', function indexOf(searchElement /* , fromIndex */) {\n  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar global = require('../internals/global');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar ArrayIterators = require('../modules/es.array.iterator');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar Uint8Array = global.Uint8Array;\nvar arrayValues = ArrayIterators.values;\nvar arrayKeys = ArrayIterators.keys;\nvar arrayEntries = ArrayIterators.entries;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];\n\nvar CORRECT_ITER_NAME = !!nativeTypedArrayIterator\n  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);\n\nvar typedArrayValues = function values() {\n  return arrayValues.call(aTypedArray(this));\n};\n\n// `%TypedArray%.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries\nexportTypedArrayMethod('entries', function entries() {\n  return arrayEntries.call(aTypedArray(this));\n});\n// `%TypedArray%.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys\nexportTypedArrayMethod('keys', function keys() {\n  return arrayKeys.call(aTypedArray(this));\n});\n// `%TypedArray%.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values\nexportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);\n// `%TypedArray%.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator\nexportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $join = [].join;\n\n// `%TypedArray%.prototype.join` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join\n// eslint-disable-next-line no-unused-vars\nexportTypedArrayMethod('join', function join(separator) {\n  return $join.apply(aTypedArray(this), arguments);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $lastIndexOf = require('../internals/array-last-index-of');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.lastIndexOf` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof\n// eslint-disable-next-line no-unused-vars\nexportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {\n  return $lastIndexOf.apply(aTypedArray(this), arguments);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $map = require('../internals/array-iteration').map;\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.map` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map\nexportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {\n  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {\n    return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);\n  });\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $reduceRight = require('../internals/array-reduce').right;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.reduceRicht` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright\nexportTypedArrayMethod('reduceRight', function reduceRight(callbackfn /* , initialValue */) {\n  return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $reduce = require('../internals/array-reduce').left;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.reduce` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce\nexportTypedArrayMethod('reduce', function reduce(callbackfn /* , initialValue */) {\n  return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar floor = Math.floor;\n\n// `%TypedArray%.prototype.reverse` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse\nexportTypedArrayMethod('reverse', function reverse() {\n  var that = this;\n  var length = aTypedArray(that).length;\n  var middle = floor(length / 2);\n  var index = 0;\n  var value;\n  while (index < middle) {\n    value = that[index];\n    that[index++] = that[--length];\n    that[length] = value;\n  } return that;\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar toLength = require('../internals/to-length');\nvar toOffset = require('../internals/to-offset');\nvar toObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\nvar FORCED = fails(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).set({});\n});\n\n// `%TypedArray%.prototype.set` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set\nexportTypedArrayMethod('set', function set(arrayLike /* , offset */) {\n  aTypedArray(this);\n  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\n  var length = this.length;\n  var src = toObject(arrayLike);\n  var len = toLength(src.length);\n  var index = 0;\n  if (len + offset > length) throw RangeError('Wrong length');\n  while (index < len) this[offset + index] = src[index++];\n}, FORCED);\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar speciesConstructor = require('../internals/species-constructor');\nvar fails = require('../internals/fails');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $slice = [].slice;\n\nvar FORCED = fails(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).slice();\n});\n\n// `%TypedArray%.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice\nexportTypedArrayMethod('slice', function slice(start, end) {\n  var list = $slice.call(aTypedArray(this), start, end);\n  var C = speciesConstructor(this, this.constructor);\n  var index = 0;\n  var length = list.length;\n  var result = new (aTypedArrayConstructor(C))(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n}, FORCED);\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar $some = require('../internals/array-iteration').some;\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.some` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some\nexportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {\n  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $sort = [].sort;\n\n// `%TypedArray%.prototype.sort` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort\nexportTypedArrayMethod('sort', function sort(comparefn) {\n  return $sort.call(aTypedArray(this), comparefn);\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\n// `%TypedArray%.prototype.subarray` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray\nexportTypedArrayMethod('subarray', function subarray(begin, end) {\n  var O = aTypedArray(this);\n  var length = O.length;\n  var beginIndex = toAbsoluteIndex(begin, length);\n  return new (speciesConstructor(O, O.constructor))(\n    O.buffer,\n    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,\n    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)\n  );\n});\n","'use strict';\nvar global = require('../internals/global');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar fails = require('../internals/fails');\n\nvar Int8Array = global.Int8Array;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $toLocaleString = [].toLocaleString;\nvar $slice = [].slice;\n\n// iOS Safari 6.x fails here\nvar TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {\n  $toLocaleString.call(new Int8Array(1));\n});\n\nvar FORCED = fails(function () {\n  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();\n}) || !fails(function () {\n  Int8Array.prototype.toLocaleString.call([1, 2]);\n});\n\n// `%TypedArray%.prototype.toLocaleString` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring\nexportTypedArrayMethod('toLocaleString', function toLocaleString() {\n  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);\n}, FORCED);\n","'use strict';\nvar exportTypedArrayMethod = require('../internals/array-buffer-view-core').exportTypedArrayMethod;\nvar fails = require('../internals/fails');\nvar global = require('../internals/global');\n\nvar Uint8Array = global.Uint8Array;\nvar Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};\nvar arrayToString = [].toString;\nvar arrayJoin = [].join;\n\nif (fails(function () { arrayToString.call({}); })) {\n  arrayToString = function toString() {\n    return arrayJoin.call(this);\n  };\n}\n\nvar IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;\n\n// `%TypedArray%.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring\nexportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);\n","var createTypedArrayConstructor = require('../internals/typed-array-constructor');\n\n// `Uint32Array` constructor\n// https://tc39.github.io/ecma262/#sec-typedarray-objects\ncreateTypedArrayConstructor('Uint32', function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","var global = require('../internals/global');\nvar DOMIterables = require('../internals/dom-iterables');\nvar ArrayIteratorMethods = require('../modules/es.array.iterator');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG]) {\n      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n    }\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\nimport {NyaPCommon,\r\n\t\tDomTools,\r\n\t\tUtils\r\n} from './NyaPCommon.js';\r\nconst O2H=DomTools.Object2HTML;\r\n\r\n\r\n//NyaP options\r\nconst NyaPOptions={\r\n}\r\n\r\n//normal player\r\nclass NyaP extends NyaPCommon{\r\n\tget icons(){return this.opt.icons;}\r\n\tconstructor(opt){\r\n\t\tsuper(Utils.deepAssign({},NyaPOptions,opt));\r\n\t\topt=this.opt;\r\n\t\tconst NP=this,\r\n\t\t\t_t=this._t,\r\n\t\t\t$=this.$,\r\n\t\t\tvideo=this.video;\r\n\t\t//set icons\r\n\t\tfunction icon(name,event,attr={},extopt){\r\n\t\t\tconst ico=opt.icons[name];\r\n\t\t\treturn O2H({_:'span',event,attr,prop:{id:`icon_span_${name}`,\r\n\t\t\t\tinnerHTML:`<svg viewBox=\"0 0 ${ico[0]} ${ico[1]}\" height=${extopt?.height||ico[1]} width=${extopt?.width||ico[0]} id=\"icon_${name}\"\">${ico[2]}</svg>`}});\r\n\t\t}\r\n\t\t\r\n\t\tthis.stat('creating_player');\r\n\r\n\t\t//create player elements\r\n\t\tNP._.player=O2H({\r\n\t\t\t_:'div',attr:{class:'NyaP',id:'NyaP',tabindex:0},child:[\r\n\t\t\t\tNP.videoFrame,\r\n\t\t\t\t{_:'div',attr:{id:'controls'},child:[\r\n\t\t\t\t\t{_:'div',attr:{id:'control'},child:[\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_left'},child:[\r\n\t\t\t\t\t\t\ticon('play',{click:e=>NP.playToggle()},{title:_t('play')}),\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_center'},child:[\r\n\t\t\t\t\t\t\t{_:'div',prop:{id:'progress_info'},child:[\r\n\t\t\t\t\t\t\t\t{_:'span',child:[\r\n\t\t\t\t\t\t\t\t\t{_:'canvas',prop:{id:'progress',pad:10}},\r\n\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'time'},child:[\r\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'current_time'},child:['00:00']},\r\n\t\t\t\t\t\t\t\t\t'/',\r\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'total_time'},child:['00:00']},\r\n\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_right'},child:[\r\n\t\t\t\t\t\t\ticon('addDanmaku',{click:e=>NP.danmakuInput()},{title:_t('danmaku input(Enter)')}),\r\n\t\t\t\t\t\t\ticon('danmakuToggle',{click:e=>NP.Danmaku.toggle()},{title:_t('danmaku toggle(D)'),class:'active_icon'}),\r\n\t\t\t\t\t\t\ticon('volume',{},{title:`${_t('volume')}:(${video.muted?_t('muted'):(video.volume*100|0)+'%'})([shift]+↑↓)(${_t('wheeling')})`}),\r\n\t\t\t\t\t\t\ticon('loop',{click:e=>{video.loop=!video.loop;}},{title:_t('loop')+'(L)'}),\r\n\t\t\t\t\t\t\t{_:'span',prop:{id:'player_mode'},child:[\r\n\t\t\t\t\t\t\t\ticon('fullScreen',{click:e=>NP.playerMode('fullScreen')},{title:_t('full screen(F)')}),\r\n\t\t\t\t\t\t\t\ticon('fullPage',{click:e=>NP.playerMode('fullPage')},{title:_t('full page(P)')})\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t]}\r\n\t\t\t\t]},\r\n\t\t\t\t{_:'div',prop:{id:'danmaku_input_frame',style:\"display:none;\"},child:[\r\n\t\t\t\t\t{_:'span',prop:{id:'danmaku_style'},child:[\r\n\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_style_pannel'},child:[\r\n\t\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_color_box'}},\r\n\t\t\t\t\t\t\t{_:'input',attr:{id:'danmaku_color',placeholder:_t('hex color'),maxlength:\"6\"},event:{keypress:e=>{}}},\r\n\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_mode_box'}},\r\n\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_size_box'}},\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\ticon('danmakuStyle',undefined,undefined,{width:\"2em\",height:\"2em\"}),\r\n\t\t\t\t\t]},\r\n\t\t\t\t\t{_:'input',attr:{id:'danmaku_input',placeholder:_t('Input danmaku here')}},\r\n\t\t\t\t\t{_:'span',prop:{id:'danmaku_submit',innerHTML:_t('Send')}},\r\n\t\t\t\t]},\r\n\t\t\t]\r\n\t\t});\r\n\r\n\r\n\t\t//progress\r\n\t\tsetTimeout(()=>{//add resize event\r\n\t\t\tDomTools.resizeEvent.observe($('#control'));\r\n\t\t\tDomTools.addEvents($('#control'),{\r\n\t\t\t\tresize:e=>NP.resizeProgress(),\r\n\t\t\t});\r\n\t\t\tNP.resizeProgress();\r\n\t\t},0);\r\n\t\tNP._.progressContext=$('#progress').getContext('2d');\r\n\r\n\t\t//events\r\n\t\tconst events={\r\n\t\t\tmain_video:{\r\n\t\t\t\tplaying:e=>{\r\n\t\t\t\t\tNP._iconActive('play',true);\r\n\t\t\t\t\tif(this.$('#danmaku_input_frame').offsetHeight){\r\n\t\t\t\t\t\tthis.danmakuInput(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tpause:e=>{\r\n\t\t\t\t\tNP._iconActive('play',false);\r\n\t\t\t\t},\r\n\t\t\t\ttimeupdate:(e)=>{\r\n\t\t\t\t\tif(Date.now()-NP._.lastTimeUpdate <30)return;\r\n\t\t\t\t\tNP._setDisplayTime(Utils.formatTime(video.currentTime,video.duration));\r\n\t\t\t\t\tNP.drawProgress();\r\n\t\t\t\t\tNP._.lastTimeUpdate=Date.now();\r\n\t\t\t\t},\r\n\t\t\t\tloadedmetadata:e=>{\r\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\r\n\t\t\t\t},\r\n\t\t\t\tvolumechange:e=>{\r\n\t\t\t\t\t//show volume msg\r\n\t\t\t\t\tNP._.volumeBox.renew(`${_t('volume')}:${(video.volume*100).toFixed(0)}%`+`${video.muted?('('+_t('muted')+')'):''}`,3000);\r\n\t\t\t\t\t//change icon style\r\n\t\t\t\t\tDomTools.setAttrs($('#volume_circle'),{'stroke-dasharray':`${video.volume*12*Math.PI} 90`,style:`fill-opacity:${video.muted?.2:.6}!important`});\r\n\t\t\t\t\t//change icon tip\r\n\t\t\t\t\t$('#icon_span_volume').setAttribute('title',`${_t('volume')}:(${video.muted?_t('muted'):((video.volume*100|0)+'%')})([shift]+↑↓)(${_t('wheeling')})`);\r\n\t\t\t\t},\r\n\t\t\t\tprogress:e=>NP.drawProgress(),\r\n\t\t\t\tclick:e=>NP.playToggle(),\r\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\r\n\t\t\t\terror:()=>{\r\n\t\t\t\t\tNP.msg(`视频加载错误`,'error');\r\n\t\t\t\t\tthis.log('video error','error');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_container:{\r\n\t\t\t\tclick:e=>NP.playToggle(),\r\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\r\n\t\t\t},\r\n\t\t\tprogress:{\r\n\t\t\t\t'mousemove,click':e=>{\r\n\t\t\t\t\tlet t=e.target,\r\n\t\t\t\t\t\tpre=Utils.clamp((e.offsetX-t.pad)/(t.offsetWidth-2*t.pad),0,1);\r\n\t\t\t\t\tif(e.type==='mousemove'){\r\n\t\t\t\t\t\tNP._.progressX=e.offsetX;NP.drawProgress();\r\n\t\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(pre*video.duration,video.duration));\t\r\n\t\t\t\t\t}else if(e.type==='click'){\r\n\t\t\t\t\t\tvideo.currentTime=pre*video.duration;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tmouseout:e=>{\r\n\t\t\t\t\tNP._.progressX=undefined;NP.drawProgress();\r\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tdanmaku_style_pannel:{\r\n\t\t\t\tclick:e=>{if(e.target.tagName!=='INPUT')setImmediate(a=>NP.$('#danmaku_input').focus())},\r\n\t\t\t},\r\n\t\t\tdanmaku_color:{\r\n\t\t\t\t'input,change':e=>{\r\n\t\t\t\t\tlet i=e.target,c=NP.Danmaku.isVaildColor(i.value);\r\n\t\t\t\t\tif(c){//match valid hex color code\r\n\t\t\t\t\t\ti.style.backgroundColor=`#${c}`;\r\n\t\t\t\t\t\tNP._.danmakuColor=c;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tNP._.danmakuColor=undefined;\r\n\t\t\t\t\t\tc=NP.Danmaku.isVaildColor(NP.opt.danmaku.defaultDanmakuColor);\r\n\t\t\t\t\t\ti.style.backgroundColor=c?`#${c}`:'';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\ticon_span_volume:{\r\n\t\t\t\tclick:e=>video.muted=!video.muted,\r\n\t\t\t\twheel:e=>{\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tlet d=e.wheelDeltaY;\r\n\t\t\t\t\tif(e.shiftKey)d=d>0?10:-10;\r\n\t\t\t\t\tvideo.volume=Utils.clamp(video.volume+d/900,0,1);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_input:{\r\n\t\t\t\tkeydown:e=>{if(e.key==='Enter'){NP.send();}else if(e.key==='Escape'){NP.danmakuInput(false);}}\r\n\t\t\t},\r\n\t\t\tdanmaku_submit:{\r\n\t\t\t\tclick:e=>NP.send(),\r\n\t\t\t},\r\n\t\t\tdanmaku_mode_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tlet t=e.target;\r\n\t\t\t\t\tif(t.id.startsWith('icon_span_danmakuMode')){\r\n\t\t\t\t\t\tlet m=1*t.id.match(/\\d$/)[0];\r\n\t\t\t\t\t\tif(NP._.danmakuMode!==undefined)\r\n\t\t\t\t\t\t\t$(`#icon_span_danmakuMode${NP._.danmakuMode}`).classList.remove('active');\r\n\t\t\t\t\t\t$(`#icon_span_danmakuMode${m}`).classList.add('active');\r\n\t\t\t\t\t\tNP._.danmakuMode=m;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_size_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tlet t=e.target;\r\n\t\t\t\t\tif(!t.size)return;\r\n\t\t\t\t\tUtils.toArray($('#danmaku_size_box').childNodes).forEach(sp=>{\r\n\t\t\t\t\t\tif(NP._.danmakuSize===sp.size)sp.classList.remove('active');\r\n\t\t\t\t\t});\r\n\t\t\t\t\tt.classList.add('active');\r\n\t\t\t\t\tNP._.danmakuSize=t.size;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_color_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tif(e.target.color){\r\n\t\t\t\t\t\t$('#danmaku_color').value=e.target.color;\r\n\t\t\t\t\t\t$('#danmaku_color').dispatchEvent(new Event('change'));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t}\r\n\t\tfor(let eleid in events){//add events to elements\r\n\t\t\tlet el=$(`#${eleid}`);\r\n\t\t\tif(!el)continue;\r\n\t\t\tlet eves=events[eleid];\r\n\t\t\teves&&DomTools.addEvents($(`#${eleid}`),eves);\r\n\t\t}\r\n\t\tDomTools.addEvents(this,{\r\n\t\t\tdanmakuFrameToggle:bool=>NP._iconActive('danmakuToggle',bool),//listen danmakuToggle event to change button style\r\n\t\t\tplayerModeChange:mode=>{\r\n\t\t\t\t['fullPage','fullScreen'].forEach(m=>{\r\n\t\t\t\t\tNP._iconActive(m,mode===m);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tvideo_loopChange:value=>NP._iconActive('loop',value),\r\n\t\t});\r\n\t\tDomTools.addEvents(this._.player,{\r\n\t\t\tkeydown:e=>NP._playerKeyHandle(e),\r\n\t\t\tmousemove:e=>{\r\n\t\t\t\tthis._userActiveWatcher(true);\r\n\t\t\t}\r\n\t\t});\r\n\t\tDomTools.addEvents(document,{\r\n\t\t\t'fullscreenchange,mozfullscreenchange,webkitfullscreenchange,msfullscreenchange':e=>{\r\n\t\t\t\tif(NP.currentPlayerMode=='fullScreen' && !DomTools.isFullscreen())\r\n\t\t\t\t\tNP.playerMode('normal');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t\r\n\t\t//danmaku ui\r\n\t\tif(this._danmakuEnabled){\r\n\t\t\t//danmaku sizes\r\n\t\t\topt.uiOptions.danmakuSizes&&opt.uiOptions.danmakuSizes.forEach((s,ind)=>{\r\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`font-size:${12+ind*3}px;`,title:s},prop:{size:s},child:['A']});\r\n\t\t\t\t$('#danmaku_size_box').appendChild(e);\r\n\t\t\t\tif(s===opt?.uiOptions?.danmakuSize){//click specified button\r\n\t\t\t\t\te.click();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t//danmaku colors\r\n\t\t\topt.uiOptions.danmakuColors&&opt.uiOptions.danmakuColors.forEach(c=>{\r\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`background-color:#${c};`,title:c},prop:{color:c}});\r\n\t\t\t\t$('#danmaku_color_box').appendChild(e);\r\n\t\t\t});\r\n\t\t\tif(opt.uiOptions?.danmakuColor){//set default color\r\n\t\t\t\t$('#danmaku_color').value=opt.uiOptions.danmakuColor;\r\n\t\t\t}\r\n\t\t\t//danmaku modes\r\n\t\t\topt.uiOptions.danmakuModes&&opt.uiOptions.danmakuModes.forEach(m=>{\r\n\t\t\t\tlet e=icon(`danmakuMode${m}`);\r\n\t\t\t\t$('#danmaku_mode_box').appendChild(e);\r\n\t\t\t\tif(m===opt?.uiOptions?.danmakuMode){//click specified button\r\n\t\t\t\t\te.click();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tthis.$$('[id*=danmaku]').forEach(el=>{//remove danmaku buttons\r\n\t\t\t\tel.parentNode,removeChild(el);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t//put into the container\r\n\t\tif(opt.playerContainer instanceof HTMLElement)\r\n\t\t\topt.playerContainer.appendChild(NP.player);\r\n\r\n\t\tthis.statResult('creating_player');\r\n\t}\r\n\t_userActiveWatcher(active=false){//watch user active,for auto hiding ui\r\n\t\tlet delay=5000,t=Date.now();\r\n\t\tif(active){\r\n\t\t\tthis._.lastUserActive=t;\r\n\t\t\tif(this._.userInactive){\r\n\t\t\t\tthis._.userInactive=false;\r\n\t\t\t\tthis.player.classList.remove('user-inactive');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this._.userActiveTimer)return;\r\n\t\tthis._.userActiveTimer=setTimeout(()=>{\r\n\t\t\tthis._.userActiveTimer=0;\r\n\t\t\tlet now=Date.now();\r\n\t\t\tif(now-this._.lastUserActive<delay){\r\n\t\t\t\tthis._userActiveWatcher();\r\n\t\t\t}else{\r\n\t\t\t\tthis.player.classList.add('user-inactive');\r\n\t\t\t\tthis._.userInactive=true;\r\n\t\t\t}\r\n\t\t},delay-t+this._.lastUserActive);\r\n\t}\r\n\t_playerKeyHandle(e){//hot keys\r\n\t\tif(e.target.tagName==='INPUT')return;\r\n\t\tconst V=this.video,_SH=e.shiftKey,_RE=e.repeat;\r\n\t\t//to prevent default,use break.otherwise,use return.\r\n\t\tswitch(e.key){\r\n\t\t\tcase ' ':{\r\n\t\t\t\tif(_RE)return;//ignore repeat keys\r\n\t\t\t\tthis.playToggle();break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowRight':{//seek forward\r\n\t\t\t\tV.currentTime+=(3*(_SH?2:1));break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowLeft':{//seek backward\r\n\t\t\t\tV.currentTime-=(1.5*(_SH?2:1));break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowUp':{//volume up\r\n\t\t\t\tV.volume=Utils.clamp(V.volume+(0.03*(_SH?2:1)),0,1);break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowDown':{//volume down\r\n\t\t\t\tV.volume=Utils.clamp(V.volume-(0.03*(_SH?2:1)),0,1);break;\r\n\t\t\t}\r\n\t\t\tcase 'p':{//full page\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis.playerMode('fullPage');break;\r\n\t\t\t}\r\n\t\t\tcase 'f':{//fullscreen\r\n\t\t\t\tthis.playerMode('fullScreen');break;\r\n\t\t\t}\r\n\t\t\tcase 'd':{//danmaku toggle\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis._danmakuEnabled&&this.Danmaku.toggle();break;\r\n\t\t\t}\r\n\t\t\tcase 'm':{//mute\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis.video.muted=!this.video.muted;break;\r\n\t\t\t}\r\n\t\t\tcase 'l':{//loop\r\n\t\t\t\tthis.video.loop=!this.video.loop;break;\r\n\t\t\t}\r\n\t\t\tcase 'Enter':{//danmaku input toggle\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis._danmakuEnabled&&this.danmakuInput();break;\r\n\t\t\t}\r\n\t\t\tcase 'Escape':{//exit full page mode\r\n\t\t\t\tif(this.currentPlayerMode==='fullPage'){\r\n\t\t\t\t\tthis.playerMode('normal');break;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdefault:return;\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t}\r\n\tdanmakuInput(bool=!this.$('#danmaku_input_frame').offsetHeight){//hide or show danmaku input\r\n\t\tlet $=this.$;\r\n\t\t$('#danmaku_input_frame').style.display=bool?'':'none';\r\n\t\tthis._iconActive('addDanmaku',bool);\r\n\t\tsetImmediate(()=>{bool?$('#danmaku_input').focus():this._.player.focus();});\r\n\t}\r\n\tresizeProgress(){\r\n\t\tconst c=this.$('#progress');\r\n\t\tc.width=c.offsetWidth;\r\n\t\tc.height=c.offsetHeight;\r\n\t\tthis.drawProgress();\r\n\t\tthis.emit('progressRefresh');\r\n\t}\r\n\t_progressDrawer(){\r\n\t\tconst ctx=this._.progressContext,\r\n\t\t\t\tc=this.$('#progress'),\r\n\t\t\t\tw=c.width,\r\n\t\t\t\th=c.height,\r\n\t\t\t\tv=this.video,\r\n\t\t\t\td=v.duration,\r\n\t\t\t\tcT=v.currentTime,\r\n\t\t\t\tpad=c.pad,\r\n\t\t\t\tlen=w-2*pad;\r\n\t\tlet i;\r\n\t\tctx.clearRect(0,0,w,h);\r\n\t\tctx.lineCap = \"round\";\r\n\t\t//background\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle='#eee';\r\n\t\tctx.lineWidth=7;\r\n\t\tctx.moveTo(pad, 15);\r\n\t\tctx.lineTo(pad+len, 15);\r\n\t\tctx.stroke();\r\n\t\t//buffered\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = '#C0BBBB';\r\n\t\tctx.lineWidth = 2;\r\n\t\tlet tr = v.buffered;\r\n\t\tfor (i = tr.length;i--;) {\r\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 18);\r\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 18);\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\t//progress\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle='#6cf';\r\n\t\tctx.lineWidth = 5;\r\n\t\tctx.moveTo(pad,15);\r\n\t\tctx.lineTo(pad+len*cT/d,15);\r\n\t\tctx.stroke();\r\n\t\t//already played\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = 'rgba(255,255,255,.3)';\r\n\t\tctx.lineWidth = 5;\r\n\t\ttr = v.played;\r\n\t\tfor (i = tr.length;i--;) {\r\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 15);\r\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 15);\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\t//mouse\r\n\t\tif(this._.progressX){\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.strokeStyle='rgba(0,0,0,.05)';\r\n\t\t\tctx.moveTo(pad+len*cT/d,15);\r\n\t\t\tctx.lineTo(Utils.clamp(this._.progressX,pad,pad+len),15);\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t\tthis._.drawingProgress=false;\r\n\t}\r\n\tdrawProgress(){\r\n\t\tif(this._.drawingProgress)return;\r\n\t\tthis._.drawingProgress=true;\r\n\t\trequestAnimationFrame(()=>this._progressDrawer());//prevent progress bar drawing multi times in a frame\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nwindow.NyaP=NyaP;\r\n","import {\r\n    NyaPlayerCore,\r\n\tDomTools,\r\n\tUtils,\r\n} from '../component/NyaP-Core/index.js';\r\n\r\nimport NyaPDanmaku from '../component/NyaP-Danmaku/index.js';\r\n\r\nconst O2H=DomTools.Object2HTML;\r\n\r\n//default options\r\nconst NyaPCommonOptions={\r\n\t//for danmaku frame\r\n\tdanmaku:{\r\n\t\tenable:true,\r\n\t\tmodules:{\r\n\t\t\tTextDanmaku:{\r\n\t\t\t\tenable:true,\r\n\t\t\t\tdefaultStyles:{},\r\n\t\t\t\toptions:{},\r\n\t\t\t},\r\n\t\t},\r\n\t\tdefaultDanmakuColor:null,//a hex color(without #),default when the color inputed is invalid\r\n\t\tsend:d=>{return Promise.reject();},//the method for sending danmaku\r\n\t},\r\n\t// for ui\r\n\tuiOptions:{\r\n\t\tdanmakuColors:['fff','6cf','ff0','f00','0f0','00f','f0f','000'],//colors in the danmaku style pannel\r\n\t\tdanmakuModes:[0,3,2,1],//0:right\t1:left\t2:bottom\t3:top  ;; mode in the danmaku style pannel\r\n\t\tdanmakuSizes:[20,24,36],//danmaku size buttons in the danmaku style pannel\r\n\t\tdanmakuColor:null,//default color to fill the color option input\r\n\t\tdanmakuMode:0,//0: right to left.\r\n\t\tdanmakuSize:24,\r\n\t\tautoHideDanmakuInput:true,//hide danmakuinput after danmaku sending\r\n\t},\r\n\r\n\tloadingInfo:{//text replacement at loading time (for left-bottom message)\r\n\t\tdoneText:'ok',\r\n\t\tfailText:'failed',\r\n\t\tcontentSpliter:'...',\r\n\t},\r\n\tloadingAnimation:{\r\n\t\tstart(NP){\r\n\t\t\tNP.$('#loading_anime').innerHTML='(๑•́ ω •̀๑)';\r\n\t\t\tNP._.loadingAnimationInterval=setInterval(()=>{//loading animation\r\n\t\t\t\tNP.$('#loading_anime').style.transform=\"translate(\"+Utils.rand(-20,20)+\"px,\"+Utils.rand(-20,20)+\"px) rotate(\"+Utils.rand(-10,10)+\"deg)\";\r\n\t\t\t},80);\r\n\t\t},\r\n\t\tstop(NP){\r\n\t\t\tclearInterval(NP._.loadingAnimationInterval);\r\n\t\t\tlet lf=NP.$('#loading_frame');\r\n\t\t\tif(lf.parentNode)//remove loading animation\r\n\t\t\t\tlf.parentNode.removeChild(lf);\r\n\t\t},\r\n\t\terror(NP){\r\n\t\t\tclearInterval(NP._.loadingAnimationInterval);\r\n\t\t\tNP.$('#loading_anime').innerHTML='(๑• . •๑)';\r\n\t\t\tNP.$('#loading_anime').style.transform=\"\";\r\n\t\t},\r\n\t},\r\n\r\n\t//other common options\r\n\tplayerContainer:null,//the element for containing the player\r\n\ticons:{\r\n\t\tplay:[30,30,'<path d=\"m10.063,8.856l9.873,6.143l-9.873,6.143v-12.287z\" stroke-width=\"3\" stroke-linejoin=\"round\"/>'],\r\n\t\tdanmakuStyle:[30,30,'<path style=\"fill-opacity:0!important;\" stroke-width=\"1.4\" d=\"m21.004,8.995c-0.513,-0.513 -1.135,-0.770 -1.864,-0.770l-8.281,0c-0.729,0 -1.350,0.256 -1.864,0.770c-0.513,0.513 -0.770,1.135 -0.770,1.864l0,8.281c0,0.721 0.256,1.341 0.770,1.858c0.513,0.517 1.135,0.776 1.864,0.776l8.281,0c0.729,0 1.350,-0.258 1.864,-0.776c0.513,-0.517 0.770,-1.136 0.770,-1.858l0,-8.281c0,-0.729 -0.257,-1.350 -0.770,-1.864z\" stroke-linejoin=\"round\"/>'\r\n\t\t\t\t\t\t\t+'<path d=\"m12.142,14.031l1.888,0l0,-1.888l1.937,0l0,1.888l1.888,0l0,1.937l-1.888,0l0,1.888l-1.937,0l0,-1.888l-1.888,0l0,-1.937z\" stroke-width=\"1\"/>'],\r\n\t\tdanmakuToggle:[30,30,'<path d=\"m8.569,10.455l0,0c0,-0.767 0.659,-1.389 1.473,-1.389l0.669,0l0,0l3.215,0l6.028,0c0.390,0 0.765,0.146 1.041,0.406c0.276,0.260 0.431,0.613 0.431,0.982l0,3.473l0,0l0,2.083l0,0c0,0.767 -0.659,1.389 -1.473,1.389l-6.028,0l-4.200,3.532l0.985,-3.532l-0.669,0c-0.813,0 -1.473,-0.621 -1.473,-1.389l0,0l0,-2.083l0,0l0,-3.473z\"/>'],\r\n\t\taddDanmaku:[30,30,'<path style=\"fill-opacity:1!important\" d=\"m21.781,9.872l-1.500,-1.530c-0.378,-0.385 -0.997,-0.391 -1.384,-0.012l-0.959,0.941l2.870,2.926l0.960,-0.940c0.385,-0.379 0.392,-0.998 0.013,-1.383zm-12.134,7.532l2.871,2.926l7.593,-7.448l-2.872,-2.927l-7.591,7.449l0.000,0.000zm-1.158,2.571l-0.549,1.974l1.984,-0.511l1.843,-0.474l-2.769,-2.824l-0.509,1.835z\" stroke-width=\"0\"/>'],\r\n\t\tfullScreen:[30,30,'<path stroke-linejoin=\"round\" d=\"m11.166,9.761l-5.237,5.239l5.237,5.238l1.905,-1.905l-3.333,-3.333l3.332,-3.333l-1.904,-1.906zm7.665,0l-1.903,1.905l3.332,3.333l-3.332,3.332l1.903,1.905l5.238,-5.238l-5.238,-5.237z\" stroke-width=\"1.3\" />'],\r\n\t\tfullPage:[30,30,'<rect stroke-linejoin=\"round\" height=\"11.169\" width=\"17.655\" y=\"9.415\" x=\"6.172\" stroke-width=\"1.5\"/>'\r\n\t\t\t\t\t\t  +'<path stroke-linejoin=\"round\" d=\"m12.361,11.394l-3.604,3.605l3.605,3.605l1.311,-1.311l-2.294,-2.294l2.293,-2.294l-1.311,-1.311zm5.275,0l-1.310,1.311l2.293,2.294l-2.293,2.293l1.310,1.311l3.605,-3.605l-3.605,-3.605z\"/>'],\r\n\t\tloop:[30,30,'<path stroke-linejoin=\"round\" stroke-width=\"1\" d=\"m20.945,15.282c-0.204,-0.245 -0.504,-0.387 -0.823,-0.387c-0.583,0 -1.079,0.398 -1.205,0.969c-0.400,1.799 -2.027,3.106 -3.870,3.106c-2.188,0 -3.969,-1.780 -3.969,-3.969c0,-2.189 1.781,-3.969 3.969,-3.969c0.720,0 1.412,0.192 2.024,0.561l-0.334,0.338c-0.098,0.100 -0.127,0.250 -0.073,0.380c0.055,0.130 0.183,0.213 0.324,0.212l2.176,0.001c0.255,-0.002 0.467,-0.231 0.466,-0.482l-0.008,-2.183c-0.000,-0.144 -0.085,-0.272 -0.217,-0.325c-0.131,-0.052 -0.280,-0.022 -0.379,0.077l-0.329,0.334c-1.058,-0.765 -2.340,-1.182 -3.649,-1.182c-3.438,0 -6.236,2.797 -6.236,6.236c0,3.438 2.797,6.236 6.236,6.236c2.993,0 5.569,-2.133 6.126,-5.072c0.059,-0.314 -0.022,-0.635 -0.227,-0.882z\"/>'],\r\n\t\tvolume:[30,30,'<ellipse id=\"volume_circle\" style=\"fill-opacity:.6!important\" ry=\"6\" rx=\"6\" cy=\"15\" cx=\"15\" stroke-dasharray=\"38 90\" stroke-width=\"1.8\"/>'],\r\n\t\tdanmakuMode0:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m14.981,17.821l-7.937,-2.821l7.937,-2.821l0,1.409l7.975,0l0,2.821l-7.975,0l0,1.409l0,0.002z\"/>'],\r\n\t\tdanmakuMode1:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m15.019,12.178l7.937,2.821l-7.937,2.821l0,-1.409l-7.975,0l0,-2.821l7.975,0l0,-1.409l0,-0.002z\"/>'],\r\n\t\tdanmakuMode3:[30,30,'<path stroke-width=\"3\" d=\"m7.972,7.486l14.054,0\"/>'],\r\n\t\tdanmakuMode2:[30,30,'<path stroke-width=\"3\" d=\"m7.972,22.513l14.054,0\"/>'],\r\n\t},\r\n}\r\n\r\n//NyaP classic theme Core\r\nclass NyaPCommon extends NyaPlayerCore{\r\n\tget frame(){return this._.player||this.videoFrame;}\r\n\tget player(){return this._.player;}\r\n\tget currentPlayerMode(){return this.player.getAttribute('playerMode')||'normal';}\r\n\tget _danmakuEnabled(){return this.opt.danmaku.enable;}\r\n\tconstructor(opt){\r\n\t\tsuper(Utils.deepAssign({},NyaPCommonOptions,opt));\r\n\t\tthis.log('%c https://github.com/JiaJiaJiang/NyaP/ ','log',\"background:#6f8fa2;color:#ccc;padding:.3em\");\r\n\t\topt=this.opt;\r\n\r\n\t\tthis.$=this.$.bind(this);\r\n\t\tthis.$$=this.$$.bind(this);\r\n\r\n\t\t//language\r\n\t\tconst _t=this._t=this.i18n._.bind(this.i18n);//translate\r\n\t\t//load languages to the core\r\n\t\tlet langs=require('./langs.json');\r\n\t\tfor(let l in langs){\r\n\t\t\tthis.i18n.add(l,langs[l]);\r\n\t\t}\r\n\r\n\t\t//the video frame for NyaP and NyaPTouch\r\n\t\tthis.videoFrame=O2H(\r\n\t\t\t{_:'div',attr:{id:'video_frame'},child:[\r\n\t\t\t\tthis.video,\r\n\t\t\t\t//this.container,\r\n\t\t\t\t{_:'div',attr:{id:'loading_frame'},child:[\r\n\t\t\t\t\t{_:'div',attr:{id:'loading_anime'}},\r\n\t\t\t\t\t{_:'div',attr:{id:'loading_info'}},\r\n\t\t\t\t]},\r\n\t\t\t\t{_:'div',attr:{id:'msg_box'}},\r\n\t\t\t]}\r\n\t\t);\r\n\r\n\t\t//add private vars\r\n\t\tthis._.selectorCache={};\r\n\t\tthis._.volumeBox=new MsgBox('','info',this.$('#msg_box'));\r\n\t\tthis._.ios=!!navigator.userAgent.match(/i[A-z]+?; CPU .+?like Mac OS/);\r\n\t\tthis._.mobileX5=!!navigator.userAgent.match(/MQQBrowser/);\r\n\r\n\t\t//receive stat requests\r\n\t\tthis.on('stat',stat=>{\r\n\t\t\tlet name=_t(stat[1]);\r\n\t\t\tthis.debug('stat:',name);\r\n\t\t\tlet d=O2H({_:'div',child:[name]});\r\n\t\t\td.append(this.opt.loadingInfo.contentSpliter);\r\n\t\t\tthis.$('#loading_info').appendChild(d);\r\n\t\t\tstat[2].then(result=>{//wait for the result\r\n\t\t\t\td.append(result||this.opt.loadingInfo.doneText);\r\n\t\t\t}).catch(e=>{\r\n\t\t\t\td.append(e.message||e||this.opt.loadingInfo.failText);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t//loading animation\r\n\t\tif(opt.loadingAnimation){\r\n\t\t\topt?.loadingAnimation?.start(this);\r\n\t\t}\r\n\t\tDomTools.addEvents(this.video,{\r\n\t\t\tloadedmetadata:e=>{\r\n\t\t\t\tthis.statResult('loading_video');\r\n\t\t\t\topt?.loadingAnimation?.stop(this);\r\n\t\t\t},\r\n\t\t\terror:e=>{\r\n\t\t\t\tthis.statResult('loading_video',e?.message);\r\n\t\t\t\topt?.loadingAnimation?.error(this);\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t//load danmaku frame\r\n\t\tif(this._danmakuEnabled){\r\n\t\t\tthis.danmakuContainer=O2H({_:'div',prop:{id:'danmaku_container'}});\r\n\t\t\tthis.stat('loading_danmakuFrame',()=>{\r\n\t\t\t\tthis.Danmaku=new NyaPDanmaku(this);\r\n\t\t\t\tthis.videoFrame.insertBefore(this.danmakuContainer,this.$('#loading_frame'));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//stupid x5 core\r\n\t\tif(this._.mobileX5){\r\n\t\t\ttry{\r\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.setRendererMode(1);//force css mode\r\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.text2d.supported=false;\r\n\t\t\t}catch(e){\r\n\t\t\t\talert(e.message);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t$(selector,useCache=true){//querySelector for the frame element\r\n\t\tif(useCache&&this._.selectorCache[selector])\r\n\t\t\treturn this._.selectorCache[selector];\r\n\t\tlet el=this.frame.querySelector(selector);\r\n\t\tif(el)this._.selectorCache[selector]=el;\r\n\t\treturn el;\r\n\t}\r\n\t$$(selector){//querySelectorAll for the frame element\r\n\t\treturn this.frame.querySelectorAll(selector);\r\n\t}\r\n\tplayerMode(mode='normal'){\r\n\t\tlet ios=this._.ios;\r\n\t\tif(mode==='normal' && this.currentPlayerMode===mode)return;\r\n\t\tif(this.currentPlayerMode==='fullScreen'){\r\n\t\t\tios||DomTools.exitFullscreen().catch(e=>{});\r\n\t\t}\r\n\t\tif(mode!=='normal' && this.currentPlayerMode===mode)mode='normal';//back to normal mode\r\n\t\tswitch(mode){\r\n\t\t\tcase 'fullPage':{\r\n\t\t\t\tthis.player.setAttribute('playerMode','fullPage');\r\n\t\t\t\tthis.emit('playerModeChange',mode);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'fullScreen':{\r\n\t\t\t\tif(ios){//for ios, only fullscreen video, not the player\r\n\t\t\t\t\tDomTools.requestFullscreen(this.video);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tDomTools.requestFullscreen(this.player).then(()=>{\r\n\t\t\t\t\tthis.player.setAttribute('playerMode','fullScreen');\r\n\t\t\t\t\tthis.emit('playerModeChange',mode);\r\n\t\t\t\t}).catch(e=>{alert('Failed to enter screen mode')});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:{\r\n\t\t\t\tthis.player.setAttribute('playerMode','normal');\r\n\t\t\t\tthis.emit('playerModeChange',mode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tmsg(text,type='tip'){//type:tip|info|error\r\n\t\tlet msg=new MsgBox(text,type,this.$('#msg_box'));\r\n\t\trequestAnimationFrame(()=>msg.show());\r\n\t}\r\n\t_iconActive(name,bool){\r\n\t\tthis.$(`#icon_span_${name}`)?.classList[bool?'add':'remove']('active_icon');\r\n\t}\r\n\t_setDisplayTime(current=null,total=null){\r\n\t\t\tif(current!==null)this.$('#current_time').innerHTML=current;\r\n\t\t\tif(total!==null)this.$('#total_time').innerHTML=total;\r\n\t}\r\n\tsend(){\r\n\t\tlet color=this._.danmakuColor||this.opt.danmaku.defaultDanmakuColor,\r\n\t\t\ttext=this.$('#danmaku_input').value,\r\n\t\t\tsize=this._.danmakuSize,\r\n\t\t\tmode=this._.danmakuMode,\r\n\t\t\ttime=this.Danmaku.time,\r\n\t\t\td={color,text,size,mode,time};\r\n\r\n\t\tlet S=this.Danmaku.send(d,danmaku=>{\r\n\t\t\tif(danmaku&&danmaku._==='text')\r\n\t\t\t\tthis.$('#danmaku_input').value='';\r\n\t\t\tdanmaku.highlight=true;\r\n\t\t\tthis.Danmaku.load(danmaku,true);\r\n\t\t\tif(this.opt.uiOptions.autoHideDanmakuInput){this.danmakuInput(false);}\r\n\t\t});\r\n\r\n\t\tif(!S){\r\n\t\t\tthis.danmakuInput(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass MsgBox{\r\n\tconstructor(text,type,parentNode){\r\n\t\tthis.using=false;\r\n\t\tlet msg=this.msg=O2H({_:'div',attr:{class:`msg_type_${type}`}});\r\n\t\tmsg.addEventListener('click',()=>this.remove());\r\n\t\tthis.parentNode=parentNode;\r\n\t\tthis.setText(text);\r\n\t}\r\n\tsetTimeout(time){\r\n\t\tif(this.timeout)clearTimeout(this.timeout);\r\n\t\tthis.timeout=setTimeout(()=>this.remove(),time||Math.max((this.texts?this.texts.length:0)*0.6*1000,5000));\r\n\t}\r\n\tsetText(text){\r\n\t\tthis.msg.innerHTML='';\r\n\t\tlet e=O2H(text);\r\n\t\te&&this.msg.appendChild(e);\r\n\t\tif(text instanceof HTMLElement)text=text.textContent;\r\n\t\tlet texts=String(text).match(/\\w+|\\S/g);\r\n\t\tthis.text=text;\r\n\t\tthis.texts=texts;\r\n\t}\r\n\trenew(text,time){\r\n\t\tthis.setText(text);\r\n\t\tthis.setTimeout(time);\r\n\t\tif(!this.using)this.show();\r\n\t}\r\n\tshow(){\r\n\t\tif(this.using)return;\r\n\t\tthis.msg.style.opacity=0;\r\n\t\tif(this.parentNode && this.parentNode!==this.msg.parentNode){\r\n\t\t\tthis.parentNode.appendChild(this.msg);\r\n\t\t}\r\n\t\tthis.msg.parentNode&&setTimeout(()=>{\r\n\t\t\tthis.using=true;\r\n\t\t\tthis.msg.style.opacity=1;\r\n\t\t},0);\r\n\t\tthis.setTimeout();\r\n\t}\r\n\tremove(){\r\n\t\tif(!this.using)return;\r\n\t\tthis.using=false;\r\n\t\tthis.msg.style.opacity=0;\r\n\t\tif(this.timeout){\r\n\t\t\tclearTimeout(this.timeout);\r\n\t\t\tthis.timeout=0;\r\n\t\t}\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.msg.parentNode&&this.msg.parentNode.removeChild(this.msg);\r\n\t\t},600);\r\n\t}\r\n}\r\n\r\nexport {\r\n\tNyaPCommon,\r\n\tDomTools,\r\n\tUtils,\r\n}\r\n","module.exports={\"zh-CN\":{\"play\":\"播放\",\"Send\":\"发送\",\"Done\":\"完成\",\"loop\":\"循环\",\"pause\":\"暂停\",\"muted\":\"静音\",\"volume\":\"音量\",\"settings\":\"设置\",\"wheeling\":\"滚轮\",\"hex color\":\"Hex颜色\",\"Loading core\":\"加载核心\",\"Loading video\":\"加载视频\",\"Loading plugin\":\"加载插件\",\"full page(P)\":\"全页模式(P)\",\"Loading danmaku\":\"加载弹幕\",\"Creating player\":\"创建播放器\",\"full screen(F)\":\"全屏模式(F)\",\"danmaku toggle(D)\":\"弹幕开关(D)\",\"Input danmaku here\":\"在这里输入弹幕\",\"Loading danmaku frame\":\"加载弹幕框架\",\"danmaku input(Enter)\":\"弹幕输入框(回车)\",\"Failed to change to fullscreen mode\":\"无法切换到全屏模式\",\"loading_core\":\"加载核心\",\"loading_plugin\":\"加载插件\",\"loading_danmakuFrame\":\"加载弹幕框架\",\"creating_player\":\"创建播放器\",\"loading_danmaku\":\"加载弹幕\",\"loading_video\":\"加载视频\"}}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}