{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../component/NyaP-Core/index.js","../component/NyaP-Core/lib/Object2HTML.js","../component/NyaP-Core/src/core.js","../component/NyaP-Core/src/domTools.js","../component/NyaP-Core/src/i18n.js","../component/NyaP-Core/src/utils.js","../component/NyaP-Danmaku/index.js","../component/NyaP-Danmaku/lib/Mat/Mat.js","../component/NyaP-Danmaku/src/danmaku-frame.js","../component/NyaP-Danmaku/src/danmaku-text/TextCanvas2D.js","../component/NyaP-Danmaku/src/danmaku-text/TextCss.js","../component/NyaP-Danmaku/src/danmaku-text/TextWebGL.js","../component/NyaP-Danmaku/src/danmaku-text/Textoff.js","../component/NyaP-Danmaku/src/danmaku-text/danmaku-text.js","../component/NyaP-Danmaku/src/danmaku-text/textModuleTemplate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js","../node_modules/@babel/runtime-corejs3/core-js-stable/date/now.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/copy-within.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/fill.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/repeat.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/assign.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js","../node_modules/@babel/runtime-corejs3/core-js-stable/promise.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-immediate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-interval.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js","../node_modules/@babel/runtime-corejs3/core-js/array/from.js","../node_modules/@babel/runtime-corejs3/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs3/core-js/get-iterator.js","../node_modules/@babel/runtime-corejs3/core-js/instance/slice.js","../node_modules/@babel/runtime-corejs3/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs3/core-js/object/create.js","../node_modules/@babel/runtime-corejs3/core-js/object/define-property.js","../node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js","../node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js","../node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js","../node_modules/@babel/runtime-corejs3/core-js/promise.js","../node_modules/@babel/runtime-corejs3/core-js/reflect/get.js","../node_modules/@babel/runtime-corejs3/core-js/symbol.js","../node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js","../node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js","../node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js","../node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js","../node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js","../node_modules/@babel/runtime-corejs3/helpers/createClass.js","../node_modules/@babel/runtime-corejs3/helpers/defineProperty.js","../node_modules/@babel/runtime-corejs3/helpers/get.js","../node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js","../node_modules/@babel/runtime-corejs3/helpers/inherits.js","../node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js","../node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js","../node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js","../node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js","../node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js","../node_modules/@babel/runtime-corejs3/helpers/superPropBase.js","../node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs3/helpers/typeof.js","../node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime-corejs3/regenerator/index.js","../node_modules/@juggle/resize-observer/lib/exports/resize-observer.umd.js","../node_modules/core-js-pure/es/array/from.js","../node_modules/core-js-pure/es/array/is-array.js","../node_modules/core-js-pure/es/array/virtual/concat.js","../node_modules/core-js-pure/es/array/virtual/copy-within.js","../node_modules/core-js-pure/es/array/virtual/fill.js","../node_modules/core-js-pure/es/array/virtual/for-each.js","../node_modules/core-js-pure/es/array/virtual/index-of.js","../node_modules/core-js-pure/es/array/virtual/slice.js","../node_modules/core-js-pure/es/array/virtual/sort.js","../node_modules/core-js-pure/es/array/virtual/splice.js","../node_modules/core-js-pure/es/date/now.js","../node_modules/core-js-pure/es/function/virtual/bind.js","../node_modules/core-js-pure/es/instance/bind.js","../node_modules/core-js-pure/es/instance/concat.js","../node_modules/core-js-pure/es/instance/copy-within.js","../node_modules/core-js-pure/es/instance/fill.js","../node_modules/core-js-pure/es/instance/index-of.js","../node_modules/core-js-pure/es/instance/repeat.js","../node_modules/core-js-pure/es/instance/slice.js","../node_modules/core-js-pure/es/instance/sort.js","../node_modules/core-js-pure/es/instance/splice.js","../node_modules/core-js-pure/es/instance/starts-with.js","../node_modules/core-js-pure/es/instance/trim.js","../node_modules/core-js-pure/es/object/assign.js","../node_modules/core-js-pure/es/object/create.js","../node_modules/core-js-pure/es/object/define-property.js","../node_modules/core-js-pure/es/object/entries.js","../node_modules/core-js-pure/es/object/get-own-property-descriptor.js","../node_modules/core-js-pure/es/object/get-prototype-of.js","../node_modules/core-js-pure/es/object/set-prototype-of.js","../node_modules/core-js-pure/es/promise/index.js","../node_modules/core-js-pure/es/reflect/get.js","../node_modules/core-js-pure/es/string/virtual/repeat.js","../node_modules/core-js-pure/es/string/virtual/starts-with.js","../node_modules/core-js-pure/es/string/virtual/trim.js","../node_modules/core-js-pure/es/symbol/index.js","../node_modules/core-js-pure/es/symbol/iterator.js","../node_modules/core-js-pure/features/array/from.js","../node_modules/core-js-pure/features/array/is-array.js","../node_modules/core-js-pure/features/get-iterator.js","../node_modules/core-js-pure/features/instance/slice.js","../node_modules/core-js-pure/features/is-iterable.js","../node_modules/core-js-pure/features/object/create.js","../node_modules/core-js-pure/features/object/define-property.js","../node_modules/core-js-pure/features/object/get-own-property-descriptor.js","../node_modules/core-js-pure/features/object/get-prototype-of.js","../node_modules/core-js-pure/features/object/set-prototype-of.js","../node_modules/core-js-pure/features/promise/index.js","../node_modules/core-js-pure/features/reflect/get.js","../node_modules/core-js-pure/features/symbol/index.js","../node_modules/core-js-pure/features/symbol/iterator.js","../node_modules/core-js-pure/internals/a-function.js","../node_modules/core-js-pure/internals/a-possible-prototype.js","../node_modules/core-js-pure/internals/add-to-unscopables.js","../node_modules/core-js-pure/internals/an-instance.js","../node_modules/core-js-pure/internals/an-object.js","../node_modules/core-js-pure/internals/array-copy-within.js","../node_modules/core-js-pure/internals/array-fill.js","../node_modules/core-js-pure/internals/array-for-each.js","../node_modules/core-js-pure/internals/array-from.js","../node_modules/core-js-pure/internals/array-includes.js","../node_modules/core-js-pure/internals/array-iteration.js","../node_modules/core-js-pure/internals/array-method-has-species-support.js","../node_modules/core-js-pure/internals/array-method-is-strict.js","../node_modules/core-js-pure/internals/array-method-uses-to-length.js","../node_modules/core-js-pure/internals/array-species-create.js","../node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js","../node_modules/core-js-pure/internals/check-correctness-of-iteration.js","../node_modules/core-js-pure/internals/classof-raw.js","../node_modules/core-js-pure/internals/classof.js","../node_modules/core-js-pure/internals/correct-is-regexp-logic.js","../node_modules/core-js-pure/internals/correct-prototype-getter.js","../node_modules/core-js-pure/internals/create-iterator-constructor.js","../node_modules/core-js-pure/internals/create-non-enumerable-property.js","../node_modules/core-js-pure/internals/create-property-descriptor.js","../node_modules/core-js-pure/internals/create-property.js","../node_modules/core-js-pure/internals/define-iterator.js","../node_modules/core-js-pure/internals/define-well-known-symbol.js","../node_modules/core-js-pure/internals/descriptors.js","../node_modules/core-js-pure/internals/document-create-element.js","../node_modules/core-js-pure/internals/dom-iterables.js","../node_modules/core-js-pure/internals/engine-is-ios.js","../node_modules/core-js-pure/internals/engine-user-agent.js","../node_modules/core-js-pure/internals/engine-v8-version.js","../node_modules/core-js-pure/internals/entry-virtual.js","../node_modules/core-js-pure/internals/enum-bug-keys.js","../node_modules/core-js-pure/internals/export.js","../node_modules/core-js-pure/internals/fails.js","../node_modules/core-js-pure/internals/function-bind-context.js","../node_modules/core-js-pure/internals/function-bind.js","../node_modules/core-js-pure/internals/get-built-in.js","../node_modules/core-js-pure/internals/get-iterator-method.js","../node_modules/core-js-pure/internals/get-iterator.js","../node_modules/core-js-pure/internals/global.js","../node_modules/core-js-pure/internals/has.js","../node_modules/core-js-pure/internals/hidden-keys.js","../node_modules/core-js-pure/internals/host-report-errors.js","../node_modules/core-js-pure/internals/html.js","../node_modules/core-js-pure/internals/ie8-dom-define.js","../node_modules/core-js-pure/internals/indexed-object.js","../node_modules/core-js-pure/internals/inspect-source.js","../node_modules/core-js-pure/internals/internal-state.js","../node_modules/core-js-pure/internals/is-array-iterator-method.js","../node_modules/core-js-pure/internals/is-array.js","../node_modules/core-js-pure/internals/is-forced.js","../node_modules/core-js-pure/internals/is-iterable.js","../node_modules/core-js-pure/internals/is-object.js","../node_modules/core-js-pure/internals/is-pure.js","../node_modules/core-js-pure/internals/is-regexp.js","../node_modules/core-js-pure/internals/iterate.js","../node_modules/core-js-pure/internals/iterators-core.js","../node_modules/core-js-pure/internals/microtask.js","../node_modules/core-js-pure/internals/native-promise-constructor.js","../node_modules/core-js-pure/internals/native-symbol.js","../node_modules/core-js-pure/internals/native-weak-map.js","../node_modules/core-js-pure/internals/new-promise-capability.js","../node_modules/core-js-pure/internals/not-a-regexp.js","../node_modules/core-js-pure/internals/object-assign.js","../node_modules/core-js-pure/internals/object-create.js","../node_modules/core-js-pure/internals/object-define-properties.js","../node_modules/core-js-pure/internals/object-define-property.js","../node_modules/core-js-pure/internals/object-get-own-property-descriptor.js","../node_modules/core-js-pure/internals/object-get-own-property-names-external.js","../node_modules/core-js-pure/internals/object-get-own-property-names.js","../node_modules/core-js-pure/internals/object-get-own-property-symbols.js","../node_modules/core-js-pure/internals/object-get-prototype-of.js","../node_modules/core-js-pure/internals/object-keys-internal.js","../node_modules/core-js-pure/internals/object-keys.js","../node_modules/core-js-pure/internals/object-property-is-enumerable.js","../node_modules/core-js-pure/internals/object-set-prototype-of.js","../node_modules/core-js-pure/internals/object-to-array.js","../node_modules/core-js-pure/internals/object-to-string.js","../node_modules/core-js-pure/internals/perform.js","../node_modules/core-js-pure/internals/promise-resolve.js","../node_modules/core-js-pure/internals/redefine-all.js","../node_modules/core-js-pure/internals/redefine.js","../node_modules/core-js-pure/internals/require-object-coercible.js","../node_modules/core-js-pure/internals/set-global.js","../node_modules/core-js-pure/internals/set-species.js","../node_modules/core-js-pure/internals/set-to-string-tag.js","../node_modules/core-js-pure/internals/shared-key.js","../node_modules/core-js-pure/internals/shared-store.js","../node_modules/core-js-pure/internals/shared.js","../node_modules/core-js-pure/internals/species-constructor.js","../node_modules/core-js-pure/internals/string-multibyte.js","../node_modules/core-js-pure/internals/string-repeat.js","../node_modules/core-js-pure/internals/string-trim-forced.js","../node_modules/core-js-pure/internals/string-trim.js","../node_modules/core-js-pure/internals/task.js","../node_modules/core-js-pure/internals/to-absolute-index.js","../node_modules/core-js-pure/internals/to-indexed-object.js","../node_modules/core-js-pure/internals/to-integer.js","../node_modules/core-js-pure/internals/to-length.js","../node_modules/core-js-pure/internals/to-object.js","../node_modules/core-js-pure/internals/to-primitive.js","../node_modules/core-js-pure/internals/to-string-tag-support.js","../node_modules/core-js-pure/internals/uid.js","../node_modules/core-js-pure/internals/use-symbol-as-uid.js","../node_modules/core-js-pure/internals/well-known-symbol-wrapped.js","../node_modules/core-js-pure/internals/well-known-symbol.js","../node_modules/core-js-pure/internals/whitespaces.js","../node_modules/core-js-pure/modules/es.array.concat.js","../node_modules/core-js-pure/modules/es.array.copy-within.js","../node_modules/core-js-pure/modules/es.array.fill.js","../node_modules/core-js-pure/modules/es.array.for-each.js","../node_modules/core-js-pure/modules/es.array.from.js","../node_modules/core-js-pure/modules/es.array.index-of.js","../node_modules/core-js-pure/modules/es.array.is-array.js","../node_modules/core-js-pure/modules/es.array.iterator.js","../node_modules/core-js-pure/modules/es.array.slice.js","../node_modules/core-js-pure/modules/es.array.sort.js","../node_modules/core-js-pure/modules/es.array.splice.js","../node_modules/core-js-pure/modules/es.date.now.js","../node_modules/core-js-pure/modules/es.function.bind.js","../node_modules/core-js-pure/modules/es.json.to-string-tag.js","../node_modules/core-js-pure/modules/es.math.to-string-tag.js","../node_modules/core-js-pure/modules/es.object.assign.js","../node_modules/core-js-pure/modules/es.object.create.js","../node_modules/core-js-pure/modules/es.object.define-property.js","../node_modules/core-js-pure/modules/es.object.entries.js","../node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js","../node_modules/core-js-pure/modules/es.object.get-prototype-of.js","../node_modules/core-js-pure/modules/es.object.set-prototype-of.js","../node_modules/core-js-pure/modules/es.object.to-string.js","../node_modules/core-js-pure/modules/es.promise.all-settled.js","../node_modules/core-js-pure/modules/es.promise.finally.js","../node_modules/core-js-pure/modules/es.promise.js","../node_modules/core-js-pure/modules/es.reflect.get.js","../node_modules/core-js-pure/modules/es.string.iterator.js","../node_modules/core-js-pure/modules/es.string.repeat.js","../node_modules/core-js-pure/modules/es.string.starts-with.js","../node_modules/core-js-pure/modules/es.string.trim.js","../node_modules/core-js-pure/modules/es.symbol.async-iterator.js","../node_modules/core-js-pure/modules/es.symbol.has-instance.js","../node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js","../node_modules/core-js-pure/modules/es.symbol.iterator.js","../node_modules/core-js-pure/modules/es.symbol.js","../node_modules/core-js-pure/modules/es.symbol.match-all.js","../node_modules/core-js-pure/modules/es.symbol.match.js","../node_modules/core-js-pure/modules/es.symbol.replace.js","../node_modules/core-js-pure/modules/es.symbol.search.js","../node_modules/core-js-pure/modules/es.symbol.species.js","../node_modules/core-js-pure/modules/es.symbol.split.js","../node_modules/core-js-pure/modules/es.symbol.to-primitive.js","../node_modules/core-js-pure/modules/es.symbol.to-string-tag.js","../node_modules/core-js-pure/modules/es.symbol.unscopables.js","../node_modules/core-js-pure/modules/esnext.aggregate-error.js","../node_modules/core-js-pure/modules/esnext.promise.all-settled.js","../node_modules/core-js-pure/modules/esnext.promise.any.js","../node_modules/core-js-pure/modules/esnext.promise.try.js","../node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js","../node_modules/core-js-pure/modules/esnext.symbol.dispose.js","../node_modules/core-js-pure/modules/esnext.symbol.observable.js","../node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js","../node_modules/core-js-pure/modules/esnext.symbol.replace-all.js","../node_modules/core-js-pure/modules/web.dom-collections.iterator.js","../node_modules/core-js-pure/modules/web.immediate.js","../node_modules/core-js-pure/modules/web.timers.js","../node_modules/core-js-pure/stable/array/virtual/for-each.js","../node_modules/core-js-pure/stable/date/now.js","../node_modules/core-js-pure/stable/instance/bind.js","../node_modules/core-js-pure/stable/instance/concat.js","../node_modules/core-js-pure/stable/instance/copy-within.js","../node_modules/core-js-pure/stable/instance/fill.js","../node_modules/core-js-pure/stable/instance/for-each.js","../node_modules/core-js-pure/stable/instance/index-of.js","../node_modules/core-js-pure/stable/instance/repeat.js","../node_modules/core-js-pure/stable/instance/sort.js","../node_modules/core-js-pure/stable/instance/splice.js","../node_modules/core-js-pure/stable/instance/starts-with.js","../node_modules/core-js-pure/stable/instance/trim.js","../node_modules/core-js-pure/stable/object/assign.js","../node_modules/core-js-pure/stable/object/entries.js","../node_modules/core-js-pure/stable/promise/index.js","../node_modules/core-js-pure/stable/set-immediate.js","../node_modules/core-js-pure/stable/set-interval.js","../node_modules/core-js-pure/stable/set-timeout.js","../node_modules/regenerator-runtime/runtime.js","NyaP.js","NyaPCommon.js","langs.json"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC5BA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChztBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAIA,IAAM,GAAG,GAAC,YAAA,CAAA,QAAA,CAAV,WAAA,C,CAGA;;AACA,IAAM,WAAW,GAAjB,EAAA,C,CAGA;;IACM,I;;;;wBACM;AAAC,aAAO,KAAA,GAAA,CAAP,KAAA;AAAuB;;;AACnC,WAAA,IAAA,CAAA,GAAA,EAAgB;AAAA,QAAA,SAAA,EAAA,SAAA;;AAAA,QAAA,KAAA;;AAAA,KAAA,GAAA,gBAAA,WAAA,EAAA,IAAA,EAAA,IAAA;AACf,IAAA,KAAA,GAAA,CAAA,GAAA,2BAAA,WAAA,EAAA,IAAA,EAAA,CAAA,GAAA,gBAAA,WAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA,EAAM,YAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EAAA,EAAA,WAAA,EAAN,GAAM,CAAN,CAAA,CAAA;AACA,IAAA,GAAG,GAAC,KAAA,CAAJ,GAAA;AACA,QAAM,EAAE,GAAA,CAAA,GAAA,uBAAA,WAA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","file":"NyaP.90.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nexport {NyaPlayerCore} from './src/core.js'\r\nexport {DomTools} from './src/domTools.js'\r\nexport {i18n} from './src/i18n.js'\r\nexport {Utils} from './src/utils.js'","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nfunction Object2HTML(obj,func){\r\n\tlet ele,o={},a=[];\r\n\tif(obj===null || typeof obj !=='object')ele=document.createTextNode(String(obj));//text node\r\n\telse if(obj instanceof Node)ele=obj;\r\n\telse{\r\n\t\tif(obj===undefined)throw(new TypeError(`'undefined' received, object or string expect.`));\r\n\t\tif(!obj._)obj._='div';\r\n\t\tele||(ele=document.createElement(obj._));\r\n\t\t//attributes\r\n\t\tfor(let [attr,value] of Object.entries(obj.attr||obj.a||o))\r\n\t\t\tele.setAttribute(attr,value);\r\n\t\t//properties\r\n\t\tfor(let [prop,value] of Object.entries(obj.prop||obj.p||o))\r\n\t\t\tele[prop]=value;\r\n\t\t//events\r\n\t\tfor(let [e,cb] of Object.entries(obj.event||obj.e||o))\r\n\t\t\tele.addEventListener(e,cb);\r\n\t\t//childNodes\r\n\t\tfor(let c of (obj.child||obj.c||a)){\r\n\t\t\tlet e=Object2HTML(c,func);\r\n\t\t\t(e instanceof Node)&&ele.appendChild(e);\r\n\t\t}\r\n\t}\r\n\tfunc&&func(ele);\r\n\treturn ele;\r\n}\r\n\r\nexport default Object2HTML;\r\nexport {Object2HTML}","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\nimport {i18n} from './i18n.js';\r\nimport {DomTools} from './domTools.js';\r\nimport {Utils} from './utils.js';\r\n\r\n//default options\r\nconst NyaPCoreOptions={\r\n\t//for video\r\n\tmuted:false,//set video muted\r\n\tvolume:1,//set volume (0 ~ 1) \r\n\tloop:false,//set video loop\r\n\tvideoSrc:'',\r\n\tplugins:[],//NyaP dynamic plugins list\r\n}\r\n\r\n\r\nclass NyaPEventEmitter{\r\n\tconstructor(){\r\n\t\tthis._events={};\r\n\t}\r\n\temit(e,...args){\r\n\t\tthis._resolve(e,...args);\r\n\t\tthis.globalListener(e,...args);\r\n\t\treturn this;\r\n\t}\r\n\t_resolve(e,...args){\r\n\t\tif(e in this._events){\r\n\t\t\tconst hs=this._events[e];\r\n\t\t\ttry{\r\n\t\t\t\tfor(let h of hs){\r\n\t\t\t\t\tif(h.apply(this,args)===false)return;\r\n\t\t\t\t}\r\n\t\t\t}catch(err){\r\n\t\t\t\tconsole.error(`NyaP event callback error for \"${e}\"`,err);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\taddEventListener(...args){\r\n\t\treturn this.on(...args);\r\n\t}\r\n\ton(e,handle,top=false){\r\n\t\tif(!(handle instanceof Function))return this;\r\n\t\tif(!(e in this._events))this._events[e]=[];\r\n\t\tif(top)\r\n\t\t\tthis._events[e].unshift(handle);\r\n\t\telse\r\n\t\t\tthis._events[e].push(handle);\r\n\t\treturn this;\r\n\t}\r\n\tremoveEvent(e,handle){\r\n\t\tif(!(e in this._events))return this;\r\n\t\tif(arguments.length===1){delete this._events[e];return this;}\r\n\t\tlet ind;\r\n\t\tif(ind=(this._events[e].indexOf(handle))>=0)this._events[e].splice(ind,1);\r\n\t\tif(this._events[e].length===0)delete this._events[e];\r\n\t\treturn this;\r\n\t}\r\n\tglobalListener(name,...args){}//all events will be passed to this function\r\n}\r\n\r\nclass NyaPlayerCore extends NyaPEventEmitter{\r\n\tstatic i18n=i18n;\r\n\tstatic Utils=Utils;\r\n\tstatic DomTools=DomTools;\r\n\tstatic NyaPCoreOptions=NyaPCoreOptions;\r\n\tstats=[];//stats of the player. Item: [[time,name,promise or result],...]\r\n\tdebugs=[];//debug messages. Item: [[time,...msgs],...]\r\n\tplugins={};//loaded core plugins. name=>plugin object\r\n\ti18n=new i18n();//core i18n instanse\r\n\t_={//for private variables, do not change vars here\r\n\t\tvideoSrc:'',\r\n\t\tvideo:DomTools.Object2HTML({_:'video',attr:{id:'main_video',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'webkit-playsinline':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'playsinline':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-playsinline':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x-webkit-airplay':'allow',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'controlsList':\"nodownload\" ,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-video-player-type':'h5',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'preload':'auto',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'poster':'',\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}),\r\n\t\turlResolvers:[],//functions to resolve urls. Item: [priority,func]\r\n\t};\r\n\tget video(){return this._.video;}//get video element\r\n\tget videoSize(){return [this.video.videoWidth,this.video.videoHeight];}\r\n\tget videoSrc(){return this._.videoSrc;}//get current video src\r\n\r\n\tconstructor(opt){\r\n\t\tsuper();\r\n\t\tlet _=this.i18n;\r\n\t\t{\r\n\t\t\tlet done=this.stat('loading_core');\r\n\t\t\tthis.on('coreLoad',()=>done());\r\n\t\t\tthis.on('coreLoadError',e=>done(e));\r\n\t\t}\r\n\t\tthis.debug('Languages:'+this.i18n.langsArr.join(','));\r\n\r\n\t\topt=this.opt=Utils.deepAssign({},NyaPCoreOptions,opt);\r\n\t\t//add events\r\n\t\t{\r\n\t\t\t//video:video_loopChange\r\n\t\t\tlet LoopDesc=Object.getOwnPropertyDescriptor(HTMLMediaElement.prototype,'loop');\r\n\t\t\tObject.defineProperty(this.video,'loop',{\r\n\t\t\t\tget:LoopDesc.get,\r\n\t\t\t\tset:bool=>{\r\n\t\t\t\t\tif(bool===this.video.loop)return;\r\n\t\t\t\t\tthis.emit('video_loopChange',bool);\r\n\t\t\t\t\tLoopDesc.set.call(this.video,bool);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\tDomTools.addEvents(this.video,{\r\n\t\t\tloadedmetadata:e=>this.debug('Video loadded'),\r\n\t\t\terror:e=>this.debug('Video error:',e),\r\n\t\t\tloadstart:e=>{this.stat('loading_video')},\r\n\t\t});\r\n\t\t\r\n\t\t//define default src resolver\r\n\t\tthis.addURLResolver((url)=>{\r\n\t\t\treturn Promise.resolve(url);//return the url\r\n\t\t},999);//most lower priority\r\n\r\n\t\t/*opts*/\r\n\t\trequestAnimationFrame(()=>{//active after events are attached\r\n\t\t\t['muted','volume','loop'].forEach(o=>{//dont change the order\r\n\t\t\t\t(opt[o]!==undefined)&&(this.video[o]=opt[o]);\r\n\t\t\t});\r\n\t\t\tif(opt.videoSrc)this.setVideoSrc(opt.videoSrc);//videoSrc\r\n\t\t});\r\n\r\n\r\n\t\tif(Array.isArray(opt.plugins)){//load plugins,opt.plugins is a list of url for plugins\r\n\t\t\tlet done=this.stat('loading_plugin');\r\n\t\t\tlet pluginList=[];\r\n\t\t\tfor(let url of opt.plugins){\r\n\t\t\t\tpluginList.push(this.loadPlugin(url));\r\n\t\t\t}\r\n\t\t\tPromise.all(pluginList).then(()=>{\r\n\t\t\t\tdone();\r\n\t\t\t\tthis.emit('coreLoad');\r\n\t\t\t}).catch(e=>{\r\n\t\t\t\tdone(e);\r\n\t\t\t\tthis.debug('coreLoadError',e);\r\n\t\t\t\tthis.emit('coreLoadError',e);\r\n\t\t\t})\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tthis.emit('coreLoad');\r\n\t}\r\n\tstat(statusName,cb){\r\n\t\tlet doneFunc,failFunc;\r\n\t\tlet resultFunc=r=>{\r\n\t\t\tif(r instanceof Error){\r\n\t\t\t\tthis.debug(r);\r\n\t\t\t\tfailFunc(r.message);\r\n\t\t\t}else{\r\n\t\t\t\tdoneFunc(r);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet p=new Promise((ok,no)=>{\r\n\t\t\tdoneFunc=ok;\r\n\t\t\tfailFunc=no;\r\n\t\t});\r\n\t\tp.catch(e=>{\r\n\t\t\tthis.debug(`fail stat:${e}`);\r\n\t\t});\r\n\t\tlet s=[Date.now(),statusName,p,doneFunc,failFunc];\r\n\t\tthis.stats.push(s);//add to core debug log\r\n\t\tif(cb){\r\n\t\t\t(async ()=>{\r\n\t\t\t\ttry{\r\n\t\t\t\t\tresultFunc(await cb());\r\n\t\t\t\t}catch(err){\r\n\t\t\t\t\tresultFunc(err);\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t}\r\n\t\tsetTimeout(()=>this.emit('stat',s),0);\r\n\t\treturn resultFunc;\r\n\t}\r\n\tstatResult(statusName,result){\r\n\t\tfor(let i=this.stats.length,s;i--;){\r\n\t\t\ts=this.stats[i];\r\n\t\t\tif(s[1]===statusName){\r\n\t\t\t\tif(result instanceof Error){\r\n\t\t\t\t\ts[4](result.message);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ts[3](result);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\taddURLResolver(func,priority=0){\r\n\t\tthis._.urlResolvers.push([priority,func]);\r\n\t\tthis._.urlResolvers.sort((a,b)=>a[0]-b[0]);//sort by priority\r\n\t}\r\n\tasync resolveURL(url){//resolve the url by url resolvers\r\n\t\tfor(let n of this._.urlResolvers){\r\n\t\t\tlet func=n[1];\r\n\t\t\tlet r=await func(url);\r\n\t\t\tif(r===false){\r\n\t\t\t\tthis.debug(`Stop resolving url: ${url}`);\r\n\t\t\t\treturn false;//stop resolving the url\r\n\t\t\t}\r\n\t\t\tif(r){\r\n\t\t\t\tthis.debug('URL resolver: ['+url+'] => ['+r+']');\r\n\t\t\t\treturn r;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Promise.reject('No url resolver hit');\r\n\t}\r\n\tasync setVideoSrc(s){\r\n\t\ts=s.trim();\r\n\t\tlet url=await this.resolveURL(s);\r\n\t\tif(url===false)return;//won't change the url if false returned\r\n\t\tthis._.videoSrc=s;\r\n\t\tthis.emit('srcChanged',s);\r\n\t\tthis.video.src=url;\r\n\t\treturn;\r\n\t}\r\n\tplayToggle(Switch=this.video.paused){\r\n\t\treturn this.video[Switch?'play':'pause']();\r\n\t}\r\n\tloadPlugin(url,name){//load js plugins for NyaP\r\n\t\tif(name&&this.plugins[name]){//check if exists\r\n\t\t\tthis.debug(`Plugin already loaded: ${name}`);\r\n\t\t\treturn this.plugins[name];\r\n\t\t}\r\n\t\tlet p=fetch(url)\r\n\t\t.then(res=>res.text())\r\n\t\t.then(async script=>{\r\n\t\t\tscript=script.trim();\r\n\t\t\tlet plugin=eval(script);\r\n\t\t\tif((typeof plugin.name!=='string')||!plugin.name)\r\n\t\t\t\tthrow(new TypeError('Invalid plugin name'));\r\n\t\t\tif(this.plugins[plugin.name]){//check if exists\r\n\t\t\t\tthis.debug(`Plugin already loaded: ${plugin.name}`);\r\n\t\t\t\treturn plugin;\r\n\t\t\t}\r\n\t\t\tif(typeof plugin.init==='function')\r\n\t\t\t\tawait plugin.init(this);//init the plugin\r\n\t\t\tthis.plugins[plugin.name]=plugin;\r\n\t\t\tthis.debug('Plugin loaded',plugin.name);\r\n\t\t\treturn plugin;\r\n\t\t});\r\n\t\tp.catch(e=>{\r\n\t\t\tthis.debug('Plugin loading error:',e);\r\n\t\t\t// this.emit('pluginLoadError',e);\r\n\t\t});\r\n\t\treturn p;\r\n\t}\r\n\tlog(content,type='log',...styles){//log to console\r\n\t\tconsole[type](`%c NyaP %c${content}`,\"background:#e0e0e0;padding:.2em\",\"background:unset\",...styles);\r\n\t}\r\n\tdebug(...msg){//debug messages\r\n\t\tconsole.debug('NyaP[debug]',...msg);\r\n\t\tmsg.unshift(Date.now());\r\n\t\tthis.debugs.push(msg);\r\n\t\tthis.emit('debug',msg);\r\n\t}\r\n}\r\n\r\nexport {\r\n\tNyaPlayerCore,\r\n}\r\n","import {ResizeObserver as ResizeObserverPolyfill} from '@juggle/resize-observer';\r\nimport {Object2HTML as O2H} from '../lib/Object2HTML.js';\r\nimport {Utils} from './utils.js';\r\n\r\nexport class DomTools{\r\n\tstatic addEvents(target,events){\r\n\t\tif(!Array.isArray(target))target=[target];\r\n\t\ttarget.forEach(function(t){\r\n\t\t\tif(!Utils.isObject(t.__NyaPEvents__)){\r\n\t\t\t\tt.__NyaPEvents__=[];\r\n\t\t\t}\r\n\t\t\tfor(let e in events)\r\n\t\t\t\te.split(/\\,/g).forEach(function(e2){\r\n\t\t\t\t\tt.addEventListener(e2,events[e]);\r\n\t\t\t\t\tt.__NyaPEvents__.push([e2,events[e]]);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n    static setAttrs(ele,obj){//set multi attrs to a Element\r\n        for(let a in obj)\r\n            ele.setAttribute(a,obj[a]);\r\n        return ele;\r\n    }\r\n\tstatic fullscreenElement(){\r\n\t\tconst d=document;\r\n\t\treturn d.webkitFullscreenElement\r\n\t\t\t\t||d.msFullscreenElement\r\n\t\t\t\t||d.mozFullScreenElement\r\n\t\t\t\t||d.fullscreenElement;\r\n\t}\r\n\tstatic requestFullscreen(d=document){\r\n\t\ttry{\r\n\t\t\treturn (d.requestFullscreen||\r\n\t\t\td.msRequestFullscreen||\r\n\t\t\td.mozRequestFullScreen||\r\n\t\t\td.webkitRequestFullScreen||\r\n\t\t\td.webkitEnterFullScreen)\r\n\t\t\t.call(d);\r\n\t\t}catch(e){\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t}\r\n\tstatic exitFullscreen(d=document){\r\n\t\ttry{\r\n\t\t\treturn (d.exitFullscreen||\r\n\t\t\t\td.msExitFullscreen||\r\n\t\t\t\td.mozCancelFullScreen||\r\n\t\t\t\td.webkitExitFullScreen||\r\n\t\t\t\td.webkitCancelFullScreen).call(d);\r\n\t\t}catch(e){\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t}\r\n\tstatic isFullscreen(d=document){\r\n\t\treturn !!(d.fullscreen || d.mozFullScreen || d.webkitIsFullScreen || d.msFullscreenElement || d.webkitDisplayingFullscreen);\r\n\t}\r\n\tstatic Object2HTML(...args){\r\n\t\treturn O2H(...args);\r\n\t}\r\n\tstatic resizeEvent={\r\n\t\tresizeObserverInstance:null,\r\n\t\tobserve(dom){\r\n\t\t\tif(!this.resizeObserverInstance){\r\n\t\t\t\tlet ResizeObserver=window.ResizeObserver;\r\n\t\t\t\tif(typeof  ResizeObserver!== 'function'){\r\n\t\t\t\t\tResizeObserver=ResizeObserverPolyfill;\r\n\t\t\t\t}\r\n\t\t\t\tthis.resizeObserverInstance=new ResizeObserver(entries => {\r\n\t\t\t\t\tfor (let entry of entries) {\r\n\t\t\t\t\t\tlet el = entry.target;\r\n\t\t\t\t\t\tlet e=new Event('resize',{bubbles:false,cancelable:true});\r\n\t\t\t\t\t\te.contentRect=entry.contentRect;\r\n\t\t\t\t\t\tel.dispatchEvent(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.resizeObserverInstance.observe(dom);\r\n\t\t},\r\n\t\tunobserve(dom){\r\n\t\t\tif(!this.resizeObserverInstance)\r\n\t\t\t\tthrow(new Error('resizeObserver not initialized'));\r\n\t\t\tthis.resizeObserverInstance.unobserve(dom);\r\n\t\t},\r\n\t}\r\n}\r\n\r\n ","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n\r\n\r\n//polyfill\r\nif(!navigator.languages){\r\n\tnavigator.languages=[navigator.language||navigator.browserLanguage];\r\n}\r\n\r\n\r\nclass i18n{\r\n\t/*\r\n\t*@param{object}langs Language text object indexed by language code\r\n\t*@param{array}langsArr Language priority array\r\n\t*/\r\n\tconstructor(langs={},langsArr=[...navigator.languages]){\r\n\t\tthis.langs=langs;//defines texts\r\n\t\tthis.langsArr=langsArr;\r\n\t\tthis.langsArr.push('zh-CN');//add zh-CN as default language\r\n\t}\r\n\tlangsArr=[];//language priority array\r\n\t_(str,...args){//translate\r\n\t\tlet s=this.findTranslation(str);\r\n\t\targs.length&&args.forEach((arg,ind)=>{s=s.replace(`$${ind}`,arg)});//fill args in the string\r\n\t\treturn s;\r\n\t}\r\n\tfindTranslation(text){\r\n\t\tfor(let lang of this.langsArr){//find by language priority\r\n\t\t\tif((lang in this.langs) && (text in this.langs[lang])){\r\n\t\t\t\treturn this.langs[lang][text];\r\n\t\t\t}\r\n\t\t\t//fallback to other same main code\r\n\t\t\tlet code=lang.match(/^\\w+/)[0];\r\n\t\t\tfor(let c in this.langs){\r\n\t\t\t\tif(c.startsWith(code) && (text in this.langs[c])){\r\n\t\t\t\t\treturn this.langs[c][text];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\tadd(langCode,texts){\r\n\t\tif(!this.langs[langCode])\r\n\t\t\tthis.langs[langCode]={};\r\n\t\tObject.assign(this.langs[langCode],texts);\r\n\t}\r\n}\r\n\r\nexport {i18n};","\r\nfunction padTime(n){//pad number to 2 chars\r\n    return n>9&&n||`0${n}`;\r\n}\r\n\r\nexport class Utils{\r\n    static clamp(num,min,max){\r\n        return num<min?min:(num>max?max:num);\r\n    }\r\n    static isObject(obj){\r\n        return Object.prototype.toString.call(obj) === '[object Object]';\r\n    }\r\n    static deepAssign(target,...args){\r\n        //本函数不处理循环引用\r\n        let obj=args.shift();\r\n        if(target===null || target===undefined || typeof target !== 'object'){\r\n            throw(new TypeError('target should be an object'));\r\n        }\r\n        if(!Utils.isObject(obj)){//obj不是对象则跳过\r\n            if(args.length===0)return target;//没有参数了就返回结果\r\n            return Utils.deepAssign(target,...args);//提取一个参数出来继续\r\n        }\r\n        for(let i in obj){//遍历obj\r\n            if(Utils.isObject(obj[i])){//是个子对象\r\n                if(!Utils.isObject(target[i]))target[i]={};\r\n                Utils.deepAssign(target[i],obj[i]);//递归\r\n            }else{\r\n                target[i]=obj[i];//直接赋值\r\n            }\r\n        }\r\n        if(args.length===0)return target;\r\n        return Utils.deepAssign(target,...args);\r\n    }\r\n    static formatTime(sec,total){\r\n        if(total==undefined)total=sec;\r\n        let r,s=sec|0,h=(s/3600)|0;\r\n        if(total>=3600)s=s%3600;\r\n        r=[padTime((s/60)|0),padTime(s%60)];\r\n        (total>=3600)&&r.unshift(h);\r\n        return r.join(':');\r\n    }\r\n    static rand(min, max) {\r\n        return (min+Math.random()*(max-min)+0.5)|0;\r\n    }\r\n    static toArray(obj){\r\n        if(obj instanceof Array)return obj.slice();\r\n        if(obj.length!==undefined)\r\n            return Array.prototype.slice.call(obj);\r\n        return [...obj];\r\n    }\r\n    static animationFrameLoop(cb){\r\n        requestAnimationFrame(()=>{\r\n           if(cb()===false)return;;\r\n           Utils.animationFrameLoop(cb);\r\n        });\r\n    }\r\n    static requestIdleCallback=window.requestIdleCallback?.bind(window)||setImmediate;\r\n}\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\nimport {Utils} from '../NyaP-Core/index.js';//load DomTools from NyaP-Core project\r\nimport {DanmakuFrame} from './src/danmaku-frame.js'\r\nimport initTextDanmaku from './src/danmaku-text/danmaku-text.js'\r\ninitTextDanmaku(DanmakuFrame);//init TextDanmaku mod\r\n\r\nconst colorChars='0123456789abcdef';\r\nconst danmakuProp=['color','text','size','mode','time'];\r\nclass NyaPDanmaku extends DanmakuFrame{\r\n\tget opt(){return this.core.opt.danmaku};\r\n\tconstructor(core){\r\n\t\tsuper(core,core.opt.danmaku);\r\n\r\n\t\t//init mods\r\n\t\tfor(let mod in DanmakuFrame.availableModules){\r\n\t\t\tif(this.opt.modules[mod]?.enable===true)\r\n\t\t\t\tthis.initModule(mod);\r\n\t\t\t\tthis.enable(mod);\r\n\t\t}\r\n\r\n\t\tthis.setMedia(core.video);\r\n\t}\r\n\ttoggle(name,bool){\r\n\t\tif(typeof name==='boolean' || name==undefined){//danmaku frame switch mode\r\n\t\t\tbool=(name!=undefined)?name:!this.enabled;\r\n\t\t\tthis[bool?'enable':'disable']();\r\n\t\t\treturn bool;\r\n\t\t}\r\n\t\ttry{//module switch mode\r\n\t\t\tif(bool==undefined)bool=!this.module(name).enabled;\r\n\t\t\tthis[bool?'enable':'disable'](name);\r\n\t\t\tthis.core.emit('danmakuModuleToggle',name,this.module(name)?.enabled);\r\n\t\t}catch(e){\r\n\t\t\tthis.core.log('','error',e);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tmodule(name){\r\n\t\treturn super.modules[name];\r\n\t}\r\n\tsend(obj,callback){\r\n\t\tfor(let i of danmakuProp)\r\n\t\t\tif((i in obj)===false)return false;\r\n\t\tif((obj.text||'').match(/^\\s*$/))return false;\r\n\t\tobj.color=this.isVaildColor(obj.color);\r\n\t\tif(obj.color){\r\n\t\t\tobj.color=obj.color.replace(/\\$/g,()=>{\r\n\t\t\t\treturn colorChars[Utils.clamp((16*Math.random())|0,0,15)];\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tobj.color=null;\r\n\t\t}\r\n\t\tif(this.opt.send instanceof Function){\r\n\t\t\tthis.opt.send(obj,callback||(()=>{}));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tisVaildColor(co){\r\n\t\tif(typeof co !== 'string')return false;\r\n\t\treturn (co=co.match(/^\\#?(([\\da-f\\$]{3}){1,2})$/i))?co[1]:false;\r\n\t}\r\n}\r\n\r\nexport default NyaPDanmaku;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\n(function(f){\r\n\tif (typeof define === \"function\" && define.amd) {\r\n\t    define(f);\r\n\t}else if (typeof exports === \"object\") {\r\n\t    module.exports = f();\r\n\t}else {\r\n\t    (0,eval)('this').Mat = f();\r\n\t}\r\n})(function(){\r\nconst global= (0,eval)('this');\r\nconst TypedArray=global.Float32Array&&global.Float32Array.prototype;\r\n\r\nfunction createClass(Constructor){\r\n\tclass Matrix{\r\n\t\tconstructor(l,c,fill=0){\r\n\t\t\tthis.array=new Constructor(l*c);\r\n\t\t\tObject.defineProperty(this.array,'row',{value:l});\r\n\t\t\tObject.defineProperty(this.array,'column',{value:c});\r\n\t\t\tif(arguments.length==3){\r\n\t\t\t\tif(Matrix._instanceofTypedArray&&(fill===0)){}\r\n\t\t\t\telse if(typeof fill === 'number'){\r\n\t\t\t\t\tthis.fill(fill);\r\n\t\t\t\t}else if(fill.length){\r\n\t\t\t\t\tthis.set(fill);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tget length(){return this.array.length;}\r\n\t\tget row(){return this.array.row;}\r\n\t\tget column(){return this.array.column;}\r\n\t\tleftMultiply(m){\r\n\t\t\treturn this.set(Matrix.multiply(m,this,new Matrix(m.row,this.column)));\r\n\t\t}\r\n\t\trightMultiply(m){\r\n\t\t\treturn this.set(Matrix.multiply(this,m,new Matrix(this.row,m,column)));\r\n\t\t}\r\n\t\tfill(n){\r\n\t\t\targuments.length||(n=0);\r\n\t\t\tfor(let i=this.length;i--;)this.array[i]=n;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tset(arr,offset){\r\n\t\t\toffset||(offset=0);\r\n\t\t\t(arr instanceof Matrix)&&(arr=arr.array);\r\n\t\t\tfor(let i=(arr.length+offset)<=this.length?arr.length:(this.length-offset);i--;)\r\n\t\t\t\tthis.array[offset+i]=arr[i];\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tput(m,row,column){\r\n\t\t\tMatrix.put(this,m,row||0,column||0);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\trotate2d(t){\r\n\t\t\treturn this.set(Matrix.rotate2d(this,t,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\ttranslate2d(x,y){\r\n\t\t\treturn this.set(Matrix.translate2d(this,x,y,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\tscale2d(x,y){\r\n\t\t\treturn this.set(Matrix.scale2d(this,x,y,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\trotate3d(tx,ty,tz){\r\n\t\t\treturn this.set(Matrix.rotate3d(this,tx,ty,tz,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\tscale3d(x,y,z){\r\n\t\t\treturn this.set(Matrix.scale3d(this,x,y,z,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\ttranslate3d(x,y,z){\r\n\t\t\treturn this.set(Matrix.translate3d(this,x,y,z,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateX(t){\r\n\t\t\treturn this.set(Matrix.rotateX(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateY(t){\r\n\t\t\treturn this.set(Matrix.rotateY(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateZ(t){\r\n\t\t\treturn this.set(Matrix.rotateZ(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\tclone(){\r\n\t\t\treturn new Matrix(this.row,this.column,this);\r\n\t\t}\r\n\t\ttoString(){\r\n\t\t\tif(this.length === 0)return '';\r\n\t\t\tfor(var i=0,lines=[],tmp=[];i<this.length;i++){\r\n\t\t\t\tif(i && (i%this.column === 0)){\r\n\t\t\t\t\tlines.push(tmp.join('\\t'));\r\n\t\t\t\t\ttmp.length=0;\r\n\t\t\t\t}\r\n\t\t\t\ttmp.push(this.array[i]||0);\r\n\t\t\t}\r\n\t\t\tlines.push(tmp.join('\t'));\r\n\t\t\treturn lines.join('\\n');\r\n\t\t}\r\n\r\n\t\t//static methods\r\n\t\tstatic Identity(n){//return a new Identity Matrix\r\n\t\t\tlet m=new Matrix(n,n,0);\r\n\t\t\tfor(let i=n;i--;)m.array[i*n+i]=1;\r\n\t\t\treturn m;\r\n\t\t}\r\n\t\tstatic Perspective(fovy,aspect,znear,zfar,result){\r\n\t\t\tvar y1=znear*Math.tan(fovy*Math.PI/360.0),\r\n\t\t\t\tx1=y1*aspect,\r\n\t\t\t\tm=result||new Matrix(4,4,0),\r\n\t\t\t\tarr=m.array;\r\n\r\n\t\t\tarr[0]=2*znear/(x1+x1);\r\n\t\t\tarr[5]=2*znear/(y1+y1);\r\n\t\t\tarr[10]=-(zfar+znear)/(zfar-znear);\r\n\t\t\tarr[14]=-2*zfar*znear/(zfar-znear);\r\n\t\t\tarr[11]=-1;\r\n\t\t    if(result)arr[1]=arr[2]=arr[3]=arr[4]=arr[6]=arr[7]=arr[8]=arr[9]=arr[12]=arr[13]=arr[15]=0;\r\n\t\t    return m;\r\n\t\t}\r\n\t\tstatic multiply(a,b,result){\r\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\r\n\t\t\tlet row=a.row,column=Math.min(a.column,b.column),r=result||new Matrix(row,column),c,i,ind;\r\n\t\t\tfor(let l=row;l--;){\r\n\t\t\t\tfor(c=column;c--;){\r\n\t\t\t\t\tr.array[ind=(l*r.column+c)]=0;\r\n\t\t\t\t\tfor(i=a.column;i--;){\r\n\t\t\t\t\t\tr.array[ind]+=(a.array[l*a.column+i]*b.array[c+i*b.column]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic multiplyString(a,b,array,ignoreZero=true){//work out the equation for every elements,only for debug and only works with Array matrixes\r\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\r\n\t\t\tvar r=array||new Matrix(a.row,b.column),l,c,i,ind;\r\n\t\t\tfor(l=a.row;l--;){\r\n\t\t\t\tfor(c=b.column;c--;){\r\n\t\t\t\t\tr.array[ind=(l*b.column+c)]='';\r\n\t\t\t\t\tfor(i=0;i<a.column;i++){\r\n\t\t\t\t\t\tif(ignoreZero && (a.array[l*a.column+i]==0 ||b.array[c+i*b.column]==0))continue;\r\n\t\t\t\t\t\tr.array[ind]+=(((i&&r.array[ind])?'+':'')+'('+a.array[l*a.column+i]+')*('+b.array[c+i*b.column])+')';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic add(a,b,result){\r\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\r\n\t\t\tlet r=result||new Matrix(a.row,b.column);\r\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]+b.array[i];\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic minus(a,b,result){\r\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\r\n\t\t\tlet r=result||new Matrix(a.row,b.column);\r\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]-b.array[i];\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic rotate2d(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotate2d;\r\n\t\t\tMr.array[0]=Mr.array[4]=Math.cos(t);\r\n\t\t\tMr.array[1]=-(Mr.array[3]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic scale2d(m,x,y,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.scale2d;\r\n\t\t\tMr.array[0]=x;\r\n\t\t\tMr.array[4]=y;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic translate2d(m,x,y,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.translate2d;\r\n\t\t\tMr.array[2]=x;\r\n\t\t\tMr.array[5]=y;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic rotate3d(m,tx,ty,tz,result){\r\n\t\t\tconst Xc=Math.cos(tx),Xs=Math.sin(tx),\r\n\t\t\t\tYc=Math.cos(ty),Ys=Math.sin(ty),\r\n\t\t\t\tZc=Math.cos(tz),Zs=Math.sin(tz),\r\n\t\t\t\tMr=Matrix.Matrixes.rotate3d;\r\n\t\t\tMr.array[0]=Zc*Yc;\r\n\t\t\tMr.array[1]=Zc*Ys*Xs-Zs*Xc;\r\n\t\t\tMr.array[2]=Zc*Ys*Xc+Zs*Xs;\r\n\t\t\tMr.array[4]=Zs*Yc;\r\n\t\t\tMr.array[5]=Zs*Ys*Xs+Zc*Xc;\r\n\t\t\tMr.array[6]=Zs*Ys*Xc-Zc*Xs;\r\n\t\t\tMr.array[8]=-Ys;\r\n\t\t\tMr.array[9]=Yc*Xs;\r\n\t\t\tMr.array[10]=Yc*Xc;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateX(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateX;\r\n\t\t\tMr.array[10]=Mr.array[5]=Math.cos(t);\r\n\t\t\tMr.array[6]=-(Mr.array[9]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateY(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateY;\r\n\t\t\tMr.array[10]=Mr.array[0]=Math.cos(t);\r\n\t\t\tMr.array[8]=-(Mr.array[2]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateZ(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateZ;\r\n\t\t\tMr.array[5]=Mr.array[0]=Math.cos(t);\r\n\t\t\tMr.array[1]=-(Mr.array[4]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic scale3d(m,x,y,z,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.scale3d;\r\n\t\t\tMr.array[0]=x;\r\n\t\t\tMr.array[5]=y;\r\n\t\t\tMr.array[10]=z;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic translate3d(m,x,y,z,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.translate3d;\r\n\t\t\tMr.array[12]=x;\r\n\t\t\tMr.array[13]=y;\r\n\t\t\tMr.array[14]=z;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic put(m,sub,row,column){\r\n\t\t\tlet c,ind,i;\r\n\t\t\trow||(row=0);\r\n\t\t\tcolumn||(column=0);\r\n\t\t\tfor(let l=sub.row;l--;){\r\n\t\t\t\tif(l+row>=m.row)continue;\r\n\t\t\t\tfor(c=sub.column;c--;){\r\n\t\t\t\t\tif(c+column>=m.column)continue;\r\n\t\t\t\t\tm.array[(l+row)*m.column+c+column]=sub.array[l*sub.column+c];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstatic createClass(Constructor){\r\n\t\t\treturn createClass(Constructor);\r\n\t\t}\r\n\t}\r\n\r\n\tvar testArray=new Constructor(1);\r\n\tObject.defineProperty(Matrix,'_instanceofTypedArray',{value:!!(TypedArray&&TypedArray.isPrototypeOf(testArray))});\r\n\ttestArray=null;\r\n\r\n\tMatrix.Matrixes={//do not modify these matrixes manually and dont use them\r\n\t\tI2:Matrix.Identity(2),\r\n\t\tI3:Matrix.Identity(3),\r\n\t\tI4:Matrix.Identity(4),\r\n\t\tT3:new Matrix(3,3,0),\r\n\t\tT4:new Matrix(4,4,0),\r\n\t\trotate2d:Matrix.Identity(3),\r\n\t\ttranslate2d:Matrix.Identity(3),\r\n\t\tscale2d:Matrix.Identity(3),\r\n\t\ttranslate3d:Matrix.Identity(4),\r\n\t\trotate3d:Matrix.Identity(4),\r\n\t\trotateX:Matrix.Identity(4),\r\n\t\trotateY:Matrix.Identity(4),\r\n\t\trotateZ:Matrix.Identity(4),\r\n\t\tscale3d:Matrix.Identity(4),\r\n\t}\r\n\treturn Matrix;\r\n}\r\nreturn createClass(global.Float32Array?Float32Array:Array);\r\n});\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\nimport {\r\n\tDomTools,\r\n\tUtils\r\n} from '../../NyaP-Core/index.js';//load from NyaP-Core project\r\n\r\nexport {\r\n\tDomTools,\r\n\tUtils\r\n} \r\n\r\nclass DanmakuFrameModule{\r\n\tconstructor(frame){\r\n\t\tthis.frame=frame;\r\n\t\tthis.enabled=false;\r\n\t}\r\n\tget width(){return this.frame.width;}\r\n\tget height(){return this.frame.height;}\r\n}\r\n\r\n\r\nclass DanmakuFrame{\r\n\tstatic availableModules={};\r\n\tstatic addModule(name,module){\r\n\t\tif(name in this.availableModules){\r\n\t\t\tconsole.warn('The module \"'+name+'\" has already been added.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.availableModules[name]=module;\r\n\t} \r\n\tget availableModules(){return this.constructor.availableModules;}\r\n\tget opt(){return this._opt||{}};\r\n\tset time(t){//current media time (ms)\r\n\t\tthis.media||(this.timeBase=Date.now()-t);\r\n\t\tthis.moduleFunction('time',t);//let all mods know when the time be set\r\n\t}\r\n\tget time(){return this.media?(this.media.currentTime*1000):(Date.now()-this.timeBase);}\r\n\tget area(){return this.width*this.height;}\r\n\t_opt;\r\n\trate=1;\r\n\ttimeBase=0;//for no fixed duration evn\r\n\twidth=0;\r\n\theight=0;\r\n\tfpsLimit=0;\r\n\tfps=0;//fps result\r\n\tfpsRec=new Uint32Array(9);//frame time record\r\n\tmedia=null;\r\n\tworking=false;//set working stat\r\n\tenabled=true;//is enabled\r\n\tmodules={};//constructed module list\r\n\tconstructor(core,opt){\r\n\t\tthis.core=core;\r\n\t\tthis._opt=opt;\r\n\t\tthis.container=core.danmakuContainer||document.createElement('div');\r\n\t\t// create a styleSheet\r\n\t\tconst style=document.createElement(\"style\");\r\n\t\tdocument.head.appendChild(style);\r\n\t\tthis.styleSheet=style.sheet;\r\n\t\t\r\n\t\tsetImmediate(()=>{//container size sensor\r\n\t\t\tDomTools.resizeEvent.observe(this.container);\r\n\t\t\tDomTools.addEvents(this.container,{\r\n\t\t\t\tresize:e=>this.resize(e.contentRect),\r\n\t\t\t});\r\n\t\t\tthis.resize();\r\n\t\t},0);\r\n\t\t\r\n\t\tUtils.animationFrameLoop(()=>{//fps recorder\r\n\t\t\tlet rec=this.fpsRec,length=rec.length;\r\n\t\t\t//move left\r\n\t\t\trec.copyWithin(rec,1);\r\n\t\t\trec[length-1]=Date.now();//set this frame's time\r\n\t\t\tlet result=0;\r\n\t\t\tfor(let i=1;i<length;i++){//weighted average\r\n\t\t\t\tresult+=i*(rec[i]-rec[i-1]);\r\n\t\t\t}\r\n\t\t\tresult/=length*(length-1)/2;\r\n\t\t\tthis.fps=1000/result;\r\n\t\t});\r\n\r\n\t\tthis.draw=this.draw.bind(this);\r\n\r\n\t}\r\n\tenable(name){//enable a amdule\r\n\t\tif(name===undefined){//no name means enable this frame\r\n\t\t\tthis.enabled=true;\r\n\t\t\tif(this.media){\r\n\t\t\t\tthis.media.paused||this.play();\r\n\t\t\t}\r\n\t\t\tthis.container.style.display='';\r\n\t\t\tthis.core.emit('danmakuFrameToggle',true);\r\n\t\t\tthis.core.debug('danmaku frame enabled');\r\n\t\t\treturn;\r\n\t\t}else if(!name){\r\n\t\t\tthrow(new Error(`Wrong name: ${name}`));\r\n\t\t}\r\n\t\tlet module=this.modules[name]||this.initModule(name);\r\n\t\tif(!module)return false;\r\n\t\tmodule.enabled=true;\r\n\t\tmodule.enable&&module.enable();\r\n\t\treturn true;\r\n\t}\r\n\tdisable(name){\r\n\t\tif(name===undefined){\r\n\t\t\tthis.pause();\r\n\t\t\tthis.moduleFunction('clear');\r\n\t\t\tthis.enabled=false;\r\n\t\t\tthis.container.style.display='none';\r\n\t\t\tthis.core.emit('danmakuFrameToggle',false);\r\n\t\t\tthis.core.debug('danmaku frame disabled');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet module=this.modules[name];\r\n\t\tif(!module)return false;\r\n\t\tmodule.enabled=false;\r\n\t\tmodule.disable&&module.disable();\r\n\t\treturn true;\r\n\t}\r\n\taddStyle(s){\r\n\t\tif(typeof s === 'string')s=[s];\r\n\t\tif(s instanceof Array === false)return;\r\n\t\ts.forEach(r=>this.styleSheet.insertRule(r,this.styleSheet.cssRules.length));\r\n\t}\r\n\tinitModule(name,arg=this.opt.modules[name]){\r\n\t\tif(this.modules[name]){\r\n\t\t\tconsole.warn(`The module [${name}] has already inited.`);\r\n\t\t\treturn this.modules[name];\r\n\t\t}\r\n\t\tlet mod=DanmakuFrame.availableModules[name];\r\n\t\tif(!mod)throw('Module ['+name+'] does not exist.');\r\n\t\tlet module=new mod(this,arg);\r\n\t\tif(module instanceof DanmakuFrameModule === false)\r\n\t\t\tthrow('Constructor of '+name+' is not child class of DanmakuFrameModule');\r\n\t\tthis.modules[name]=module;\r\n\t\tconsole.debug(`Mod Inited: ${name}`);\r\n\t\treturn module;\r\n\t}\r\n\tdraw(force){\r\n\t\tif(!this.working)return;\r\n\t\tthis.moduleFunction('draw',force);\r\n\t\tif(this.fpsLimit<=0){\r\n\t\t\trequestAnimationFrame(()=>this.draw());\r\n\t\t}else{\r\n\t\t\tsetTimeout(this.draw,1000/this.fpsLimit);\r\n\t\t}\r\n\t}\r\n\tload(...danmakuObj){\r\n\t\tthis.moduleFunction('load',...danmakuObj);\r\n\t}\r\n\tloadList(danmakuArray){\r\n\t\tthis.moduleFunction('loadList',danmakuArray);\r\n\t}\r\n\tunload(danmakuObj){\r\n\t\tthis.moduleFunction('unload',danmakuObj);\r\n\t}\r\n\tplay(){\r\n\t\tif(this.working||!this.enabled)return;\r\n\t\tthis.working=true;\r\n\t\tthis.moduleFunction('play');\r\n\t\tthis.draw(true);\r\n\t}\r\n\tpause(){\r\n\t\tif(!this.enabled)return;\r\n\t\tthis.working=false;\r\n\t\tthis.moduleFunction('pause');\r\n\t}\r\n\tresize(rect=this.container.getBoundingClientRect()){\r\n\t\tthis.width=rect.width;\r\n\t\tthis.height=rect.height;\r\n\t\tthis.moduleFunction('resize',rect);\r\n\t}\r\n\tmoduleFunction(name,...arg){\r\n\t\tlet m;\r\n\t\tfor(let n in this.modules){\r\n\t\t\tm=this.modules[n];\r\n\t\t\tif(m.enabled&&m[name])m[name](...arg);\r\n\t\t}\r\n\t}\r\n\tsetMedia(media){\r\n\t\tconst F=this;\r\n\t\tF.media=media;\r\n\t\tDomTools.addEvents(media,{\r\n\t\t\tplaying:()=>F.play(),\r\n\t\t\t'pause,stalled,seeking,waiting':()=>F.pause(),\r\n\t\t\tratechange:()=>{\r\n\t\t\t\tF.rate=F.media.playbackRate;\r\n\t\t\t\tF.moduleFunction('rate',F.rate);\r\n\t\t\t},\r\n\t\t});\r\n\t\tF.moduleFunction('media',media);\r\n\t}\r\n}\r\n\r\n\r\nexport {DanmakuFrame,DanmakuFrameModule}\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass TextCanvas2D extends Template{\r\n\tcanvas;\r\n\tcontext2d;\r\n\tget container(){return this.canvas;}\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.canvas=document.createElement('canvas');//the canvas\r\n\t\tthis.context2d=this.canvas.getContext('2d');//the canvas contex\r\n\t\tif(!this.context2d){\r\n\t\t\tconsole.warn('text 2d not supported');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.canvas.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tthis.canvas.id=`${dText.randomText}_text2d`;\r\n\t\tthis.supported=true;\r\n\t}\r\n\tdraw(force){\r\n\t\tlet ctx=this.context2d,\r\n\t\t\tcW=ctx.canvas.width,\r\n\t\t\tdT=this.dText.DanmakuText,\r\n\t\t\ti=dT.length,\r\n\t\t\tt,\r\n\t\t\tleft,\r\n\t\t\tright,\r\n\t\t\tvW;\r\n\t\tlet debug=false;\r\n\t\tctx.globalCompositeOperation='destination-over';\r\n\t\tthis.clear(force);\r\n\t\tfor(;i--;){\r\n\t\t\tif(!(t=dT[i]).drawn)(t.drawn=true);\r\n\t\t\tleft=t.style.x-t.estimatePadding;\r\n\t\t\tright=left+t._cache.width;\r\n\t\t\tif(left>cW || right<0){continue;}//ignore danmakus out of the screen\r\n\t\t\tif(debug){\r\n\t\t\t\tctx.save();\r\n\t\t\t\tctx.fillStyle='rgba(255,255,255,0.3)';\r\n\t\t\t\tctx.fillRect(left,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\r\n\t\t\t\tctx.restore();\r\n\t\t\t}\r\n\t\t\tif(cW>=t._cache.width){//danmaku which is smaller than canvas width\r\n\t\t\t\tctx.drawImage(t._bitmap||t._cache, left, t.style.y-t.estimatePadding);\r\n\t\t\t}else{//only draw the part on screen if the danmau overflow\r\n\t\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0)\r\n\t\t\t\tctx.drawImage(t._bitmap||t._cache,\r\n\t\t\t\t\t(left<0)?-left:0,0,\r\n\t\t\t\t\t\t\tvW,t._cache.height,\r\n\t\t\t\t\t(left<0)?0:left,t.style.y-t.estimatePadding,\r\n\t\t\t\t\t\t\tvW,t._cache.height);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tclear(force){\r\n\t\tconst D=this.dText;\r\n\t\tif(force||this._evaluateIfFullClearMode()){\r\n\t\t\tthis.context2d.clearRect(0,0,this.canvas.width,this.canvas.height);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\r\n\t\t\tt=D.DanmakuText[i];\r\n\t\t\tif(t.drawn)\r\n\t\t\t\tthis.context2d.clearRect(t.style.x-t.estimatePadding,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\r\n\t\t}\r\n\t}\r\n\t_evaluateIfFullClearMode(){\r\n\t\tif(this.dText.DanmakuText.length>3)return true;\r\n\t\treturn false;\r\n\t}\r\n\tdeleteRelatedTextObject(t){\r\n\t\tif(t._bitmap){\r\n\t\t\tt._bitmap.close();\r\n\t\t\tt._bitmap=null;\r\n\t\t}\r\n\t}\r\n\tresize(){\r\n\t\tlet D=this.dText,C=this.canvas;\r\n\t\tC.width=D.width;\r\n\t\tC.height=D.height;\r\n\t}\r\n\tenable(){\r\n\t\tthis.draw();\r\n\t\tthis.dText.useImageBitmap=true;\r\n\t}\r\n\tdisable(){\r\n\t\tfor(let tobj of this.dText.DanmakuText){\r\n\t\t\tthis.deleteRelatedTextObject(tobj);\r\n\t\t}\r\n\t\tthis.clear(true);\r\n\t}\r\n}\r\n\r\nexport default TextCanvas2D;","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass TextCss extends Template{\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.supported=dText.text2d.supported;\r\n\t\tif(!this.supported)return;\r\n\t\tdText.frame.addStyle([`#${dText.randomText}_textCanvasContainer canvas{will-change:transform;top:0;left:0;position:absolute;}`,\r\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer.moving canvas{transition:transform 500s linear;}`,\r\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer{will-change:transform;pointer-events:none;overflow:hidden;}`]);\r\n\r\n\t\tthis.container=document.createElement('div');//for text canvas\r\n\t\tthis.container.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tthis.container.id=`${dText.randomText}_textCanvasContainer`;\r\n\t}\r\n\t_toggle(s){\r\n\t\tlet D=this.dText,T=D.frame.time;\r\n\t\tthis.container.classList[s?'add':'remove']('moving');\r\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\r\n\t\t\tif((t=D.DanmakuText[i]).danmaku.mode>=2)continue;\r\n\t\t\tif(s){requestAnimationFrame(()=>this._move(t));}\r\n\t\t\telse{this._move(t,T);}\r\n\t\t}\r\n\t}\r\n\tclear(){\r\n\t\tthis.container.innerHTML='';\r\n\t}\r\n\tpause(){\r\n\t\tthis._toggle(false);\r\n\t}\r\n\tplay(){\r\n\t\tthis._toggle(true);\r\n\t}\r\n\trate(){\r\n\t\tthis.resetPos();\r\n\t}\r\n\t_move(t,T){\r\n\t\tif(!t.danmaku)return;\r\n\t\tif(T===undefined)T=this.dText.frame.time+500000;\r\n\t\tt._cache.style.transform=`translate(${(((this.dText._calcSideDanmakuPosition(t,T)-t.estimatePadding)*10)|0)/10}px,${t.style.y-t.estimatePadding}px)`;\r\n\t}\r\n\tresetPos(){\r\n\t\tthis.pause();\r\n\t\tthis.dText.paused||requestAnimationFrame(()=>this.play());\r\n\t}\r\n\tresize(){\r\n\t\tthis.resetPos();\r\n\t}\r\n\tremove(t){\r\n\t\tt._cache.parentNode&&this.container.removeChild(t._cache);\r\n\t}\r\n\tenable(){\r\n\t\tthis.dText.useImageBitmap=false;\r\n\t\trequestAnimationFrame(()=>{\r\n\t\t\tthis.dText.DanmakuText.forEach(t=>this.newDanmaku(t));\r\n\t\t});\r\n\t}\r\n\tdisable(){\r\n\t\tthis.container.innerHTML='';\r\n\t}\r\n\tnewDanmaku(t){\r\n\t\tt._cache.style.transform=`translate(${t.style.x-t.estimatePadding}px,${t.style.y-t.estimatePadding}px)`;\r\n\t\tthis.container.appendChild(t._cache);\r\n\t\tt.danmaku.mode<2&&!this.dText.paused&&requestAnimationFrame(()=>this._move(t));\r\n\t}\r\n}\r\n\r\n\r\nexport default TextCss;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Mat from '../../lib/Mat/Mat.js'\r\nimport Template from './textModuleTemplate.js';\r\nimport {Utils} from '../danmaku-frame.js';\r\n\r\nclass TextWebGL extends Template{\r\n\tget container(){return this.c3d;}\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tlet c3d=this.c3d=document.createElement('canvas');\r\n\t\tc3d.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tc3d.id=`${dText.randomText}_text3d`;\r\n\t\t//init webgl\r\n\t\tconst gl=this.gl=c3d.getContext('webgl')||c3d.getContext('experimental-webgl');//the canvas3d context\r\n\t\tif(!gl){\r\n\t\t\tconsole.warn('text 3d not supported');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//shader\r\n\t\tvar shaders={\r\n\t\t\tdanmakuFrag:[gl.FRAGMENT_SHADER,`\r\n\t\t\t\t#pragma optimize(on)\r\n\t\t\t\tprecision lowp float;\r\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\r\n\t\t\t\tuniform sampler2D uSampler;\r\n\t\t\t\tvoid main(void) {\r\n\t\t\t\t\tvec4 co=texture2D(uSampler,vDanmakuTexCoord);\r\n\t\t\t\t\tif(co.a == 0.0)discard;\r\n\t\t\t\t\tgl_FragColor = co;\r\n\t\t\t\t}`\r\n\t\t\t],\r\n\t\t\tdanmakuVert:[gl.VERTEX_SHADER,`\r\n\t\t\t\t#pragma optimize(on)\r\n\t\t\t\tattribute vec2 aVertexPosition;\r\n\t\t\t\tattribute vec2 aDanmakuTexCoord;\r\n\t\t\t\tuniform mat4 u2dCoordinate;\r\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\r\n\t\t\t\tvoid main(void) {\r\n\t\t\t\t\tgl_Position = u2dCoordinate * vec4(aVertexPosition,0,1);\r\n\t\t\t\t\tvDanmakuTexCoord = aDanmakuTexCoord;\r\n\t\t\t\t}`\r\n\t\t\t],\r\n\t\t}\r\n\t\tfunction shader(name){\r\n\t\t\tvar s=gl.createShader(shaders[name][0]);\r\n\t\t\tgl.shaderSource(s,shaders[name][1]);\r\n\t\t\tgl.compileShader(s);\r\n\t\t\tif (!gl.getShaderParameter(s,gl.COMPILE_STATUS))\r\n\t\t\t\tthrow(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(s));\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\tvar fragmentShader = shader(\"danmakuFrag\");\r\n\t\tvar vertexShader = shader(\"danmakuVert\");\r\n\t\tvar shaderProgram = this.shaderProgram = gl.createProgram();\r\n\t\tgl.attachShader(shaderProgram,vertexShader);\r\n\t\tgl.attachShader(shaderProgram,fragmentShader);\r\n\t\tgl.linkProgram(shaderProgram);\r\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n\t\t\tconsole.error(\"Unable to initialize the shader program.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tgl.useProgram(shaderProgram);\r\n\r\n\t\t//scene\r\n\t\tgl.clearColor(0, 0, 0, 0.0);\r\n\t\tgl.enable(gl.BLEND);\r\n\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA ,gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\t\tthis.maxTexSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n\r\n\t\tthis.uSampler=gl.getUniformLocation(shaderProgram,\"uSampler\");\r\n\t\tthis.u2dCoord=gl.getUniformLocation(shaderProgram,\"u2dCoordinate\");\r\n\t\tthis.aVertexPosition=gl.getAttribLocation(shaderProgram,\"aVertexPosition\");\r\n\t\tthis.atextureCoord=gl.getAttribLocation(shaderProgram,\"aDanmakuTexCoord\");\r\n\r\n\t\tgl.enableVertexAttribArray(this.aVertexPosition);\r\n\t\tgl.enableVertexAttribArray(this.atextureCoord);\r\n\r\n\t\tthis.commonTexCoordBuffer=gl.createBuffer();\r\n\t\tthis.commonVertCoordBuffer=gl.createBuffer();\r\n\r\n\t\tgl.activeTexture(gl.TEXTURE0);\r\n\t\tgl.uniform1i(this.uSampler,0);\r\n\r\n\t\tthis.supported=true;\r\n\t}\r\n\tdraw(force){\r\n\t\tconst gl=this.gl,l=this.dText.DanmakuText.length;\r\n\t\tlet cW=this.c3d.width,left,right,vW;\r\n\t\tfor(let i=0,t;i<l;i++){\r\n\t\t\tt=this.dText.DanmakuText[i];\r\n\t\t\tif(!t || !t.glDanmaku)continue;\r\n\t\t\tleft=t.style.x-t.estimatePadding;\r\n\t\t\tright=left+t._cache.width,\r\n\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0);\r\n\t\t\tif(left>cW || right<0)continue;\r\n\r\n\t\t\t//vert\r\n\t\t\tt.vertCoord[0]=t.vertCoord[4]=(left<0)?0:left;\r\n\t\t\tt.vertCoord[2]=t.vertCoord[6]=t.vertCoord[0]+vW;\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonVertCoordBuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,t.vertCoord,gl.DYNAMIC_DRAW);\r\n\t\t\tgl.vertexAttribPointer(this.aVertexPosition,2,gl.FLOAT,false,0,0);\r\n\r\n\t\t\t//tex\r\n\t\t\tcommonTextureCoord[0]=commonTextureCoord[4]=(left<0)?-left/t._cache.width:0;\r\n\t\t\tcommonTextureCoord[2]=commonTextureCoord[6]=commonTextureCoord[0]+vW/t._cache.width;\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonTexCoordBuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,commonTextureCoord,gl.DYNAMIC_DRAW);\r\n\t\t\tgl.vertexAttribPointer(this.atextureCoord,2,gl.FLOAT,false,0,0);\r\n\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,t.texture);\r\n\r\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP,0,4);\r\n\t\t}\r\n\t\tgl.flush();\r\n\t}\r\n\tclear(){\r\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n\t}\r\n\tdeleteRelatedTextObject(t){\r\n\t\tif(t.texture)this.gl.deleteTexture(t.texture);\r\n\t\tt.texture=null;\r\n\t\tt.vertCoord=null;\r\n\t\tdelete t.glDanmaku;\r\n\t}\r\n\tresize(w,h){\r\n\t\tconst gl=this.gl,C=this.c3d;\r\n\t\tC.width=this.dText.width;\r\n\t\tC.height=this.dText.height;\r\n\t\tgl.viewport(0,0,C.width,C.height);\r\n\t\tgl.uniformMatrix4fv(this.u2dCoord,false,(Mat.Identity(4).translate3d(-1,1,0).scale3d(2/C.width,-2/C.height,0)).array);\r\n\t}\r\n\tenable(){\r\n\t\tthis.dText.DanmakuText.forEach(t=>{\r\n\t\t\tthis.newDanmaku(t,false);\r\n\t\t});\r\n\t\tthis.dText.useImageBitmap=false;\r\n\t\trequestAnimationFrame(()=>this.draw());\r\n\t}\r\n\tdisable(){\r\n\t\t//clean related objects\r\n\t\tfor(let tobj of this.dText.DanmakuText){\r\n\t\t\tthis.deleteRelatedTextObject(tobj);\r\n\t\t}\r\n\t\tthis.clear();\r\n\t}\r\n\tnewDanmaku(t,async=true){\r\n\t\tconst gl=this.gl;\r\n\t\tt.glDanmaku=false;\r\n\t\tif(t._cache.height>this.maxTexSize || t._cache.width>this.maxTexSize){//ignore too large danmaku image\r\n\t\t\tconsole.warn('Ignore a danmaku width too large size',t.danmaku);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet tex;\r\n\t\tif(!(tex=t.texture)){\r\n\t\t\ttex=t.texture=gl.createTexture();\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);\r\n\t\t}\r\n\t\tif(async){\r\n\t\t\tUtils.requestIdleCallback(()=>{\r\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\r\n\t\t\t\tt.glDanmaku=true;\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\r\n\t\t\tt.glDanmaku=true;\r\n\t\t}\r\n\r\n\t\t//vert\r\n\t\tlet y=t.style.y-t.estimatePadding;\r\n\t\tt.vertCoord=new Float32Array([\r\n\t\t\t0,y,\r\n\t\t\t0,y,\r\n\t\t\t0,y+t._cache.height,\r\n\t\t\t0,y+t._cache.height,\r\n\t\t]);\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst commonTextureCoord=new Float32Array([\r\n\t0.0,  0.0,//↖\r\n\t1.0,  0.0,//↗\r\n\t0.0,  1.0,//↙\r\n\t1.0,  1.0,//↘\r\n]);\r\n\r\n\r\nexport default TextWebGL;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass TextOff extends Template{\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.supported=true;\r\n        this.container=document.createElement('div');\r\n        this.container.style.display='none';\r\n\t}\r\n}\r\n\r\nexport default TextOff;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n\r\ndanmaku-frame mod\r\n*/\r\n'use strict';\r\nimport {DomTools,Utils} from '../danmaku-frame.js';\r\nimport TextCanvas2D from './TextCanvas2D.js';\r\nimport TextWebGL from './TextWebGL.js';\r\nimport TextCss from './TextCss.js';\r\nimport Textoff from './Textoff.js';\r\nimport {DanmakuFrameModule} from '../danmaku-frame.js'\r\n\r\n/*\r\ndanmaku obj struct\r\n{\r\n\t_:'text',\r\n\ttime:(number)msec time,\r\n\ttext:(string),\r\n\tstyle:(object)to be combined whit default style,\r\n\tmode:(number),\r\n\tonScreen:(bool)on the screen\r\n}\r\n\r\ndanmaku mode\r\n\t0:right\r\n\t1:left\r\n\t2:bottom\r\n\t3:top\r\n*/\r\nconst defProp=Object.defineProperty;\r\nlet useImageBitmap=false;\r\n\r\nclass TextDanmaku extends DanmakuFrameModule{\r\n\tget paused(){return !this.frame.working;}\r\n\tlist=[];//danmaku object array\r\n\tindexMark=0;//to record the index of last danmaku loaded to screen in the DanmakuText\r\n\trandomText=`danmaku_text_${(Math.random()*999999)|0}`;\r\n\tlastRendererMode=0;\r\n\t//time record\r\n\tcacheCleanTime=0;\r\n\tdanmakuMoveTime=0;\r\n\tdanmakuCheckTime=0;\r\n\tdanmakuCheckSwitch=true;\r\n\tGraphCache=[];//text graph cache, for reusable TextGraph obj\r\n\tDanmakuText=[];//TextGraph on screen\r\n\tdefaultStyle={//these styles can be overwrote by the 'font' property of danmaku object\r\n\t\tfontStyle: null,\r\n\t\tfontWeight: 300,\r\n\t\tfontVariant: null,\r\n\t\tcolor: \"#fff\",\r\n\t\tfontSize: 24,\r\n\t\tfontFamily: \"Arial\",\r\n\t\tstrokeWidth: 1,//outline width\r\n\t\tstrokeColor: \"#888\",\r\n\t\tshadowBlur: 5,\r\n\t\ttextAlign:'start',//left right center start end\r\n\t\tshadowColor: \"#000\",\r\n\t\tshadowOffsetX:0,\r\n\t\tshadowOffsetY:0,\r\n\t\tfill:true,//if the text should be filled\r\n\t};\r\n\toptions={\r\n\t\tallowLines:false,//allow multi-line danmaku\r\n\t\tscreenLimit:0,//the most area% of danmaku on the screen\r\n\t\tclearWhenTimeReset:true,//clear danmaku on screen when the time is reset\r\n\t\tspeed:6.5,\r\n\t\tdanmakuSizeScale:1,//scale for the default size\r\n\t\tautoShiftRenderingMode:true,//auto shift to a low load mode\r\n\t\trenderingMode:1,//default to css mode\r\n\t}\r\n\tconstructor(frame,arg={}){\r\n\t\tsuper(frame);\r\n\t\tif(arg.defaultStyle)\r\n\t\t\tObject.assign(this.defaultStyle,arg.defaultStyle);\r\n\t\tif(arg.options)\r\n\t\t\tUtils.deepAssign(this.options,arg.options);\r\n\t\t\r\n\t\tframe.addStyle(`.${this.randomText}_fullfill{top:0;left:0;width:100%;height:100%;position:absolute;}`);\r\n\r\n\t\tdefProp(this,'rendererMode',{configurable:true});\r\n\t\tdefProp(this,'activeRendererMode',{configurable:true,value:null});\r\n\t\tconst con=this.container=document.createElement('div');\r\n\t\tcon.id=`${this.randomText}_textDanmakuContainer`;\r\n\t\tcon.classList.add(`${this.randomText}_fullfill`);\r\n\r\n\t\t//init modes\r\n\t\tthis.modes={\r\n\t\t\t0:this.textoff=new Textoff(this),//off\r\n\t\t\t2:this.text2d=new TextCanvas2D(this),\r\n\t\t\t1:this.textCss=new TextCss(this),\r\n\t\t\t3:this.text3d=new TextWebGL(this),\r\n\t\t};\r\n\r\n\t\t\r\n\t\tthis.rendering=new RenderingDanmakuManager(this);\r\n\r\n\t\tDomTools.addEvents(document,{\r\n\t\t\tvisibilitychange:e=>{\r\n\t\t\t\t//?\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis._checkNewDanmaku=this._checkNewDanmaku.bind(this);\r\n\t\tthis._cleanCache=this._cleanCache.bind(this);\r\n\t\tsetInterval(this._cleanCache,5000);//set an interval for cache cleaning\r\n\t\t\r\n\t\tthis.setRendererMode(this.lastRendererMode=(this.options.renderingMode||1));\r\n\t}\r\n\tsetRendererMode(n){\r\n\t\tif(this.rendererMode===n || !(n in this.modes) || !this.modes[n].supported)return false;\r\n\t\tif(this.activeRendererMode){\r\n\t\t\tthis.lastRendererMode=this.rendererMode;\r\n\t\t\tthis.activeRendererMode.disable();\r\n\t\t\tthis.container.removeChild(this.activeRendererMode.container);\r\n\t\t}\r\n\t\tdefProp(this,'activeRendererMode',{value:this.modes[n]});\r\n\t\tdefProp(this,'rendererMode',{value:n});\r\n\t\tthis.container.appendChild(this.activeRendererMode.container);\r\n\t\tthis.activeRendererMode.resize();\r\n\t\tthis.activeRendererMode.enable();\r\n\t\tthis.frame.core.debug('rendererMode:',this.rendererMode);\r\n\t\treturn true;\r\n\t}\r\n\tmedia(media){\r\n\t\tDomTools.addEvents(media,{\r\n\t\t\tseeked:()=>this.time(),\r\n\t\t\tseeking:()=>this.pause(),\r\n\t\t});\r\n\t}\r\n\tplay(){\r\n\t\tthis.recheckIndexMark();\r\n\t\tthis.activeRendererMode.play();\r\n\t}\r\n\tpause(){\r\n\t\tthis.activeRendererMode.pause();\r\n\t}\r\n\tload(d,autoAddToScreen){\r\n\t\tif(d?._!=='text'){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(typeof d.text !== 'string'){\r\n\t\t\tconsole.error('wrong danmaku object:',d);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet ind,arr=this.list;\r\n\t\tind=dichotomy(arr,d.time,0,arr.length-1,false);//find a place for this obj in the list in time order\r\n\t\tarr.splice(ind,0,d);//insert the obj\r\n\t\tif(ind<this.indexMark)this.indexMark++;\r\n\t\t//round d.style.fontSize to prevent Iifinity loop in tunnel\r\n\t\tif(typeof d.style!=='object')d.style={};\r\n\t\td.style.fontSize=Math.round((d.style.fontSize||this.defaultStyle.fontSize)*this.options.danmakuSizeScale);\r\n\t\tif(isNaN(d.style.fontSize)|| d.style.fontSize===Infinity || d.style.fontSize===0)d.style.fontSize=this.defaultStyle.fontSize*this.options.danmakuSizeScale;\r\n\t\tif(typeof d.mode !== 'number')d.mode=0;\r\n\t\tif(autoAddToScreen)this._addNewDanmaku(d);\r\n\t\treturn d;\r\n\t}\r\n\tloadList(danmakuArray){\r\n\t\tdanmakuArray.forEach(d=>this.load(d));\r\n\t}\r\n\tunload(d){\r\n\t\tif(!d || d._!=='text')return false;\r\n\t\tconst i=this.list.indexOf(d);\r\n\t\tif(i<0)return false;\r\n\t\tthis.list.splice(i,1);\r\n\t\tif(i<this.indexMark)this.indexMark--;\r\n\t\treturn true;\r\n\t}\r\n\t_checkNewDanmaku(force){\r\n\t\tif(this.paused&&!force)return;\r\n\t\tlet d,time=this.frame.time;\r\n\t\tif(this.danmakuCheckTime===time || !this.danmakuCheckSwitch)return;\r\n\t\tif(this.list.length)\r\n\t\tfor(;(this.indexMark<this.list.length)&&(d=this.list[this.indexMark])&&(d.time<=time);this.indexMark++){//add new danmaku\r\n\t\t\tif(this.options.screenLimit>0 && this.rendering.onScreenArea>=this.options.screenLimit/100*this.frame.area){continue;}//continue if the number of danmaku on screen has up to limit or doc is not visible\r\n\t\t\tthis._addNewDanmaku(d);\r\n\t\t}\r\n\t\tthis.danmakuCheckTime=time;\r\n\t}\r\n\t_addNewDanmaku(d){\r\n\t\tconst cHeight=this.height,cWidth=this.width;\r\n\t\tlet t=this.GraphCache.length?this.GraphCache.shift():new TextGraph();\r\n\t\tif(!this.options.allowLines){\r\n\t\t\td=Object.create(d);\r\n\t\t\td.text=d.text.replace(/\\n/g,' ');\r\n\t\t}\r\n\t\tlet font=Object.create(this.defaultStyle);\r\n\t\tt.init(d,Object.assign(font,d.style));\r\n\t\tt.prepare(false);\r\n\t\t//find tunnel number\r\n\t\tconst tnum=this.rendering.tunnelManager.getTunnel(t,cHeight);\r\n\t\t//calc margin\r\n\t\tlet margin=(tnum<0?0:tnum)%cHeight;\r\n\t\tswitch(d.mode){\r\n\t\t\tcase 0:case 1:case 3:{\r\n\t\t\t\tt.style.y=margin;break;\r\n\t\t\t}\r\n\t\t\tcase 2:{\r\n\t\t\t\tt.style.y=cHeight-margin-t.style.height-1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tswitch(d.mode){\r\n\t\t\tcase 0:{t.style.x=cWidth;break;}\r\n\t\t\tcase 1:{t.style.x=-t.style.width;break;}\r\n\t\t\tcase 2:case 3:{t.style.x=(cWidth-t.style.width)/2;}\r\n\t\t}\r\n\t\tthis.rendering.add(t);\r\n\t}\r\n\t_calcSideDanmakuPosition(t,T=this.frame.time){\r\n\t\tlet R=!t.danmaku.mode,style=t.style;//R:from right\r\n\t\treturn (R?this.frame.width:(-style.width))\r\n\t\t\t\t+(R?-1:1)*this.frame.rate*(style.width+1024)*(T-t.time)*this.options.speed/60000;\r\n\t}\r\n\t_calcDanmakusPosition(force){\r\n\t\tlet T=this.frame.time;\r\n\t\tif(this.paused&&!force)return;\r\n\t\tconst cWidth=this.width,rate=this.frame.rate;\r\n\t\tlet R,i,t,style,X;\r\n\t\tthis.danmakuMoveTime=T;\r\n\t\tfor(i=this.DanmakuText.length;i--;){\r\n\t\t\tt=this.DanmakuText[i];\r\n\t\t\tif(t.time>T){\r\n\t\t\t\tthis.removeText(t);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tstyle=t.style;\r\n\r\n\t\t\tswitch(t.danmaku.mode){\r\n\t\t\t\tcase 0:case 1:{\r\n\t\t\t\t\tR=!t.danmaku.mode;\r\n\t\t\t\t\tstyle.x=X=this._calcSideDanmakuPosition(t,T);\r\n\t\t\t\t\tif(t.tunnelNumber>=0 && ((R&&(X+style.width)+10<cWidth) || (!R&&X>10)) ){\r\n\t\t\t\t\t\tthis.rendering.tunnelManager.removeMark(t);\r\n\t\t\t\t\t}else if( (R&&(X<-style.width-20)) || (!R&&(X>cWidth+style.width+20)) ){//go out the canvas\r\n\t\t\t\t\t\tthis.removeText(t);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 2:case 3:{\r\n\t\t\t\t\tif((T-t.time)>this.options.speed*1000/rate){\r\n\t\t\t\t\t\tthis.removeText(t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t_cleanCache(force){//clean text object cache\r\n\t\tforce&&this.frame.core.debug('force cleaning graph cache');\r\n\t\tconst now=Date.now();\r\n\t\tif(this.GraphCache.length>30 || force){//save 30 cached danmaku\r\n\t\t\tfor(let ti = 0;ti<this.GraphCache.length;ti++){\r\n\t\t\t\tif(force || (now-this.GraphCache[ti].removeTime) > 10000){//delete cache which has not been used for 10s\r\n\t\t\t\t\tthis.GraphCache[ti].destructor();\r\n\t\t\t\t\tthis.GraphCache.splice(ti,1);\r\n\t\t\t\t}else{break;}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tdraw(force){\r\n\t\tif((!force&&this.paused)||!this.enabled)return;\r\n\t\tthis._calcDanmakusPosition(force);\r\n\t\tthis.activeRendererMode.draw(force);\r\n\t\trequestAnimationFrame(()=>{this._checkNewDanmaku(force)});\r\n\t}\r\n\tremoveText(t){//remove the danmaku from screen\r\n\t\tthis.rendering.remove(t);\r\n\t}\r\n\tresize(){\r\n\t\tif(this.activeRendererMode)this.activeRendererMode.resize();\r\n\t\tthis.draw(true);\r\n\t}\r\n\t_clearScreen(forceFull){\r\n\t\tthis.activeRendererMode&&this.activeRendererMode.clear(forceFull);\r\n\t}\r\n\tclear(){//clear danmaku on the screen\r\n\t\tthis.rendering.clear();\r\n\t\tthis._clearScreen(true);\r\n\t}\r\n\trecheckIndexMark(t=this.frame.time){\r\n\t\tthis.indexMark=dichotomy(this.list,t,0,this.list.length-1,true);\r\n\t}\r\n\trate(r){\r\n\t\tif(this.activeRendererMode)this.activeRendererMode.rate(r);\r\n\t}\r\n\ttime(t=this.frame.time){//reset time,you should invoke it when the media has seeked to another time\r\n\t\tthis.recheckIndexMark(t);\r\n\t\tif(this.options.clearWhenTimeReset){this.clear();}\r\n\t\telse{this.resetTimeOfDanmakuOnScreen();}\r\n\t}\r\n\tresetTimeOfDanmakuOnScreen(cTime){\r\n\t\t//cause the position of the danmaku is based on time\r\n\t\t//and if you don't want these danmaku on the screen to disappear after seeking,their time should be reset\r\n\t\tif(cTime===undefined)cTime=this.frame.time;\r\n\t\tthis.DanmakuText.forEach(t=>{\r\n\t\t\tif(!t.danmaku)return;\r\n\t\t\tt.time=cTime-(this.danmakuMoveTime-t.time);\r\n\t\t});\r\n\t}\r\n\tdanmakuAt(x,y){//return a list of danmaku which covers this position\r\n\t\tconst list=[];\r\n\t\tif(!this.enabled)return list;\r\n\t\tthis.DanmakuText.forEach(t=>{\r\n\t\t\tif(!t.danmaku)return;\r\n\t\t\tif(t.style.x<=x && t.style.x+t.style.width>=x && t.style.y<=y && t.style.y+t.style.height>=y)\r\n\t\t\t\tlist.push(t.danmaku);\r\n\t\t});\r\n\t\treturn list;\r\n\t}\r\n\tenable(){//enable the plugin\r\n\t\tthis.setRendererMode(this.lastRendererMode);\r\n\t\tthis.frame.container.appendChild(this.container);\r\n\t\tif(this.frame.working)this.play();\r\n\t}\r\n\tdisable(){//disable the plugin\r\n\t\tthis.frame.container.removeChild(this.container);\r\n\t\tthis.pause();\r\n\t\tthis.clear();\r\n\t\tthis.setRendererMode(0);\r\n\t}\r\n\tset useImageBitmap(v){\r\n\t\tuseImageBitmap=(typeof createImageBitmap ==='function')?v:false;\r\n\t}\r\n\tget useImageBitmap(){return useImageBitmap;}\r\n}\r\n\r\n\r\nclass TextGraph{//code copied from CanvasObjLibrary\r\n\t_fontString='';\r\n\t_renderList;\r\n\t_cache;\r\n\t_bitmap;\r\n\tfont={};\r\n\ttime;\r\n\tstyle={};\r\n\tdrawn=false;//bool: \r\n\tdanmaku;\r\n\tremoveTime;//number: remove time of the danmaku\r\n\ttunnelNumber;//number: tunnel number in the tunner manager\r\n\ttunnelHeight;//number: tunnel height\r\n\testimatePadding;//number: padding of the canvas\r\n\tget text(){return this.danmaku.text;}\r\n\tconstructor(danmakuObj,font){\r\n\t\tthis._renderToCache=this._renderToCache.bind(this);\r\n\t\tdanmakuObj&&this.init(danmakuObj,font);\r\n\t}\r\n\tinit(d,font){\r\n\t\tthis.danmaku=d;\r\n\t\tthis.drawn=false;\r\n\t\tthis.time=d.time;\r\n\t\tthis.font=font;\r\n\t\tif(!this.font.lineHeight)this.font.lineHeight=(this.font.fontSize+2)||1;\r\n\t\tif(d.style.color){\r\n\t\t\tif(this.font.color && this.font.color[0]!=='#'){\r\n\t\t\t\tthis.font.color='#'+d.style.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(d.mode>1)this.font.textAlign='center';\r\n\t}\r\n\tprepare(async=false){//prepare text details\r\n\t\tif(!this._cache){\r\n\t\t\tthis._cache=document.createElement(\"canvas\");\r\n\t\t}\r\n\t\tlet ta=[];\r\n\t\t(this.font.fontStyle)&&ta.push(this.font.fontStyle);\r\n\t\t(this.font.fontVariant)&&ta.push(this.font.fontVariant);\r\n\t\t(this.font.fontWeight)&&ta.push(this.font.fontWeight);\r\n\t\tta.push(`${this.font.fontSize}px`);\r\n\t\t(this.font.fontFamily)&&ta.push(this.font.fontFamily);\r\n\t\tthis._fontString = ta.join(' ');\r\n\r\n\t\tconst canvas = this._cache,\r\n\t\t\tct = (canvas.ctx2d||(canvas.ctx2d=canvas.getContext(\"2d\")));\r\n\t\tct.font = this._fontString;\r\n\t\tthis._renderList = this.text.split(/\\n/g);\r\n\t\tthis.estimatePadding=Math.max(\r\n\t\t\tthis.font.shadowBlur+5+Math.max(Math.abs(this.font.shadowOffsetY),Math.abs(this.font.shadowOffsetX)),\r\n\t\t\tthis.font.strokeWidth+3\r\n\t\t);\r\n\t\tlet w = 0,tw,lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize;\r\n\t\tfor (let i = this._renderList.length; i -- ;) {\r\n\t\t\ttw = ct.measureText(this._renderList[i]).width;\r\n\t\t\t(tw>w)&&(w=tw);//max\r\n\t\t}\r\n\t\tcanvas.width = (this.style.width = w) + this.estimatePadding*2;\r\n\t\tcanvas.height = (this.style.height = this._renderList.length * lh)+ ((lh<this.font.fontSize)?this.font.fontSize*2:0) + this.estimatePadding*2;\r\n\r\n\t\tct.translate(this.estimatePadding, this.estimatePadding);\r\n\t\tif(async){\r\n\t\t\tUtils.requestIdleCallback(this._renderToCache);\r\n\t\t}else{\r\n\t\t\tthis._renderToCache();\r\n\t\t}\r\n\t}\r\n\t_renderToCache(){\r\n\t\tif(!this.danmaku)return;\r\n\t\tthis.render(this._cache.ctx2d);\r\n\t\tif(useImageBitmap){//use ImageBitmap\r\n\t\t\tif(this._bitmap){\r\n\t\t\t\tthis._bitmap.close();\r\n\t\t\t\tthis._bitmap=null;\r\n\t\t\t}\r\n\t\t\tcreateImageBitmap(this._cache).then(bitmap=>{\r\n\t\t\t\tthis._bitmap=bitmap;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\trender(ct){//render text\r\n\t\tif(!this._renderList)return;\r\n\t\tct.save();\r\n\t\tif(this.danmaku.highlight){\r\n\t\t\tct.fillStyle='rgba(255,255,255,0.3)';\r\n\t\t\tct.beginPath();\r\n\t\t\tct.rect(0,0,this.style.width,this.style.height);\r\n\t\t\tct.fill();\r\n\t\t}\r\n\t\tct.font=this._fontString;//set font\r\n\t\tct.textBaseline = 'middle';\r\n\t\tct.lineWidth = this.font.strokeWidth;\r\n\t\tct.fillStyle = this.font.color;\r\n\t\tct.strokeStyle = this.font.strokeColor;\r\n\t\tct.shadowBlur = this.font.shadowBlur;\r\n\t\tct.shadowColor= this.font.shadowColor;\r\n\t\tct.shadowOffsetX = this.font.shadowOffsetX;\r\n\t\tct.shadowOffsetY = this.font.shadowOffsetY;\r\n\t\tct.textAlign = this.font.textAlign;\r\n\t\tlet lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize,\r\n\t\t\tx;\r\n\t\tswitch(this.font.textAlign){\r\n\t\t\tcase 'left':case 'start':{\r\n\t\t\t\tx=0;break;\r\n\t\t\t}\r\n\t\t\tcase 'center':{\r\n\t\t\t\tx=this.style.width/2;break;\r\n\t\t\t}\r\n\t\t\tcase 'right':case 'end':{\r\n\t\t\t\tx=this.style.width;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = this._renderList.length;i--;) {\r\n\t\t\tthis.font.strokeWidth&&ct.strokeText(this._renderList[i],x,lh*(i+0.5));\r\n\t\t\tthis.font.fill&&ct.fillText(this._renderList[i],x, lh*(i+0.5));\r\n\t\t}\r\n\t\tct.restore();\r\n\t\tthis._renderList=undefined;\r\n\t}\r\n\tdestructor(){\r\n\t\tthis._fontString=undefined;\r\n\t\tthis._renderList=undefined;\r\n\t\tthis.danmaku=undefined;\r\n\t\tthis.style=undefined;\r\n\t\tthis.font=undefined;\r\n\t\tif(this._bitmap){\r\n\t\t\tthis._bitmap.close();\r\n\t\t\tthis._bitmap=null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst tunnels=['right','left','bottom','top'];\r\nclass TunnelManager{\r\n\tconstructor(){\r\n\t\tthis.reset();\r\n\t}\r\n\treset(){\r\n\t\tthis.right={};\r\n\t\tthis.left={};\r\n\t\tthis.bottom={};\r\n\t\tthis.top={};\r\n\t}\r\n\tgetTunnel(tobj,cHeight){//get the tunnel index that can contain the danmaku of the sizes\r\n\t\tlet tunnel=this.tunnel(tobj.danmaku.mode),\r\n\t\t\tsize=tobj.style.height,\r\n\t\t\tti=0,\r\n\t\t\ttnum=-1;\r\n\t\tif(typeof size !=='number' || size<=0){\r\n\t\t\tconsole.error('Incorrect size:'+size);\r\n\t\t\tsize=24;\r\n\t\t}\r\n\t\tif(size>cHeight)return 0;\r\n\r\n\t\twhile(tnum<0){\r\n\t\t\tfor(let t=ti+size-1;ti<=t;){\r\n\t\t\t\tif(tunnel[ti]){//used\r\n\t\t\t\t\tti+=tunnel[ti].tunnelHeight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}else if((ti!==0)&&(ti%(cHeight-1))===0){//new page\r\n\t\t\t\t\tti++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}else if(ti===t){//get\r\n\t\t\t\t\ttnum=ti-size+1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tti++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ttobj.tunnelNumber=tnum;\r\n\t\ttobj.tunnelHeight=(((tobj.style.y+size)>cHeight)?1:size);\r\n\t\tthis.addMark(tobj);\r\n\t\treturn tnum;\r\n\t}\r\n\taddMark(tobj){\r\n\t\tlet t=this.tunnel(tobj.danmaku.mode);\r\n\t\tif(!t[tobj.tunnelNumber])t[tobj.tunnelNumber]=tobj;\r\n\t}\r\n\tremoveMark(tobj){\r\n\t\tlet t,tun=tobj.tunnelNumber;\r\n\t\tif(tun>=0&&(t=this.tunnel(tobj.danmaku.mode))[tun]===tobj){\r\n\t\t\tdelete t[tun];\r\n\t\t\ttobj.tunnelNumber=-1;\r\n\t\t}\r\n\t}\r\n\ttunnel(id){\r\n\t\treturn this[tunnels[id]];\r\n\t}\r\n}\r\n\r\n\r\nclass RenderingDanmakuManager{\r\n\ttotalArea=0;\r\n\tonScreenArea=0;\r\n\tlimitArea=Infinity;//limit danmaku area on the screen(auto change)\r\n\ttunnelManager=new TunnelManager();\r\n\tconstructor(dText){//dText:TextDanmaku\r\n\t\tthis.dText=dText;\r\n\t\tif(dText.text2d.supported)this.timer=setInterval(()=>this.rendererModeCheck(),1500);\r\n\t}\r\n\tadd(t){\r\n\t\tif(t.danmaku.onScreen)return;\r\n\t\tt.danmaku.onScreen=true;\r\n\t\tthis.dText.DanmakuText.push(t);\r\n\t\tthis.totalArea+=t._cache.width*t._cache.height;//cumulate danmaku area\r\n\t\tthis.onScreenArea+=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\r\n\t\tthis.dText.activeRendererMode.newDanmaku(t);\r\n\t}\r\n\tremove(t){\r\n\t\tt.danmaku.onScreen=false;\r\n\t\tlet ind=this.dText.DanmakuText.indexOf(t);\r\n\t\tif(ind>=0){\r\n\t\t\tthis.dText.DanmakuText.splice(ind,1);\r\n\t\t\tthis.totalArea-=t._cache.width*t._cache.height;\r\n\t\t\tthis.onScreenArea-=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\r\n\t\t}\r\n\t\tthis.tunnelManager.removeMark(t);\r\n\t\tthis.dText.activeRendererMode.remove(t);\r\n\t\tthis.dText.activeRendererMode.deleteRelatedTextObject(t);\r\n\t\tt.removeTime=Date.now();\r\n\t\tt.danmaku=null;\r\n\t\tthis.dText.GraphCache.push(t);\r\n\t}\r\n\tclear(){\r\n\t\tfor(let i=0,T;i<this.dText.DanmakuText.length;i++){\r\n\t\t\tT=this.dText.DanmakuText[i];\r\n\t\t\tthis.remove(T);\r\n\t\t}\r\n\t\tthis.tunnelManager.reset();\r\n\t}\r\n\trendererModeCheck(){//auto shift rendering mode\r\n\t\tlet D=this.dText;\r\n\t\tif(!this.dText.options.autoShiftRenderingMode || D.paused)return;\r\n\t\tif(D.frame.fps<(D.frame.fpsLimit||60)*0.9){//when frame rate low\r\n\t\t\tif(this.limitArea>this.totalArea)this.limitArea=this.totalArea;//reduce area limit\r\n\t\t}else if(this.limitArea<this.totalArea){//increase area limit\r\n\t\t\tthis.limitArea=this.totalArea;\r\n\t\t}\r\n\t\tif(D.rendererMode===1 && this.totalArea>this.limitArea){//switch to canvas mode when fps low\r\n\t\t\tD.text2d.supported&&D.setRendererMode(2);\r\n\t\t}else if(D.rendererMode===2&& this.totalArea<this.limitArea*0.5){//recover to css mode when animation is fluent enough\r\n\t\t\tD.textCss.supported&&D.setRendererMode(1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction dichotomy(arr,t,start,end,position=false){\r\n\tif(arr.length===0)return 0;\r\n\tlet m=start/* ,s=start,e=end */;\r\n\twhile(start <= end){//dichotomy\r\n\t\tm=(start+end)>>1;\r\n\t\tif(t<=arr[m].time)end=m-1;\r\n\t\telse{start=m+1;}\r\n\t}\r\n\tif(position){//find to top\r\n\t\twhile(start>0 && (arr[start-1].time===t))\r\n\t\t\tstart--;\r\n\t}else{//find to end\r\n\t\twhile(start<=end && (arr[start].time===t))\r\n\t\t\tstart++;\r\n\t}\r\n\treturn start;\r\n}\r\n\r\n\r\nexport default function init(DanmakuFrame){\r\n\tDanmakuFrame.addModule('TextDanmaku',TextDanmaku);\r\n};;","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nclass textModuleTemplate{\r\n\tsupported=false;\r\n\tconstructor(dText){\r\n\t\tthis.dText=dText;\r\n\t}\r\n\tdraw(){}//draw call from danmaku-frame on every animation frame\r\n\trate(){}//playback rate\r\n\tpause(){}//the media is paused\r\n\tplay(){}//the media is starting\r\n\tclear(){}//clear all danmaku on screen\r\n\tresize(){}//the container is resized\r\n\tremove(){}//remove a danmaku freom the screen\r\n\tenable(){}//this module is enabled\r\n\tdisable(){}//this module is disabled\r\n\tnewDanmaku(){}//add danmaku to the screen\r\n\tdeleteRelatedTextObject(){}\r\n}\r\n\r\nexport default textModuleTemplate;\r\n","module.exports = require(\"core-js-pure/stable/array/is-array\");","module.exports = require(\"core-js-pure/stable/date/now\");","module.exports = require(\"core-js-pure/stable/instance/bind\");","module.exports = require(\"core-js-pure/stable/instance/concat\");","module.exports = require(\"core-js-pure/stable/instance/copy-within\");","module.exports = require(\"core-js-pure/stable/instance/fill\");","module.exports = require(\"core-js-pure/stable/instance/for-each\");","module.exports = require(\"core-js-pure/stable/instance/index-of\");","module.exports = require(\"core-js-pure/stable/instance/repeat\");","module.exports = require(\"core-js-pure/stable/instance/slice\");","module.exports = require(\"core-js-pure/stable/instance/sort\");","module.exports = require(\"core-js-pure/stable/instance/splice\");","module.exports = require(\"core-js-pure/stable/instance/starts-with\");","module.exports = require(\"core-js-pure/stable/instance/trim\");","module.exports = require(\"core-js-pure/stable/object/assign\");","module.exports = require(\"core-js-pure/stable/object/create\");","module.exports = require(\"core-js-pure/stable/object/define-property\");","module.exports = require(\"core-js-pure/stable/object/entries\");","module.exports = require(\"core-js-pure/stable/object/get-own-property-descriptor\");","module.exports = require(\"core-js-pure/stable/promise\");","module.exports = require(\"core-js-pure/stable/set-immediate\");","module.exports = require(\"core-js-pure/stable/set-interval\");","module.exports = require(\"core-js-pure/stable/set-timeout\");","module.exports = require(\"core-js-pure/features/array/from\");","module.exports = require(\"core-js-pure/features/array/is-array\");","module.exports = require(\"core-js-pure/features/get-iterator\");","module.exports = require(\"core-js-pure/features/instance/slice\");","module.exports = require(\"core-js-pure/features/is-iterable\");","module.exports = require(\"core-js-pure/features/object/create\");","module.exports = require(\"core-js-pure/features/object/define-property\");","module.exports = require(\"core-js-pure/features/object/get-own-property-descriptor\");","module.exports = require(\"core-js-pure/features/object/get-prototype-of\");","module.exports = require(\"core-js-pure/features/object/set-prototype-of\");","module.exports = require(\"core-js-pure/features/promise\");","module.exports = require(\"core-js-pure/features/reflect/get\");","module.exports = require(\"core-js-pure/features/symbol\");","module.exports = require(\"core-js-pure/features/symbol/iterator\");","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithHoles(arr) {\n  if (_Array$isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nvar arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n\n    _Object$defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var _Object$getOwnPropertyDescriptor = require(\"../core-js/object/get-own-property-descriptor\");\n\nvar _Reflect$get = require(\"../core-js/reflect/get\");\n\nvar superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && _Reflect$get) {\n    module.exports = _get = _Reflect$get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n\n      var desc = _Object$getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","var _Object$getPrototypeOf = require(\"../core-js/object/get-prototype-of\");\n\nvar _Object$setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nfunction _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var _Object$create = require(\"../core-js/object/create\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nvar _Symbol = require(\"../core-js/symbol\");\n\nfunction _iterableToArray(iter) {\n  if (typeof _Symbol !== \"undefined\" && _isIterable(Object(iter))) return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","var _getIterator = require(\"../core-js/get-iterator\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nvar _Symbol = require(\"../core-js/symbol\");\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof _Symbol === \"undefined\" || !_isIterable(Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","var _Object$setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nfunction _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var _Symbol$iterator = require(\"../core-js/symbol/iterator\");\n\nvar _Symbol = require(\"../core-js/symbol\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var _Array$from = require(\"../core-js/array/from\");\n\nvar _sliceInstanceProperty = require(\"../core-js/instance/slice\");\n\nvar arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context;\n\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","module.exports = require(\"regenerator-runtime\");\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = global || self, factory(global.ResizeObserver = {}));\n}(this, (function (exports) { 'use strict';\n\n    var resizeObservers = [];\n\n    var hasActiveObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n    };\n\n    var hasSkippedObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n    };\n\n    var msg = 'ResizeObserver loop completed with undelivered notifications.';\n    var deliverResizeLoopError = function () {\n        var event;\n        if (typeof ErrorEvent === 'function') {\n            event = new ErrorEvent('error', {\n                message: msg\n            });\n        }\n        else {\n            event = document.createEvent('Event');\n            event.initEvent('error', false, false);\n            event.message = msg;\n        }\n        window.dispatchEvent(event);\n    };\n\n    var ResizeObserverBoxOptions;\n    (function (ResizeObserverBoxOptions) {\n        ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n        ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n        ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n    })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n    var DOMRectReadOnly = (function () {\n        function DOMRectReadOnly(x, y, width, height) {\n            this.x = x;\n            this.y = y;\n            this.width = width;\n            this.height = height;\n            this.top = this.y;\n            this.left = this.x;\n            this.bottom = this.top + this.height;\n            this.right = this.left + this.width;\n            return Object.freeze(this);\n        }\n        DOMRectReadOnly.prototype.toJSON = function () {\n            var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n            return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n        };\n        DOMRectReadOnly.fromRect = function (rectangle) {\n            return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n        };\n        return DOMRectReadOnly;\n    }());\n\n    var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\n    var isHidden = function (target) {\n        if (isSVG(target)) {\n            var _a = target.getBBox(), width = _a.width, height = _a.height;\n            return !width && !height;\n        }\n        var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n        return !(offsetWidth || offsetHeight || target.getClientRects().length);\n    };\n    var isElement = function (obj) {\n        var _a, _b;\n        var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n        return !!(scope && obj instanceof scope.Element);\n    };\n    var isReplacedElement = function (target) {\n        switch (target.tagName) {\n            case 'INPUT':\n                if (target.type !== 'image') {\n                    break;\n                }\n            case 'VIDEO':\n            case 'AUDIO':\n            case 'EMBED':\n            case 'OBJECT':\n            case 'CANVAS':\n            case 'IFRAME':\n            case 'IMG':\n                return true;\n        }\n        return false;\n    };\n\n    var global = typeof window !== 'undefined' ? window : {};\n\n    var cache = new WeakMap();\n    var scrollRegexp = /auto|scroll/;\n    var verticalRegexp = /^tb|vertical/;\n    var IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);\n    var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\n    var size = function (inlineSize, blockSize, switchSizes) {\n        if (inlineSize === void 0) { inlineSize = 0; }\n        if (blockSize === void 0) { blockSize = 0; }\n        if (switchSizes === void 0) { switchSizes = false; }\n        return Object.freeze({\n            inlineSize: (switchSizes ? blockSize : inlineSize) || 0,\n            blockSize: (switchSizes ? inlineSize : blockSize) || 0\n        });\n    };\n    var zeroBoxes = Object.freeze({\n        devicePixelContentBoxSize: size(),\n        borderBoxSize: size(),\n        contentBoxSize: size(),\n        contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n    });\n    var calculateBoxSizes = function (target, forceRecalculation) {\n        if (forceRecalculation === void 0) { forceRecalculation = false; }\n        if (cache.has(target) && !forceRecalculation) {\n            return cache.get(target);\n        }\n        if (isHidden(target)) {\n            cache.set(target, zeroBoxes);\n            return zeroBoxes;\n        }\n        var cs = getComputedStyle(target);\n        var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();\n        var removePadding = !IE && cs.boxSizing === 'border-box';\n        var switchSizes = verticalRegexp.test(cs.writingMode || '');\n        var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n        var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n        var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n        var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n        var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n        var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n        var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n        var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n        var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n        var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n        var horizontalPadding = paddingLeft + paddingRight;\n        var verticalPadding = paddingTop + paddingBottom;\n        var horizontalBorderArea = borderLeft + borderRight;\n        var verticalBorderArea = borderTop + borderBottom;\n        var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n        var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n        var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n        var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n        var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n        var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n        var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n        var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n        var boxes = Object.freeze({\n            devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n            borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n            contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n            contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n        });\n        cache.set(target, boxes);\n        return boxes;\n    };\n    var calculateBoxSize = function (target, observedBox, forceRecalculation) {\n        var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n        switch (observedBox) {\n            case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n                return devicePixelContentBoxSize;\n            case ResizeObserverBoxOptions.BORDER_BOX:\n                return borderBoxSize;\n            default:\n                return contentBoxSize;\n        }\n    };\n\n    var ResizeObserverEntry = (function () {\n        function ResizeObserverEntry(target) {\n            var boxes = calculateBoxSizes(target);\n            this.target = target;\n            this.contentRect = boxes.contentRect;\n            this.borderBoxSize = [boxes.borderBoxSize];\n            this.contentBoxSize = [boxes.contentBoxSize];\n            this.devicePixelContentBoxSize = [boxes.devicePixelContentBoxSize];\n        }\n        return ResizeObserverEntry;\n    }());\n\n    var calculateDepthForNode = function (node) {\n        if (isHidden(node)) {\n            return Infinity;\n        }\n        var depth = 0;\n        var parent = node.parentNode;\n        while (parent) {\n            depth += 1;\n            parent = parent.parentNode;\n        }\n        return depth;\n    };\n\n    var broadcastActiveObservations = function () {\n        var shallowestDepth = Infinity;\n        var callbacks = [];\n        resizeObservers.forEach(function processObserver(ro) {\n            if (ro.activeTargets.length === 0) {\n                return;\n            }\n            var entries = [];\n            ro.activeTargets.forEach(function processTarget(ot) {\n                var entry = new ResizeObserverEntry(ot.target);\n                var targetDepth = calculateDepthForNode(ot.target);\n                entries.push(entry);\n                ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n                if (targetDepth < shallowestDepth) {\n                    shallowestDepth = targetDepth;\n                }\n            });\n            callbacks.push(function resizeObserverCallback() {\n                ro.callback.call(ro.observer, entries, ro.observer);\n            });\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n        });\n        for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n            var callback = callbacks_1[_i];\n            callback();\n        }\n        return shallowestDepth;\n    };\n\n    var gatherActiveObservationsAtDepth = function (depth) {\n        resizeObservers.forEach(function processObserver(ro) {\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n            ro.skippedTargets.splice(0, ro.skippedTargets.length);\n            ro.observationTargets.forEach(function processTarget(ot) {\n                if (ot.isActive()) {\n                    if (calculateDepthForNode(ot.target) > depth) {\n                        ro.activeTargets.push(ot);\n                    }\n                    else {\n                        ro.skippedTargets.push(ot);\n                    }\n                }\n            });\n        });\n    };\n\n    var process = function () {\n        var depth = 0;\n        gatherActiveObservationsAtDepth(depth);\n        while (hasActiveObservations()) {\n            depth = broadcastActiveObservations();\n            gatherActiveObservationsAtDepth(depth);\n        }\n        if (hasSkippedObservations()) {\n            deliverResizeLoopError();\n        }\n        return depth > 0;\n    };\n\n    var trigger;\n    var callbacks = [];\n    var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\n    var queueMicroTask = function (callback) {\n        if (!trigger) {\n            var toggle_1 = 0;\n            var el_1 = document.createTextNode('');\n            var config = { characterData: true };\n            new MutationObserver(function () { return notify(); }).observe(el_1, config);\n            trigger = function () { el_1.textContent = \"\" + (toggle_1 ? toggle_1-- : toggle_1++); };\n        }\n        callbacks.push(callback);\n        trigger();\n    };\n\n    var queueResizeObserver = function (cb) {\n        queueMicroTask(function ResizeObserver() {\n            requestAnimationFrame(cb);\n        });\n    };\n\n    var watching = 0;\n    var isWatching = function () { return !!watching; };\n    var CATCH_PERIOD = 250;\n    var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\n    var events = [\n        'resize',\n        'load',\n        'transitionend',\n        'animationend',\n        'animationstart',\n        'animationiteration',\n        'keyup',\n        'keydown',\n        'mouseup',\n        'mousedown',\n        'mouseover',\n        'mouseout',\n        'blur',\n        'focus'\n    ];\n    var time = function (timeout) {\n        if (timeout === void 0) { timeout = 0; }\n        return Date.now() + timeout;\n    };\n    var scheduled = false;\n    var Scheduler = (function () {\n        function Scheduler() {\n            var _this = this;\n            this.stopped = true;\n            this.listener = function () { return _this.schedule(); };\n        }\n        Scheduler.prototype.run = function (timeout) {\n            var _this = this;\n            if (timeout === void 0) { timeout = CATCH_PERIOD; }\n            if (scheduled) {\n                return;\n            }\n            scheduled = true;\n            var until = time(timeout);\n            queueResizeObserver(function () {\n                var elementsHaveResized = false;\n                try {\n                    elementsHaveResized = process();\n                }\n                finally {\n                    scheduled = false;\n                    timeout = until - time();\n                    if (!isWatching()) {\n                        return;\n                    }\n                    if (elementsHaveResized) {\n                        _this.run(1000);\n                    }\n                    else if (timeout > 0) {\n                        _this.run(timeout);\n                    }\n                    else {\n                        _this.start();\n                    }\n                }\n            });\n        };\n        Scheduler.prototype.schedule = function () {\n            this.stop();\n            this.run();\n        };\n        Scheduler.prototype.observe = function () {\n            var _this = this;\n            var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n            document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);\n        };\n        Scheduler.prototype.start = function () {\n            var _this = this;\n            if (this.stopped) {\n                this.stopped = false;\n                this.observer = new MutationObserver(this.listener);\n                this.observe();\n                events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });\n            }\n        };\n        Scheduler.prototype.stop = function () {\n            var _this = this;\n            if (!this.stopped) {\n                this.observer && this.observer.disconnect();\n                events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });\n                this.stopped = true;\n            }\n        };\n        return Scheduler;\n    }());\n    var scheduler = new Scheduler();\n    var updateCount = function (n) {\n        !watching && n > 0 && scheduler.start();\n        watching += n;\n        !watching && scheduler.stop();\n    };\n\n    var skipNotifyOnElement = function (target) {\n        return !isSVG(target)\n            && !isReplacedElement(target)\n            && getComputedStyle(target).display === 'inline';\n    };\n    var ResizeObservation = (function () {\n        function ResizeObservation(target, observedBox) {\n            this.target = target;\n            this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n            this.lastReportedSize = {\n                inlineSize: 0,\n                blockSize: 0\n            };\n        }\n        ResizeObservation.prototype.isActive = function () {\n            var size = calculateBoxSize(this.target, this.observedBox, true);\n            if (skipNotifyOnElement(this.target)) {\n                this.lastReportedSize = size;\n            }\n            if (this.lastReportedSize.inlineSize !== size.inlineSize\n                || this.lastReportedSize.blockSize !== size.blockSize) {\n                return true;\n            }\n            return false;\n        };\n        return ResizeObservation;\n    }());\n\n    var ResizeObserverDetail = (function () {\n        function ResizeObserverDetail(resizeObserver, callback) {\n            this.activeTargets = [];\n            this.skippedTargets = [];\n            this.observationTargets = [];\n            this.observer = resizeObserver;\n            this.callback = callback;\n        }\n        return ResizeObserverDetail;\n    }());\n\n    var observerMap = new WeakMap();\n    var getObservationIndex = function (observationTargets, target) {\n        for (var i = 0; i < observationTargets.length; i += 1) {\n            if (observationTargets[i].target === target) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    var ResizeObserverController = (function () {\n        function ResizeObserverController() {\n        }\n        ResizeObserverController.connect = function (resizeObserver, callback) {\n            var detail = new ResizeObserverDetail(resizeObserver, callback);\n            observerMap.set(resizeObserver, detail);\n        };\n        ResizeObserverController.observe = function (resizeObserver, target, options) {\n            var detail = observerMap.get(resizeObserver);\n            var firstObservation = detail.observationTargets.length === 0;\n            if (getObservationIndex(detail.observationTargets, target) < 0) {\n                firstObservation && resizeObservers.push(detail);\n                detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n                updateCount(1);\n                scheduler.schedule();\n            }\n        };\n        ResizeObserverController.unobserve = function (resizeObserver, target) {\n            var detail = observerMap.get(resizeObserver);\n            var index = getObservationIndex(detail.observationTargets, target);\n            var lastObservation = detail.observationTargets.length === 1;\n            if (index >= 0) {\n                lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n                detail.observationTargets.splice(index, 1);\n                updateCount(-1);\n            }\n        };\n        ResizeObserverController.disconnect = function (resizeObserver) {\n            var _this = this;\n            var detail = observerMap.get(resizeObserver);\n            detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });\n            detail.activeTargets.splice(0, detail.activeTargets.length);\n        };\n        return ResizeObserverController;\n    }());\n\n    var ResizeObserver = (function () {\n        function ResizeObserver(callback) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (typeof callback !== 'function') {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n            }\n            ResizeObserverController.connect(this, callback);\n        }\n        ResizeObserver.prototype.observe = function (target, options) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.observe(this, target, options);\n        };\n        ResizeObserver.prototype.unobserve = function (target) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.unobserve(this, target);\n        };\n        ResizeObserver.prototype.disconnect = function () {\n            ResizeObserverController.disconnect(this);\n        };\n        ResizeObserver.toString = function () {\n            return 'function ResizeObserver () { [polyfill code] }';\n        };\n        return ResizeObserver;\n    }());\n\n    exports.ResizeObserver = ResizeObserver;\n    exports.ResizeObserverEntry = ResizeObserverEntry;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","require('../../modules/es.string.iterator');\nrequire('../../modules/es.array.from');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Array.from;\n","require('../../modules/es.array.is-array');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Array.isArray;\n","require('../../../modules/es.array.concat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').concat;\n","require('../../../modules/es.array.copy-within');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').copyWithin;\n","require('../../../modules/es.array.fill');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').fill;\n","require('../../../modules/es.array.for-each');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').forEach;\n","require('../../../modules/es.array.index-of');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').indexOf;\n","require('../../../modules/es.array.slice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').slice;\n","require('../../../modules/es.array.sort');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').sort;\n","require('../../../modules/es.array.splice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').splice;\n","require('../../modules/es.date.now');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Date.now;\n","require('../../../modules/es.function.bind');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Function').bind;\n","var bind = require('../function/virtual/bind');\n\nvar FunctionPrototype = Function.prototype;\n\nmodule.exports = function (it) {\n  var own = it.bind;\n  return it === FunctionPrototype || (it instanceof Function && own === FunctionPrototype.bind) ? bind : own;\n};\n","var concat = require('../array/virtual/concat');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.concat;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.concat) ? concat : own;\n};\n","var copyWithin = require('../array/virtual/copy-within');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.copyWithin;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.copyWithin) ? copyWithin : own;\n};\n","var fill = require('../array/virtual/fill');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.fill;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.fill) ? fill : own;\n};\n","var indexOf = require('../array/virtual/index-of');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.indexOf;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.indexOf) ? indexOf : own;\n};\n","var repeat = require('../string/virtual/repeat');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.repeat;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.repeat) ? repeat : own;\n};\n","var slice = require('../array/virtual/slice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.slice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.slice) ? slice : own;\n};\n","var sort = require('../array/virtual/sort');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.sort;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.sort) ? sort : own;\n};\n","var splice = require('../array/virtual/splice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.splice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.splice) ? splice : own;\n};\n","var startsWith = require('../string/virtual/starts-with');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.startsWith;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.startsWith) ? startsWith : own;\n};\n","var trim = require('../string/virtual/trim');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.trim;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.trim) ? trim : own;\n};\n","require('../../modules/es.object.assign');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.assign;\n","require('../../modules/es.object.create');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nmodule.exports = function create(P, D) {\n  return Object.create(P, D);\n};\n","require('../../modules/es.object.define-property');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar defineProperty = module.exports = function defineProperty(it, key, desc) {\n  return Object.defineProperty(it, key, desc);\n};\n\nif (Object.defineProperty.sham) defineProperty.sham = true;\n","require('../../modules/es.object.entries');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.entries;\n","require('../../modules/es.object.get-own-property-descriptor');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {\n  return Object.getOwnPropertyDescriptor(it, key);\n};\n\nif (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;\n","require('../../modules/es.object.get-prototype-of');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.getPrototypeOf;\n","require('../../modules/es.object.set-prototype-of');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.setPrototypeOf;\n","require('../../modules/es.object.to-string');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\nrequire('../../modules/es.promise');\nrequire('../../modules/es.promise.all-settled');\nrequire('../../modules/es.promise.finally');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Promise;\n","require('../../modules/es.reflect.get');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Reflect.get;\n","require('../../../modules/es.string.repeat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').repeat;\n","require('../../../modules/es.string.starts-with');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').startsWith;\n","require('../../../modules/es.string.trim');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').trim;\n","require('../../modules/es.array.concat');\nrequire('../../modules/es.object.to-string');\nrequire('../../modules/es.symbol');\nrequire('../../modules/es.symbol.async-iterator');\nrequire('../../modules/es.symbol.description');\nrequire('../../modules/es.symbol.has-instance');\nrequire('../../modules/es.symbol.is-concat-spreadable');\nrequire('../../modules/es.symbol.iterator');\nrequire('../../modules/es.symbol.match');\nrequire('../../modules/es.symbol.match-all');\nrequire('../../modules/es.symbol.replace');\nrequire('../../modules/es.symbol.search');\nrequire('../../modules/es.symbol.species');\nrequire('../../modules/es.symbol.split');\nrequire('../../modules/es.symbol.to-primitive');\nrequire('../../modules/es.symbol.to-string-tag');\nrequire('../../modules/es.symbol.unscopables');\nrequire('../../modules/es.math.to-string-tag');\nrequire('../../modules/es.json.to-string-tag');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Symbol;\n","require('../../modules/es.symbol.iterator');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\nvar WrappedWellKnownSymbolModule = require('../../internals/well-known-symbol-wrapped');\n\nmodule.exports = WrappedWellKnownSymbolModule.f('iterator');\n","var parent = require('../../es/array/from');\n\nmodule.exports = parent;\n","var parent = require('../../es/array/is-array');\n\nmodule.exports = parent;\n","require('../modules/web.dom-collections.iterator');\nrequire('../modules/es.string.iterator');\nvar getIterator = require('../internals/get-iterator');\n\nmodule.exports = getIterator;\n","var parent = require('../../es/instance/slice');\n\nmodule.exports = parent;\n","require('../modules/web.dom-collections.iterator');\nrequire('../modules/es.string.iterator');\nvar isIterable = require('../internals/is-iterable');\n\nmodule.exports = isIterable;\n","var parent = require('../../es/object/create');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/define-property');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/get-own-property-descriptor');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/get-prototype-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/set-prototype-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/promise');\nrequire('../../modules/esnext.aggregate-error');\n// TODO: Remove from `core-js@4`\nrequire('../../modules/esnext.promise.all-settled');\nrequire('../../modules/esnext.promise.try');\nrequire('../../modules/esnext.promise.any');\n\nmodule.exports = parent;\n","var parent = require('../../es/reflect/get');\n\nmodule.exports = parent;\n","var parent = require('../../es/symbol');\nrequire('../../modules/esnext.symbol.async-dispose');\nrequire('../../modules/esnext.symbol.dispose');\nrequire('../../modules/esnext.symbol.observable');\nrequire('../../modules/esnext.symbol.pattern-match');\n// TODO: Remove from `core-js@4`\nrequire('../../modules/esnext.symbol.replace-all');\n\nmodule.exports = parent;\n","var parent = require('../../es/symbol/iterator');\n\nmodule.exports = parent;\n","module.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name) {\n  if (!(it instanceof Constructor)) {\n    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\nvar min = Math.min;\n\n// `Array.prototype.copyWithin` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.fill` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n","'use strict';\nvar bind = require('../internals/function-bind-context');\nvar toObject = require('../internals/to-object');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\n// `Array.from` method implementation\n// https://tc39.github.io/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var C = typeof this == 'function' ? this : Array;\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = iteratorMethod.call(O);\n    next = iterator.next;\n    result = new C();\n    for (;!(step = next.call(iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty(result, index, value);\n    }\n  } else {\n    length = toLength(O.length);\n    result = new C(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else if (IS_EVERY) return false;  // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6)\n};\n","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\n\nvar defineProperty = Object.defineProperty;\nvar cache = {};\n\nvar thrower = function (it) { throw it; };\n\nmodule.exports = function (METHOD_NAME, options) {\n  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n  if (!options) options = {};\n  var method = [][METHOD_NAME];\n  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n  var argument0 = has(options, 0) ? options[0] : thrower;\n  var argument1 = has(options, 1) ? options[1] : undefined;\n\n  return cache[METHOD_NAME] = !!method && !fails(function () {\n    if (ACCESSORS && !DESCRIPTORS) return true;\n    var O = { length: -1 };\n\n    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n    else O[1] = 1;\n\n    method.call(O, argument0, argument1);\n  });\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","var anObject = require('../internals/an-object');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (error) {\n    var returnMethod = iterator['return'];\n    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));\n    throw error;\n  }\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n  }\n  Iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n","var path = require('../internals/path');\nvar has = require('../internals/has');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineProperty = require('../internals/object-define-property').f;\n\nmodule.exports = function (NAME) {\n  var Symbol = path.Symbol || (path.Symbol = {});\n  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {\n    value: wrappedWellKnownSymbolModule.f(NAME)\n  });\n};\n","var fails = require('../internals/fails');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !fails(function () {\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","var userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n","var path = require('../internals/path');\n\nmodule.exports = function (CONSTRUCTOR) {\n  return path[CONSTRUCTOR + 'Prototype'];\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","'use strict';\nvar global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar isForced = require('../internals/is-forced');\nvar path = require('../internals/path');\nvar bind = require('../internals/function-bind-context');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\n\nvar wrapConstructor = function (NativeConstructor) {\n  var Wrapper = function (a, b, c) {\n    if (this instanceof NativeConstructor) {\n      switch (arguments.length) {\n        case 0: return new NativeConstructor();\n        case 1: return new NativeConstructor(a);\n        case 2: return new NativeConstructor(a, b);\n      } return new NativeConstructor(a, b, c);\n    } return NativeConstructor.apply(this, arguments);\n  };\n  Wrapper.prototype = NativeConstructor.prototype;\n  return Wrapper;\n};\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var PROTO = options.proto;\n\n  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;\n\n  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});\n  var targetPrototype = target.prototype;\n\n  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n\n  for (key in source) {\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contains in native\n    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);\n\n    targetProperty = target[key];\n\n    if (USE_NATIVE) if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(nativeSource, key);\n      nativeProperty = descriptor && descriptor.value;\n    } else nativeProperty = nativeSource[key];\n\n    // export native or implementation\n    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];\n\n    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;\n\n    // bind timers to global for call from export context\n    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global);\n    // wrap global constructors for prevent changs in this version\n    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);\n    // make static versions for prototype methods\n    else if (PROTO && typeof sourceProperty == 'function') resultProperty = bind(Function.call, sourceProperty);\n    // default case\n    else resultProperty = sourceProperty;\n\n    // add a flag to not completely full polyfills\n    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(resultProperty, 'sham', true);\n    }\n\n    target[key] = resultProperty;\n\n    if (PROTO) {\n      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n      if (!has(path, VIRTUAL_PROTOTYPE)) {\n        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});\n      }\n      // export virtual prototype methods\n      path[VIRTUAL_PROTOTYPE][key] = sourceProperty;\n      // export real prototype methods\n      if (options.real && targetPrototype && !targetPrototype[key]) {\n        createNonEnumerableProperty(targetPrototype, key, sourceProperty);\n      }\n    }\n  }\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\nvar aFunction = require('../internals/a-function');\nvar isObject = require('../internals/is-object');\n\nvar slice = [].slice;\nvar factories = {};\n\nvar construct = function (C, argsLength, args) {\n  if (!(argsLength in factories)) {\n    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');\n  } return factories[argsLength](C, args);\n};\n\n// `Function.prototype.bind` method implementation\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = slice.call(arguments, 1);\n  var boundFunction = function bound(/* args... */) {\n    var args = partArgs.concat(slice.call(arguments));\n    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);\n  };\n  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;\n  return boundFunction;\n};\n","var path = require('../internals/path');\nvar global = require('../internals/global');\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","var classof = require('../internals/classof');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var anObject = require('../internals/an-object');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nmodule.exports = function (it) {\n  var iteratorMethod = getIteratorMethod(it);\n  if (typeof iteratorMethod != 'function') {\n    throw TypeError(String(it) + ' is not iterable');\n  } return anObject(iteratorMethod.call(it));\n};\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n","var hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = {};\n","var global = require('../internals/global');\n\nmodule.exports = function (a, b) {\n  var console = global.console;\n  if (console && console.error) {\n    arguments.length === 1 ? console.error(a) : console.error(a, b);\n  }\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","var store = require('../internals/shared-store');\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar objectHas = require('../internals/has');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = new WeakMap();\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var fails = require('../internals/fails');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","var classof = require('../internals/classof');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","module.exports = true;\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","var anObject = require('../internals/an-object');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, next, step;\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = AS_ENTRIES\n          ? boundFunction(anObject(step = iterable[index])[0], step[1])\n          : boundFunction(iterable[index]);\n        if (result && result instanceof Result) return result;\n      } return new Result(false);\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n  while (!(step = next.call(iterator)).done) {\n    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  } return new Result(false);\n};\n\niterate.stop = function (result) {\n  return new Result(true, result);\n};\n","'use strict';\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nif (IteratorPrototype == undefined) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar classof = require('../internals/classof-raw');\nvar macrotask = require('../internals/task').set;\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar IS_NODE = classof(process) == 'process';\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  } else if (MutationObserver && !IS_IOS) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    then = promise.then;\n    notify = function () {\n      then.call(promise, flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n}\n\nmodule.exports = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify();\n  } last = task;\n};\n","var global = require('../internals/global');\n\nmodule.exports = global.Promise;\n","var fails = require('../internals/fails');\n\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n","var global = require('../internals/global');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n","'use strict';\nvar aFunction = require('../internals/a-function');\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n};\n\n// 25.4.1.5 NewPromiseCapability(C)\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\n\nvar nativeAssign = Object.assign;\nvar defineProperty = Object.defineProperty;\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\nmodule.exports = !nativeAssign || fails(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject(arguments[index++]);\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : nativeAssign;\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;\n\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return nativeGetOwnPropertyNames(it);\n  } catch (error) {\n    return windowNames.slice();\n  }\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]'\n    ? getWindowNames(it)\n    : nativeGetOwnPropertyNames(toIndexedObject(it));\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","var has = require('../internals/has');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype : null;\n};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","'use strict';\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n","var anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.github.io/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.github.io/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n","module.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n","var anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar newPromiseCapability = require('../internals/new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var redefine = require('../internals/redefine');\n\nmodule.exports = function (target, src, options) {\n  for (var key in src) {\n    if (options && options.unsafe && target[key]) target[key] = src[key];\n    else redefine(target, key, src[key], options);\n  } return target;\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (target, key, value, options) {\n  if (options && options.enumerable) target[key] = value;\n  else createNonEnumerableProperty(target, key, value);\n};\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar definePropertyModule = require('../internals/object-define-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule.f;\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineProperty(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar defineProperty = require('../internals/object-define-property').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar toString = require('../internals/object-to-string');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC, SET_METHOD) {\n  if (it) {\n    var target = STATIC ? it : it.prototype;\n    if (!has(target, TO_STRING_TAG)) {\n      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });\n    }\n    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n      createNonEnumerableProperty(target, 'toString', toString);\n    }\n  }\n};\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.6.4',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n","var anObject = require('../internals/an-object');\nvar aFunction = require('../internals/a-function');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.github.io/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\n};\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var global = require('../internals/global');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\nvar bind = require('../internals/function-bind-context');\nvar html = require('../internals/html');\nvar createElement = require('../internals/document-create-element');\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar location = global.location;\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\n\nvar run = function (id) {\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global.postMessage(id + '', location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (classof(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    typeof postMessage == 'function' &&\n    !global.importScripts &&\n    !fails(post) &&\n    location.protocol !== 'file:'\n  ) {\n    defer = post;\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n","var toInteger = require('../internals/to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","var toInteger = require('../internals/to-integer');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n","var NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  // eslint-disable-next-line no-undef\n  && !Symbol.sham\n  // eslint-disable-next-line no-undef\n  && typeof Symbol.iterator == 'symbol';\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nexports.f = wellKnownSymbol;\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar has = require('../internals/has');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name)) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];\n    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","'use strict';\nvar $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\nvar copyWithin = require('../internals/array-copy-within');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.copyWithin` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\n$({ target: 'Array', proto: true }, {\n  copyWithin: copyWithin\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('copyWithin');\n","var $ = require('../internals/export');\nvar fill = require('../internals/array-fill');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n","'use strict';\nvar $ = require('../internals/export');\nvar forEach = require('../internals/array-for-each');\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {\n  forEach: forEach\n});\n","var $ = require('../internals/export');\nvar from = require('../internals/array-from');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.github.io/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var $ = require('../internals/export');\nvar isArray = require('../internals/is-array');\n\n// `Array.isArray` method\n// https://tc39.github.io/ecma262/#sec-array.isarray\n$({ target: 'Array', stat: true }, {\n  isArray: isArray\n});\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.github.io/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar test = [];\nvar nativeSort = test.sort;\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;\n\n// `Array.prototype.sort` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? nativeSort.call(toObject(this))\n      : nativeSort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\n\n// `Date.now` method\n// https://tc39.github.io/ecma262/#sec-date.now\n$({ target: 'Date', stat: true }, {\n  now: function now() {\n    return new Date().getTime();\n  }\n});\n","var $ = require('../internals/export');\nvar bind = require('../internals/function-bind');\n\n// `Function.prototype.bind` method\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\n$({ target: 'Function', proto: true }, {\n  bind: bind\n});\n","var global = require('../internals/global');\nvar setToStringTag = require('../internals/set-to-string-tag');\n\n// JSON[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-json-@@tostringtag\nsetToStringTag(global.JSON, 'JSON', true);\n","var setToStringTag = require('../internals/set-to-string-tag');\n\n// Math[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-math-@@tostringtag\nsetToStringTag(Math, 'Math', true);\n","var $ = require('../internals/export');\nvar assign = require('../internals/object-assign');\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {\n  assign: assign\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar create = require('../internals/object-create');\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\n$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {\n  create: create\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar objectDefinePropertyModile = require('../internals/object-define-property');\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\n$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {\n  defineProperty: objectDefinePropertyModile.f\n});\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.github.io/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });\nvar FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\n$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);\n  }\n});\n","var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toObject = require('../internals/to-object');\nvar nativeGetPrototypeOf = require('../internals/object-get-prototype-of');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\n$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {\n  getPrototypeOf: function getPrototypeOf(it) {\n    return nativeGetPrototypeOf(toObject(it));\n  }\n});\n\n","var $ = require('../internals/export');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n$({ target: 'Object', stat: true }, {\n  setPrototypeOf: setPrototypeOf\n});\n","// empty\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://github.com/tc39/proposal-promise-allSettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (e) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: e };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.github.io/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = typeof onFinally == 'function';\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// patch native Promise.prototype for native async functions\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar setSpecies = require('../internals/set-species');\nvar isObject = require('../internals/is-object');\nvar aFunction = require('../internals/a-function');\nvar anInstance = require('../internals/an-instance');\nvar classof = require('../internals/classof-raw');\nvar inspectSource = require('../internals/inspect-source');\nvar iterate = require('../internals/iterate');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar speciesConstructor = require('../internals/species-constructor');\nvar task = require('../internals/task').set;\nvar microtask = require('../internals/microtask');\nvar promiseResolve = require('../internals/promise-resolve');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar InternalStateModule = require('../internals/internal-state');\nvar isForced = require('../internals/is-forced');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\nvar PROMISE = 'Promise';\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar PromiseConstructor = NativePromise;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar $fetch = getBuiltIn('fetch');\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\nvar IS_NODE = classof(process) == 'process';\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\nvar FORCED = isForced(PROMISE, function () {\n  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);\n  if (!GLOBAL_CORE_JS_PROMISE) {\n    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n    // We can't detect it synchronously, so just check versions\n    if (V8_VERSION === 66) return true;\n    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;\n  }\n  // We need Promise#finally in the pure version for preventing prototype pollution\n  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = PromiseConstructor.resolve(1);\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES] = FakePromise;\n  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);\n});\n\nvar INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {\n  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });\n});\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\n\nvar notify = function (promise, state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  var chain = state.reactions;\n  microtask(function () {\n    var value = state.value;\n    var ok = state.state == FULFILLED;\n    var index = 0;\n    // variable length - can't use forEach\n    while (chain.length > index) {\n      var reaction = chain[index++];\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);\n            state.rejection = HANDLED;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // can throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (error) {\n        if (domain && !exited) domain.exit();\n        reject(error);\n      }\n    }\n    state.reactions = [];\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(promise, state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (handler = global['on' + name]) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (promise, state) {\n  task.call(global, function () {\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (promise, state) {\n  task.call(global, function () {\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, promise, state, unwrap) {\n  return function (value) {\n    fn(promise, state, value, unwrap);\n  };\n};\n\nvar internalReject = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(promise, state, true);\n};\n\nvar internalResolve = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          then.call(value,\n            bind(internalResolve, promise, wrapper, state),\n            bind(internalReject, promise, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(promise, wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(promise, state, false);\n    }\n  } catch (error) {\n    internalReject(promise, { done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromiseConstructor, PROMISE);\n    aFunction(executor);\n    Internal.call(this);\n    var state = getInternalState(this);\n    try {\n      executor(bind(internalResolve, this, state), bind(internalReject, this, state));\n    } catch (error) {\n      internalReject(this, state, error);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: [],\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n  Internal.prototype = redefineAll(PromiseConstructor.prototype, {\n    // `Promise.prototype.then` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.then\n    then: function then(onFulfilled, onRejected) {\n      var state = getInternalPromiseState(this);\n      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = IS_NODE ? process.domain : undefined;\n      state.parent = true;\n      state.reactions.push(reaction);\n      if (state.state != PENDING) notify(this, state, false);\n      return reaction.promise;\n    },\n    // `Promise.prototype.catch` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, promise, state);\n    this.reject = bind(internalReject, promise, state);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && typeof NativePromise == 'function') {\n    nativeThen = NativePromise.prototype.then;\n\n    // wrap native Promise#then for native async functions\n    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {\n      var that = this;\n      return new PromiseConstructor(function (resolve, reject) {\n        nativeThen.call(that, resolve, reject);\n      }).then(onFulfilled, onRejected);\n    // https://github.com/zloirock/core-js/issues/640\n    }, { unsafe: true });\n\n    // wrap fetch result\n    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {\n      // eslint-disable-next-line no-unused-vars\n      fetch: function fetch(input /* , init */) {\n        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));\n      }\n    });\n  }\n}\n\n$({ global: true, wrap: true, forced: FORCED }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n\nPromiseWrapper = getBuiltIn(PROMISE);\n\n// statics\n$({ target: PROMISE, stat: true, forced: FORCED }, {\n  // `Promise.reject` method\n  // https://tc39.github.io/ecma262/#sec-promise.reject\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    capability.reject.call(undefined, r);\n    return capability.promise;\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {\n  // `Promise.resolve` method\n  // https://tc39.github.io/ecma262/#sec-promise.resolve\n  resolve: function resolve(x) {\n    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {\n  // `Promise.all` method\n  // https://tc39.github.io/ecma262/#sec-promise.all\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        $promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  },\n  // `Promise.race` method\n  // https://tc39.github.io/ecma262/#sec-promise.race\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      iterate(iterable, function (promise) {\n        $promiseResolve.call(C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","var $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar anObject = require('../internals/an-object');\nvar has = require('../internals/has');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\n\n// `Reflect.get` method\n// https://tc39.github.io/ecma262/#sec-reflect.get\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var descriptor, prototype;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value')\n    ? descriptor.value\n    : descriptor.get === undefined\n      ? undefined\n      : descriptor.get.call(receiver);\n  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);\n}\n\n$({ target: 'Reflect', stat: true }, {\n  get: get\n});\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n","var $ = require('../internals/export');\nvar repeat = require('../internals/string-repeat');\n\n// `String.prototype.repeat` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\n$({ target: 'String', proto: true }, {\n  repeat: repeat\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar toLength = require('../internals/to-length');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\nvar IS_PURE = require('../internals/is-pure');\n\nvar nativeStartsWith = ''.startsWith;\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith\n      ? nativeStartsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.asyncIterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.asynciterator\ndefineWellKnownSymbol('asyncIterator');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.hasInstance` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.hasinstance\ndefineWellKnownSymbol('hasInstance');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.isConcatSpreadable` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable\ndefineWellKnownSymbol('isConcatSpreadable');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar IS_PURE = require('../internals/is-pure');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar nativeObjectCreate = require('../internals/object-create');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar shared = require('../internals/shared');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar uid = require('../internals/uid');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineWellKnownSymbol = require('../internals/define-well-known-symbol');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar InternalStateModule = require('../internals/internal-state');\nvar $forEach = require('../internals/array-iteration').forEach;\n\nvar HIDDEN = sharedKey('hidden');\nvar SYMBOL = 'Symbol';\nvar PROTOTYPE = 'prototype';\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(SYMBOL);\nvar ObjectPrototype = Object[PROTOTYPE];\nvar $Symbol = global.Symbol;\nvar $stringify = getBuiltIn('JSON', 'stringify');\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\nvar nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\nvar AllSymbols = shared('symbols');\nvar ObjectPrototypeSymbols = shared('op-symbols');\nvar StringToSymbolRegistry = shared('string-to-symbol-registry');\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\nvar WellKnownSymbolsStore = shared('wks');\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDescriptor = DESCRIPTORS && fails(function () {\n  return nativeObjectCreate(nativeDefineProperty({}, 'a', {\n    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (O, P, Attributes) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];\n  nativeDefineProperty(O, P, Attributes);\n  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {\n    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);\n  }\n} : nativeDefineProperty;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);\n  setInternalState(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!DESCRIPTORS) symbol.description = description;\n  return symbol;\n};\n\nvar isSymbol = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return Object(it) instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(O, P, Attributes) {\n  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n  anObject(O);\n  var key = toPrimitive(P, true);\n  anObject(Attributes);\n  if (has(AllSymbols, key)) {\n    if (!Attributes.enumerable) {\n      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));\n      O[HIDDEN][key] = true;\n    } else {\n      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(O, key, Attributes);\n  } return nativeDefineProperty(O, key, Attributes);\n};\n\nvar $defineProperties = function defineProperties(O, Properties) {\n  anObject(O);\n  var properties = toIndexedObject(Properties);\n  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n  $forEach(keys, function (key) {\n    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);\n  });\n  return O;\n};\n\nvar $create = function create(O, Properties) {\n  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(V) {\n  var P = toPrimitive(V, true);\n  var enumerable = nativePropertyIsEnumerable.call(this, P);\n  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;\n  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n  var it = toIndexedObject(O);\n  var key = toPrimitive(P, true);\n  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;\n  var descriptor = nativeGetOwnPropertyDescriptor(it, key);\n  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {\n    descriptor.enumerable = true;\n  }\n  return descriptor;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(O) {\n  var names = nativeGetOwnPropertyNames(toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);\n  });\n  return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(O) {\n  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;\n  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {\n      result.push(AllSymbols[key]);\n    }\n  });\n  return result;\n};\n\n// `Symbol` constructor\n// https://tc39.github.io/ecma262/#sec-symbol-constructor\nif (!NATIVE_SYMBOL) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');\n    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var tag = uid(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n    };\n    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  redefine($Symbol, 'withoutSetter', function (description) {\n    return wrap(uid(description), description);\n  });\n\n  propertyIsEnumerableModule.f = $propertyIsEnumerable;\n  definePropertyModule.f = $defineProperty;\n  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;\n  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;\n\n  wrappedWellKnownSymbolModule.f = function (name) {\n    return wrap(wellKnownSymbol(name), name);\n  };\n\n  if (DESCRIPTORS) {\n    // https://github.com/tc39/proposal-Symbol-description\n    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n    if (!IS_PURE) {\n      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });\n    }\n  }\n}\n\n$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {\n  Symbol: $Symbol\n});\n\n$forEach(objectKeys(WellKnownSymbolsStore), function (name) {\n  defineWellKnownSymbol(name);\n});\n\n$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Symbol.for` method\n  // https://tc39.github.io/ecma262/#sec-symbol.for\n  'for': function (key) {\n    var string = String(key);\n    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n    var symbol = $Symbol(string);\n    StringToSymbolRegistry[string] = symbol;\n    SymbolToStringRegistry[symbol] = string;\n    return symbol;\n  },\n  // `Symbol.keyFor` method\n  // https://tc39.github.io/ecma262/#sec-symbol.keyfor\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');\n    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  },\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {\n  // `Object.create` method\n  // https://tc39.github.io/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // `Object.getOwnPropertySymbols` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\n$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return getOwnPropertySymbolsModule.f(toObject(it));\n  }\n});\n\n// `JSON.stringify` method behavior with symbols\n// https://tc39.github.io/ecma262/#sec-json.stringify\nif ($stringify) {\n  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {\n    var symbol = $Symbol();\n    // MS Edge converts symbol values to JSON as {}\n    return $stringify([symbol]) != '[null]'\n      // WebKit converts symbol values to JSON as null\n      || $stringify({ a: symbol }) != '{}'\n      // V8 throws on boxed symbols\n      || $stringify(Object(symbol)) != '{}';\n  });\n\n  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {\n    // eslint-disable-next-line no-unused-vars\n    stringify: function stringify(it, replacer, space) {\n      var args = [it];\n      var index = 1;\n      var $replacer;\n      while (arguments.length > index) args.push(arguments[index++]);\n      $replacer = replacer;\n      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n      if (!isArray(replacer)) replacer = function (key, value) {\n        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n        if (!isSymbol(value)) return value;\n      };\n      args[1] = replacer;\n      return $stringify.apply(null, args);\n    }\n  });\n}\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive\nif (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {\n  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n}\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag($Symbol, SYMBOL);\n\nhiddenKeys[HIDDEN] = true;\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.matchAll` well-known symbol\ndefineWellKnownSymbol('matchAll');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.match` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.match\ndefineWellKnownSymbol('match');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.replace` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.replace\ndefineWellKnownSymbol('replace');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.search` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.search\ndefineWellKnownSymbol('search');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.species` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.species\ndefineWellKnownSymbol('species');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.split` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.split\ndefineWellKnownSymbol('split');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toStringTag` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.tostringtag\ndefineWellKnownSymbol('toStringTag');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.unscopables` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.unscopables\ndefineWellKnownSymbol('unscopables');\n","'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar create = require('../internals/object-create');\nvar defineProperty = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar iterate = require('../internals/iterate');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar setInternalState = InternalStateModule.set;\nvar getInternalAggregateErrorState = InternalStateModule.getterFor('AggregateError');\n\nvar $AggregateError = function AggregateError(errors, message) {\n  var that = this;\n  if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);\n  if (setPrototypeOf) {\n    that = setPrototypeOf(new Error(message), getPrototypeOf(that));\n  }\n  var errorsArray = [];\n  iterate(errors, errorsArray.push, errorsArray);\n  if (DESCRIPTORS) setInternalState(that, { errors: errorsArray, type: 'AggregateError' });\n  else that.errors = errorsArray;\n  if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));\n  return that;\n};\n\n$AggregateError.prototype = create(Error.prototype, {\n  constructor: createPropertyDescriptor(5, $AggregateError),\n  message: createPropertyDescriptor(5, ''),\n  name: createPropertyDescriptor(5, 'AggregateError')\n});\n\nif (DESCRIPTORS) defineProperty.f($AggregateError.prototype, 'errors', {\n  get: function () {\n    return getInternalAggregateErrorState(this).errors;\n  },\n  configurable: true\n});\n\n$({ global: true }, {\n  AggregateError: $AggregateError\n});\n","// TODO: Remove from `core-js@4`\nrequire('./es.promise.all-settled.js');\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar getBuiltIn = require('../internals/get-built-in');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\nvar PROMISE_ANY_ERROR = 'No one promise resolved';\n\n// `Promise.any` method\n// https://github.com/tc39/proposal-promise-any\n$({ target: 'Promise', stat: true }, {\n  any: function any(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var errors = [];\n      var counter = 0;\n      var remaining = 1;\n      var alreadyResolved = false;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyRejected = false;\n        errors.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyResolved = true;\n          resolve(value);\n        }, function (e) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyRejected = true;\n          errors[index] = e;\n          --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));\n        });\n      });\n      --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\n\n// `Promise.try` method\n// https://github.com/tc39/proposal-promise-try\n$({ target: 'Promise', stat: true }, {\n  'try': function (callbackfn) {\n    var promiseCapability = newPromiseCapabilityModule.f(this);\n    var result = perform(callbackfn);\n    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);\n    return promiseCapability.promise;\n  }\n});\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.asyncDispose` well-known symbol\n// https://github.com/tc39/proposal-using-statement\ndefineWellKnownSymbol('asyncDispose');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.dispose` well-known symbol\n// https://github.com/tc39/proposal-using-statement\ndefineWellKnownSymbol('dispose');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.observable` well-known symbol\n// https://github.com/tc39/proposal-observable\ndefineWellKnownSymbol('observable');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.patternMatch` well-known symbol\n// https://github.com/tc39/proposal-pattern-matching\ndefineWellKnownSymbol('patternMatch');\n","// TODO: remove from `core-js@4`\nvar defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\ndefineWellKnownSymbol('replaceAll');\n","require('./es.array.iterator');\nvar DOMIterables = require('../internals/dom-iterables');\nvar global = require('../internals/global');\nvar classof = require('../internals/classof');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {\n    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n  }\n  Iterators[COLLECTION_NAME] = Iterators.Array;\n}\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar task = require('../internals/task');\n\nvar FORCED = !global.setImmediate || !global.clearImmediate;\n\n// http://w3c.github.io/setImmediate/\n$({ global: true, bind: true, enumerable: true, forced: FORCED }, {\n  // `setImmediate` method\n  // http://w3c.github.io/setImmediate/#si-setImmediate\n  setImmediate: task.set,\n  // `clearImmediate` method\n  // http://w3c.github.io/setImmediate/#si-clearImmediate\n  clearImmediate: task.clear\n});\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\n\nvar wrap = function (scheduler) {\n  return function (handler, timeout /* , ...arguments */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : undefined;\n    return scheduler(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);\n    } : handler, timeout);\n  };\n};\n\n// ie9- setTimeout & setInterval additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n$({ global: true, bind: true, forced: MSIE }, {\n  // `setTimeout` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\n  setTimeout: wrap(global.setTimeout),\n  // `setInterval` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\n  setInterval: wrap(global.setInterval)\n});\n","var parent = require('../../../es/array/virtual/for-each');\n\nmodule.exports = parent;\n","var parent = require('../../es/date/now');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/bind');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/concat');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/copy-within');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/fill');\n\nmodule.exports = parent;\n","require('../../modules/web.dom-collections.iterator');\nvar forEach = require('../array/virtual/for-each');\nvar classof = require('../../internals/classof');\nvar ArrayPrototype = Array.prototype;\n\nvar DOMIterables = {\n  DOMTokenList: true,\n  NodeList: true\n};\n\nmodule.exports = function (it) {\n  var own = it.forEach;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.forEach)\n    // eslint-disable-next-line no-prototype-builtins\n    || DOMIterables.hasOwnProperty(classof(it)) ? forEach : own;\n};\n","var parent = require('../../es/instance/index-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/repeat');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/sort');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/splice');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/starts-with');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/trim');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/assign');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/entries');\n\nmodule.exports = parent;\n","var parent = require('../../es/promise');\n\nmodule.exports = parent;\n","require('../modules/web.immediate');\nvar path = require('../internals/path');\n\nmodule.exports = path.setImmediate;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setInterval;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setTimeout;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\nimport {NyaPCommon,\r\n\t\tDomTools,\r\n\t\tUtils\r\n} from './NyaPCommon.js';\r\nconst O2H=DomTools.Object2HTML;\r\n\r\n\r\n//NyaP options\r\nconst NyaPOptions={\r\n}\r\n\r\n//normal player\r\nclass NyaP extends NyaPCommon{\r\n\tget icons(){return this.opt.icons;}\r\n\tconstructor(opt){\r\n\t\tsuper(Utils.deepAssign({},NyaPOptions,opt));\r\n\t\topt=this.opt;\r\n\t\tconst NP=this,\r\n\t\t\t_t=this._t,\r\n\t\t\t$=this.$,\r\n\t\t\tvideo=this.video;\r\n\t\t//set icons\r\n\t\tfunction icon(name,event,attr={},extopt){\r\n\t\t\tconst ico=opt.icons[name];\r\n\t\t\treturn O2H({_:'span',event,attr,prop:{id:`icon_span_${name}`,\r\n\t\t\t\tinnerHTML:`<svg viewBox=\"0 0 ${ico[0]} ${ico[1]}\" height=${extopt?.height||ico[1]} width=${extopt?.width||ico[0]} id=\"icon_${name}\"\">${ico[2]}</svg>`}});\r\n\t\t}\r\n\t\t\r\n\t\tthis.stat('creating_player');\r\n\r\n\t\t//create player elements\r\n\t\tNP._.player=O2H({\r\n\t\t\t_:'div',attr:{class:'NyaP',id:'NyaP',tabindex:0},child:[\r\n\t\t\t\tNP.videoFrame,\r\n\t\t\t\t{_:'div',attr:{id:'controls'},child:[\r\n\t\t\t\t\t{_:'div',attr:{id:'control'},child:[\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_left'},child:[\r\n\t\t\t\t\t\t\ticon('play',{click:e=>NP.playToggle()},{title:_t('play')}),\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_center'},child:[\r\n\t\t\t\t\t\t\t{_:'div',prop:{id:'progress_info'},child:[\r\n\t\t\t\t\t\t\t\t{_:'span',child:[\r\n\t\t\t\t\t\t\t\t\t{_:'canvas',prop:{id:'progress',pad:10}},\r\n\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'time'},child:[\r\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'current_time'},child:['00:00']},\r\n\t\t\t\t\t\t\t\t\t'/',\r\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'total_time'},child:['00:00']},\r\n\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_right'},child:[\r\n\t\t\t\t\t\t\ticon('addDanmaku',{click:e=>NP.danmakuInput()},{title:_t('danmaku input(Enter)')}),\r\n\t\t\t\t\t\t\ticon('danmakuToggle',{click:e=>NP.Danmaku.toggle()},{title:_t('danmaku toggle(D)'),class:'active_icon'}),\r\n\t\t\t\t\t\t\ticon('volume',{},{title:`${_t('volume')}:(${video.muted?_t('muted'):(video.volume*100|0)+'%'})([shift]+↑↓)(${_t('wheeling')})`}),\r\n\t\t\t\t\t\t\ticon('loop',{click:e=>{video.loop=!video.loop;}},{title:_t('loop')+'(L)'}),\r\n\t\t\t\t\t\t\t{_:'span',prop:{id:'player_mode'},child:[\r\n\t\t\t\t\t\t\t\ticon('fullScreen',{click:e=>NP.playerMode('fullScreen')},{title:_t('full screen(F)')}),\r\n\t\t\t\t\t\t\t\ticon('fullPage',{click:e=>NP.playerMode('fullPage')},{title:_t('full page(P)')})\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t]}\r\n\t\t\t\t]},\r\n\t\t\t\t{_:'div',prop:{id:'danmaku_input_frame',style:\"display:none;\"},child:[\r\n\t\t\t\t\t{_:'span',prop:{id:'danmaku_style'},child:[\r\n\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_style_pannel'},child:[\r\n\t\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_color_box'}},\r\n\t\t\t\t\t\t\t{_:'input',attr:{id:'danmaku_color',placeholder:_t('hex color'),maxlength:\"6\"},event:{keypress:e=>{}}},\r\n\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_mode_box'}},\r\n\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_size_box'}},\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\ticon('danmakuStyle',undefined,undefined,{width:\"2em\",height:\"2em\"}),\r\n\t\t\t\t\t]},\r\n\t\t\t\t\t{_:'input',attr:{id:'danmaku_input',placeholder:_t('Input danmaku here')}},\r\n\t\t\t\t\t{_:'span',prop:{id:'danmaku_submit',innerHTML:_t('Send')}},\r\n\t\t\t\t]},\r\n\t\t\t]\r\n\t\t});\r\n\r\n\r\n\t\t//progress\r\n\t\tsetTimeout(()=>{//add resize event\r\n\t\t\tDomTools.resizeEvent.observe($('#control'));\r\n\t\t\tDomTools.addEvents($('#control'),{\r\n\t\t\t\tresize:e=>NP.resizeProgress(),\r\n\t\t\t});\r\n\t\t\tNP.resizeProgress();\r\n\t\t},0);\r\n\t\tNP._.progressContext=$('#progress').getContext('2d');\r\n\r\n\t\t//events\r\n\t\tconst events={\r\n\t\t\tmain_video:{\r\n\t\t\t\tplaying:e=>{\r\n\t\t\t\t\tNP._iconActive('play',true);\r\n\t\t\t\t\tif(this.$('#danmaku_input_frame').offsetHeight){\r\n\t\t\t\t\t\tthis.danmakuInput(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tpause:e=>{\r\n\t\t\t\t\tNP._iconActive('play',false);\r\n\t\t\t\t},\r\n\t\t\t\ttimeupdate:(e)=>{\r\n\t\t\t\t\tif(Date.now()-NP._.lastTimeUpdate <30)return;\r\n\t\t\t\t\tNP._setDisplayTime(Utils.formatTime(video.currentTime,video.duration));\r\n\t\t\t\t\tNP.drawProgress();\r\n\t\t\t\t\tNP._.lastTimeUpdate=Date.now();\r\n\t\t\t\t},\r\n\t\t\t\tloadedmetadata:e=>{\r\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\r\n\t\t\t\t},\r\n\t\t\t\tvolumechange:e=>{\r\n\t\t\t\t\t//show volume msg\r\n\t\t\t\t\tNP._.volumeBox.renew(`${_t('volume')}:${(video.volume*100).toFixed(0)}%`+`${video.muted?('('+_t('muted')+')'):''}`,3000);\r\n\t\t\t\t\t//change icon style\r\n\t\t\t\t\tDomTools.setAttrs($('#volume_circle'),{'stroke-dasharray':`${video.volume*12*Math.PI} 90`,style:`fill-opacity:${video.muted?.2:.6}!important`});\r\n\t\t\t\t\t//change icon tip\r\n\t\t\t\t\t$('#icon_span_volume').setAttribute('title',`${_t('volume')}:(${video.muted?_t('muted'):((video.volume*100|0)+'%')})([shift]+↑↓)(${_t('wheeling')})`);\r\n\t\t\t\t},\r\n\t\t\t\tprogress:e=>NP.drawProgress(),\r\n\t\t\t\tclick:e=>NP.playToggle(),\r\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\r\n\t\t\t\terror:()=>{\r\n\t\t\t\t\tNP.msg(`视频加载错误`,'error');\r\n\t\t\t\t\tthis.log('video error','error');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_container:{\r\n\t\t\t\tclick:e=>NP.playToggle(),\r\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\r\n\t\t\t},\r\n\t\t\tprogress:{\r\n\t\t\t\t'mousemove,click':e=>{\r\n\t\t\t\t\tlet t=e.target,\r\n\t\t\t\t\t\tpre=Utils.clamp((e.offsetX-t.pad)/(t.offsetWidth-2*t.pad),0,1);\r\n\t\t\t\t\tif(e.type==='mousemove'){\r\n\t\t\t\t\t\tNP._.progressX=e.offsetX;NP.drawProgress();\r\n\t\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(pre*video.duration,video.duration));\t\r\n\t\t\t\t\t}else if(e.type==='click'){\r\n\t\t\t\t\t\tvideo.currentTime=pre*video.duration;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tmouseout:e=>{\r\n\t\t\t\t\tNP._.progressX=undefined;NP.drawProgress();\r\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tdanmaku_style_pannel:{\r\n\t\t\t\tclick:e=>{if(e.target.tagName!=='INPUT')setImmediate(a=>NP.$('#danmaku_input').focus())},\r\n\t\t\t},\r\n\t\t\tdanmaku_color:{\r\n\t\t\t\t'input,change':e=>{\r\n\t\t\t\t\tlet i=e.target,c=NP.Danmaku.isVaildColor(i.value);\r\n\t\t\t\t\tif(c){//match valid hex color code\r\n\t\t\t\t\t\ti.style.backgroundColor=`#${c}`;\r\n\t\t\t\t\t\tNP._.danmakuColor=c;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tNP._.danmakuColor=undefined;\r\n\t\t\t\t\t\tc=NP.Danmaku.isVaildColor(NP.opt.danmaku.defaultDanmakuColor);\r\n\t\t\t\t\t\ti.style.backgroundColor=c?`#${c}`:'';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\ticon_span_volume:{\r\n\t\t\t\tclick:e=>video.muted=!video.muted,\r\n\t\t\t\twheel:e=>{\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tlet d=e.wheelDeltaY;\r\n\t\t\t\t\tif(e.shiftKey)d=d>0?10:-10;\r\n\t\t\t\t\tvideo.volume=Utils.clamp(video.volume+d/900,0,1);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_input:{\r\n\t\t\t\tkeydown:e=>{if(e.key==='Enter'){NP.send();}else if(e.key==='Escape'){NP.danmakuInput(false);}}\r\n\t\t\t},\r\n\t\t\tdanmaku_submit:{\r\n\t\t\t\tclick:e=>NP.send(),\r\n\t\t\t},\r\n\t\t\tdanmaku_mode_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tlet t=e.target;\r\n\t\t\t\t\tif(t.id.startsWith('icon_span_danmakuMode')){\r\n\t\t\t\t\t\tlet m=1*t.id.match(/\\d$/)[0];\r\n\t\t\t\t\t\tif(NP._.danmakuMode!==undefined)\r\n\t\t\t\t\t\t\t$(`#icon_span_danmakuMode${NP._.danmakuMode}`).classList.remove('active');\r\n\t\t\t\t\t\t$(`#icon_span_danmakuMode${m}`).classList.add('active');\r\n\t\t\t\t\t\tNP._.danmakuMode=m;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_size_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tlet t=e.target;\r\n\t\t\t\t\tif(!t.size)return;\r\n\t\t\t\t\tUtils.toArray($('#danmaku_size_box').childNodes).forEach(sp=>{\r\n\t\t\t\t\t\tif(NP._.danmakuSize===sp.size)sp.classList.remove('active');\r\n\t\t\t\t\t});\r\n\t\t\t\t\tt.classList.add('active');\r\n\t\t\t\t\tNP._.danmakuSize=t.size;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_color_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tif(e.target.color){\r\n\t\t\t\t\t\t$('#danmaku_color').value=e.target.color;\r\n\t\t\t\t\t\t$('#danmaku_color').dispatchEvent(new Event('change'));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t}\r\n\t\tfor(let eleid in events){//add events to elements\r\n\t\t\tlet el=$(`#${eleid}`);\r\n\t\t\tif(!el)continue;\r\n\t\t\tlet eves=events[eleid];\r\n\t\t\teves&&DomTools.addEvents($(`#${eleid}`),eves);\r\n\t\t}\r\n\t\tDomTools.addEvents(this,{\r\n\t\t\tdanmakuFrameToggle:bool=>NP._iconActive('danmakuToggle',bool),//listen danmakuToggle event to change button style\r\n\t\t\tplayerModeChange:mode=>{\r\n\t\t\t\t['fullPage','fullScreen'].forEach(m=>{\r\n\t\t\t\t\tNP._iconActive(m,mode===m);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tvideo_loopChange:value=>NP._iconActive('loop',value),\r\n\t\t});\r\n\t\tDomTools.addEvents(this._.player,{\r\n\t\t\tkeydown:e=>NP._playerKeyHandle(e),\r\n\t\t\tmousemove:e=>{\r\n\t\t\t\tthis._userActiveWatcher(true);\r\n\t\t\t}\r\n\t\t});\r\n\t\tDomTools.addEvents(document,{\r\n\t\t\t'fullscreenchange,mozfullscreenchange,webkitfullscreenchange,msfullscreenchange':e=>{\r\n\t\t\t\tif(NP.currentPlayerMode=='fullScreen' && !DomTools.isFullscreen())\r\n\t\t\t\t\tNP.playerMode('normal');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t\r\n\t\t//danmaku ui\r\n\t\tif(this._danmakuEnabled){\r\n\t\t\t//danmaku sizes\r\n\t\t\topt.uiOptions.danmakuSizes&&opt.uiOptions.danmakuSizes.forEach((s,ind)=>{\r\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`font-size:${12+ind*3}px;`,title:s},prop:{size:s},child:['A']});\r\n\t\t\t\t$('#danmaku_size_box').appendChild(e);\r\n\t\t\t\tif(s===opt?.uiOptions?.danmakuSize){//click specified button\r\n\t\t\t\t\te.click();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t//danmaku colors\r\n\t\t\topt.uiOptions.danmakuColors&&opt.uiOptions.danmakuColors.forEach(c=>{\r\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`background-color:#${c};`,title:c},prop:{color:c}});\r\n\t\t\t\t$('#danmaku_color_box').appendChild(e);\r\n\t\t\t});\r\n\t\t\tif(opt.uiOptions?.danmakuColor){//set default color\r\n\t\t\t\t$('#danmaku_color').value=opt.uiOptions.danmakuColor;\r\n\t\t\t}\r\n\t\t\t//danmaku modes\r\n\t\t\topt.uiOptions.danmakuModes&&opt.uiOptions.danmakuModes.forEach(m=>{\r\n\t\t\t\tlet e=icon(`danmakuMode${m}`);\r\n\t\t\t\t$('#danmaku_mode_box').appendChild(e);\r\n\t\t\t\tif(m===opt?.uiOptions?.danmakuMode){//click specified button\r\n\t\t\t\t\te.click();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tthis.$$('[id*=danmaku]').forEach(el=>{//remove danmaku buttons\r\n\t\t\t\tel.parentNode,removeChild(el);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t//put into the container\r\n\t\tif(opt.playerContainer instanceof HTMLElement)\r\n\t\t\topt.playerContainer.appendChild(NP.player);\r\n\r\n\t\tthis.statResult('creating_player');\r\n\t}\r\n\t_userActiveWatcher(active=false){//watch user active,for auto hiding ui\r\n\t\tlet delay=5000,t=Date.now();\r\n\t\tif(active){\r\n\t\t\tthis._.lastUserActive=t;\r\n\t\t\tif(this._.userInactive){\r\n\t\t\t\tthis._.userInactive=false;\r\n\t\t\t\tthis.player.classList.remove('user-inactive');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this._.userActiveTimer)return;\r\n\t\tthis._.userActiveTimer=setTimeout(()=>{\r\n\t\t\tthis._.userActiveTimer=0;\r\n\t\t\tlet now=Date.now();\r\n\t\t\tif(now-this._.lastUserActive<delay){\r\n\t\t\t\tthis._userActiveWatcher();\r\n\t\t\t}else{\r\n\t\t\t\tthis.player.classList.add('user-inactive');\r\n\t\t\t\tthis._.userInactive=true;\r\n\t\t\t}\r\n\t\t},delay-t+this._.lastUserActive);\r\n\t}\r\n\t_playerKeyHandle(e){//hot keys\r\n\t\tif(e.target.tagName==='INPUT')return;\r\n\t\tconst V=this.video,_SH=e.shiftKey,_RE=e.repeat;\r\n\t\t//to prevent default,use break.otherwise,use return.\r\n\t\tswitch(e.key){\r\n\t\t\tcase ' ':{\r\n\t\t\t\tif(_RE)return;//ignore repeat keys\r\n\t\t\t\tthis.playToggle();break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowRight':{//seek forward\r\n\t\t\t\tV.currentTime+=(3*(_SH?2:1));break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowLeft':{//seek backward\r\n\t\t\t\tV.currentTime-=(1.5*(_SH?2:1));break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowUp':{//volume up\r\n\t\t\t\tV.volume=Utils.clamp(V.volume+(0.03*(_SH?2:1)),0,1);break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowDown':{//volume down\r\n\t\t\t\tV.volume=Utils.clamp(V.volume-(0.03*(_SH?2:1)),0,1);break;\r\n\t\t\t}\r\n\t\t\tcase 'p':{//full page\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis.playerMode('fullPage');break;\r\n\t\t\t}\r\n\t\t\tcase 'f':{//fullscreen\r\n\t\t\t\tthis.playerMode('fullScreen');break;\r\n\t\t\t}\r\n\t\t\tcase 'd':{//danmaku toggle\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis._danmakuEnabled&&this.Danmaku.toggle();break;\r\n\t\t\t}\r\n\t\t\tcase 'm':{//mute\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis.video.muted=!this.video.muted;break;\r\n\t\t\t}\r\n\t\t\tcase 'l':{//loop\r\n\t\t\t\tthis.video.loop=!this.video.loop;break;\r\n\t\t\t}\r\n\t\t\tcase 'Enter':{//danmaku input toggle\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis._danmakuEnabled&&this.danmakuInput();break;\r\n\t\t\t}\r\n\t\t\tcase 'Escape':{//exit full page mode\r\n\t\t\t\tif(this.currentPlayerMode==='fullPage'){\r\n\t\t\t\t\tthis.playerMode('normal');break;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdefault:return;\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t}\r\n\tdanmakuInput(bool=!this.$('#danmaku_input_frame').offsetHeight){//hide or show danmaku input\r\n\t\tlet $=this.$;\r\n\t\t$('#danmaku_input_frame').style.display=bool?'':'none';\r\n\t\tthis._iconActive('addDanmaku',bool);\r\n\t\tsetImmediate(()=>{bool?$('#danmaku_input').focus():this._.player.focus();});\r\n\t}\r\n\tresizeProgress(){\r\n\t\tconst c=this.$('#progress');\r\n\t\tc.width=c.offsetWidth;\r\n\t\tc.height=c.offsetHeight;\r\n\t\tthis.drawProgress();\r\n\t\tthis.emit('progressRefresh');\r\n\t}\r\n\t_progressDrawer(){\r\n\t\tconst ctx=this._.progressContext,\r\n\t\t\t\tc=this.$('#progress'),\r\n\t\t\t\tw=c.width,\r\n\t\t\t\th=c.height,\r\n\t\t\t\tv=this.video,\r\n\t\t\t\td=v.duration,\r\n\t\t\t\tcT=v.currentTime,\r\n\t\t\t\tpad=c.pad,\r\n\t\t\t\tlen=w-2*pad;\r\n\t\tlet i;\r\n\t\tctx.clearRect(0,0,w,h);\r\n\t\tctx.lineCap = \"round\";\r\n\t\t//background\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle='#eee';\r\n\t\tctx.lineWidth=7;\r\n\t\tctx.moveTo(pad, 15);\r\n\t\tctx.lineTo(pad+len, 15);\r\n\t\tctx.stroke();\r\n\t\t//buffered\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = '#C0BBBB';\r\n\t\tctx.lineWidth = 2;\r\n\t\tlet tr = v.buffered;\r\n\t\tfor (i = tr.length;i--;) {\r\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 18);\r\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 18);\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\t//progress\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle='#6cf';\r\n\t\tctx.lineWidth = 5;\r\n\t\tctx.moveTo(pad,15);\r\n\t\tctx.lineTo(pad+len*cT/d,15);\r\n\t\tctx.stroke();\r\n\t\t//already played\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = 'rgba(255,255,255,.3)';\r\n\t\tctx.lineWidth = 5;\r\n\t\ttr = v.played;\r\n\t\tfor (i = tr.length;i--;) {\r\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 15);\r\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 15);\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\t//mouse\r\n\t\tif(this._.progressX){\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.strokeStyle='rgba(0,0,0,.05)';\r\n\t\t\tctx.moveTo(pad+len*cT/d,15);\r\n\t\t\tctx.lineTo(Utils.clamp(this._.progressX,pad,pad+len),15);\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t\tthis._.drawingProgress=false;\r\n\t}\r\n\tdrawProgress(){\r\n\t\tif(this._.drawingProgress)return;\r\n\t\tthis._.drawingProgress=true;\r\n\t\trequestAnimationFrame(()=>this._progressDrawer());//prevent progress bar drawing multi times in a frame\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nwindow.NyaP=NyaP;\r\n","import {\r\n    NyaPlayerCore,\r\n\tDomTools,\r\n\tUtils,\r\n} from '../component/NyaP-Core/index.js';\r\n\r\nimport NyaPDanmaku from '../component/NyaP-Danmaku/index.js';\r\n\r\nconst O2H=DomTools.Object2HTML;\r\n\r\n//default options\r\nconst NyaPCommonOptions={\r\n\t//for danmaku frame\r\n\tdanmaku:{\r\n\t\tenable:true,\r\n\t\tmodules:{\r\n\t\t\tTextDanmaku:{\r\n\t\t\t\tenable:true,\r\n\t\t\t\tdefaultStyles:{},\r\n\t\t\t\toptions:{},\r\n\t\t\t},\r\n\t\t},\r\n\t\tdefaultDanmakuColor:null,//a hex color(without #),default when the color inputed is invalid\r\n\t\tsend:d=>{return Promise.reject();},//the method for sending danmaku\r\n\t},\r\n\t// for ui\r\n\tuiOptions:{\r\n\t\tdanmakuColors:['fff','6cf','ff0','f00','0f0','00f','f0f','000'],//colors in the danmaku style pannel\r\n\t\tdanmakuModes:[0,3,2,1],//0:right\t1:left\t2:bottom\t3:top  ;; mode in the danmaku style pannel\r\n\t\tdanmakuSizes:[20,24,36],//danmaku size buttons in the danmaku style pannel\r\n\t\tdanmakuColor:null,//default color to fill the color option input\r\n\t\tdanmakuMode:0,//0: right to left.\r\n\t\tdanmakuSize:24,\r\n\t\tautoHideDanmakuInput:true,//hide danmakuinput after danmaku sending\r\n\t},\r\n\r\n\tloadingInfo:{//text replacement at loading time (for left-bottom message)\r\n\t\tdoneText:'ok',\r\n\t\tfailText:'failed',\r\n\t\tcontentSpliter:'...',\r\n\t},\r\n\tloadingAnimation:{\r\n\t\tstart(NP){\r\n\t\t\tNP.$('#loading_anime').innerHTML='(๑•́ ω •̀๑)';\r\n\t\t\tNP._.loadingAnimationInterval=setInterval(()=>{//loading animation\r\n\t\t\t\tNP.$('#loading_anime').style.transform=\"translate(\"+Utils.rand(-20,20)+\"px,\"+Utils.rand(-20,20)+\"px) rotate(\"+Utils.rand(-10,10)+\"deg)\";\r\n\t\t\t},80);\r\n\t\t},\r\n\t\tstop(NP){\r\n\t\t\tclearInterval(NP._.loadingAnimationInterval);\r\n\t\t\tlet lf=NP.$('#loading_frame');\r\n\t\t\tif(lf.parentNode)//remove loading animation\r\n\t\t\t\tlf.parentNode.removeChild(lf);\r\n\t\t},\r\n\t\terror(NP){\r\n\t\t\tclearInterval(NP._.loadingAnimationInterval);\r\n\t\t\tNP.$('#loading_anime').innerHTML='(๑• . •๑)';\r\n\t\t\tNP.$('#loading_anime').style.transform=\"\";\r\n\t\t},\r\n\t},\r\n\r\n\t//other common options\r\n\tplayerContainer:null,//the element for containing the player\r\n\ticons:{\r\n\t\tplay:[30,30,'<path d=\"m10.063,8.856l9.873,6.143l-9.873,6.143v-12.287z\" stroke-width=\"3\" stroke-linejoin=\"round\"/>'],\r\n\t\tdanmakuStyle:[30,30,'<path style=\"fill-opacity:0!important;\" stroke-width=\"1.4\" d=\"m21.004,8.995c-0.513,-0.513 -1.135,-0.770 -1.864,-0.770l-8.281,0c-0.729,0 -1.350,0.256 -1.864,0.770c-0.513,0.513 -0.770,1.135 -0.770,1.864l0,8.281c0,0.721 0.256,1.341 0.770,1.858c0.513,0.517 1.135,0.776 1.864,0.776l8.281,0c0.729,0 1.350,-0.258 1.864,-0.776c0.513,-0.517 0.770,-1.136 0.770,-1.858l0,-8.281c0,-0.729 -0.257,-1.350 -0.770,-1.864z\" stroke-linejoin=\"round\"/>'\r\n\t\t\t\t\t\t\t+'<path d=\"m12.142,14.031l1.888,0l0,-1.888l1.937,0l0,1.888l1.888,0l0,1.937l-1.888,0l0,1.888l-1.937,0l0,-1.888l-1.888,0l0,-1.937z\" stroke-width=\"1\"/>'],\r\n\t\tdanmakuToggle:[30,30,'<path d=\"m8.569,10.455l0,0c0,-0.767 0.659,-1.389 1.473,-1.389l0.669,0l0,0l3.215,0l6.028,0c0.390,0 0.765,0.146 1.041,0.406c0.276,0.260 0.431,0.613 0.431,0.982l0,3.473l0,0l0,2.083l0,0c0,0.767 -0.659,1.389 -1.473,1.389l-6.028,0l-4.200,3.532l0.985,-3.532l-0.669,0c-0.813,0 -1.473,-0.621 -1.473,-1.389l0,0l0,-2.083l0,0l0,-3.473z\"/>'],\r\n\t\taddDanmaku:[30,30,'<path style=\"fill-opacity:1!important\" d=\"m21.781,9.872l-1.500,-1.530c-0.378,-0.385 -0.997,-0.391 -1.384,-0.012l-0.959,0.941l2.870,2.926l0.960,-0.940c0.385,-0.379 0.392,-0.998 0.013,-1.383zm-12.134,7.532l2.871,2.926l7.593,-7.448l-2.872,-2.927l-7.591,7.449l0.000,0.000zm-1.158,2.571l-0.549,1.974l1.984,-0.511l1.843,-0.474l-2.769,-2.824l-0.509,1.835z\" stroke-width=\"0\"/>'],\r\n\t\tfullScreen:[30,30,'<path stroke-linejoin=\"round\" d=\"m11.166,9.761l-5.237,5.239l5.237,5.238l1.905,-1.905l-3.333,-3.333l3.332,-3.333l-1.904,-1.906zm7.665,0l-1.903,1.905l3.332,3.333l-3.332,3.332l1.903,1.905l5.238,-5.238l-5.238,-5.237z\" stroke-width=\"1.3\" />'],\r\n\t\tfullPage:[30,30,'<rect stroke-linejoin=\"round\" height=\"11.169\" width=\"17.655\" y=\"9.415\" x=\"6.172\" stroke-width=\"1.5\"/>'\r\n\t\t\t\t\t\t  +'<path stroke-linejoin=\"round\" d=\"m12.361,11.394l-3.604,3.605l3.605,3.605l1.311,-1.311l-2.294,-2.294l2.293,-2.294l-1.311,-1.311zm5.275,0l-1.310,1.311l2.293,2.294l-2.293,2.293l1.310,1.311l3.605,-3.605l-3.605,-3.605z\"/>'],\r\n\t\tloop:[30,30,'<path stroke-linejoin=\"round\" stroke-width=\"1\" d=\"m20.945,15.282c-0.204,-0.245 -0.504,-0.387 -0.823,-0.387c-0.583,0 -1.079,0.398 -1.205,0.969c-0.400,1.799 -2.027,3.106 -3.870,3.106c-2.188,0 -3.969,-1.780 -3.969,-3.969c0,-2.189 1.781,-3.969 3.969,-3.969c0.720,0 1.412,0.192 2.024,0.561l-0.334,0.338c-0.098,0.100 -0.127,0.250 -0.073,0.380c0.055,0.130 0.183,0.213 0.324,0.212l2.176,0.001c0.255,-0.002 0.467,-0.231 0.466,-0.482l-0.008,-2.183c-0.000,-0.144 -0.085,-0.272 -0.217,-0.325c-0.131,-0.052 -0.280,-0.022 -0.379,0.077l-0.329,0.334c-1.058,-0.765 -2.340,-1.182 -3.649,-1.182c-3.438,0 -6.236,2.797 -6.236,6.236c0,3.438 2.797,6.236 6.236,6.236c2.993,0 5.569,-2.133 6.126,-5.072c0.059,-0.314 -0.022,-0.635 -0.227,-0.882z\"/>'],\r\n\t\tvolume:[30,30,'<ellipse id=\"volume_circle\" style=\"fill-opacity:.6!important\" ry=\"6\" rx=\"6\" cy=\"15\" cx=\"15\" stroke-dasharray=\"38 90\" stroke-width=\"1.8\"/>'],\r\n\t\tdanmakuMode0:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m14.981,17.821l-7.937,-2.821l7.937,-2.821l0,1.409l7.975,0l0,2.821l-7.975,0l0,1.409l0,0.002z\"/>'],\r\n\t\tdanmakuMode1:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m15.019,12.178l7.937,2.821l-7.937,2.821l0,-1.409l-7.975,0l0,-2.821l7.975,0l0,-1.409l0,-0.002z\"/>'],\r\n\t\tdanmakuMode3:[30,30,'<path stroke-width=\"3\" d=\"m7.972,7.486l14.054,0\"/>'],\r\n\t\tdanmakuMode2:[30,30,'<path stroke-width=\"3\" d=\"m7.972,22.513l14.054,0\"/>'],\r\n\t},\r\n}\r\n\r\n//NyaP classic theme Core\r\nclass NyaPCommon extends NyaPlayerCore{\r\n\tget frame(){return this._.player||this.videoFrame;}\r\n\tget player(){return this._.player;}\r\n\tget currentPlayerMode(){return this.player.getAttribute('playerMode')||'normal';}\r\n\tget _danmakuEnabled(){return this.opt.danmaku.enable;}\r\n\tconstructor(opt){\r\n\t\tsuper(Utils.deepAssign({},NyaPCommonOptions,opt));\r\n\t\tthis.log('%c https://github.com/JiaJiaJiang/NyaP/ ','log',\"background:#6f8fa2;color:#ccc;padding:.3em\");\r\n\t\topt=this.opt;\r\n\r\n\t\tthis.$=this.$.bind(this);\r\n\t\tthis.$$=this.$$.bind(this);\r\n\r\n\t\t//language\r\n\t\tconst _t=this._t=this.i18n._.bind(this.i18n);//translate\r\n\t\t//load languages to the core\r\n\t\tlet langs=require('./langs.json');\r\n\t\tfor(let l in langs){\r\n\t\t\tthis.i18n.add(l,langs[l]);\r\n\t\t}\r\n\r\n\t\t//the video frame for NyaP and NyaPTouch\r\n\t\tthis.videoFrame=O2H(\r\n\t\t\t{_:'div',attr:{id:'video_frame'},child:[\r\n\t\t\t\tthis.video,\r\n\t\t\t\t//this.container,\r\n\t\t\t\t{_:'div',attr:{id:'loading_frame'},child:[\r\n\t\t\t\t\t{_:'div',attr:{id:'loading_anime'}},\r\n\t\t\t\t\t{_:'div',attr:{id:'loading_info'}},\r\n\t\t\t\t]},\r\n\t\t\t\t{_:'div',attr:{id:'msg_box'}},\r\n\t\t\t]}\r\n\t\t);\r\n\r\n\t\t//add private vars\r\n\t\tthis._.selectorCache={};\r\n\t\tthis._.volumeBox=new MsgBox('','info',this.$('#msg_box'));\r\n\t\tthis._.ios=!!navigator.userAgent.match(/i[A-z]+?; CPU .+?like Mac OS/);\r\n\t\tthis._.mobileX5=!!navigator.userAgent.match(/MQQBrowser/);\r\n\r\n\t\t//receive stat requests\r\n\t\tthis.on('stat',stat=>{\r\n\t\t\tlet name=_t(stat[1]);\r\n\t\t\tthis.debug('stat:',name);\r\n\t\t\tlet d=O2H({_:'div',child:[name]});\r\n\t\t\td.append(this.opt.loadingInfo.contentSpliter);\r\n\t\t\tthis.$('#loading_info').appendChild(d);\r\n\t\t\tstat[2].then(result=>{//wait for the result\r\n\t\t\t\td.append(result||this.opt.loadingInfo.doneText);\r\n\t\t\t}).catch(e=>{\r\n\t\t\t\td.append(e.message||e||this.opt.loadingInfo.failText);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t//loading animation\r\n\t\tif(opt.loadingAnimation){\r\n\t\t\topt?.loadingAnimation?.start(this);\r\n\t\t}\r\n\t\tDomTools.addEvents(this.video,{\r\n\t\t\tloadedmetadata:e=>{\r\n\t\t\t\tthis.statResult('loading_video');\r\n\t\t\t\topt?.loadingAnimation?.stop(this);\r\n\t\t\t},\r\n\t\t\terror:e=>{\r\n\t\t\t\tthis.statResult('loading_video',e?.message);\r\n\t\t\t\topt?.loadingAnimation?.error(this);\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t//load danmaku frame\r\n\t\tif(this._danmakuEnabled){\r\n\t\t\tthis.danmakuContainer=O2H({_:'div',prop:{id:'danmaku_container'}});\r\n\t\t\tthis.stat('loading_danmakuFrame',()=>{\r\n\t\t\t\tthis.Danmaku=new NyaPDanmaku(this);\r\n\t\t\t\tthis.videoFrame.insertBefore(this.danmakuContainer,this.$('#loading_frame'));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//stupid x5 core\r\n\t\tif(this._.mobileX5){\r\n\t\t\ttry{\r\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.setRendererMode(1);//force css mode\r\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.text2d.supported=false;\r\n\t\t\t}catch(e){\r\n\t\t\t\talert(e.message);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t$(selector,useCache=true){//querySelector for the frame element\r\n\t\tif(useCache&&this._.selectorCache[selector])\r\n\t\t\treturn this._.selectorCache[selector];\r\n\t\tlet el=this.frame.querySelector(selector);\r\n\t\tif(el)this._.selectorCache[selector]=el;\r\n\t\treturn el;\r\n\t}\r\n\t$$(selector){//querySelectorAll for the frame element\r\n\t\treturn this.frame.querySelectorAll(selector);\r\n\t}\r\n\tplayerMode(mode='normal'){\r\n\t\tlet ios=this._.ios;\r\n\t\tif(mode==='normal' && this.currentPlayerMode===mode)return;\r\n\t\tif(this.currentPlayerMode==='fullScreen'){\r\n\t\t\tios||DomTools.exitFullscreen().catch(e=>{});\r\n\t\t}\r\n\t\tif(mode!=='normal' && this.currentPlayerMode===mode)mode='normal';//back to normal mode\r\n\t\tswitch(mode){\r\n\t\t\tcase 'fullPage':{\r\n\t\t\t\tthis.player.setAttribute('playerMode','fullPage');\r\n\t\t\t\tthis.emit('playerModeChange',mode);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'fullScreen':{\r\n\t\t\t\tif(ios){//for ios, only fullscreen video, not the player\r\n\t\t\t\t\tDomTools.requestFullscreen(this.video);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tDomTools.requestFullscreen(this.player).then(()=>{\r\n\t\t\t\t\tthis.player.setAttribute('playerMode','fullScreen');\r\n\t\t\t\t\tthis.emit('playerModeChange',mode);\r\n\t\t\t\t}).catch(e=>{alert('Failed to enter screen mode')});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:{\r\n\t\t\t\tthis.player.setAttribute('playerMode','normal');\r\n\t\t\t\tthis.emit('playerModeChange',mode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tmsg(text,type='tip'){//type:tip|info|error\r\n\t\tlet msg=new MsgBox(text,type,this.$('#msg_box'));\r\n\t\trequestAnimationFrame(()=>msg.show());\r\n\t}\r\n\t_iconActive(name,bool){\r\n\t\tthis.$(`#icon_span_${name}`)?.classList[bool?'add':'remove']('active_icon');\r\n\t}\r\n\t_setDisplayTime(current=null,total=null){\r\n\t\t\tif(current!==null)this.$('#current_time').innerHTML=current;\r\n\t\t\tif(total!==null)this.$('#total_time').innerHTML=total;\r\n\t}\r\n\tsend(){\r\n\t\tlet color=this._.danmakuColor||this.opt.danmaku.defaultDanmakuColor,\r\n\t\t\ttext=this.$('#danmaku_input').value,\r\n\t\t\tsize=this._.danmakuSize,\r\n\t\t\tmode=this._.danmakuMode,\r\n\t\t\ttime=this.Danmaku.time,\r\n\t\t\td={color,text,size,mode,time};\r\n\r\n\t\tlet S=this.Danmaku.send(d,danmaku=>{\r\n\t\t\tif(danmaku&&danmaku._==='text')\r\n\t\t\t\tthis.$('#danmaku_input').value='';\r\n\t\t\tdanmaku.highlight=true;\r\n\t\t\tthis.Danmaku.load(danmaku,true);\r\n\t\t\tif(this.opt.uiOptions.autoHideDanmakuInput){this.danmakuInput(false);}\r\n\t\t});\r\n\r\n\t\tif(!S){\r\n\t\t\tthis.danmakuInput(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass MsgBox{\r\n\tconstructor(text,type,parentNode){\r\n\t\tthis.using=false;\r\n\t\tlet msg=this.msg=O2H({_:'div',attr:{class:`msg_type_${type}`}});\r\n\t\tmsg.addEventListener('click',()=>this.remove());\r\n\t\tthis.parentNode=parentNode;\r\n\t\tthis.setText(text);\r\n\t}\r\n\tsetTimeout(time){\r\n\t\tif(this.timeout)clearTimeout(this.timeout);\r\n\t\tthis.timeout=setTimeout(()=>this.remove(),time||Math.max((this.texts?this.texts.length:0)*0.6*1000,5000));\r\n\t}\r\n\tsetText(text){\r\n\t\tthis.msg.innerHTML='';\r\n\t\tlet e=O2H(text);\r\n\t\te&&this.msg.appendChild(e);\r\n\t\tif(text instanceof HTMLElement)text=text.textContent;\r\n\t\tlet texts=String(text).match(/\\w+|\\S/g);\r\n\t\tthis.text=text;\r\n\t\tthis.texts=texts;\r\n\t}\r\n\trenew(text,time){\r\n\t\tthis.setText(text);\r\n\t\tthis.setTimeout(time);\r\n\t\tif(!this.using)this.show();\r\n\t}\r\n\tshow(){\r\n\t\tif(this.using)return;\r\n\t\tthis.msg.style.opacity=0;\r\n\t\tif(this.parentNode && this.parentNode!==this.msg.parentNode){\r\n\t\t\tthis.parentNode.appendChild(this.msg);\r\n\t\t}\r\n\t\tthis.msg.parentNode&&setTimeout(()=>{\r\n\t\t\tthis.using=true;\r\n\t\t\tthis.msg.style.opacity=1;\r\n\t\t},0);\r\n\t\tthis.setTimeout();\r\n\t}\r\n\tremove(){\r\n\t\tif(!this.using)return;\r\n\t\tthis.using=false;\r\n\t\tthis.msg.style.opacity=0;\r\n\t\tif(this.timeout){\r\n\t\t\tclearTimeout(this.timeout);\r\n\t\t\tthis.timeout=0;\r\n\t\t}\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.msg.parentNode&&this.msg.parentNode.removeChild(this.msg);\r\n\t\t},600);\r\n\t}\r\n}\r\n\r\nexport {\r\n\tNyaPCommon,\r\n\tDomTools,\r\n\tUtils,\r\n}\r\n","module.exports={\"zh-CN\":{\"play\":\"播放\",\"Send\":\"发送\",\"Done\":\"完成\",\"loop\":\"循环\",\"pause\":\"暂停\",\"muted\":\"静音\",\"volume\":\"音量\",\"settings\":\"设置\",\"wheeling\":\"滚轮\",\"hex color\":\"Hex颜色\",\"Loading core\":\"加载核心\",\"Loading video\":\"加载视频\",\"Loading plugin\":\"加载插件\",\"full page(P)\":\"全页模式(P)\",\"Loading danmaku\":\"加载弹幕\",\"Creating player\":\"创建播放器\",\"full screen(F)\":\"全屏模式(F)\",\"danmaku toggle(D)\":\"弹幕开关(D)\",\"Input danmaku here\":\"在这里输入弹幕\",\"Loading danmaku frame\":\"加载弹幕框架\",\"danmaku input(Enter)\":\"弹幕输入框(回车)\",\"Failed to change to fullscreen mode\":\"无法切换到全屏模式\",\"loading_core\":\"加载核心\",\"loading_plugin\":\"加载插件\",\"loading_danmakuFrame\":\"加载弹幕框架\",\"creating_player\":\"创建播放器\",\"loading_danmaku\":\"加载弹幕\",\"loading_video\":\"加载视频\"}}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9jb21wb25lbnQvTnlhUC1Db3JlL2luZGV4LmpzIiwiLi4vY29tcG9uZW50L055YVAtQ29yZS9saWIvT2JqZWN0MkhUTUwuanMiLCIuLi9jb21wb25lbnQvTnlhUC1Db3JlL3NyYy9jb3JlLmpzIiwiLi4vY29tcG9uZW50L055YVAtQ29yZS9zcmMvZG9tVG9vbHMuanMiLCIuLi9jb21wb25lbnQvTnlhUC1Db3JlL3NyYy9pMThuLmpzIiwiLi4vY29tcG9uZW50L055YVAtQ29yZS9zcmMvdXRpbHMuanMiLCIuLi9jb21wb25lbnQvTnlhUC1EYW5tYWt1L2luZGV4LmpzIiwiLi4vY29tcG9uZW50L055YVAtRGFubWFrdS9saWIvTWF0L01hdC5qcyIsIi4uL2NvbXBvbmVudC9OeWFQLURhbm1ha3Uvc3JjL2Rhbm1ha3UtZnJhbWUuanMiLCIuLi9jb21wb25lbnQvTnlhUC1EYW5tYWt1L3NyYy9kYW5tYWt1LXRleHQvVGV4dENhbnZhczJELmpzIiwiLi4vY29tcG9uZW50L055YVAtRGFubWFrdS9zcmMvZGFubWFrdS10ZXh0L1RleHRDc3MuanMiLCIuLi9jb21wb25lbnQvTnlhUC1EYW5tYWt1L3NyYy9kYW5tYWt1LXRleHQvVGV4dFdlYkdMLmpzIiwiLi4vY29tcG9uZW50L055YVAtRGFubWFrdS9zcmMvZGFubWFrdS10ZXh0L1RleHRvZmYuanMiLCIuLi9jb21wb25lbnQvTnlhUC1EYW5tYWt1L3NyYy9kYW5tYWt1LXRleHQvZGFubWFrdS10ZXh0LmpzIiwiLi4vY29tcG9uZW50L055YVAtRGFubWFrdS9zcmMvZGFubWFrdS10ZXh0L3RleHRNb2R1bGVUZW1wbGF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2FycmF5L2lzLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvZGF0ZS9ub3cuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9pbnN0YW5jZS9iaW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvY29uY2F0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvY29weS13aXRoaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9pbnN0YW5jZS9maWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvZm9yLWVhY2guanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9pbnN0YW5jZS9pbmRleC1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL3JlcGVhdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL3NsaWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2Uvc29ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL3NwbGljZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL2luc3RhbmNlL3N0YXJ0cy13aXRoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvaW5zdGFuY2UvdHJpbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL29iamVjdC9hc3NpZ24uanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9vYmplY3QvY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL29iamVjdC9lbnRyaWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMtc3RhYmxlL3Byb21pc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzLXN0YWJsZS9zZXQtaW1tZWRpYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvc2V0LWludGVydmFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy1zdGFibGUvc2V0LXRpbWVvdXQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL2FycmF5L2Zyb20uanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL2FycmF5L2lzLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9nZXQtaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL2luc3RhbmNlL3NsaWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9pcy1pdGVyYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9wcm9taXNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9yZWZsZWN0L2dldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2NvcmUtanMvc3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9nZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9pbmhlcml0cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvc3VwZXJQcm9wQmFzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL3R5cGVvZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMzL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9yZWdlbmVyYXRvci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AanVnZ2xlL3Jlc2l6ZS1vYnNlcnZlci9saWIvZXhwb3J0cy9yZXNpemUtb2JzZXJ2ZXIudW1kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9hcnJheS9mcm9tLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9hcnJheS9pcy1hcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvYXJyYXkvdmlydHVhbC9jb25jYXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2FycmF5L3ZpcnR1YWwvY29weS13aXRoaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2FycmF5L3ZpcnR1YWwvZmlsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvYXJyYXkvdmlydHVhbC9mb3ItZWFjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvYXJyYXkvdmlydHVhbC9pbmRleC1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvYXJyYXkvdmlydHVhbC9zbGljZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvYXJyYXkvdmlydHVhbC9zb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9hcnJheS92aXJ0dWFsL3NwbGljZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvZGF0ZS9ub3cuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2Z1bmN0aW9uL3ZpcnR1YWwvYmluZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvaW5zdGFuY2UvYmluZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvaW5zdGFuY2UvY29uY2F0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9pbnN0YW5jZS9jb3B5LXdpdGhpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvaW5zdGFuY2UvZmlsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvaW5zdGFuY2UvaW5kZXgtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2luc3RhbmNlL3JlcGVhdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvaW5zdGFuY2Uvc2xpY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2luc3RhbmNlL3NvcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2luc3RhbmNlL3NwbGljZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvaW5zdGFuY2Uvc3RhcnRzLXdpdGguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2luc3RhbmNlL3RyaW0uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL29iamVjdC9hc3NpZ24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL29iamVjdC9jcmVhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL29iamVjdC9lbnRyaWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZXMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL3Byb21pc2UvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL3JlZmxlY3QvZ2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9zdHJpbmcvdmlydHVhbC9yZXBlYXQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL3N0cmluZy92aXJ0dWFsL3N0YXJ0cy13aXRoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9zdHJpbmcvdmlydHVhbC90cmltLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9zeW1ib2wvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL3N5bWJvbC9pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZmVhdHVyZXMvYXJyYXkvZnJvbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZmVhdHVyZXMvYXJyYXkvaXMtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL2dldC1pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZmVhdHVyZXMvaW5zdGFuY2Uvc2xpY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL2lzLWl0ZXJhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZmVhdHVyZXMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL3Byb21pc2UvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL3JlZmxlY3QvZ2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9zeW1ib2wvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ZlYXR1cmVzL3N5bWJvbC9pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1maWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jbGFzc29mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9lbnRyeS12aXJ0dWFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ZhaWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nbG9iYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oYXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2h0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtaXRlcmFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1vYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1wdXJlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvbWljcm90YXNrLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90YXNrLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1sZW5ndGguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1vYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91aWQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuZGF0ZS5ub3cuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuZnVuY3Rpb24uYmluZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gtYWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wuc2VhcmNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC5zcGVjaWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zeW1ib2wudG8tcHJpbWl0aXZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lc25leHQuYWdncmVnYXRlLWVycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFueS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lc25leHQucHJvbWlzZS50cnkuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5hc3luYy1kaXNwb3NlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuZGlzcG9zZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lc25leHQuc3ltYm9sLm9ic2VydmFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5wYXR0ZXJuLW1hdGNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5zeW1ib2wucmVwbGFjZS1hbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9hcnJheS92aXJ0dWFsL2Zvci1lYWNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvZGF0ZS9ub3cuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9iaW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2UvY29uY2F0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2UvY29weS13aXRoaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9maWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2UvZm9yLWVhY2guanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9pbmRleC1vZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL3JlcGVhdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL3NvcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9zcGxpY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9zdGFydHMtd2l0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL3RyaW0uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9vYmplY3QvYXNzaWduLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvb2JqZWN0L2VudHJpZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9wcm9taXNlL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9zdGFibGUvc2V0LWltbWVkaWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvc3RhYmxlL3NldC1pbnRlcnZhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvc3RhYmxlL3NldC10aW1lb3V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIk55YVAuanMiLCJOeWFQQ29tbW9uLmpzIiwibGFuZ3MuanNvbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0lBLElBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUE7O0FBQ0EsSUFBQSxTQUFBLEdBQUEsT0FBQSxDQUFBLG1CQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQTs7QUFDQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNQQTs7Ozs7O0FBSUEsU0FBQSxXQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsRUFBOEI7QUFDN0IsTUFBQSxHQUFBO0FBQUEsTUFBUSxDQUFDLEdBQVQsRUFBQTtBQUFB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdlRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0hBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUEsT0FBQSxHQUFBLENBQUE7O0FBQ0EsVUFBRyxLQUFBLFVBQUEsSUFBbUIsS0FBQSxVQUFBLEtBQWtCLEtBQUEsR0FBQSxDQUF4QyxVQUFBLEVBQTREO0FBQzNELGFBQUEsVUFBQSxDQUFBLFdBQUEsQ0FBNEIsS0FBNUIsR0FBQTtBQUNBOztBQUNELFdBQUEsR0FBQSxDQUFBLFVBQUEsSUFBcUIsQ0FBQSxHQUFBLFlBQUEsV0FBQSxFQUFXLFlBQUk7QUFDbkMsUUFBQSxNQUFJLENBQUosS0FBQSxHQUFBLElBQUE7QUFDQSxRQUFBLE1BQUksQ0FBSixHQUFBLENBQUEsS0FBQSxDQUFBLE9BQUEsR0FBQSxDQUFBO0FBRm9CLE9BQUEsRUFBckIsQ0FBcUIsQ0FBckI7QUFJQSxXQUFBLFVBQUE7QUFDQTs7OzZCQUNPO0FBQUEsVUFBQSxNQUFBLEdBQUEsSUFBQTs7QUFDUCxVQUFHLENBQUMsS0FBSixLQUFBLEVBQWU7QUFDZixXQUFBLEtBQUEsR0FBQSxLQUFBO0FBQ0EsV0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLE9BQUEsR0FBQSxDQUFBOztBQUNBLFVBQUcsS0FBSCxPQUFBLEVBQWdCO0FBQ2YsUUFBQSxZQUFZLENBQUMsS0FBYixPQUFZLENBQVo7QUFDQSxhQUFBLE9BQUEsR0FBQSxDQUFBO0FBQ0E7O0FBQ0QsT0FBQSxHQUFBLFlBQUEsV0FBQSxFQUFXLFlBQUk7QUFDZCxRQUFBLE1BQUksQ0FBSixHQUFBLENBQUEsVUFBQSxJQUFxQixNQUFJLENBQUosR0FBQSxDQUFBLFVBQUEsQ0FBQSxXQUFBLENBQWdDLE1BQUksQ0FBekQsR0FBcUIsQ0FBckI7QUFERCxPQUFBLEVBQUEsR0FBQTtBQUdBOzs7Ozs7QUNyU0YiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuZXhwb3J0IHtOeWFQbGF5ZXJDb3JlfSBmcm9tICcuL3NyYy9jb3JlLmpzJ1xyXG5leHBvcnQge0RvbVRvb2xzfSBmcm9tICcuL3NyYy9kb21Ub29scy5qcydcclxuZXhwb3J0IHtpMThufSBmcm9tICcuL3NyYy9pMThuLmpzJ1xyXG5leHBvcnQge1V0aWxzfSBmcm9tICcuL3NyYy91dGlscy5qcyciLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuZnVuY3Rpb24gT2JqZWN0MkhUTUwob2JqLGZ1bmMpe1xyXG5cdGxldCBlbGUsbz17fSxhPVtdO1xyXG5cdGlmKG9iaj09PW51bGwgfHwgdHlwZW9mIG9iaiAhPT0nb2JqZWN0JyllbGU9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKG9iaikpOy8vdGV4dCBub2RlXHJcblx0ZWxzZSBpZihvYmogaW5zdGFuY2VvZiBOb2RlKWVsZT1vYmo7XHJcblx0ZWxzZXtcclxuXHRcdGlmKG9iaj09PXVuZGVmaW5lZCl0aHJvdyhuZXcgVHlwZUVycm9yKGAndW5kZWZpbmVkJyByZWNlaXZlZCwgb2JqZWN0IG9yIHN0cmluZyBleHBlY3QuYCkpO1xyXG5cdFx0aWYoIW9iai5fKW9iai5fPSdkaXYnO1xyXG5cdFx0ZWxlfHwoZWxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQob2JqLl8pKTtcclxuXHRcdC8vYXR0cmlidXRlc1xyXG5cdFx0Zm9yKGxldCBbYXR0cix2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqLmF0dHJ8fG9iai5hfHxvKSlcclxuXHRcdFx0ZWxlLnNldEF0dHJpYnV0ZShhdHRyLHZhbHVlKTtcclxuXHRcdC8vcHJvcGVydGllc1xyXG5cdFx0Zm9yKGxldCBbcHJvcCx2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqLnByb3B8fG9iai5wfHxvKSlcclxuXHRcdFx0ZWxlW3Byb3BdPXZhbHVlO1xyXG5cdFx0Ly9ldmVudHNcclxuXHRcdGZvcihsZXQgW2UsY2JdIG9mIE9iamVjdC5lbnRyaWVzKG9iai5ldmVudHx8b2JqLmV8fG8pKVxyXG5cdFx0XHRlbGUuYWRkRXZlbnRMaXN0ZW5lcihlLGNiKTtcclxuXHRcdC8vY2hpbGROb2Rlc1xyXG5cdFx0Zm9yKGxldCBjIG9mIChvYmouY2hpbGR8fG9iai5jfHxhKSl7XHJcblx0XHRcdGxldCBlPU9iamVjdDJIVE1MKGMsZnVuYyk7XHJcblx0XHRcdChlIGluc3RhbmNlb2YgTm9kZSkmJmVsZS5hcHBlbmRDaGlsZChlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0ZnVuYyYmZnVuYyhlbGUpO1xyXG5cdHJldHVybiBlbGU7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE9iamVjdDJIVE1MO1xyXG5leHBvcnQge09iamVjdDJIVE1MfSIsIi8qXHJcbkNvcHlyaWdodCBsdW9qaWFAbHVvamlhLm1lXHJcbkxHUEwgbGljZW5zZVxyXG4qL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQge2kxOG59IGZyb20gJy4vaTE4bi5qcyc7XHJcbmltcG9ydCB7RG9tVG9vbHN9IGZyb20gJy4vZG9tVG9vbHMuanMnO1xyXG5pbXBvcnQge1V0aWxzfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbi8vZGVmYXVsdCBvcHRpb25zXHJcbmNvbnN0IE55YVBDb3JlT3B0aW9ucz17XHJcblx0Ly9mb3IgdmlkZW9cclxuXHRtdXRlZDpmYWxzZSwvL3NldCB2aWRlbyBtdXRlZFxyXG5cdHZvbHVtZToxLC8vc2V0IHZvbHVtZSAoMCB+IDEpIFxyXG5cdGxvb3A6ZmFsc2UsLy9zZXQgdmlkZW8gbG9vcFxyXG5cdHZpZGVvU3JjOicnLFxyXG5cdHBsdWdpbnM6W10sLy9OeWFQIGR5bmFtaWMgcGx1Z2lucyBsaXN0XHJcbn1cclxuXHJcblxyXG5jbGFzcyBOeWFQRXZlbnRFbWl0dGVye1xyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHR0aGlzLl9ldmVudHM9e307XHJcblx0fVxyXG5cdGVtaXQoZSwuLi5hcmdzKXtcclxuXHRcdHRoaXMuX3Jlc29sdmUoZSwuLi5hcmdzKTtcclxuXHRcdHRoaXMuZ2xvYmFsTGlzdGVuZXIoZSwuLi5hcmdzKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRfcmVzb2x2ZShlLC4uLmFyZ3Mpe1xyXG5cdFx0aWYoZSBpbiB0aGlzLl9ldmVudHMpe1xyXG5cdFx0XHRjb25zdCBocz10aGlzLl9ldmVudHNbZV07XHJcblx0XHRcdHRyeXtcclxuXHRcdFx0XHRmb3IobGV0IGggb2YgaHMpe1xyXG5cdFx0XHRcdFx0aWYoaC5hcHBseSh0aGlzLGFyZ3MpPT09ZmFsc2UpcmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fWNhdGNoKGVycil7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgTnlhUCBldmVudCBjYWxsYmFjayBlcnJvciBmb3IgXCIke2V9XCJgLGVycik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0YWRkRXZlbnRMaXN0ZW5lciguLi5hcmdzKXtcclxuXHRcdHJldHVybiB0aGlzLm9uKC4uLmFyZ3MpO1xyXG5cdH1cclxuXHRvbihlLGhhbmRsZSx0b3A9ZmFsc2Upe1xyXG5cdFx0aWYoIShoYW5kbGUgaW5zdGFuY2VvZiBGdW5jdGlvbikpcmV0dXJuIHRoaXM7XHJcblx0XHRpZighKGUgaW4gdGhpcy5fZXZlbnRzKSl0aGlzLl9ldmVudHNbZV09W107XHJcblx0XHRpZih0b3ApXHJcblx0XHRcdHRoaXMuX2V2ZW50c1tlXS51bnNoaWZ0KGhhbmRsZSk7XHJcblx0XHRlbHNlXHJcblx0XHRcdHRoaXMuX2V2ZW50c1tlXS5wdXNoKGhhbmRsZSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0cmVtb3ZlRXZlbnQoZSxoYW5kbGUpe1xyXG5cdFx0aWYoIShlIGluIHRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7XHJcblx0XHRpZihhcmd1bWVudHMubGVuZ3RoPT09MSl7ZGVsZXRlIHRoaXMuX2V2ZW50c1tlXTtyZXR1cm4gdGhpczt9XHJcblx0XHRsZXQgaW5kO1xyXG5cdFx0aWYoaW5kPSh0aGlzLl9ldmVudHNbZV0uaW5kZXhPZihoYW5kbGUpKT49MCl0aGlzLl9ldmVudHNbZV0uc3BsaWNlKGluZCwxKTtcclxuXHRcdGlmKHRoaXMuX2V2ZW50c1tlXS5sZW5ndGg9PT0wKWRlbGV0ZSB0aGlzLl9ldmVudHNbZV07XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0Z2xvYmFsTGlzdGVuZXIobmFtZSwuLi5hcmdzKXt9Ly9hbGwgZXZlbnRzIHdpbGwgYmUgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb25cclxufVxyXG5cclxuY2xhc3MgTnlhUGxheWVyQ29yZSBleHRlbmRzIE55YVBFdmVudEVtaXR0ZXJ7XHJcblx0c3RhdGljIGkxOG49aTE4bjtcclxuXHRzdGF0aWMgVXRpbHM9VXRpbHM7XHJcblx0c3RhdGljIERvbVRvb2xzPURvbVRvb2xzO1xyXG5cdHN0YXRpYyBOeWFQQ29yZU9wdGlvbnM9TnlhUENvcmVPcHRpb25zO1xyXG5cdHN0YXRzPVtdOy8vc3RhdHMgb2YgdGhlIHBsYXllci4gSXRlbTogW1t0aW1lLG5hbWUscHJvbWlzZSBvciByZXN1bHRdLC4uLl1cclxuXHRkZWJ1Z3M9W107Ly9kZWJ1ZyBtZXNzYWdlcy4gSXRlbTogW1t0aW1lLC4uLm1zZ3NdLC4uLl1cclxuXHRwbHVnaW5zPXt9Oy8vbG9hZGVkIGNvcmUgcGx1Z2lucy4gbmFtZT0+cGx1Z2luIG9iamVjdFxyXG5cdGkxOG49bmV3IGkxOG4oKTsvL2NvcmUgaTE4biBpbnN0YW5zZVxyXG5cdF89ey8vZm9yIHByaXZhdGUgdmFyaWFibGVzLCBkbyBub3QgY2hhbmdlIHZhcnMgaGVyZVxyXG5cdFx0dmlkZW9TcmM6JycsXHJcblx0XHR2aWRlbzpEb21Ub29scy5PYmplY3QySFRNTCh7XzondmlkZW8nLGF0dHI6e2lkOidtYWluX3ZpZGVvJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQnd2Via2l0LXBsYXlzaW5saW5lJzonJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQncGxheXNpbmxpbmUnOicnLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCd4NS1wbGF5c2lubGluZSc6JycsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0J3gtd2Via2l0LWFpcnBsYXknOidhbGxvdycsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0J2NvbnRyb2xzTGlzdCc6XCJub2Rvd25sb2FkXCIgLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCd4NS12aWRlby1wbGF5ZXItdHlwZSc6J2g1JyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQncHJlbG9hZCc6J2F1dG8nLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCdwb3N0ZXInOicnLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9fSksXHJcblx0XHR1cmxSZXNvbHZlcnM6W10sLy9mdW5jdGlvbnMgdG8gcmVzb2x2ZSB1cmxzLiBJdGVtOiBbcHJpb3JpdHksZnVuY11cclxuXHR9O1xyXG5cdGdldCB2aWRlbygpe3JldHVybiB0aGlzLl8udmlkZW87fS8vZ2V0IHZpZGVvIGVsZW1lbnRcclxuXHRnZXQgdmlkZW9TaXplKCl7cmV0dXJuIFt0aGlzLnZpZGVvLnZpZGVvV2lkdGgsdGhpcy52aWRlby52aWRlb0hlaWdodF07fVxyXG5cdGdldCB2aWRlb1NyYygpe3JldHVybiB0aGlzLl8udmlkZW9TcmM7fS8vZ2V0IGN1cnJlbnQgdmlkZW8gc3JjXHJcblxyXG5cdGNvbnN0cnVjdG9yKG9wdCl7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0bGV0IF89dGhpcy5pMThuO1xyXG5cdFx0e1xyXG5cdFx0XHRsZXQgZG9uZT10aGlzLnN0YXQoJ2xvYWRpbmdfY29yZScpO1xyXG5cdFx0XHR0aGlzLm9uKCdjb3JlTG9hZCcsKCk9PmRvbmUoKSk7XHJcblx0XHRcdHRoaXMub24oJ2NvcmVMb2FkRXJyb3InLGU9PmRvbmUoZSkpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5kZWJ1ZygnTGFuZ3VhZ2VzOicrdGhpcy5pMThuLmxhbmdzQXJyLmpvaW4oJywnKSk7XHJcblxyXG5cdFx0b3B0PXRoaXMub3B0PVV0aWxzLmRlZXBBc3NpZ24oe30sTnlhUENvcmVPcHRpb25zLG9wdCk7XHJcblx0XHQvL2FkZCBldmVudHNcclxuXHRcdHtcclxuXHRcdFx0Ly92aWRlbzp2aWRlb19sb29wQ2hhbmdlXHJcblx0XHRcdGxldCBMb29wRGVzYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCdsb29wJyk7XHJcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnZpZGVvLCdsb29wJyx7XHJcblx0XHRcdFx0Z2V0Okxvb3BEZXNjLmdldCxcclxuXHRcdFx0XHRzZXQ6Ym9vbD0+e1xyXG5cdFx0XHRcdFx0aWYoYm9vbD09PXRoaXMudmlkZW8ubG9vcClyZXR1cm47XHJcblx0XHRcdFx0XHR0aGlzLmVtaXQoJ3ZpZGVvX2xvb3BDaGFuZ2UnLGJvb2wpO1xyXG5cdFx0XHRcdFx0TG9vcERlc2Muc2V0LmNhbGwodGhpcy52aWRlbyxib29sKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHRcdERvbVRvb2xzLmFkZEV2ZW50cyh0aGlzLnZpZGVvLHtcclxuXHRcdFx0bG9hZGVkbWV0YWRhdGE6ZT0+dGhpcy5kZWJ1ZygnVmlkZW8gbG9hZGRlZCcpLFxyXG5cdFx0XHRlcnJvcjplPT50aGlzLmRlYnVnKCdWaWRlbyBlcnJvcjonLGUpLFxyXG5cdFx0XHRsb2Fkc3RhcnQ6ZT0+e3RoaXMuc3RhdCgnbG9hZGluZ192aWRlbycpfSxcclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHQvL2RlZmluZSBkZWZhdWx0IHNyYyByZXNvbHZlclxyXG5cdFx0dGhpcy5hZGRVUkxSZXNvbHZlcigodXJsKT0+e1xyXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVybCk7Ly9yZXR1cm4gdGhlIHVybFxyXG5cdFx0fSw5OTkpOy8vbW9zdCBsb3dlciBwcmlvcml0eVxyXG5cclxuXHRcdC8qb3B0cyovXHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PnsvL2FjdGl2ZSBhZnRlciBldmVudHMgYXJlIGF0dGFjaGVkXHJcblx0XHRcdFsnbXV0ZWQnLCd2b2x1bWUnLCdsb29wJ10uZm9yRWFjaChvPT57Ly9kb250IGNoYW5nZSB0aGUgb3JkZXJcclxuXHRcdFx0XHQob3B0W29dIT09dW5kZWZpbmVkKSYmKHRoaXMudmlkZW9bb109b3B0W29dKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGlmKG9wdC52aWRlb1NyYyl0aGlzLnNldFZpZGVvU3JjKG9wdC52aWRlb1NyYyk7Ly92aWRlb1NyY1xyXG5cdFx0fSk7XHJcblxyXG5cclxuXHRcdGlmKEFycmF5LmlzQXJyYXkob3B0LnBsdWdpbnMpKXsvL2xvYWQgcGx1Z2lucyxvcHQucGx1Z2lucyBpcyBhIGxpc3Qgb2YgdXJsIGZvciBwbHVnaW5zXHJcblx0XHRcdGxldCBkb25lPXRoaXMuc3RhdCgnbG9hZGluZ19wbHVnaW4nKTtcclxuXHRcdFx0bGV0IHBsdWdpbkxpc3Q9W107XHJcblx0XHRcdGZvcihsZXQgdXJsIG9mIG9wdC5wbHVnaW5zKXtcclxuXHRcdFx0XHRwbHVnaW5MaXN0LnB1c2godGhpcy5sb2FkUGx1Z2luKHVybCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFByb21pc2UuYWxsKHBsdWdpbkxpc3QpLnRoZW4oKCk9PntcclxuXHRcdFx0XHRkb25lKCk7XHJcblx0XHRcdFx0dGhpcy5lbWl0KCdjb3JlTG9hZCcpO1xyXG5cdFx0XHR9KS5jYXRjaChlPT57XHJcblx0XHRcdFx0ZG9uZShlKTtcclxuXHRcdFx0XHR0aGlzLmRlYnVnKCdjb3JlTG9hZEVycm9yJyxlKTtcclxuXHRcdFx0XHR0aGlzLmVtaXQoJ2NvcmVMb2FkRXJyb3InLGUpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0XHJcblx0XHR0aGlzLmVtaXQoJ2NvcmVMb2FkJyk7XHJcblx0fVxyXG5cdHN0YXQoc3RhdHVzTmFtZSxjYil7XHJcblx0XHRsZXQgZG9uZUZ1bmMsZmFpbEZ1bmM7XHJcblx0XHRsZXQgcmVzdWx0RnVuYz1yPT57XHJcblx0XHRcdGlmKHIgaW5zdGFuY2VvZiBFcnJvcil7XHJcblx0XHRcdFx0dGhpcy5kZWJ1ZyhyKTtcclxuXHRcdFx0XHRmYWlsRnVuYyhyLm1lc3NhZ2UpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRkb25lRnVuYyhyKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0bGV0IHA9bmV3IFByb21pc2UoKG9rLG5vKT0+e1xyXG5cdFx0XHRkb25lRnVuYz1vaztcclxuXHRcdFx0ZmFpbEZ1bmM9bm87XHJcblx0XHR9KTtcclxuXHRcdHAuY2F0Y2goZT0+e1xyXG5cdFx0XHR0aGlzLmRlYnVnKGBmYWlsIHN0YXQ6JHtlfWApO1xyXG5cdFx0fSk7XHJcblx0XHRsZXQgcz1bRGF0ZS5ub3coKSxzdGF0dXNOYW1lLHAsZG9uZUZ1bmMsZmFpbEZ1bmNdO1xyXG5cdFx0dGhpcy5zdGF0cy5wdXNoKHMpOy8vYWRkIHRvIGNvcmUgZGVidWcgbG9nXHJcblx0XHRpZihjYil7XHJcblx0XHRcdChhc3luYyAoKT0+e1xyXG5cdFx0XHRcdHRyeXtcclxuXHRcdFx0XHRcdHJlc3VsdEZ1bmMoYXdhaXQgY2IoKSk7XHJcblx0XHRcdFx0fWNhdGNoKGVycil7XHJcblx0XHRcdFx0XHRyZXN1bHRGdW5jKGVycik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KSgpO1xyXG5cdFx0fVxyXG5cdFx0c2V0VGltZW91dCgoKT0+dGhpcy5lbWl0KCdzdGF0JyxzKSwwKTtcclxuXHRcdHJldHVybiByZXN1bHRGdW5jO1xyXG5cdH1cclxuXHRzdGF0UmVzdWx0KHN0YXR1c05hbWUscmVzdWx0KXtcclxuXHRcdGZvcihsZXQgaT10aGlzLnN0YXRzLmxlbmd0aCxzO2ktLTspe1xyXG5cdFx0XHRzPXRoaXMuc3RhdHNbaV07XHJcblx0XHRcdGlmKHNbMV09PT1zdGF0dXNOYW1lKXtcclxuXHRcdFx0XHRpZihyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcil7XHJcblx0XHRcdFx0XHRzWzRdKHJlc3VsdC5tZXNzYWdlKTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdHNbM10ocmVzdWx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblx0YWRkVVJMUmVzb2x2ZXIoZnVuYyxwcmlvcml0eT0wKXtcclxuXHRcdHRoaXMuXy51cmxSZXNvbHZlcnMucHVzaChbcHJpb3JpdHksZnVuY10pO1xyXG5cdFx0dGhpcy5fLnVybFJlc29sdmVycy5zb3J0KChhLGIpPT5hWzBdLWJbMF0pOy8vc29ydCBieSBwcmlvcml0eVxyXG5cdH1cclxuXHRhc3luYyByZXNvbHZlVVJMKHVybCl7Ly9yZXNvbHZlIHRoZSB1cmwgYnkgdXJsIHJlc29sdmVyc1xyXG5cdFx0Zm9yKGxldCBuIG9mIHRoaXMuXy51cmxSZXNvbHZlcnMpe1xyXG5cdFx0XHRsZXQgZnVuYz1uWzFdO1xyXG5cdFx0XHRsZXQgcj1hd2FpdCBmdW5jKHVybCk7XHJcblx0XHRcdGlmKHI9PT1mYWxzZSl7XHJcblx0XHRcdFx0dGhpcy5kZWJ1ZyhgU3RvcCByZXNvbHZpbmcgdXJsOiAke3VybH1gKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7Ly9zdG9wIHJlc29sdmluZyB0aGUgdXJsXHJcblx0XHRcdH1cclxuXHRcdFx0aWYocil7XHJcblx0XHRcdFx0dGhpcy5kZWJ1ZygnVVJMIHJlc29sdmVyOiBbJyt1cmwrJ10gPT4gWycrcisnXScpO1xyXG5cdFx0XHRcdHJldHVybiByO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoJ05vIHVybCByZXNvbHZlciBoaXQnKTtcclxuXHR9XHJcblx0YXN5bmMgc2V0VmlkZW9TcmMocyl7XHJcblx0XHRzPXMudHJpbSgpO1xyXG5cdFx0bGV0IHVybD1hd2FpdCB0aGlzLnJlc29sdmVVUkwocyk7XHJcblx0XHRpZih1cmw9PT1mYWxzZSlyZXR1cm47Ly93b24ndCBjaGFuZ2UgdGhlIHVybCBpZiBmYWxzZSByZXR1cm5lZFxyXG5cdFx0dGhpcy5fLnZpZGVvU3JjPXM7XHJcblx0XHR0aGlzLmVtaXQoJ3NyY0NoYW5nZWQnLHMpO1xyXG5cdFx0dGhpcy52aWRlby5zcmM9dXJsO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHRwbGF5VG9nZ2xlKFN3aXRjaD10aGlzLnZpZGVvLnBhdXNlZCl7XHJcblx0XHRyZXR1cm4gdGhpcy52aWRlb1tTd2l0Y2g/J3BsYXknOidwYXVzZSddKCk7XHJcblx0fVxyXG5cdGxvYWRQbHVnaW4odXJsLG5hbWUpey8vbG9hZCBqcyBwbHVnaW5zIGZvciBOeWFQXHJcblx0XHRpZihuYW1lJiZ0aGlzLnBsdWdpbnNbbmFtZV0pey8vY2hlY2sgaWYgZXhpc3RzXHJcblx0XHRcdHRoaXMuZGVidWcoYFBsdWdpbiBhbHJlYWR5IGxvYWRlZDogJHtuYW1lfWApO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wbHVnaW5zW25hbWVdO1xyXG5cdFx0fVxyXG5cdFx0bGV0IHA9ZmV0Y2godXJsKVxyXG5cdFx0LnRoZW4ocmVzPT5yZXMudGV4dCgpKVxyXG5cdFx0LnRoZW4oYXN5bmMgc2NyaXB0PT57XHJcblx0XHRcdHNjcmlwdD1zY3JpcHQudHJpbSgpO1xyXG5cdFx0XHRsZXQgcGx1Z2luPWV2YWwoc2NyaXB0KTtcclxuXHRcdFx0aWYoKHR5cGVvZiBwbHVnaW4ubmFtZSE9PSdzdHJpbmcnKXx8IXBsdWdpbi5uYW1lKVxyXG5cdFx0XHRcdHRocm93KG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcGx1Z2luIG5hbWUnKSk7XHJcblx0XHRcdGlmKHRoaXMucGx1Z2luc1twbHVnaW4ubmFtZV0pey8vY2hlY2sgaWYgZXhpc3RzXHJcblx0XHRcdFx0dGhpcy5kZWJ1ZyhgUGx1Z2luIGFscmVhZHkgbG9hZGVkOiAke3BsdWdpbi5uYW1lfWApO1xyXG5cdFx0XHRcdHJldHVybiBwbHVnaW47XHJcblx0XHRcdH1cclxuXHRcdFx0aWYodHlwZW9mIHBsdWdpbi5pbml0PT09J2Z1bmN0aW9uJylcclxuXHRcdFx0XHRhd2FpdCBwbHVnaW4uaW5pdCh0aGlzKTsvL2luaXQgdGhlIHBsdWdpblxyXG5cdFx0XHR0aGlzLnBsdWdpbnNbcGx1Z2luLm5hbWVdPXBsdWdpbjtcclxuXHRcdFx0dGhpcy5kZWJ1ZygnUGx1Z2luIGxvYWRlZCcscGx1Z2luLm5hbWUpO1xyXG5cdFx0XHRyZXR1cm4gcGx1Z2luO1xyXG5cdFx0fSk7XHJcblx0XHRwLmNhdGNoKGU9PntcclxuXHRcdFx0dGhpcy5kZWJ1ZygnUGx1Z2luIGxvYWRpbmcgZXJyb3I6JyxlKTtcclxuXHRcdFx0Ly8gdGhpcy5lbWl0KCdwbHVnaW5Mb2FkRXJyb3InLGUpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcDtcclxuXHR9XHJcblx0bG9nKGNvbnRlbnQsdHlwZT0nbG9nJywuLi5zdHlsZXMpey8vbG9nIHRvIGNvbnNvbGVcclxuXHRcdGNvbnNvbGVbdHlwZV0oYCVjIE55YVAgJWMke2NvbnRlbnR9YCxcImJhY2tncm91bmQ6I2UwZTBlMDtwYWRkaW5nOi4yZW1cIixcImJhY2tncm91bmQ6dW5zZXRcIiwuLi5zdHlsZXMpO1xyXG5cdH1cclxuXHRkZWJ1ZyguLi5tc2cpey8vZGVidWcgbWVzc2FnZXNcclxuXHRcdGNvbnNvbGUuZGVidWcoJ055YVBbZGVidWddJywuLi5tc2cpO1xyXG5cdFx0bXNnLnVuc2hpZnQoRGF0ZS5ub3coKSk7XHJcblx0XHR0aGlzLmRlYnVncy5wdXNoKG1zZyk7XHJcblx0XHR0aGlzLmVtaXQoJ2RlYnVnJyxtc2cpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IHtcclxuXHROeWFQbGF5ZXJDb3JlLFxyXG59XHJcbiIsImltcG9ydCB7UmVzaXplT2JzZXJ2ZXIgYXMgUmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbH0gZnJvbSAnQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXInO1xyXG5pbXBvcnQge09iamVjdDJIVE1MIGFzIE8ySH0gZnJvbSAnLi4vbGliL09iamVjdDJIVE1MLmpzJztcclxuaW1wb3J0IHtVdGlsc30gZnJvbSAnLi91dGlscy5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRG9tVG9vbHN7XHJcblx0c3RhdGljIGFkZEV2ZW50cyh0YXJnZXQsZXZlbnRzKXtcclxuXHRcdGlmKCFBcnJheS5pc0FycmF5KHRhcmdldCkpdGFyZ2V0PVt0YXJnZXRdO1xyXG5cdFx0dGFyZ2V0LmZvckVhY2goZnVuY3Rpb24odCl7XHJcblx0XHRcdGlmKCFVdGlscy5pc09iamVjdCh0Ll9fTnlhUEV2ZW50c19fKSl7XHJcblx0XHRcdFx0dC5fX055YVBFdmVudHNfXz1bXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IobGV0IGUgaW4gZXZlbnRzKVxyXG5cdFx0XHRcdGUuc3BsaXQoL1xcLC9nKS5mb3JFYWNoKGZ1bmN0aW9uKGUyKXtcclxuXHRcdFx0XHRcdHQuYWRkRXZlbnRMaXN0ZW5lcihlMixldmVudHNbZV0pO1xyXG5cdFx0XHRcdFx0dC5fX055YVBFdmVudHNfXy5wdXNoKFtlMixldmVudHNbZV1dKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuICAgIHN0YXRpYyBzZXRBdHRycyhlbGUsb2JqKXsvL3NldCBtdWx0aSBhdHRycyB0byBhIEVsZW1lbnRcclxuICAgICAgICBmb3IobGV0IGEgaW4gb2JqKVxyXG4gICAgICAgICAgICBlbGUuc2V0QXR0cmlidXRlKGEsb2JqW2FdKTtcclxuICAgICAgICByZXR1cm4gZWxlO1xyXG4gICAgfVxyXG5cdHN0YXRpYyBmdWxsc2NyZWVuRWxlbWVudCgpe1xyXG5cdFx0Y29uc3QgZD1kb2N1bWVudDtcclxuXHRcdHJldHVybiBkLndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50XHJcblx0XHRcdFx0fHxkLm1zRnVsbHNjcmVlbkVsZW1lbnRcclxuXHRcdFx0XHR8fGQubW96RnVsbFNjcmVlbkVsZW1lbnRcclxuXHRcdFx0XHR8fGQuZnVsbHNjcmVlbkVsZW1lbnQ7XHJcblx0fVxyXG5cdHN0YXRpYyByZXF1ZXN0RnVsbHNjcmVlbihkPWRvY3VtZW50KXtcclxuXHRcdHRyeXtcclxuXHRcdFx0cmV0dXJuIChkLnJlcXVlc3RGdWxsc2NyZWVufHxcclxuXHRcdFx0ZC5tc1JlcXVlc3RGdWxsc2NyZWVufHxcclxuXHRcdFx0ZC5tb3pSZXF1ZXN0RnVsbFNjcmVlbnx8XHJcblx0XHRcdGQud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW58fFxyXG5cdFx0XHRkLndlYmtpdEVudGVyRnVsbFNjcmVlbilcclxuXHRcdFx0LmNhbGwoZCk7XHJcblx0XHR9Y2F0Y2goZSl7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0c3RhdGljIGV4aXRGdWxsc2NyZWVuKGQ9ZG9jdW1lbnQpe1xyXG5cdFx0dHJ5e1xyXG5cdFx0XHRyZXR1cm4gKGQuZXhpdEZ1bGxzY3JlZW58fFxyXG5cdFx0XHRcdGQubXNFeGl0RnVsbHNjcmVlbnx8XHJcblx0XHRcdFx0ZC5tb3pDYW5jZWxGdWxsU2NyZWVufHxcclxuXHRcdFx0XHRkLndlYmtpdEV4aXRGdWxsU2NyZWVufHxcclxuXHRcdFx0XHRkLndlYmtpdENhbmNlbEZ1bGxTY3JlZW4pLmNhbGwoZCk7XHJcblx0XHR9Y2F0Y2goZSl7XHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0c3RhdGljIGlzRnVsbHNjcmVlbihkPWRvY3VtZW50KXtcclxuXHRcdHJldHVybiAhIShkLmZ1bGxzY3JlZW4gfHwgZC5tb3pGdWxsU2NyZWVuIHx8IGQud2Via2l0SXNGdWxsU2NyZWVuIHx8IGQubXNGdWxsc2NyZWVuRWxlbWVudCB8fCBkLndlYmtpdERpc3BsYXlpbmdGdWxsc2NyZWVuKTtcclxuXHR9XHJcblx0c3RhdGljIE9iamVjdDJIVE1MKC4uLmFyZ3Mpe1xyXG5cdFx0cmV0dXJuIE8ySCguLi5hcmdzKTtcclxuXHR9XHJcblx0c3RhdGljIHJlc2l6ZUV2ZW50PXtcclxuXHRcdHJlc2l6ZU9ic2VydmVySW5zdGFuY2U6bnVsbCxcclxuXHRcdG9ic2VydmUoZG9tKXtcclxuXHRcdFx0aWYoIXRoaXMucmVzaXplT2JzZXJ2ZXJJbnN0YW5jZSl7XHJcblx0XHRcdFx0bGV0IFJlc2l6ZU9ic2VydmVyPXdpbmRvdy5SZXNpemVPYnNlcnZlcjtcclxuXHRcdFx0XHRpZih0eXBlb2YgIFJlc2l6ZU9ic2VydmVyIT09ICdmdW5jdGlvbicpe1xyXG5cdFx0XHRcdFx0UmVzaXplT2JzZXJ2ZXI9UmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGhpcy5yZXNpemVPYnNlcnZlckluc3RhbmNlPW5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcclxuXHRcdFx0XHRcdGZvciAobGV0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuXHRcdFx0XHRcdFx0bGV0IGVsID0gZW50cnkudGFyZ2V0O1xyXG5cdFx0XHRcdFx0XHRsZXQgZT1uZXcgRXZlbnQoJ3Jlc2l6ZScse2J1YmJsZXM6ZmFsc2UsY2FuY2VsYWJsZTp0cnVlfSk7XHJcblx0XHRcdFx0XHRcdGUuY29udGVudFJlY3Q9ZW50cnkuY29udGVudFJlY3Q7XHJcblx0XHRcdFx0XHRcdGVsLmRpc3BhdGNoRXZlbnQoZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5yZXNpemVPYnNlcnZlckluc3RhbmNlLm9ic2VydmUoZG9tKTtcclxuXHRcdH0sXHJcblx0XHR1bm9ic2VydmUoZG9tKXtcclxuXHRcdFx0aWYoIXRoaXMucmVzaXplT2JzZXJ2ZXJJbnN0YW5jZSlcclxuXHRcdFx0XHR0aHJvdyhuZXcgRXJyb3IoJ3Jlc2l6ZU9ic2VydmVyIG5vdCBpbml0aWFsaXplZCcpKTtcclxuXHRcdFx0dGhpcy5yZXNpemVPYnNlcnZlckluc3RhbmNlLnVub2JzZXJ2ZShkb20pO1xyXG5cdFx0fSxcclxuXHR9XHJcbn1cclxuXHJcbiAiLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuXHJcblxyXG4vL3BvbHlmaWxsXHJcbmlmKCFuYXZpZ2F0b3IubGFuZ3VhZ2VzKXtcclxuXHRuYXZpZ2F0b3IubGFuZ3VhZ2VzPVtuYXZpZ2F0b3IubGFuZ3VhZ2V8fG5hdmlnYXRvci5icm93c2VyTGFuZ3VhZ2VdO1xyXG59XHJcblxyXG5cclxuY2xhc3MgaTE4bntcclxuXHQvKlxyXG5cdCpAcGFyYW17b2JqZWN0fWxhbmdzIExhbmd1YWdlIHRleHQgb2JqZWN0IGluZGV4ZWQgYnkgbGFuZ3VhZ2UgY29kZVxyXG5cdCpAcGFyYW17YXJyYXl9bGFuZ3NBcnIgTGFuZ3VhZ2UgcHJpb3JpdHkgYXJyYXlcclxuXHQqL1xyXG5cdGNvbnN0cnVjdG9yKGxhbmdzPXt9LGxhbmdzQXJyPVsuLi5uYXZpZ2F0b3IubGFuZ3VhZ2VzXSl7XHJcblx0XHR0aGlzLmxhbmdzPWxhbmdzOy8vZGVmaW5lcyB0ZXh0c1xyXG5cdFx0dGhpcy5sYW5nc0Fycj1sYW5nc0FycjtcclxuXHRcdHRoaXMubGFuZ3NBcnIucHVzaCgnemgtQ04nKTsvL2FkZCB6aC1DTiBhcyBkZWZhdWx0IGxhbmd1YWdlXHJcblx0fVxyXG5cdGxhbmdzQXJyPVtdOy8vbGFuZ3VhZ2UgcHJpb3JpdHkgYXJyYXlcclxuXHRfKHN0ciwuLi5hcmdzKXsvL3RyYW5zbGF0ZVxyXG5cdFx0bGV0IHM9dGhpcy5maW5kVHJhbnNsYXRpb24oc3RyKTtcclxuXHRcdGFyZ3MubGVuZ3RoJiZhcmdzLmZvckVhY2goKGFyZyxpbmQpPT57cz1zLnJlcGxhY2UoYCQke2luZH1gLGFyZyl9KTsvL2ZpbGwgYXJncyBpbiB0aGUgc3RyaW5nXHJcblx0XHRyZXR1cm4gcztcclxuXHR9XHJcblx0ZmluZFRyYW5zbGF0aW9uKHRleHQpe1xyXG5cdFx0Zm9yKGxldCBsYW5nIG9mIHRoaXMubGFuZ3NBcnIpey8vZmluZCBieSBsYW5ndWFnZSBwcmlvcml0eVxyXG5cdFx0XHRpZigobGFuZyBpbiB0aGlzLmxhbmdzKSAmJiAodGV4dCBpbiB0aGlzLmxhbmdzW2xhbmddKSl7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMubGFuZ3NbbGFuZ11bdGV4dF07XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9mYWxsYmFjayB0byBvdGhlciBzYW1lIG1haW4gY29kZVxyXG5cdFx0XHRsZXQgY29kZT1sYW5nLm1hdGNoKC9eXFx3Ky8pWzBdO1xyXG5cdFx0XHRmb3IobGV0IGMgaW4gdGhpcy5sYW5ncyl7XHJcblx0XHRcdFx0aWYoYy5zdGFydHNXaXRoKGNvZGUpICYmICh0ZXh0IGluIHRoaXMubGFuZ3NbY10pKXtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmxhbmdzW2NdW3RleHRdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRleHQ7XHJcblx0fVxyXG5cdGFkZChsYW5nQ29kZSx0ZXh0cyl7XHJcblx0XHRpZighdGhpcy5sYW5nc1tsYW5nQ29kZV0pXHJcblx0XHRcdHRoaXMubGFuZ3NbbGFuZ0NvZGVdPXt9O1xyXG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLmxhbmdzW2xhbmdDb2RlXSx0ZXh0cyk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQge2kxOG59OyIsIlxyXG5mdW5jdGlvbiBwYWRUaW1lKG4pey8vcGFkIG51bWJlciB0byAyIGNoYXJzXHJcbiAgICByZXR1cm4gbj45JiZufHxgMCR7bn1gO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXRpbHN7XHJcbiAgICBzdGF0aWMgY2xhbXAobnVtLG1pbixtYXgpe1xyXG4gICAgICAgIHJldHVybiBudW08bWluP21pbjoobnVtPm1heD9tYXg6bnVtKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpc09iamVjdChvYmope1xyXG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZGVlcEFzc2lnbih0YXJnZXQsLi4uYXJncyl7XHJcbiAgICAgICAgLy/mnKzlh73mlbDkuI3lpITnkIblvqrnjq/lvJXnlKhcclxuICAgICAgICBsZXQgb2JqPWFyZ3Muc2hpZnQoKTtcclxuICAgICAgICBpZih0YXJnZXQ9PT1udWxsIHx8IHRhcmdldD09PXVuZGVmaW5lZCB8fCB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jyl7XHJcbiAgICAgICAgICAgIHRocm93KG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBzaG91bGQgYmUgYW4gb2JqZWN0JykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighVXRpbHMuaXNPYmplY3Qob2JqKSl7Ly9vYmrkuI3mmK/lr7nosaHliJnot7Pov4dcclxuICAgICAgICAgICAgaWYoYXJncy5sZW5ndGg9PT0wKXJldHVybiB0YXJnZXQ7Ly/msqHmnInlj4LmlbDkuoblsLHov5Tlm57nu5PmnpxcclxuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmRlZXBBc3NpZ24odGFyZ2V0LC4uLmFyZ3MpOy8v5o+Q5Y+W5LiA5Liq5Y+C5pWw5Ye65p2l57un57utXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvcihsZXQgaSBpbiBvYmopey8v6YGN5Y6Gb2JqXHJcbiAgICAgICAgICAgIGlmKFV0aWxzLmlzT2JqZWN0KG9ialtpXSkpey8v5piv5Liq5a2Q5a+56LGhXHJcbiAgICAgICAgICAgICAgICBpZighVXRpbHMuaXNPYmplY3QodGFyZ2V0W2ldKSl0YXJnZXRbaV09e307XHJcbiAgICAgICAgICAgICAgICBVdGlscy5kZWVwQXNzaWduKHRhcmdldFtpXSxvYmpbaV0pOy8v6YCS5b2SXHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldPW9ialtpXTsvL+ebtOaOpei1i+WAvFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGFyZ3MubGVuZ3RoPT09MClyZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIHJldHVybiBVdGlscy5kZWVwQXNzaWduKHRhcmdldCwuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmb3JtYXRUaW1lKHNlYyx0b3RhbCl7XHJcbiAgICAgICAgaWYodG90YWw9PXVuZGVmaW5lZCl0b3RhbD1zZWM7XHJcbiAgICAgICAgbGV0IHIscz1zZWN8MCxoPShzLzM2MDApfDA7XHJcbiAgICAgICAgaWYodG90YWw+PTM2MDApcz1zJTM2MDA7XHJcbiAgICAgICAgcj1bcGFkVGltZSgocy82MCl8MCkscGFkVGltZShzJTYwKV07XHJcbiAgICAgICAgKHRvdGFsPj0zNjAwKSYmci51bnNoaWZ0KGgpO1xyXG4gICAgICAgIHJldHVybiByLmpvaW4oJzonKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyByYW5kKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgcmV0dXJuIChtaW4rTWF0aC5yYW5kb20oKSoobWF4LW1pbikrMC41KXwwO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHRvQXJyYXkob2JqKXtcclxuICAgICAgICBpZihvYmogaW5zdGFuY2VvZiBBcnJheSlyZXR1cm4gb2JqLnNsaWNlKCk7XHJcbiAgICAgICAgaWYob2JqLmxlbmd0aCE9PXVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaik7XHJcbiAgICAgICAgcmV0dXJuIFsuLi5vYmpdO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFuaW1hdGlvbkZyYW1lTG9vcChjYil7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT57XHJcbiAgICAgICAgICAgaWYoY2IoKT09PWZhbHNlKXJldHVybjs7XHJcbiAgICAgICAgICAgVXRpbHMuYW5pbWF0aW9uRnJhbWVMb29wKGNiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyByZXF1ZXN0SWRsZUNhbGxiYWNrPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrPy5iaW5kKHdpbmRvdyl8fHNldEltbWVkaWF0ZTtcclxufVxyXG4iLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5pbXBvcnQge1V0aWxzfSBmcm9tICcuLi9OeWFQLUNvcmUvaW5kZXguanMnOy8vbG9hZCBEb21Ub29scyBmcm9tIE55YVAtQ29yZSBwcm9qZWN0XHJcbmltcG9ydCB7RGFubWFrdUZyYW1lfSBmcm9tICcuL3NyYy9kYW5tYWt1LWZyYW1lLmpzJ1xyXG5pbXBvcnQgaW5pdFRleHREYW5tYWt1IGZyb20gJy4vc3JjL2Rhbm1ha3UtdGV4dC9kYW5tYWt1LXRleHQuanMnXHJcbmluaXRUZXh0RGFubWFrdShEYW5tYWt1RnJhbWUpOy8vaW5pdCBUZXh0RGFubWFrdSBtb2RcclxuXHJcbmNvbnN0IGNvbG9yQ2hhcnM9JzAxMjM0NTY3ODlhYmNkZWYnO1xyXG5jb25zdCBkYW5tYWt1UHJvcD1bJ2NvbG9yJywndGV4dCcsJ3NpemUnLCdtb2RlJywndGltZSddO1xyXG5jbGFzcyBOeWFQRGFubWFrdSBleHRlbmRzIERhbm1ha3VGcmFtZXtcclxuXHRnZXQgb3B0KCl7cmV0dXJuIHRoaXMuY29yZS5vcHQuZGFubWFrdX07XHJcblx0Y29uc3RydWN0b3IoY29yZSl7XHJcblx0XHRzdXBlcihjb3JlLGNvcmUub3B0LmRhbm1ha3UpO1xyXG5cclxuXHRcdC8vaW5pdCBtb2RzXHJcblx0XHRmb3IobGV0IG1vZCBpbiBEYW5tYWt1RnJhbWUuYXZhaWxhYmxlTW9kdWxlcyl7XHJcblx0XHRcdGlmKHRoaXMub3B0Lm1vZHVsZXNbbW9kXT8uZW5hYmxlPT09dHJ1ZSlcclxuXHRcdFx0XHR0aGlzLmluaXRNb2R1bGUobW9kKTtcclxuXHRcdFx0XHR0aGlzLmVuYWJsZShtb2QpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc2V0TWVkaWEoY29yZS52aWRlbyk7XHJcblx0fVxyXG5cdHRvZ2dsZShuYW1lLGJvb2wpe1xyXG5cdFx0aWYodHlwZW9mIG5hbWU9PT0nYm9vbGVhbicgfHwgbmFtZT09dW5kZWZpbmVkKXsvL2Rhbm1ha3UgZnJhbWUgc3dpdGNoIG1vZGVcclxuXHRcdFx0Ym9vbD0obmFtZSE9dW5kZWZpbmVkKT9uYW1lOiF0aGlzLmVuYWJsZWQ7XHJcblx0XHRcdHRoaXNbYm9vbD8nZW5hYmxlJzonZGlzYWJsZSddKCk7XHJcblx0XHRcdHJldHVybiBib29sO1xyXG5cdFx0fVxyXG5cdFx0dHJ5ey8vbW9kdWxlIHN3aXRjaCBtb2RlXHJcblx0XHRcdGlmKGJvb2w9PXVuZGVmaW5lZClib29sPSF0aGlzLm1vZHVsZShuYW1lKS5lbmFibGVkO1xyXG5cdFx0XHR0aGlzW2Jvb2w/J2VuYWJsZSc6J2Rpc2FibGUnXShuYW1lKTtcclxuXHRcdFx0dGhpcy5jb3JlLmVtaXQoJ2Rhbm1ha3VNb2R1bGVUb2dnbGUnLG5hbWUsdGhpcy5tb2R1bGUobmFtZSk/LmVuYWJsZWQpO1xyXG5cdFx0fWNhdGNoKGUpe1xyXG5cdFx0XHR0aGlzLmNvcmUubG9nKCcnLCdlcnJvcicsZSk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHRtb2R1bGUobmFtZSl7XHJcblx0XHRyZXR1cm4gc3VwZXIubW9kdWxlc1tuYW1lXTtcclxuXHR9XHJcblx0c2VuZChvYmosY2FsbGJhY2spe1xyXG5cdFx0Zm9yKGxldCBpIG9mIGRhbm1ha3VQcm9wKVxyXG5cdFx0XHRpZigoaSBpbiBvYmopPT09ZmFsc2UpcmV0dXJuIGZhbHNlO1xyXG5cdFx0aWYoKG9iai50ZXh0fHwnJykubWF0Y2goL15cXHMqJC8pKXJldHVybiBmYWxzZTtcclxuXHRcdG9iai5jb2xvcj10aGlzLmlzVmFpbGRDb2xvcihvYmouY29sb3IpO1xyXG5cdFx0aWYob2JqLmNvbG9yKXtcclxuXHRcdFx0b2JqLmNvbG9yPW9iai5jb2xvci5yZXBsYWNlKC9cXCQvZywoKT0+e1xyXG5cdFx0XHRcdHJldHVybiBjb2xvckNoYXJzW1V0aWxzLmNsYW1wKCgxNipNYXRoLnJhbmRvbSgpKXwwLDAsMTUpXTtcclxuXHRcdFx0fSk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0b2JqLmNvbG9yPW51bGw7XHJcblx0XHR9XHJcblx0XHRpZih0aGlzLm9wdC5zZW5kIGluc3RhbmNlb2YgRnVuY3Rpb24pe1xyXG5cdFx0XHR0aGlzLm9wdC5zZW5kKG9iaixjYWxsYmFja3x8KCgpPT57fSkpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblx0aXNWYWlsZENvbG9yKGNvKXtcclxuXHRcdGlmKHR5cGVvZiBjbyAhPT0gJ3N0cmluZycpcmV0dXJuIGZhbHNlO1xyXG5cdFx0cmV0dXJuIChjbz1jby5tYXRjaCgvXlxcIz8oKFtcXGRhLWZcXCRdezN9KXsxLDJ9KSQvaSkpP2NvWzFdOmZhbHNlO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTnlhUERhbm1ha3U7XHJcbiIsIi8qXHJcbkNvcHlyaWdodCBsdW9qaWFAbHVvamlhLm1lXHJcbkxHUEwgbGljZW5zZVxyXG4qL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4oZnVuY3Rpb24oZil7XHJcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcblx0ICAgIGRlZmluZShmKTtcclxuXHR9ZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuXHQgICAgbW9kdWxlLmV4cG9ydHMgPSBmKCk7XHJcblx0fWVsc2Uge1xyXG5cdCAgICAoMCxldmFsKSgndGhpcycpLk1hdCA9IGYoKTtcclxuXHR9XHJcbn0pKGZ1bmN0aW9uKCl7XHJcbmNvbnN0IGdsb2JhbD0gKDAsZXZhbCkoJ3RoaXMnKTtcclxuY29uc3QgVHlwZWRBcnJheT1nbG9iYWwuRmxvYXQzMkFycmF5JiZnbG9iYWwuRmxvYXQzMkFycmF5LnByb3RvdHlwZTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNsYXNzKENvbnN0cnVjdG9yKXtcclxuXHRjbGFzcyBNYXRyaXh7XHJcblx0XHRjb25zdHJ1Y3RvcihsLGMsZmlsbD0wKXtcclxuXHRcdFx0dGhpcy5hcnJheT1uZXcgQ29uc3RydWN0b3IobCpjKTtcclxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuYXJyYXksJ3Jvdycse3ZhbHVlOmx9KTtcclxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuYXJyYXksJ2NvbHVtbicse3ZhbHVlOmN9KTtcclxuXHRcdFx0aWYoYXJndW1lbnRzLmxlbmd0aD09Myl7XHJcblx0XHRcdFx0aWYoTWF0cml4Ll9pbnN0YW5jZW9mVHlwZWRBcnJheSYmKGZpbGw9PT0wKSl7fVxyXG5cdFx0XHRcdGVsc2UgaWYodHlwZW9mIGZpbGwgPT09ICdudW1iZXInKXtcclxuXHRcdFx0XHRcdHRoaXMuZmlsbChmaWxsKTtcclxuXHRcdFx0XHR9ZWxzZSBpZihmaWxsLmxlbmd0aCl7XHJcblx0XHRcdFx0XHR0aGlzLnNldChmaWxsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGg7fVxyXG5cdFx0Z2V0IHJvdygpe3JldHVybiB0aGlzLmFycmF5LnJvdzt9XHJcblx0XHRnZXQgY29sdW1uKCl7cmV0dXJuIHRoaXMuYXJyYXkuY29sdW1uO31cclxuXHRcdGxlZnRNdWx0aXBseShtKXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0KE1hdHJpeC5tdWx0aXBseShtLHRoaXMsbmV3IE1hdHJpeChtLnJvdyx0aGlzLmNvbHVtbikpKTtcclxuXHRcdH1cclxuXHRcdHJpZ2h0TXVsdGlwbHkobSl7XHJcblx0XHRcdHJldHVybiB0aGlzLnNldChNYXRyaXgubXVsdGlwbHkodGhpcyxtLG5ldyBNYXRyaXgodGhpcy5yb3csbSxjb2x1bW4pKSk7XHJcblx0XHR9XHJcblx0XHRmaWxsKG4pe1xyXG5cdFx0XHRhcmd1bWVudHMubGVuZ3RofHwobj0wKTtcclxuXHRcdFx0Zm9yKGxldCBpPXRoaXMubGVuZ3RoO2ktLTspdGhpcy5hcnJheVtpXT1uO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdHNldChhcnIsb2Zmc2V0KXtcclxuXHRcdFx0b2Zmc2V0fHwob2Zmc2V0PTApO1xyXG5cdFx0XHQoYXJyIGluc3RhbmNlb2YgTWF0cml4KSYmKGFycj1hcnIuYXJyYXkpO1xyXG5cdFx0XHRmb3IobGV0IGk9KGFyci5sZW5ndGgrb2Zmc2V0KTw9dGhpcy5sZW5ndGg/YXJyLmxlbmd0aDoodGhpcy5sZW5ndGgtb2Zmc2V0KTtpLS07KVxyXG5cdFx0XHRcdHRoaXMuYXJyYXlbb2Zmc2V0K2ldPWFycltpXTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0XHRwdXQobSxyb3csY29sdW1uKXtcclxuXHRcdFx0TWF0cml4LnB1dCh0aGlzLG0scm93fHwwLGNvbHVtbnx8MCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0cm90YXRlMmQodCl7XHJcblx0XHRcdHJldHVybiB0aGlzLnNldChNYXRyaXgucm90YXRlMmQodGhpcyx0LE1hdHJpeC5NYXRyaXhlcy5UMykpO1xyXG5cdFx0fVxyXG5cdFx0dHJhbnNsYXRlMmQoeCx5KXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0KE1hdHJpeC50cmFuc2xhdGUyZCh0aGlzLHgseSxNYXRyaXguTWF0cml4ZXMuVDMpKTtcclxuXHRcdH1cclxuXHRcdHNjYWxlMmQoeCx5KXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0KE1hdHJpeC5zY2FsZTJkKHRoaXMseCx5LE1hdHJpeC5NYXRyaXhlcy5UMykpO1xyXG5cdFx0fVxyXG5cdFx0cm90YXRlM2QodHgsdHksdHope1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXQoTWF0cml4LnJvdGF0ZTNkKHRoaXMsdHgsdHksdHosTWF0cml4Lk1hdHJpeGVzLlQ0KSk7XHJcblx0XHR9XHJcblx0XHRzY2FsZTNkKHgseSx6KXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0KE1hdHJpeC5zY2FsZTNkKHRoaXMseCx5LHosTWF0cml4Lk1hdHJpeGVzLlQ0KSk7XHJcblx0XHR9XHJcblx0XHR0cmFuc2xhdGUzZCh4LHkseil7XHJcblx0XHRcdHJldHVybiB0aGlzLnNldChNYXRyaXgudHJhbnNsYXRlM2QodGhpcyx4LHkseixNYXRyaXguTWF0cml4ZXMuVDQpKTtcclxuXHRcdH1cclxuXHRcdHJvdGF0ZVgodCl7XHJcblx0XHRcdHJldHVybiB0aGlzLnNldChNYXRyaXgucm90YXRlWCh0aGlzLHQsTWF0cml4Lk1hdHJpeGVzLlQ0KSk7XHJcblx0XHR9XHJcblx0XHRyb3RhdGVZKHQpe1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXQoTWF0cml4LnJvdGF0ZVkodGhpcyx0LE1hdHJpeC5NYXRyaXhlcy5UNCkpO1xyXG5cdFx0fVxyXG5cdFx0cm90YXRlWih0KXtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0KE1hdHJpeC5yb3RhdGVaKHRoaXMsdCxNYXRyaXguTWF0cml4ZXMuVDQpKTtcclxuXHRcdH1cclxuXHRcdGNsb25lKCl7XHJcblx0XHRcdHJldHVybiBuZXcgTWF0cml4KHRoaXMucm93LHRoaXMuY29sdW1uLHRoaXMpO1xyXG5cdFx0fVxyXG5cdFx0dG9TdHJpbmcoKXtcclxuXHRcdFx0aWYodGhpcy5sZW5ndGggPT09IDApcmV0dXJuICcnO1xyXG5cdFx0XHRmb3IodmFyIGk9MCxsaW5lcz1bXSx0bXA9W107aTx0aGlzLmxlbmd0aDtpKyspe1xyXG5cdFx0XHRcdGlmKGkgJiYgKGkldGhpcy5jb2x1bW4gPT09IDApKXtcclxuXHRcdFx0XHRcdGxpbmVzLnB1c2godG1wLmpvaW4oJ1xcdCcpKTtcclxuXHRcdFx0XHRcdHRtcC5sZW5ndGg9MDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dG1wLnB1c2godGhpcy5hcnJheVtpXXx8MCk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGluZXMucHVzaCh0bXAuam9pbignXHQnKSk7XHJcblx0XHRcdHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL3N0YXRpYyBtZXRob2RzXHJcblx0XHRzdGF0aWMgSWRlbnRpdHkobil7Ly9yZXR1cm4gYSBuZXcgSWRlbnRpdHkgTWF0cml4XHJcblx0XHRcdGxldCBtPW5ldyBNYXRyaXgobixuLDApO1xyXG5cdFx0XHRmb3IobGV0IGk9bjtpLS07KW0uYXJyYXlbaSpuK2ldPTE7XHJcblx0XHRcdHJldHVybiBtO1xyXG5cdFx0fVxyXG5cdFx0c3RhdGljIFBlcnNwZWN0aXZlKGZvdnksYXNwZWN0LHpuZWFyLHpmYXIscmVzdWx0KXtcclxuXHRcdFx0dmFyIHkxPXpuZWFyKk1hdGgudGFuKGZvdnkqTWF0aC5QSS8zNjAuMCksXHJcblx0XHRcdFx0eDE9eTEqYXNwZWN0LFxyXG5cdFx0XHRcdG09cmVzdWx0fHxuZXcgTWF0cml4KDQsNCwwKSxcclxuXHRcdFx0XHRhcnI9bS5hcnJheTtcclxuXHJcblx0XHRcdGFyclswXT0yKnpuZWFyLyh4MSt4MSk7XHJcblx0XHRcdGFycls1XT0yKnpuZWFyLyh5MSt5MSk7XHJcblx0XHRcdGFyclsxMF09LSh6ZmFyK3puZWFyKS8oemZhci16bmVhcik7XHJcblx0XHRcdGFyclsxNF09LTIqemZhcip6bmVhci8oemZhci16bmVhcik7XHJcblx0XHRcdGFyclsxMV09LTE7XHJcblx0XHQgICAgaWYocmVzdWx0KWFyclsxXT1hcnJbMl09YXJyWzNdPWFycls0XT1hcnJbNl09YXJyWzddPWFycls4XT1hcnJbOV09YXJyWzEyXT1hcnJbMTNdPWFyclsxNV09MDtcclxuXHRcdCAgICByZXR1cm4gbTtcclxuXHRcdH1cclxuXHRcdHN0YXRpYyBtdWx0aXBseShhLGIscmVzdWx0KXtcclxuXHRcdFx0aWYoYS5jb2x1bW4hPT1iLnJvdyl0aHJvdygnd3JvbmcgbWF0cml4Jyk7XHJcblx0XHRcdGxldCByb3c9YS5yb3csY29sdW1uPU1hdGgubWluKGEuY29sdW1uLGIuY29sdW1uKSxyPXJlc3VsdHx8bmV3IE1hdHJpeChyb3csY29sdW1uKSxjLGksaW5kO1xyXG5cdFx0XHRmb3IobGV0IGw9cm93O2wtLTspe1xyXG5cdFx0XHRcdGZvcihjPWNvbHVtbjtjLS07KXtcclxuXHRcdFx0XHRcdHIuYXJyYXlbaW5kPShsKnIuY29sdW1uK2MpXT0wO1xyXG5cdFx0XHRcdFx0Zm9yKGk9YS5jb2x1bW47aS0tOyl7XHJcblx0XHRcdFx0XHRcdHIuYXJyYXlbaW5kXSs9KGEuYXJyYXlbbCphLmNvbHVtbitpXSpiLmFycmF5W2MraSpiLmNvbHVtbl0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcjtcclxuXHRcdH1cclxuXHRcdHN0YXRpYyBtdWx0aXBseVN0cmluZyhhLGIsYXJyYXksaWdub3JlWmVybz10cnVlKXsvL3dvcmsgb3V0IHRoZSBlcXVhdGlvbiBmb3IgZXZlcnkgZWxlbWVudHMsb25seSBmb3IgZGVidWcgYW5kIG9ubHkgd29ya3Mgd2l0aCBBcnJheSBtYXRyaXhlc1xyXG5cdFx0XHRpZihhLmNvbHVtbiE9PWIucm93KXRocm93KCd3cm9uZyBtYXRyaXgnKTtcclxuXHRcdFx0dmFyIHI9YXJyYXl8fG5ldyBNYXRyaXgoYS5yb3csYi5jb2x1bW4pLGwsYyxpLGluZDtcclxuXHRcdFx0Zm9yKGw9YS5yb3c7bC0tOyl7XHJcblx0XHRcdFx0Zm9yKGM9Yi5jb2x1bW47Yy0tOyl7XHJcblx0XHRcdFx0XHRyLmFycmF5W2luZD0obCpiLmNvbHVtbitjKV09Jyc7XHJcblx0XHRcdFx0XHRmb3IoaT0wO2k8YS5jb2x1bW47aSsrKXtcclxuXHRcdFx0XHRcdFx0aWYoaWdub3JlWmVybyAmJiAoYS5hcnJheVtsKmEuY29sdW1uK2ldPT0wIHx8Yi5hcnJheVtjK2kqYi5jb2x1bW5dPT0wKSljb250aW51ZTtcclxuXHRcdFx0XHRcdFx0ci5hcnJheVtpbmRdKz0oKChpJiZyLmFycmF5W2luZF0pPycrJzonJykrJygnK2EuYXJyYXlbbCphLmNvbHVtbitpXSsnKSooJytiLmFycmF5W2MraSpiLmNvbHVtbl0pKycpJztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHI7XHJcblx0XHR9XHJcblx0XHRzdGF0aWMgYWRkKGEsYixyZXN1bHQpe1xyXG5cdFx0XHRpZihhLmNvbHVtbiE9PWIuY29sdW1uIHx8IGEucm93IT09Yi5yb3cpdGhyb3coJ3dyb25nIG1hdHJpeCcpO1xyXG5cdFx0XHRsZXQgcj1yZXN1bHR8fG5ldyBNYXRyaXgoYS5yb3csYi5jb2x1bW4pO1xyXG5cdFx0XHRmb3IobGV0IGk9YS5sZW5ndGg7aS0tOylyLmFycmF5W2ldPWEuYXJyYXlbaV0rYi5hcnJheVtpXTtcclxuXHRcdFx0cmV0dXJuIHI7XHJcblx0XHR9XHJcblx0XHRzdGF0aWMgbWludXMoYSxiLHJlc3VsdCl7XHJcblx0XHRcdGlmKGEuY29sdW1uIT09Yi5jb2x1bW4gfHwgYS5yb3chPT1iLnJvdyl0aHJvdygnd3JvbmcgbWF0cml4Jyk7XHJcblx0XHRcdGxldCByPXJlc3VsdHx8bmV3IE1hdHJpeChhLnJvdyxiLmNvbHVtbik7XHJcblx0XHRcdGZvcihsZXQgaT1hLmxlbmd0aDtpLS07KXIuYXJyYXlbaV09YS5hcnJheVtpXS1iLmFycmF5W2ldO1xyXG5cdFx0XHRyZXR1cm4gcjtcclxuXHRcdH1cclxuXHRcdHN0YXRpYyByb3RhdGUyZChtLHQscmVzdWx0KXtcclxuXHRcdFx0Y29uc3QgTXI9TWF0cml4Lk1hdHJpeGVzLnJvdGF0ZTJkO1xyXG5cdFx0XHRNci5hcnJheVswXT1Nci5hcnJheVs0XT1NYXRoLmNvcyh0KTtcclxuXHRcdFx0TXIuYXJyYXlbMV09LShNci5hcnJheVszXT1NYXRoLnNpbih0KSk7XHJcblx0XHRcdHJldHVybiBNYXRyaXgubXVsdGlwbHkoTXIsbSxyZXN1bHR8fG5ldyBNYXRyaXgoMywzKSk7XHJcblx0XHR9XHJcblx0XHRzdGF0aWMgc2NhbGUyZChtLHgseSxyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBNcj1NYXRyaXguTWF0cml4ZXMuc2NhbGUyZDtcclxuXHRcdFx0TXIuYXJyYXlbMF09eDtcclxuXHRcdFx0TXIuYXJyYXlbNF09eTtcclxuXHRcdFx0cmV0dXJuIE1hdHJpeC5tdWx0aXBseShNcixtLHJlc3VsdHx8bmV3IE1hdHJpeCgzLDMpKTtcclxuXHRcdH1cclxuXHRcdHN0YXRpYyB0cmFuc2xhdGUyZChtLHgseSxyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBNcj1NYXRyaXguTWF0cml4ZXMudHJhbnNsYXRlMmQ7XHJcblx0XHRcdE1yLmFycmF5WzJdPXg7XHJcblx0XHRcdE1yLmFycmF5WzVdPXk7XHJcblx0XHRcdHJldHVybiBNYXRyaXgubXVsdGlwbHkoTXIsbSxyZXN1bHR8fG5ldyBNYXRyaXgoMywzKSk7XHJcblx0XHR9XHJcblx0XHRzdGF0aWMgcm90YXRlM2QobSx0eCx0eSx0eixyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBYYz1NYXRoLmNvcyh0eCksWHM9TWF0aC5zaW4odHgpLFxyXG5cdFx0XHRcdFljPU1hdGguY29zKHR5KSxZcz1NYXRoLnNpbih0eSksXHJcblx0XHRcdFx0WmM9TWF0aC5jb3ModHopLFpzPU1hdGguc2luKHR6KSxcclxuXHRcdFx0XHRNcj1NYXRyaXguTWF0cml4ZXMucm90YXRlM2Q7XHJcblx0XHRcdE1yLmFycmF5WzBdPVpjKlljO1xyXG5cdFx0XHRNci5hcnJheVsxXT1aYypZcypYcy1acypYYztcclxuXHRcdFx0TXIuYXJyYXlbMl09WmMqWXMqWGMrWnMqWHM7XHJcblx0XHRcdE1yLmFycmF5WzRdPVpzKlljO1xyXG5cdFx0XHRNci5hcnJheVs1XT1acypZcypYcytaYypYYztcclxuXHRcdFx0TXIuYXJyYXlbNl09WnMqWXMqWGMtWmMqWHM7XHJcblx0XHRcdE1yLmFycmF5WzhdPS1ZcztcclxuXHRcdFx0TXIuYXJyYXlbOV09WWMqWHM7XHJcblx0XHRcdE1yLmFycmF5WzEwXT1ZYypYYztcclxuXHRcdFx0cmV0dXJuIE1hdHJpeC5tdWx0aXBseShNcixtLHJlc3VsdHx8bmV3IE1hdHJpeCg0LDQpKTtcclxuXHRcdH1cclxuXHRcdHN0YXRpYyByb3RhdGVYKG0sdCxyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBNcj1NYXRyaXguTWF0cml4ZXMucm90YXRlWDtcclxuXHRcdFx0TXIuYXJyYXlbMTBdPU1yLmFycmF5WzVdPU1hdGguY29zKHQpO1xyXG5cdFx0XHRNci5hcnJheVs2XT0tKE1yLmFycmF5WzldPU1hdGguc2luKHQpKTtcclxuXHRcdFx0cmV0dXJuIE1hdHJpeC5tdWx0aXBseShNcixtLHJlc3VsdHx8bmV3IE1hdHJpeCg0LDQpKTtcclxuXHRcdH1cclxuXHRcdHN0YXRpYyByb3RhdGVZKG0sdCxyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBNcj1NYXRyaXguTWF0cml4ZXMucm90YXRlWTtcclxuXHRcdFx0TXIuYXJyYXlbMTBdPU1yLmFycmF5WzBdPU1hdGguY29zKHQpO1xyXG5cdFx0XHRNci5hcnJheVs4XT0tKE1yLmFycmF5WzJdPU1hdGguc2luKHQpKTtcclxuXHRcdFx0cmV0dXJuIE1hdHJpeC5tdWx0aXBseShNcixtLHJlc3VsdHx8bmV3IE1hdHJpeCg0LDQpKTtcclxuXHRcdH1cclxuXHRcdHN0YXRpYyByb3RhdGVaKG0sdCxyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBNcj1NYXRyaXguTWF0cml4ZXMucm90YXRlWjtcclxuXHRcdFx0TXIuYXJyYXlbNV09TXIuYXJyYXlbMF09TWF0aC5jb3ModCk7XHJcblx0XHRcdE1yLmFycmF5WzFdPS0oTXIuYXJyYXlbNF09TWF0aC5zaW4odCkpO1xyXG5cdFx0XHRyZXR1cm4gTWF0cml4Lm11bHRpcGx5KE1yLG0scmVzdWx0fHxuZXcgTWF0cml4KDQsNCkpO1xyXG5cdFx0fVxyXG5cdFx0c3RhdGljIHNjYWxlM2QobSx4LHkseixyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBNcj1NYXRyaXguTWF0cml4ZXMuc2NhbGUzZDtcclxuXHRcdFx0TXIuYXJyYXlbMF09eDtcclxuXHRcdFx0TXIuYXJyYXlbNV09eTtcclxuXHRcdFx0TXIuYXJyYXlbMTBdPXo7XHJcblx0XHRcdHJldHVybiBNYXRyaXgubXVsdGlwbHkoTXIsbSxyZXN1bHR8fG5ldyBNYXRyaXgoNCw0KSk7XHJcblx0XHR9XHJcblx0XHRzdGF0aWMgdHJhbnNsYXRlM2QobSx4LHkseixyZXN1bHQpe1xyXG5cdFx0XHRjb25zdCBNcj1NYXRyaXguTWF0cml4ZXMudHJhbnNsYXRlM2Q7XHJcblx0XHRcdE1yLmFycmF5WzEyXT14O1xyXG5cdFx0XHRNci5hcnJheVsxM109eTtcclxuXHRcdFx0TXIuYXJyYXlbMTRdPXo7XHJcblx0XHRcdHJldHVybiBNYXRyaXgubXVsdGlwbHkoTXIsbSxyZXN1bHR8fG5ldyBNYXRyaXgoNCw0KSk7XHJcblx0XHR9XHJcblx0XHRzdGF0aWMgcHV0KG0sc3ViLHJvdyxjb2x1bW4pe1xyXG5cdFx0XHRsZXQgYyxpbmQsaTtcclxuXHRcdFx0cm93fHwocm93PTApO1xyXG5cdFx0XHRjb2x1bW58fChjb2x1bW49MCk7XHJcblx0XHRcdGZvcihsZXQgbD1zdWIucm93O2wtLTspe1xyXG5cdFx0XHRcdGlmKGwrcm93Pj1tLnJvdyljb250aW51ZTtcclxuXHRcdFx0XHRmb3IoYz1zdWIuY29sdW1uO2MtLTspe1xyXG5cdFx0XHRcdFx0aWYoYytjb2x1bW4+PW0uY29sdW1uKWNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0bS5hcnJheVsobCtyb3cpKm0uY29sdW1uK2MrY29sdW1uXT1zdWIuYXJyYXlbbCpzdWIuY29sdW1uK2NdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0c3RhdGljIGNyZWF0ZUNsYXNzKENvbnN0cnVjdG9yKXtcclxuXHRcdFx0cmV0dXJuIGNyZWF0ZUNsYXNzKENvbnN0cnVjdG9yKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHZhciB0ZXN0QXJyYXk9bmV3IENvbnN0cnVjdG9yKDEpO1xyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXRyaXgsJ19pbnN0YW5jZW9mVHlwZWRBcnJheScse3ZhbHVlOiEhKFR5cGVkQXJyYXkmJlR5cGVkQXJyYXkuaXNQcm90b3R5cGVPZih0ZXN0QXJyYXkpKX0pO1xyXG5cdHRlc3RBcnJheT1udWxsO1xyXG5cclxuXHRNYXRyaXguTWF0cml4ZXM9ey8vZG8gbm90IG1vZGlmeSB0aGVzZSBtYXRyaXhlcyBtYW51YWxseSBhbmQgZG9udCB1c2UgdGhlbVxyXG5cdFx0STI6TWF0cml4LklkZW50aXR5KDIpLFxyXG5cdFx0STM6TWF0cml4LklkZW50aXR5KDMpLFxyXG5cdFx0STQ6TWF0cml4LklkZW50aXR5KDQpLFxyXG5cdFx0VDM6bmV3IE1hdHJpeCgzLDMsMCksXHJcblx0XHRUNDpuZXcgTWF0cml4KDQsNCwwKSxcclxuXHRcdHJvdGF0ZTJkOk1hdHJpeC5JZGVudGl0eSgzKSxcclxuXHRcdHRyYW5zbGF0ZTJkOk1hdHJpeC5JZGVudGl0eSgzKSxcclxuXHRcdHNjYWxlMmQ6TWF0cml4LklkZW50aXR5KDMpLFxyXG5cdFx0dHJhbnNsYXRlM2Q6TWF0cml4LklkZW50aXR5KDQpLFxyXG5cdFx0cm90YXRlM2Q6TWF0cml4LklkZW50aXR5KDQpLFxyXG5cdFx0cm90YXRlWDpNYXRyaXguSWRlbnRpdHkoNCksXHJcblx0XHRyb3RhdGVZOk1hdHJpeC5JZGVudGl0eSg0KSxcclxuXHRcdHJvdGF0ZVo6TWF0cml4LklkZW50aXR5KDQpLFxyXG5cdFx0c2NhbGUzZDpNYXRyaXguSWRlbnRpdHkoNCksXHJcblx0fVxyXG5cdHJldHVybiBNYXRyaXg7XHJcbn1cclxucmV0dXJuIGNyZWF0ZUNsYXNzKGdsb2JhbC5GbG9hdDMyQXJyYXk/RmxvYXQzMkFycmF5OkFycmF5KTtcclxufSk7XHJcbiIsIi8qXHJcbkNvcHlyaWdodCBsdW9qaWFAbHVvamlhLm1lXHJcbkxHUEwgbGljZW5zZVxyXG4qL1xyXG4ndXNlIHN0cmljdCc7XHJcbmltcG9ydCB7XHJcblx0RG9tVG9vbHMsXHJcblx0VXRpbHNcclxufSBmcm9tICcuLi8uLi9OeWFQLUNvcmUvaW5kZXguanMnOy8vbG9hZCBmcm9tIE55YVAtQ29yZSBwcm9qZWN0XHJcblxyXG5leHBvcnQge1xyXG5cdERvbVRvb2xzLFxyXG5cdFV0aWxzXHJcbn0gXHJcblxyXG5jbGFzcyBEYW5tYWt1RnJhbWVNb2R1bGV7XHJcblx0Y29uc3RydWN0b3IoZnJhbWUpe1xyXG5cdFx0dGhpcy5mcmFtZT1mcmFtZTtcclxuXHRcdHRoaXMuZW5hYmxlZD1mYWxzZTtcclxuXHR9XHJcblx0Z2V0IHdpZHRoKCl7cmV0dXJuIHRoaXMuZnJhbWUud2lkdGg7fVxyXG5cdGdldCBoZWlnaHQoKXtyZXR1cm4gdGhpcy5mcmFtZS5oZWlnaHQ7fVxyXG59XHJcblxyXG5cclxuY2xhc3MgRGFubWFrdUZyYW1le1xyXG5cdHN0YXRpYyBhdmFpbGFibGVNb2R1bGVzPXt9O1xyXG5cdHN0YXRpYyBhZGRNb2R1bGUobmFtZSxtb2R1bGUpe1xyXG5cdFx0aWYobmFtZSBpbiB0aGlzLmF2YWlsYWJsZU1vZHVsZXMpe1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RoZSBtb2R1bGUgXCInK25hbWUrJ1wiIGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQuJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuYXZhaWxhYmxlTW9kdWxlc1tuYW1lXT1tb2R1bGU7XHJcblx0fSBcclxuXHRnZXQgYXZhaWxhYmxlTW9kdWxlcygpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLmF2YWlsYWJsZU1vZHVsZXM7fVxyXG5cdGdldCBvcHQoKXtyZXR1cm4gdGhpcy5fb3B0fHx7fX07XHJcblx0c2V0IHRpbWUodCl7Ly9jdXJyZW50IG1lZGlhIHRpbWUgKG1zKVxyXG5cdFx0dGhpcy5tZWRpYXx8KHRoaXMudGltZUJhc2U9RGF0ZS5ub3coKS10KTtcclxuXHRcdHRoaXMubW9kdWxlRnVuY3Rpb24oJ3RpbWUnLHQpOy8vbGV0IGFsbCBtb2RzIGtub3cgd2hlbiB0aGUgdGltZSBiZSBzZXRcclxuXHR9XHJcblx0Z2V0IHRpbWUoKXtyZXR1cm4gdGhpcy5tZWRpYT8odGhpcy5tZWRpYS5jdXJyZW50VGltZSoxMDAwKTooRGF0ZS5ub3coKS10aGlzLnRpbWVCYXNlKTt9XHJcblx0Z2V0IGFyZWEoKXtyZXR1cm4gdGhpcy53aWR0aCp0aGlzLmhlaWdodDt9XHJcblx0X29wdDtcclxuXHRyYXRlPTE7XHJcblx0dGltZUJhc2U9MDsvL2ZvciBubyBmaXhlZCBkdXJhdGlvbiBldm5cclxuXHR3aWR0aD0wO1xyXG5cdGhlaWdodD0wO1xyXG5cdGZwc0xpbWl0PTA7XHJcblx0ZnBzPTA7Ly9mcHMgcmVzdWx0XHJcblx0ZnBzUmVjPW5ldyBVaW50MzJBcnJheSg5KTsvL2ZyYW1lIHRpbWUgcmVjb3JkXHJcblx0bWVkaWE9bnVsbDtcclxuXHR3b3JraW5nPWZhbHNlOy8vc2V0IHdvcmtpbmcgc3RhdFxyXG5cdGVuYWJsZWQ9dHJ1ZTsvL2lzIGVuYWJsZWRcclxuXHRtb2R1bGVzPXt9Oy8vY29uc3RydWN0ZWQgbW9kdWxlIGxpc3RcclxuXHRjb25zdHJ1Y3Rvcihjb3JlLG9wdCl7XHJcblx0XHR0aGlzLmNvcmU9Y29yZTtcclxuXHRcdHRoaXMuX29wdD1vcHQ7XHJcblx0XHR0aGlzLmNvbnRhaW5lcj1jb3JlLmRhbm1ha3VDb250YWluZXJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0Ly8gY3JlYXRlIGEgc3R5bGVTaGVldFxyXG5cdFx0Y29uc3Qgc3R5bGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XHJcblx0XHR0aGlzLnN0eWxlU2hlZXQ9c3R5bGUuc2hlZXQ7XHJcblx0XHRcclxuXHRcdHNldEltbWVkaWF0ZSgoKT0+ey8vY29udGFpbmVyIHNpemUgc2Vuc29yXHJcblx0XHRcdERvbVRvb2xzLnJlc2l6ZUV2ZW50Lm9ic2VydmUodGhpcy5jb250YWluZXIpO1xyXG5cdFx0XHREb21Ub29scy5hZGRFdmVudHModGhpcy5jb250YWluZXIse1xyXG5cdFx0XHRcdHJlc2l6ZTplPT50aGlzLnJlc2l6ZShlLmNvbnRlbnRSZWN0KSxcclxuXHRcdFx0fSk7XHJcblx0XHRcdHRoaXMucmVzaXplKCk7XHJcblx0XHR9LDApO1xyXG5cdFx0XHJcblx0XHRVdGlscy5hbmltYXRpb25GcmFtZUxvb3AoKCk9PnsvL2ZwcyByZWNvcmRlclxyXG5cdFx0XHRsZXQgcmVjPXRoaXMuZnBzUmVjLGxlbmd0aD1yZWMubGVuZ3RoO1xyXG5cdFx0XHQvL21vdmUgbGVmdFxyXG5cdFx0XHRyZWMuY29weVdpdGhpbihyZWMsMSk7XHJcblx0XHRcdHJlY1tsZW5ndGgtMV09RGF0ZS5ub3coKTsvL3NldCB0aGlzIGZyYW1lJ3MgdGltZVxyXG5cdFx0XHRsZXQgcmVzdWx0PTA7XHJcblx0XHRcdGZvcihsZXQgaT0xO2k8bGVuZ3RoO2krKyl7Ly93ZWlnaHRlZCBhdmVyYWdlXHJcblx0XHRcdFx0cmVzdWx0Kz1pKihyZWNbaV0tcmVjW2ktMV0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJlc3VsdC89bGVuZ3RoKihsZW5ndGgtMSkvMjtcclxuXHRcdFx0dGhpcy5mcHM9MTAwMC9yZXN1bHQ7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmRyYXc9dGhpcy5kcmF3LmJpbmQodGhpcyk7XHJcblxyXG5cdH1cclxuXHRlbmFibGUobmFtZSl7Ly9lbmFibGUgYSBhbWR1bGVcclxuXHRcdGlmKG5hbWU9PT11bmRlZmluZWQpey8vbm8gbmFtZSBtZWFucyBlbmFibGUgdGhpcyBmcmFtZVxyXG5cdFx0XHR0aGlzLmVuYWJsZWQ9dHJ1ZTtcclxuXHRcdFx0aWYodGhpcy5tZWRpYSl7XHJcblx0XHRcdFx0dGhpcy5tZWRpYS5wYXVzZWR8fHRoaXMucGxheSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuY29udGFpbmVyLnN0eWxlLmRpc3BsYXk9Jyc7XHJcblx0XHRcdHRoaXMuY29yZS5lbWl0KCdkYW5tYWt1RnJhbWVUb2dnbGUnLHRydWUpO1xyXG5cdFx0XHR0aGlzLmNvcmUuZGVidWcoJ2Rhbm1ha3UgZnJhbWUgZW5hYmxlZCcpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9ZWxzZSBpZighbmFtZSl7XHJcblx0XHRcdHRocm93KG5ldyBFcnJvcihgV3JvbmcgbmFtZTogJHtuYW1lfWApKTtcclxuXHRcdH1cclxuXHRcdGxldCBtb2R1bGU9dGhpcy5tb2R1bGVzW25hbWVdfHx0aGlzLmluaXRNb2R1bGUobmFtZSk7XHJcblx0XHRpZighbW9kdWxlKXJldHVybiBmYWxzZTtcclxuXHRcdG1vZHVsZS5lbmFibGVkPXRydWU7XHJcblx0XHRtb2R1bGUuZW5hYmxlJiZtb2R1bGUuZW5hYmxlKCk7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0ZGlzYWJsZShuYW1lKXtcclxuXHRcdGlmKG5hbWU9PT11bmRlZmluZWQpe1xyXG5cdFx0XHR0aGlzLnBhdXNlKCk7XHJcblx0XHRcdHRoaXMubW9kdWxlRnVuY3Rpb24oJ2NsZWFyJyk7XHJcblx0XHRcdHRoaXMuZW5hYmxlZD1mYWxzZTtcclxuXHRcdFx0dGhpcy5jb250YWluZXIuc3R5bGUuZGlzcGxheT0nbm9uZSc7XHJcblx0XHRcdHRoaXMuY29yZS5lbWl0KCdkYW5tYWt1RnJhbWVUb2dnbGUnLGZhbHNlKTtcclxuXHRcdFx0dGhpcy5jb3JlLmRlYnVnKCdkYW5tYWt1IGZyYW1lIGRpc2FibGVkJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGxldCBtb2R1bGU9dGhpcy5tb2R1bGVzW25hbWVdO1xyXG5cdFx0aWYoIW1vZHVsZSlyZXR1cm4gZmFsc2U7XHJcblx0XHRtb2R1bGUuZW5hYmxlZD1mYWxzZTtcclxuXHRcdG1vZHVsZS5kaXNhYmxlJiZtb2R1bGUuZGlzYWJsZSgpO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdGFkZFN0eWxlKHMpe1xyXG5cdFx0aWYodHlwZW9mIHMgPT09ICdzdHJpbmcnKXM9W3NdO1xyXG5cdFx0aWYocyBpbnN0YW5jZW9mIEFycmF5ID09PSBmYWxzZSlyZXR1cm47XHJcblx0XHRzLmZvckVhY2gocj0+dGhpcy5zdHlsZVNoZWV0Lmluc2VydFJ1bGUocix0aGlzLnN0eWxlU2hlZXQuY3NzUnVsZXMubGVuZ3RoKSk7XHJcblx0fVxyXG5cdGluaXRNb2R1bGUobmFtZSxhcmc9dGhpcy5vcHQubW9kdWxlc1tuYW1lXSl7XHJcblx0XHRpZih0aGlzLm1vZHVsZXNbbmFtZV0pe1xyXG5cdFx0XHRjb25zb2xlLndhcm4oYFRoZSBtb2R1bGUgWyR7bmFtZX1dIGhhcyBhbHJlYWR5IGluaXRlZC5gKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMubW9kdWxlc1tuYW1lXTtcclxuXHRcdH1cclxuXHRcdGxldCBtb2Q9RGFubWFrdUZyYW1lLmF2YWlsYWJsZU1vZHVsZXNbbmFtZV07XHJcblx0XHRpZighbW9kKXRocm93KCdNb2R1bGUgWycrbmFtZSsnXSBkb2VzIG5vdCBleGlzdC4nKTtcclxuXHRcdGxldCBtb2R1bGU9bmV3IG1vZCh0aGlzLGFyZyk7XHJcblx0XHRpZihtb2R1bGUgaW5zdGFuY2VvZiBEYW5tYWt1RnJhbWVNb2R1bGUgPT09IGZhbHNlKVxyXG5cdFx0XHR0aHJvdygnQ29uc3RydWN0b3Igb2YgJytuYW1lKycgaXMgbm90IGNoaWxkIGNsYXNzIG9mIERhbm1ha3VGcmFtZU1vZHVsZScpO1xyXG5cdFx0dGhpcy5tb2R1bGVzW25hbWVdPW1vZHVsZTtcclxuXHRcdGNvbnNvbGUuZGVidWcoYE1vZCBJbml0ZWQ6ICR7bmFtZX1gKTtcclxuXHRcdHJldHVybiBtb2R1bGU7XHJcblx0fVxyXG5cdGRyYXcoZm9yY2Upe1xyXG5cdFx0aWYoIXRoaXMud29ya2luZylyZXR1cm47XHJcblx0XHR0aGlzLm1vZHVsZUZ1bmN0aW9uKCdkcmF3Jyxmb3JjZSk7XHJcblx0XHRpZih0aGlzLmZwc0xpbWl0PD0wKXtcclxuXHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT50aGlzLmRyYXcoKSk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0c2V0VGltZW91dCh0aGlzLmRyYXcsMTAwMC90aGlzLmZwc0xpbWl0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0bG9hZCguLi5kYW5tYWt1T2JqKXtcclxuXHRcdHRoaXMubW9kdWxlRnVuY3Rpb24oJ2xvYWQnLC4uLmRhbm1ha3VPYmopO1xyXG5cdH1cclxuXHRsb2FkTGlzdChkYW5tYWt1QXJyYXkpe1xyXG5cdFx0dGhpcy5tb2R1bGVGdW5jdGlvbignbG9hZExpc3QnLGRhbm1ha3VBcnJheSk7XHJcblx0fVxyXG5cdHVubG9hZChkYW5tYWt1T2JqKXtcclxuXHRcdHRoaXMubW9kdWxlRnVuY3Rpb24oJ3VubG9hZCcsZGFubWFrdU9iaik7XHJcblx0fVxyXG5cdHBsYXkoKXtcclxuXHRcdGlmKHRoaXMud29ya2luZ3x8IXRoaXMuZW5hYmxlZClyZXR1cm47XHJcblx0XHR0aGlzLndvcmtpbmc9dHJ1ZTtcclxuXHRcdHRoaXMubW9kdWxlRnVuY3Rpb24oJ3BsYXknKTtcclxuXHRcdHRoaXMuZHJhdyh0cnVlKTtcclxuXHR9XHJcblx0cGF1c2UoKXtcclxuXHRcdGlmKCF0aGlzLmVuYWJsZWQpcmV0dXJuO1xyXG5cdFx0dGhpcy53b3JraW5nPWZhbHNlO1xyXG5cdFx0dGhpcy5tb2R1bGVGdW5jdGlvbigncGF1c2UnKTtcclxuXHR9XHJcblx0cmVzaXplKHJlY3Q9dGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpe1xyXG5cdFx0dGhpcy53aWR0aD1yZWN0LndpZHRoO1xyXG5cdFx0dGhpcy5oZWlnaHQ9cmVjdC5oZWlnaHQ7XHJcblx0XHR0aGlzLm1vZHVsZUZ1bmN0aW9uKCdyZXNpemUnLHJlY3QpO1xyXG5cdH1cclxuXHRtb2R1bGVGdW5jdGlvbihuYW1lLC4uLmFyZyl7XHJcblx0XHRsZXQgbTtcclxuXHRcdGZvcihsZXQgbiBpbiB0aGlzLm1vZHVsZXMpe1xyXG5cdFx0XHRtPXRoaXMubW9kdWxlc1tuXTtcclxuXHRcdFx0aWYobS5lbmFibGVkJiZtW25hbWVdKW1bbmFtZV0oLi4uYXJnKTtcclxuXHRcdH1cclxuXHR9XHJcblx0c2V0TWVkaWEobWVkaWEpe1xyXG5cdFx0Y29uc3QgRj10aGlzO1xyXG5cdFx0Ri5tZWRpYT1tZWRpYTtcclxuXHRcdERvbVRvb2xzLmFkZEV2ZW50cyhtZWRpYSx7XHJcblx0XHRcdHBsYXlpbmc6KCk9PkYucGxheSgpLFxyXG5cdFx0XHQncGF1c2Usc3RhbGxlZCxzZWVraW5nLHdhaXRpbmcnOigpPT5GLnBhdXNlKCksXHJcblx0XHRcdHJhdGVjaGFuZ2U6KCk9PntcclxuXHRcdFx0XHRGLnJhdGU9Ri5tZWRpYS5wbGF5YmFja1JhdGU7XHJcblx0XHRcdFx0Ri5tb2R1bGVGdW5jdGlvbigncmF0ZScsRi5yYXRlKTtcclxuXHRcdFx0fSxcclxuXHRcdH0pO1xyXG5cdFx0Ri5tb2R1bGVGdW5jdGlvbignbWVkaWEnLG1lZGlhKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQge0Rhbm1ha3VGcmFtZSxEYW5tYWt1RnJhbWVNb2R1bGV9XHJcbiIsIi8qXHJcbkNvcHlyaWdodCBsdW9qaWFAbHVvamlhLm1lXHJcbkxHUEwgbGljZW5zZVxyXG4qL1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSAnLi90ZXh0TW9kdWxlVGVtcGxhdGUuanMnO1xyXG5cclxuY2xhc3MgVGV4dENhbnZhczJEIGV4dGVuZHMgVGVtcGxhdGV7XHJcblx0Y2FudmFzO1xyXG5cdGNvbnRleHQyZDtcclxuXHRnZXQgY29udGFpbmVyKCl7cmV0dXJuIHRoaXMuY2FudmFzO31cclxuXHRjb25zdHJ1Y3RvcihkVGV4dCl7XHJcblx0XHRzdXBlcihkVGV4dCk7XHJcblx0XHR0aGlzLmNhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsvL3RoZSBjYW52YXNcclxuXHRcdHRoaXMuY29udGV4dDJkPXRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7Ly90aGUgY2FudmFzIGNvbnRleFxyXG5cdFx0aWYoIXRoaXMuY29udGV4dDJkKXtcclxuXHRcdFx0Y29uc29sZS53YXJuKCd0ZXh0IDJkIG5vdCBzdXBwb3J0ZWQnKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5jYW52YXMuY2xhc3NMaXN0LmFkZChgJHtkVGV4dC5yYW5kb21UZXh0fV9mdWxsZmlsbGApO1xyXG5cdFx0dGhpcy5jYW52YXMuaWQ9YCR7ZFRleHQucmFuZG9tVGV4dH1fdGV4dDJkYDtcclxuXHRcdHRoaXMuc3VwcG9ydGVkPXRydWU7XHJcblx0fVxyXG5cdGRyYXcoZm9yY2Upe1xyXG5cdFx0bGV0IGN0eD10aGlzLmNvbnRleHQyZCxcclxuXHRcdFx0Y1c9Y3R4LmNhbnZhcy53aWR0aCxcclxuXHRcdFx0ZFQ9dGhpcy5kVGV4dC5EYW5tYWt1VGV4dCxcclxuXHRcdFx0aT1kVC5sZW5ndGgsXHJcblx0XHRcdHQsXHJcblx0XHRcdGxlZnQsXHJcblx0XHRcdHJpZ2h0LFxyXG5cdFx0XHR2VztcclxuXHRcdGxldCBkZWJ1Zz1mYWxzZTtcclxuXHRcdGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249J2Rlc3RpbmF0aW9uLW92ZXInO1xyXG5cdFx0dGhpcy5jbGVhcihmb3JjZSk7XHJcblx0XHRmb3IoO2ktLTspe1xyXG5cdFx0XHRpZighKHQ9ZFRbaV0pLmRyYXduKSh0LmRyYXduPXRydWUpO1xyXG5cdFx0XHRsZWZ0PXQuc3R5bGUueC10LmVzdGltYXRlUGFkZGluZztcclxuXHRcdFx0cmlnaHQ9bGVmdCt0Ll9jYWNoZS53aWR0aDtcclxuXHRcdFx0aWYobGVmdD5jVyB8fCByaWdodDwwKXtjb250aW51ZTt9Ly9pZ25vcmUgZGFubWFrdXMgb3V0IG9mIHRoZSBzY3JlZW5cclxuXHRcdFx0aWYoZGVidWcpe1xyXG5cdFx0XHRcdGN0eC5zYXZlKCk7XHJcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZT0ncmdiYSgyNTUsMjU1LDI1NSwwLjMpJztcclxuXHRcdFx0XHRjdHguZmlsbFJlY3QobGVmdCx0LnN0eWxlLnktdC5lc3RpbWF0ZVBhZGRpbmcsdC5fY2FjaGUud2lkdGgsdC5fY2FjaGUuaGVpZ2h0KTtcclxuXHRcdFx0XHRjdHgucmVzdG9yZSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGNXPj10Ll9jYWNoZS53aWR0aCl7Ly9kYW5tYWt1IHdoaWNoIGlzIHNtYWxsZXIgdGhhbiBjYW52YXMgd2lkdGhcclxuXHRcdFx0XHRjdHguZHJhd0ltYWdlKHQuX2JpdG1hcHx8dC5fY2FjaGUsIGxlZnQsIHQuc3R5bGUueS10LmVzdGltYXRlUGFkZGluZyk7XHJcblx0XHRcdH1lbHNley8vb25seSBkcmF3IHRoZSBwYXJ0IG9uIHNjcmVlbiBpZiB0aGUgZGFubWF1IG92ZXJmbG93XHJcblx0XHRcdFx0dlc9dC5fY2FjaGUud2lkdGgrKGxlZnQ8MD9sZWZ0OjApLShyaWdodD5jVz9yaWdodC1jVzowKVxyXG5cdFx0XHRcdGN0eC5kcmF3SW1hZ2UodC5fYml0bWFwfHx0Ll9jYWNoZSxcclxuXHRcdFx0XHRcdChsZWZ0PDApPy1sZWZ0OjAsMCxcclxuXHRcdFx0XHRcdFx0XHR2Vyx0Ll9jYWNoZS5oZWlnaHQsXHJcblx0XHRcdFx0XHQobGVmdDwwKT8wOmxlZnQsdC5zdHlsZS55LXQuZXN0aW1hdGVQYWRkaW5nLFxyXG5cdFx0XHRcdFx0XHRcdHZXLHQuX2NhY2hlLmhlaWdodCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0Y2xlYXIoZm9yY2Upe1xyXG5cdFx0Y29uc3QgRD10aGlzLmRUZXh0O1xyXG5cdFx0aWYoZm9yY2V8fHRoaXMuX2V2YWx1YXRlSWZGdWxsQ2xlYXJNb2RlKCkpe1xyXG5cdFx0XHR0aGlzLmNvbnRleHQyZC5jbGVhclJlY3QoMCwwLHRoaXMuY2FudmFzLndpZHRoLHRoaXMuY2FudmFzLmhlaWdodCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGZvcihsZXQgaT1ELkRhbm1ha3VUZXh0Lmxlbmd0aCx0O2ktLTspe1xyXG5cdFx0XHR0PUQuRGFubWFrdVRleHRbaV07XHJcblx0XHRcdGlmKHQuZHJhd24pXHJcblx0XHRcdFx0dGhpcy5jb250ZXh0MmQuY2xlYXJSZWN0KHQuc3R5bGUueC10LmVzdGltYXRlUGFkZGluZyx0LnN0eWxlLnktdC5lc3RpbWF0ZVBhZGRpbmcsdC5fY2FjaGUud2lkdGgsdC5fY2FjaGUuaGVpZ2h0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0X2V2YWx1YXRlSWZGdWxsQ2xlYXJNb2RlKCl7XHJcblx0XHRpZih0aGlzLmRUZXh0LkRhbm1ha3VUZXh0Lmxlbmd0aD4zKXJldHVybiB0cnVlO1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRkZWxldGVSZWxhdGVkVGV4dE9iamVjdCh0KXtcclxuXHRcdGlmKHQuX2JpdG1hcCl7XHJcblx0XHRcdHQuX2JpdG1hcC5jbG9zZSgpO1xyXG5cdFx0XHR0Ll9iaXRtYXA9bnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblx0cmVzaXplKCl7XHJcblx0XHRsZXQgRD10aGlzLmRUZXh0LEM9dGhpcy5jYW52YXM7XHJcblx0XHRDLndpZHRoPUQud2lkdGg7XHJcblx0XHRDLmhlaWdodD1ELmhlaWdodDtcclxuXHR9XHJcblx0ZW5hYmxlKCl7XHJcblx0XHR0aGlzLmRyYXcoKTtcclxuXHRcdHRoaXMuZFRleHQudXNlSW1hZ2VCaXRtYXA9dHJ1ZTtcclxuXHR9XHJcblx0ZGlzYWJsZSgpe1xyXG5cdFx0Zm9yKGxldCB0b2JqIG9mIHRoaXMuZFRleHQuRGFubWFrdVRleHQpe1xyXG5cdFx0XHR0aGlzLmRlbGV0ZVJlbGF0ZWRUZXh0T2JqZWN0KHRvYmopO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5jbGVhcih0cnVlKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRDYW52YXMyRDsiLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuaW1wb3J0IFRlbXBsYXRlIGZyb20gJy4vdGV4dE1vZHVsZVRlbXBsYXRlLmpzJztcclxuXHJcbmNsYXNzIFRleHRDc3MgZXh0ZW5kcyBUZW1wbGF0ZXtcclxuXHRjb25zdHJ1Y3RvcihkVGV4dCl7XHJcblx0XHRzdXBlcihkVGV4dCk7XHJcblx0XHR0aGlzLnN1cHBvcnRlZD1kVGV4dC50ZXh0MmQuc3VwcG9ydGVkO1xyXG5cdFx0aWYoIXRoaXMuc3VwcG9ydGVkKXJldHVybjtcclxuXHRcdGRUZXh0LmZyYW1lLmFkZFN0eWxlKFtgIyR7ZFRleHQucmFuZG9tVGV4dH1fdGV4dENhbnZhc0NvbnRhaW5lciBjYW52YXN7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtO3RvcDowO2xlZnQ6MDtwb3NpdGlvbjphYnNvbHV0ZTt9YCxcclxuXHRcdFx0XHRcdFx0XHRcdGAjJHtkVGV4dC5yYW5kb21UZXh0fV90ZXh0Q2FudmFzQ29udGFpbmVyLm1vdmluZyBjYW52YXN7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gNTAwcyBsaW5lYXI7fWAsXHJcblx0XHRcdFx0XHRcdFx0XHRgIyR7ZFRleHQucmFuZG9tVGV4dH1fdGV4dENhbnZhc0NvbnRhaW5lcnt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07cG9pbnRlci1ldmVudHM6bm9uZTtvdmVyZmxvdzpoaWRkZW47fWBdKTtcclxuXHJcblx0XHR0aGlzLmNvbnRhaW5lcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsvL2ZvciB0ZXh0IGNhbnZhc1xyXG5cdFx0dGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChgJHtkVGV4dC5yYW5kb21UZXh0fV9mdWxsZmlsbGApO1xyXG5cdFx0dGhpcy5jb250YWluZXIuaWQ9YCR7ZFRleHQucmFuZG9tVGV4dH1fdGV4dENhbnZhc0NvbnRhaW5lcmA7XHJcblx0fVxyXG5cdF90b2dnbGUocyl7XHJcblx0XHRsZXQgRD10aGlzLmRUZXh0LFQ9RC5mcmFtZS50aW1lO1xyXG5cdFx0dGhpcy5jb250YWluZXIuY2xhc3NMaXN0W3M/J2FkZCc6J3JlbW92ZSddKCdtb3ZpbmcnKTtcclxuXHRcdGZvcihsZXQgaT1ELkRhbm1ha3VUZXh0Lmxlbmd0aCx0O2ktLTspe1xyXG5cdFx0XHRpZigodD1ELkRhbm1ha3VUZXh0W2ldKS5kYW5tYWt1Lm1vZGU+PTIpY29udGludWU7XHJcblx0XHRcdGlmKHMpe3JlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+dGhpcy5fbW92ZSh0KSk7fVxyXG5cdFx0XHRlbHNle3RoaXMuX21vdmUodCxUKTt9XHJcblx0XHR9XHJcblx0fVxyXG5cdGNsZWFyKCl7XHJcblx0XHR0aGlzLmNvbnRhaW5lci5pbm5lckhUTUw9Jyc7XHJcblx0fVxyXG5cdHBhdXNlKCl7XHJcblx0XHR0aGlzLl90b2dnbGUoZmFsc2UpO1xyXG5cdH1cclxuXHRwbGF5KCl7XHJcblx0XHR0aGlzLl90b2dnbGUodHJ1ZSk7XHJcblx0fVxyXG5cdHJhdGUoKXtcclxuXHRcdHRoaXMucmVzZXRQb3MoKTtcclxuXHR9XHJcblx0X21vdmUodCxUKXtcclxuXHRcdGlmKCF0LmRhbm1ha3UpcmV0dXJuO1xyXG5cdFx0aWYoVD09PXVuZGVmaW5lZClUPXRoaXMuZFRleHQuZnJhbWUudGltZSs1MDAwMDA7XHJcblx0XHR0Ll9jYWNoZS5zdHlsZS50cmFuc2Zvcm09YHRyYW5zbGF0ZSgkeygoKHRoaXMuZFRleHQuX2NhbGNTaWRlRGFubWFrdVBvc2l0aW9uKHQsVCktdC5lc3RpbWF0ZVBhZGRpbmcpKjEwKXwwKS8xMH1weCwke3Quc3R5bGUueS10LmVzdGltYXRlUGFkZGluZ31weClgO1xyXG5cdH1cclxuXHRyZXNldFBvcygpe1xyXG5cdFx0dGhpcy5wYXVzZSgpO1xyXG5cdFx0dGhpcy5kVGV4dC5wYXVzZWR8fHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+dGhpcy5wbGF5KCkpO1xyXG5cdH1cclxuXHRyZXNpemUoKXtcclxuXHRcdHRoaXMucmVzZXRQb3MoKTtcclxuXHR9XHJcblx0cmVtb3ZlKHQpe1xyXG5cdFx0dC5fY2FjaGUucGFyZW50Tm9kZSYmdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodC5fY2FjaGUpO1xyXG5cdH1cclxuXHRlbmFibGUoKXtcclxuXHRcdHRoaXMuZFRleHQudXNlSW1hZ2VCaXRtYXA9ZmFsc2U7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PntcclxuXHRcdFx0dGhpcy5kVGV4dC5EYW5tYWt1VGV4dC5mb3JFYWNoKHQ9PnRoaXMubmV3RGFubWFrdSh0KSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0ZGlzYWJsZSgpe1xyXG5cdFx0dGhpcy5jb250YWluZXIuaW5uZXJIVE1MPScnO1xyXG5cdH1cclxuXHRuZXdEYW5tYWt1KHQpe1xyXG5cdFx0dC5fY2FjaGUuc3R5bGUudHJhbnNmb3JtPWB0cmFuc2xhdGUoJHt0LnN0eWxlLngtdC5lc3RpbWF0ZVBhZGRpbmd9cHgsJHt0LnN0eWxlLnktdC5lc3RpbWF0ZVBhZGRpbmd9cHgpYDtcclxuXHRcdHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHQuX2NhY2hlKTtcclxuXHRcdHQuZGFubWFrdS5tb2RlPDImJiF0aGlzLmRUZXh0LnBhdXNlZCYmcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT50aGlzLl9tb3ZlKHQpKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0Q3NzO1xyXG4iLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuaW1wb3J0IE1hdCBmcm9tICcuLi8uLi9saWIvTWF0L01hdC5qcydcclxuaW1wb3J0IFRlbXBsYXRlIGZyb20gJy4vdGV4dE1vZHVsZVRlbXBsYXRlLmpzJztcclxuaW1wb3J0IHtVdGlsc30gZnJvbSAnLi4vZGFubWFrdS1mcmFtZS5qcyc7XHJcblxyXG5jbGFzcyBUZXh0V2ViR0wgZXh0ZW5kcyBUZW1wbGF0ZXtcclxuXHRnZXQgY29udGFpbmVyKCl7cmV0dXJuIHRoaXMuYzNkO31cclxuXHRjb25zdHJ1Y3RvcihkVGV4dCl7XHJcblx0XHRzdXBlcihkVGV4dCk7XHJcblx0XHRsZXQgYzNkPXRoaXMuYzNkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG5cdFx0YzNkLmNsYXNzTGlzdC5hZGQoYCR7ZFRleHQucmFuZG9tVGV4dH1fZnVsbGZpbGxgKTtcclxuXHRcdGMzZC5pZD1gJHtkVGV4dC5yYW5kb21UZXh0fV90ZXh0M2RgO1xyXG5cdFx0Ly9pbml0IHdlYmdsXHJcblx0XHRjb25zdCBnbD10aGlzLmdsPWMzZC5nZXRDb250ZXh0KCd3ZWJnbCcpfHxjM2QuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJyk7Ly90aGUgY2FudmFzM2QgY29udGV4dFxyXG5cdFx0aWYoIWdsKXtcclxuXHRcdFx0Y29uc29sZS53YXJuKCd0ZXh0IDNkIG5vdCBzdXBwb3J0ZWQnKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0Ly9zaGFkZXJcclxuXHRcdHZhciBzaGFkZXJzPXtcclxuXHRcdFx0ZGFubWFrdUZyYWc6W2dsLkZSQUdNRU5UX1NIQURFUixgXHJcblx0XHRcdFx0I3ByYWdtYSBvcHRpbWl6ZShvbilcclxuXHRcdFx0XHRwcmVjaXNpb24gbG93cCBmbG9hdDtcclxuXHRcdFx0XHR2YXJ5aW5nIGxvd3AgdmVjMiB2RGFubWFrdVRleENvb3JkO1xyXG5cdFx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyO1xyXG5cdFx0XHRcdHZvaWQgbWFpbih2b2lkKSB7XHJcblx0XHRcdFx0XHR2ZWM0IGNvPXRleHR1cmUyRCh1U2FtcGxlcix2RGFubWFrdVRleENvb3JkKTtcclxuXHRcdFx0XHRcdGlmKGNvLmEgPT0gMC4wKWRpc2NhcmQ7XHJcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IgPSBjbztcclxuXHRcdFx0XHR9YFxyXG5cdFx0XHRdLFxyXG5cdFx0XHRkYW5tYWt1VmVydDpbZ2wuVkVSVEVYX1NIQURFUixgXHJcblx0XHRcdFx0I3ByYWdtYSBvcHRpbWl6ZShvbilcclxuXHRcdFx0XHRhdHRyaWJ1dGUgdmVjMiBhVmVydGV4UG9zaXRpb247XHJcblx0XHRcdFx0YXR0cmlidXRlIHZlYzIgYURhbm1ha3VUZXhDb29yZDtcclxuXHRcdFx0XHR1bmlmb3JtIG1hdDQgdTJkQ29vcmRpbmF0ZTtcclxuXHRcdFx0XHR2YXJ5aW5nIGxvd3AgdmVjMiB2RGFubWFrdVRleENvb3JkO1xyXG5cdFx0XHRcdHZvaWQgbWFpbih2b2lkKSB7XHJcblx0XHRcdFx0XHRnbF9Qb3NpdGlvbiA9IHUyZENvb3JkaW5hdGUgKiB2ZWM0KGFWZXJ0ZXhQb3NpdGlvbiwwLDEpO1xyXG5cdFx0XHRcdFx0dkRhbm1ha3VUZXhDb29yZCA9IGFEYW5tYWt1VGV4Q29vcmQ7XHJcblx0XHRcdFx0fWBcclxuXHRcdFx0XSxcclxuXHRcdH1cclxuXHRcdGZ1bmN0aW9uIHNoYWRlcihuYW1lKXtcclxuXHRcdFx0dmFyIHM9Z2wuY3JlYXRlU2hhZGVyKHNoYWRlcnNbbmFtZV1bMF0pO1xyXG5cdFx0XHRnbC5zaGFkZXJTb3VyY2UocyxzaGFkZXJzW25hbWVdWzFdKTtcclxuXHRcdFx0Z2wuY29tcGlsZVNoYWRlcihzKTtcclxuXHRcdFx0aWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIocyxnbC5DT01QSUxFX1NUQVRVUykpXHJcblx0XHRcdFx0dGhyb3coXCJBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcnM6IFwiICsgZ2wuZ2V0U2hhZGVySW5mb0xvZyhzKSk7XHJcblx0XHRcdHJldHVybiBzO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGZyYWdtZW50U2hhZGVyID0gc2hhZGVyKFwiZGFubWFrdUZyYWdcIik7XHJcblx0XHR2YXIgdmVydGV4U2hhZGVyID0gc2hhZGVyKFwiZGFubWFrdVZlcnRcIik7XHJcblx0XHR2YXIgc2hhZGVyUHJvZ3JhbSA9IHRoaXMuc2hhZGVyUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuXHRcdGdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLHZlcnRleFNoYWRlcik7XHJcblx0XHRnbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSxmcmFnbWVudFNoYWRlcik7XHJcblx0XHRnbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcclxuXHRcdGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihzaGFkZXJQcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBpbml0aWFsaXplIHRoZSBzaGFkZXIgcHJvZ3JhbS5cIik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG5cdFx0Ly9zY2VuZVxyXG5cdFx0Z2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwLjApO1xyXG5cdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcclxuXHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSAsZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcblx0XHR0aGlzLm1heFRleFNpemU9Z2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9URVhUVVJFX1NJWkUpO1xyXG5cclxuXHRcdHRoaXMudVNhbXBsZXI9Z2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sXCJ1U2FtcGxlclwiKTtcclxuXHRcdHRoaXMudTJkQ29vcmQ9Z2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sXCJ1MmRDb29yZGluYXRlXCIpO1xyXG5cdFx0dGhpcy5hVmVydGV4UG9zaXRpb249Z2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSxcImFWZXJ0ZXhQb3NpdGlvblwiKTtcclxuXHRcdHRoaXMuYXRleHR1cmVDb29yZD1nbC5nZXRBdHRyaWJMb2NhdGlvbihzaGFkZXJQcm9ncmFtLFwiYURhbm1ha3VUZXhDb29yZFwiKTtcclxuXHJcblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmFWZXJ0ZXhQb3NpdGlvbik7XHJcblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmF0ZXh0dXJlQ29vcmQpO1xyXG5cclxuXHRcdHRoaXMuY29tbW9uVGV4Q29vcmRCdWZmZXI9Z2wuY3JlYXRlQnVmZmVyKCk7XHJcblx0XHR0aGlzLmNvbW1vblZlcnRDb29yZEJ1ZmZlcj1nbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcblx0XHRnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKTtcclxuXHRcdGdsLnVuaWZvcm0xaSh0aGlzLnVTYW1wbGVyLDApO1xyXG5cclxuXHRcdHRoaXMuc3VwcG9ydGVkPXRydWU7XHJcblx0fVxyXG5cdGRyYXcoZm9yY2Upe1xyXG5cdFx0Y29uc3QgZ2w9dGhpcy5nbCxsPXRoaXMuZFRleHQuRGFubWFrdVRleHQubGVuZ3RoO1xyXG5cdFx0bGV0IGNXPXRoaXMuYzNkLndpZHRoLGxlZnQscmlnaHQsdlc7XHJcblx0XHRmb3IobGV0IGk9MCx0O2k8bDtpKyspe1xyXG5cdFx0XHR0PXRoaXMuZFRleHQuRGFubWFrdVRleHRbaV07XHJcblx0XHRcdGlmKCF0IHx8ICF0LmdsRGFubWFrdSljb250aW51ZTtcclxuXHRcdFx0bGVmdD10LnN0eWxlLngtdC5lc3RpbWF0ZVBhZGRpbmc7XHJcblx0XHRcdHJpZ2h0PWxlZnQrdC5fY2FjaGUud2lkdGgsXHJcblx0XHRcdHZXPXQuX2NhY2hlLndpZHRoKyhsZWZ0PDA/bGVmdDowKS0ocmlnaHQ+Y1c/cmlnaHQtY1c6MCk7XHJcblx0XHRcdGlmKGxlZnQ+Y1cgfHwgcmlnaHQ8MCljb250aW51ZTtcclxuXHJcblx0XHRcdC8vdmVydFxyXG5cdFx0XHR0LnZlcnRDb29yZFswXT10LnZlcnRDb29yZFs0XT0obGVmdDwwKT8wOmxlZnQ7XHJcblx0XHRcdHQudmVydENvb3JkWzJdPXQudmVydENvb3JkWzZdPXQudmVydENvb3JkWzBdK3ZXO1xyXG5cdFx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUix0aGlzLmNvbW1vblZlcnRDb29yZEJ1ZmZlcik7XHJcblx0XHRcdGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLHQudmVydENvb3JkLGdsLkRZTkFNSUNfRFJBVyk7XHJcblx0XHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hVmVydGV4UG9zaXRpb24sMixnbC5GTE9BVCxmYWxzZSwwLDApO1xyXG5cclxuXHRcdFx0Ly90ZXhcclxuXHRcdFx0Y29tbW9uVGV4dHVyZUNvb3JkWzBdPWNvbW1vblRleHR1cmVDb29yZFs0XT0obGVmdDwwKT8tbGVmdC90Ll9jYWNoZS53aWR0aDowO1xyXG5cdFx0XHRjb21tb25UZXh0dXJlQ29vcmRbMl09Y29tbW9uVGV4dHVyZUNvb3JkWzZdPWNvbW1vblRleHR1cmVDb29yZFswXSt2Vy90Ll9jYWNoZS53aWR0aDtcclxuXHRcdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsdGhpcy5jb21tb25UZXhDb29yZEJ1ZmZlcik7XHJcblx0XHRcdGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLGNvbW1vblRleHR1cmVDb29yZCxnbC5EWU5BTUlDX0RSQVcpO1xyXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYXRleHR1cmVDb29yZCwyLGdsLkZMT0FULGZhbHNlLDAsMCk7XHJcblxyXG5cdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELHQudGV4dHVyZSk7XHJcblxyXG5cdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLDAsNCk7XHJcblx0XHR9XHJcblx0XHRnbC5mbHVzaCgpO1xyXG5cdH1cclxuXHRjbGVhcigpe1xyXG5cdFx0dGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQpO1xyXG5cdH1cclxuXHRkZWxldGVSZWxhdGVkVGV4dE9iamVjdCh0KXtcclxuXHRcdGlmKHQudGV4dHVyZSl0aGlzLmdsLmRlbGV0ZVRleHR1cmUodC50ZXh0dXJlKTtcclxuXHRcdHQudGV4dHVyZT1udWxsO1xyXG5cdFx0dC52ZXJ0Q29vcmQ9bnVsbDtcclxuXHRcdGRlbGV0ZSB0LmdsRGFubWFrdTtcclxuXHR9XHJcblx0cmVzaXplKHcsaCl7XHJcblx0XHRjb25zdCBnbD10aGlzLmdsLEM9dGhpcy5jM2Q7XHJcblx0XHRDLndpZHRoPXRoaXMuZFRleHQud2lkdGg7XHJcblx0XHRDLmhlaWdodD10aGlzLmRUZXh0LmhlaWdodDtcclxuXHRcdGdsLnZpZXdwb3J0KDAsMCxDLndpZHRoLEMuaGVpZ2h0KTtcclxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy51MmRDb29yZCxmYWxzZSwoTWF0LklkZW50aXR5KDQpLnRyYW5zbGF0ZTNkKC0xLDEsMCkuc2NhbGUzZCgyL0Mud2lkdGgsLTIvQy5oZWlnaHQsMCkpLmFycmF5KTtcclxuXHR9XHJcblx0ZW5hYmxlKCl7XHJcblx0XHR0aGlzLmRUZXh0LkRhbm1ha3VUZXh0LmZvckVhY2godD0+e1xyXG5cdFx0XHR0aGlzLm5ld0Rhbm1ha3UodCxmYWxzZSk7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuZFRleHQudXNlSW1hZ2VCaXRtYXA9ZmFsc2U7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PnRoaXMuZHJhdygpKTtcclxuXHR9XHJcblx0ZGlzYWJsZSgpe1xyXG5cdFx0Ly9jbGVhbiByZWxhdGVkIG9iamVjdHNcclxuXHRcdGZvcihsZXQgdG9iaiBvZiB0aGlzLmRUZXh0LkRhbm1ha3VUZXh0KXtcclxuXHRcdFx0dGhpcy5kZWxldGVSZWxhdGVkVGV4dE9iamVjdCh0b2JqKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuY2xlYXIoKTtcclxuXHR9XHJcblx0bmV3RGFubWFrdSh0LGFzeW5jPXRydWUpe1xyXG5cdFx0Y29uc3QgZ2w9dGhpcy5nbDtcclxuXHRcdHQuZ2xEYW5tYWt1PWZhbHNlO1xyXG5cdFx0aWYodC5fY2FjaGUuaGVpZ2h0PnRoaXMubWF4VGV4U2l6ZSB8fCB0Ll9jYWNoZS53aWR0aD50aGlzLm1heFRleFNpemUpey8vaWdub3JlIHRvbyBsYXJnZSBkYW5tYWt1IGltYWdlXHJcblx0XHRcdGNvbnNvbGUud2FybignSWdub3JlIGEgZGFubWFrdSB3aWR0aCB0b28gbGFyZ2Ugc2l6ZScsdC5kYW5tYWt1KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0bGV0IHRleDtcclxuXHRcdGlmKCEodGV4PXQudGV4dHVyZSkpe1xyXG5cdFx0XHR0ZXg9dC50ZXh0dXJlPWdsLmNyZWF0ZVRleHR1cmUoKTtcclxuXHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCx0ZXgpO1xyXG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsZ2wuVEVYVFVSRV9NSU5fRklMVEVSLGdsLkxJTkVBUik7XHJcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCxnbC5URVhUVVJFX1dSQVBfUyxnbC5DTEFNUF9UT19FREdFKTtcclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELGdsLlRFWFRVUkVfV1JBUF9ULGdsLkNMQU1QX1RPX0VER0UpO1xyXG5cdFx0fVxyXG5cdFx0aWYoYXN5bmMpe1xyXG5cdFx0XHRVdGlscy5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpPT57XHJcblx0XHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCx0ZXgpO1xyXG5cdFx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwwLGdsLlJHQkEsZ2wuUkdCQSxnbC5VTlNJR05FRF9CWVRFLHQuX2NhY2hlKTtcclxuXHRcdFx0XHR0LmdsRGFubWFrdT10cnVlO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsMCxnbC5SR0JBLGdsLlJHQkEsZ2wuVU5TSUdORURfQllURSx0Ll9jYWNoZSk7XHJcblx0XHRcdHQuZ2xEYW5tYWt1PXRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly92ZXJ0XHJcblx0XHRsZXQgeT10LnN0eWxlLnktdC5lc3RpbWF0ZVBhZGRpbmc7XHJcblx0XHR0LnZlcnRDb29yZD1uZXcgRmxvYXQzMkFycmF5KFtcclxuXHRcdFx0MCx5LFxyXG5cdFx0XHQwLHksXHJcblx0XHRcdDAseSt0Ll9jYWNoZS5oZWlnaHQsXHJcblx0XHRcdDAseSt0Ll9jYWNoZS5oZWlnaHQsXHJcblx0XHRdKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgY29tbW9uVGV4dHVyZUNvb3JkPW5ldyBGbG9hdDMyQXJyYXkoW1xyXG5cdDAuMCwgIDAuMCwvL+KGllxyXG5cdDEuMCwgIDAuMCwvL+KGl1xyXG5cdDAuMCwgIDEuMCwvL+KGmVxyXG5cdDEuMCwgIDEuMCwvL+KGmFxyXG5dKTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0V2ViR0w7XHJcbiIsIi8qXHJcbkNvcHlyaWdodCBsdW9qaWFAbHVvamlhLm1lXHJcbkxHUEwgbGljZW5zZVxyXG4qL1xyXG5pbXBvcnQgVGVtcGxhdGUgZnJvbSAnLi90ZXh0TW9kdWxlVGVtcGxhdGUuanMnO1xyXG5cclxuY2xhc3MgVGV4dE9mZiBleHRlbmRzIFRlbXBsYXRle1xyXG5cdGNvbnN0cnVjdG9yKGRUZXh0KXtcclxuXHRcdHN1cGVyKGRUZXh0KTtcclxuXHRcdHRoaXMuc3VwcG9ydGVkPXRydWU7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuZGlzcGxheT0nbm9uZSc7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0T2ZmO1xyXG4iLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuXHJcbmRhbm1ha3UtZnJhbWUgbW9kXHJcbiovXHJcbid1c2Ugc3RyaWN0JztcclxuaW1wb3J0IHtEb21Ub29scyxVdGlsc30gZnJvbSAnLi4vZGFubWFrdS1mcmFtZS5qcyc7XHJcbmltcG9ydCBUZXh0Q2FudmFzMkQgZnJvbSAnLi9UZXh0Q2FudmFzMkQuanMnO1xyXG5pbXBvcnQgVGV4dFdlYkdMIGZyb20gJy4vVGV4dFdlYkdMLmpzJztcclxuaW1wb3J0IFRleHRDc3MgZnJvbSAnLi9UZXh0Q3NzLmpzJztcclxuaW1wb3J0IFRleHRvZmYgZnJvbSAnLi9UZXh0b2ZmLmpzJztcclxuaW1wb3J0IHtEYW5tYWt1RnJhbWVNb2R1bGV9IGZyb20gJy4uL2Rhbm1ha3UtZnJhbWUuanMnXHJcblxyXG4vKlxyXG5kYW5tYWt1IG9iaiBzdHJ1Y3Rcclxue1xyXG5cdF86J3RleHQnLFxyXG5cdHRpbWU6KG51bWJlciltc2VjIHRpbWUsXHJcblx0dGV4dDooc3RyaW5nKSxcclxuXHRzdHlsZToob2JqZWN0KXRvIGJlIGNvbWJpbmVkIHdoaXQgZGVmYXVsdCBzdHlsZSxcclxuXHRtb2RlOihudW1iZXIpLFxyXG5cdG9uU2NyZWVuOihib29sKW9uIHRoZSBzY3JlZW5cclxufVxyXG5cclxuZGFubWFrdSBtb2RlXHJcblx0MDpyaWdodFxyXG5cdDE6bGVmdFxyXG5cdDI6Ym90dG9tXHJcblx0Mzp0b3BcclxuKi9cclxuY29uc3QgZGVmUHJvcD1PYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbmxldCB1c2VJbWFnZUJpdG1hcD1mYWxzZTtcclxuXHJcbmNsYXNzIFRleHREYW5tYWt1IGV4dGVuZHMgRGFubWFrdUZyYW1lTW9kdWxle1xyXG5cdGdldCBwYXVzZWQoKXtyZXR1cm4gIXRoaXMuZnJhbWUud29ya2luZzt9XHJcblx0bGlzdD1bXTsvL2Rhbm1ha3Ugb2JqZWN0IGFycmF5XHJcblx0aW5kZXhNYXJrPTA7Ly90byByZWNvcmQgdGhlIGluZGV4IG9mIGxhc3QgZGFubWFrdSBsb2FkZWQgdG8gc2NyZWVuIGluIHRoZSBEYW5tYWt1VGV4dFxyXG5cdHJhbmRvbVRleHQ9YGRhbm1ha3VfdGV4dF8keyhNYXRoLnJhbmRvbSgpKjk5OTk5OSl8MH1gO1xyXG5cdGxhc3RSZW5kZXJlck1vZGU9MDtcclxuXHQvL3RpbWUgcmVjb3JkXHJcblx0Y2FjaGVDbGVhblRpbWU9MDtcclxuXHRkYW5tYWt1TW92ZVRpbWU9MDtcclxuXHRkYW5tYWt1Q2hlY2tUaW1lPTA7XHJcblx0ZGFubWFrdUNoZWNrU3dpdGNoPXRydWU7XHJcblx0R3JhcGhDYWNoZT1bXTsvL3RleHQgZ3JhcGggY2FjaGUsIGZvciByZXVzYWJsZSBUZXh0R3JhcGggb2JqXHJcblx0RGFubWFrdVRleHQ9W107Ly9UZXh0R3JhcGggb24gc2NyZWVuXHJcblx0ZGVmYXVsdFN0eWxlPXsvL3RoZXNlIHN0eWxlcyBjYW4gYmUgb3Zlcndyb3RlIGJ5IHRoZSAnZm9udCcgcHJvcGVydHkgb2YgZGFubWFrdSBvYmplY3RcclxuXHRcdGZvbnRTdHlsZTogbnVsbCxcclxuXHRcdGZvbnRXZWlnaHQ6IDMwMCxcclxuXHRcdGZvbnRWYXJpYW50OiBudWxsLFxyXG5cdFx0Y29sb3I6IFwiI2ZmZlwiLFxyXG5cdFx0Zm9udFNpemU6IDI0LFxyXG5cdFx0Zm9udEZhbWlseTogXCJBcmlhbFwiLFxyXG5cdFx0c3Ryb2tlV2lkdGg6IDEsLy9vdXRsaW5lIHdpZHRoXHJcblx0XHRzdHJva2VDb2xvcjogXCIjODg4XCIsXHJcblx0XHRzaGFkb3dCbHVyOiA1LFxyXG5cdFx0dGV4dEFsaWduOidzdGFydCcsLy9sZWZ0IHJpZ2h0IGNlbnRlciBzdGFydCBlbmRcclxuXHRcdHNoYWRvd0NvbG9yOiBcIiMwMDBcIixcclxuXHRcdHNoYWRvd09mZnNldFg6MCxcclxuXHRcdHNoYWRvd09mZnNldFk6MCxcclxuXHRcdGZpbGw6dHJ1ZSwvL2lmIHRoZSB0ZXh0IHNob3VsZCBiZSBmaWxsZWRcclxuXHR9O1xyXG5cdG9wdGlvbnM9e1xyXG5cdFx0YWxsb3dMaW5lczpmYWxzZSwvL2FsbG93IG11bHRpLWxpbmUgZGFubWFrdVxyXG5cdFx0c2NyZWVuTGltaXQ6MCwvL3RoZSBtb3N0IGFyZWElIG9mIGRhbm1ha3Ugb24gdGhlIHNjcmVlblxyXG5cdFx0Y2xlYXJXaGVuVGltZVJlc2V0OnRydWUsLy9jbGVhciBkYW5tYWt1IG9uIHNjcmVlbiB3aGVuIHRoZSB0aW1lIGlzIHJlc2V0XHJcblx0XHRzcGVlZDo2LjUsXHJcblx0XHRkYW5tYWt1U2l6ZVNjYWxlOjEsLy9zY2FsZSBmb3IgdGhlIGRlZmF1bHQgc2l6ZVxyXG5cdFx0YXV0b1NoaWZ0UmVuZGVyaW5nTW9kZTp0cnVlLC8vYXV0byBzaGlmdCB0byBhIGxvdyBsb2FkIG1vZGVcclxuXHRcdHJlbmRlcmluZ01vZGU6MSwvL2RlZmF1bHQgdG8gY3NzIG1vZGVcclxuXHR9XHJcblx0Y29uc3RydWN0b3IoZnJhbWUsYXJnPXt9KXtcclxuXHRcdHN1cGVyKGZyYW1lKTtcclxuXHRcdGlmKGFyZy5kZWZhdWx0U3R5bGUpXHJcblx0XHRcdE9iamVjdC5hc3NpZ24odGhpcy5kZWZhdWx0U3R5bGUsYXJnLmRlZmF1bHRTdHlsZSk7XHJcblx0XHRpZihhcmcub3B0aW9ucylcclxuXHRcdFx0VXRpbHMuZGVlcEFzc2lnbih0aGlzLm9wdGlvbnMsYXJnLm9wdGlvbnMpO1xyXG5cdFx0XHJcblx0XHRmcmFtZS5hZGRTdHlsZShgLiR7dGhpcy5yYW5kb21UZXh0fV9mdWxsZmlsbHt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb3NpdGlvbjphYnNvbHV0ZTt9YCk7XHJcblxyXG5cdFx0ZGVmUHJvcCh0aGlzLCdyZW5kZXJlck1vZGUnLHtjb25maWd1cmFibGU6dHJ1ZX0pO1xyXG5cdFx0ZGVmUHJvcCh0aGlzLCdhY3RpdmVSZW5kZXJlck1vZGUnLHtjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTpudWxsfSk7XHJcblx0XHRjb25zdCBjb249dGhpcy5jb250YWluZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRjb24uaWQ9YCR7dGhpcy5yYW5kb21UZXh0fV90ZXh0RGFubWFrdUNvbnRhaW5lcmA7XHJcblx0XHRjb24uY2xhc3NMaXN0LmFkZChgJHt0aGlzLnJhbmRvbVRleHR9X2Z1bGxmaWxsYCk7XHJcblxyXG5cdFx0Ly9pbml0IG1vZGVzXHJcblx0XHR0aGlzLm1vZGVzPXtcclxuXHRcdFx0MDp0aGlzLnRleHRvZmY9bmV3IFRleHRvZmYodGhpcyksLy9vZmZcclxuXHRcdFx0Mjp0aGlzLnRleHQyZD1uZXcgVGV4dENhbnZhczJEKHRoaXMpLFxyXG5cdFx0XHQxOnRoaXMudGV4dENzcz1uZXcgVGV4dENzcyh0aGlzKSxcclxuXHRcdFx0Mzp0aGlzLnRleHQzZD1uZXcgVGV4dFdlYkdMKHRoaXMpLFxyXG5cdFx0fTtcclxuXHJcblx0XHRcclxuXHRcdHRoaXMucmVuZGVyaW5nPW5ldyBSZW5kZXJpbmdEYW5tYWt1TWFuYWdlcih0aGlzKTtcclxuXHJcblx0XHREb21Ub29scy5hZGRFdmVudHMoZG9jdW1lbnQse1xyXG5cdFx0XHR2aXNpYmlsaXR5Y2hhbmdlOmU9PntcclxuXHRcdFx0XHQvLz9cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHR0aGlzLl9jaGVja05ld0Rhbm1ha3U9dGhpcy5fY2hlY2tOZXdEYW5tYWt1LmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLl9jbGVhbkNhY2hlPXRoaXMuX2NsZWFuQ2FjaGUuYmluZCh0aGlzKTtcclxuXHRcdHNldEludGVydmFsKHRoaXMuX2NsZWFuQ2FjaGUsNTAwMCk7Ly9zZXQgYW4gaW50ZXJ2YWwgZm9yIGNhY2hlIGNsZWFuaW5nXHJcblx0XHRcclxuXHRcdHRoaXMuc2V0UmVuZGVyZXJNb2RlKHRoaXMubGFzdFJlbmRlcmVyTW9kZT0odGhpcy5vcHRpb25zLnJlbmRlcmluZ01vZGV8fDEpKTtcclxuXHR9XHJcblx0c2V0UmVuZGVyZXJNb2RlKG4pe1xyXG5cdFx0aWYodGhpcy5yZW5kZXJlck1vZGU9PT1uIHx8ICEobiBpbiB0aGlzLm1vZGVzKSB8fCAhdGhpcy5tb2Rlc1tuXS5zdXBwb3J0ZWQpcmV0dXJuIGZhbHNlO1xyXG5cdFx0aWYodGhpcy5hY3RpdmVSZW5kZXJlck1vZGUpe1xyXG5cdFx0XHR0aGlzLmxhc3RSZW5kZXJlck1vZGU9dGhpcy5yZW5kZXJlck1vZGU7XHJcblx0XHRcdHRoaXMuYWN0aXZlUmVuZGVyZXJNb2RlLmRpc2FibGUoKTtcclxuXHRcdFx0dGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5hY3RpdmVSZW5kZXJlck1vZGUuY29udGFpbmVyKTtcclxuXHRcdH1cclxuXHRcdGRlZlByb3AodGhpcywnYWN0aXZlUmVuZGVyZXJNb2RlJyx7dmFsdWU6dGhpcy5tb2Rlc1tuXX0pO1xyXG5cdFx0ZGVmUHJvcCh0aGlzLCdyZW5kZXJlck1vZGUnLHt2YWx1ZTpufSk7XHJcblx0XHR0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmFjdGl2ZVJlbmRlcmVyTW9kZS5jb250YWluZXIpO1xyXG5cdFx0dGhpcy5hY3RpdmVSZW5kZXJlck1vZGUucmVzaXplKCk7XHJcblx0XHR0aGlzLmFjdGl2ZVJlbmRlcmVyTW9kZS5lbmFibGUoKTtcclxuXHRcdHRoaXMuZnJhbWUuY29yZS5kZWJ1ZygncmVuZGVyZXJNb2RlOicsdGhpcy5yZW5kZXJlck1vZGUpO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdG1lZGlhKG1lZGlhKXtcclxuXHRcdERvbVRvb2xzLmFkZEV2ZW50cyhtZWRpYSx7XHJcblx0XHRcdHNlZWtlZDooKT0+dGhpcy50aW1lKCksXHJcblx0XHRcdHNlZWtpbmc6KCk9PnRoaXMucGF1c2UoKSxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRwbGF5KCl7XHJcblx0XHR0aGlzLnJlY2hlY2tJbmRleE1hcmsoKTtcclxuXHRcdHRoaXMuYWN0aXZlUmVuZGVyZXJNb2RlLnBsYXkoKTtcclxuXHR9XHJcblx0cGF1c2UoKXtcclxuXHRcdHRoaXMuYWN0aXZlUmVuZGVyZXJNb2RlLnBhdXNlKCk7XHJcblx0fVxyXG5cdGxvYWQoZCxhdXRvQWRkVG9TY3JlZW4pe1xyXG5cdFx0aWYoZD8uXyE9PSd0ZXh0Jyl7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdGlmKHR5cGVvZiBkLnRleHQgIT09ICdzdHJpbmcnKXtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignd3JvbmcgZGFubWFrdSBvYmplY3Q6JyxkKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0bGV0IGluZCxhcnI9dGhpcy5saXN0O1xyXG5cdFx0aW5kPWRpY2hvdG9teShhcnIsZC50aW1lLDAsYXJyLmxlbmd0aC0xLGZhbHNlKTsvL2ZpbmQgYSBwbGFjZSBmb3IgdGhpcyBvYmogaW4gdGhlIGxpc3QgaW4gdGltZSBvcmRlclxyXG5cdFx0YXJyLnNwbGljZShpbmQsMCxkKTsvL2luc2VydCB0aGUgb2JqXHJcblx0XHRpZihpbmQ8dGhpcy5pbmRleE1hcmspdGhpcy5pbmRleE1hcmsrKztcclxuXHRcdC8vcm91bmQgZC5zdHlsZS5mb250U2l6ZSB0byBwcmV2ZW50IElpZmluaXR5IGxvb3AgaW4gdHVubmVsXHJcblx0XHRpZih0eXBlb2YgZC5zdHlsZSE9PSdvYmplY3QnKWQuc3R5bGU9e307XHJcblx0XHRkLnN0eWxlLmZvbnRTaXplPU1hdGgucm91bmQoKGQuc3R5bGUuZm9udFNpemV8fHRoaXMuZGVmYXVsdFN0eWxlLmZvbnRTaXplKSp0aGlzLm9wdGlvbnMuZGFubWFrdVNpemVTY2FsZSk7XHJcblx0XHRpZihpc05hTihkLnN0eWxlLmZvbnRTaXplKXx8IGQuc3R5bGUuZm9udFNpemU9PT1JbmZpbml0eSB8fCBkLnN0eWxlLmZvbnRTaXplPT09MClkLnN0eWxlLmZvbnRTaXplPXRoaXMuZGVmYXVsdFN0eWxlLmZvbnRTaXplKnRoaXMub3B0aW9ucy5kYW5tYWt1U2l6ZVNjYWxlO1xyXG5cdFx0aWYodHlwZW9mIGQubW9kZSAhPT0gJ251bWJlcicpZC5tb2RlPTA7XHJcblx0XHRpZihhdXRvQWRkVG9TY3JlZW4pdGhpcy5fYWRkTmV3RGFubWFrdShkKTtcclxuXHRcdHJldHVybiBkO1xyXG5cdH1cclxuXHRsb2FkTGlzdChkYW5tYWt1QXJyYXkpe1xyXG5cdFx0ZGFubWFrdUFycmF5LmZvckVhY2goZD0+dGhpcy5sb2FkKGQpKTtcclxuXHR9XHJcblx0dW5sb2FkKGQpe1xyXG5cdFx0aWYoIWQgfHwgZC5fIT09J3RleHQnKXJldHVybiBmYWxzZTtcclxuXHRcdGNvbnN0IGk9dGhpcy5saXN0LmluZGV4T2YoZCk7XHJcblx0XHRpZihpPDApcmV0dXJuIGZhbHNlO1xyXG5cdFx0dGhpcy5saXN0LnNwbGljZShpLDEpO1xyXG5cdFx0aWYoaTx0aGlzLmluZGV4TWFyayl0aGlzLmluZGV4TWFyay0tO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdF9jaGVja05ld0Rhbm1ha3UoZm9yY2Upe1xyXG5cdFx0aWYodGhpcy5wYXVzZWQmJiFmb3JjZSlyZXR1cm47XHJcblx0XHRsZXQgZCx0aW1lPXRoaXMuZnJhbWUudGltZTtcclxuXHRcdGlmKHRoaXMuZGFubWFrdUNoZWNrVGltZT09PXRpbWUgfHwgIXRoaXMuZGFubWFrdUNoZWNrU3dpdGNoKXJldHVybjtcclxuXHRcdGlmKHRoaXMubGlzdC5sZW5ndGgpXHJcblx0XHRmb3IoOyh0aGlzLmluZGV4TWFyazx0aGlzLmxpc3QubGVuZ3RoKSYmKGQ9dGhpcy5saXN0W3RoaXMuaW5kZXhNYXJrXSkmJihkLnRpbWU8PXRpbWUpO3RoaXMuaW5kZXhNYXJrKyspey8vYWRkIG5ldyBkYW5tYWt1XHJcblx0XHRcdGlmKHRoaXMub3B0aW9ucy5zY3JlZW5MaW1pdD4wICYmIHRoaXMucmVuZGVyaW5nLm9uU2NyZWVuQXJlYT49dGhpcy5vcHRpb25zLnNjcmVlbkxpbWl0LzEwMCp0aGlzLmZyYW1lLmFyZWEpe2NvbnRpbnVlO30vL2NvbnRpbnVlIGlmIHRoZSBudW1iZXIgb2YgZGFubWFrdSBvbiBzY3JlZW4gaGFzIHVwIHRvIGxpbWl0IG9yIGRvYyBpcyBub3QgdmlzaWJsZVxyXG5cdFx0XHR0aGlzLl9hZGROZXdEYW5tYWt1KGQpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5kYW5tYWt1Q2hlY2tUaW1lPXRpbWU7XHJcblx0fVxyXG5cdF9hZGROZXdEYW5tYWt1KGQpe1xyXG5cdFx0Y29uc3QgY0hlaWdodD10aGlzLmhlaWdodCxjV2lkdGg9dGhpcy53aWR0aDtcclxuXHRcdGxldCB0PXRoaXMuR3JhcGhDYWNoZS5sZW5ndGg/dGhpcy5HcmFwaENhY2hlLnNoaWZ0KCk6bmV3IFRleHRHcmFwaCgpO1xyXG5cdFx0aWYoIXRoaXMub3B0aW9ucy5hbGxvd0xpbmVzKXtcclxuXHRcdFx0ZD1PYmplY3QuY3JlYXRlKGQpO1xyXG5cdFx0XHRkLnRleHQ9ZC50ZXh0LnJlcGxhY2UoL1xcbi9nLCcgJyk7XHJcblx0XHR9XHJcblx0XHRsZXQgZm9udD1PYmplY3QuY3JlYXRlKHRoaXMuZGVmYXVsdFN0eWxlKTtcclxuXHRcdHQuaW5pdChkLE9iamVjdC5hc3NpZ24oZm9udCxkLnN0eWxlKSk7XHJcblx0XHR0LnByZXBhcmUoZmFsc2UpO1xyXG5cdFx0Ly9maW5kIHR1bm5lbCBudW1iZXJcclxuXHRcdGNvbnN0IHRudW09dGhpcy5yZW5kZXJpbmcudHVubmVsTWFuYWdlci5nZXRUdW5uZWwodCxjSGVpZ2h0KTtcclxuXHRcdC8vY2FsYyBtYXJnaW5cclxuXHRcdGxldCBtYXJnaW49KHRudW08MD8wOnRudW0pJWNIZWlnaHQ7XHJcblx0XHRzd2l0Y2goZC5tb2RlKXtcclxuXHRcdFx0Y2FzZSAwOmNhc2UgMTpjYXNlIDM6e1xyXG5cdFx0XHRcdHQuc3R5bGUueT1tYXJnaW47YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAyOntcclxuXHRcdFx0XHR0LnN0eWxlLnk9Y0hlaWdodC1tYXJnaW4tdC5zdHlsZS5oZWlnaHQtMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0c3dpdGNoKGQubW9kZSl7XHJcblx0XHRcdGNhc2UgMDp7dC5zdHlsZS54PWNXaWR0aDticmVhazt9XHJcblx0XHRcdGNhc2UgMTp7dC5zdHlsZS54PS10LnN0eWxlLndpZHRoO2JyZWFrO31cclxuXHRcdFx0Y2FzZSAyOmNhc2UgMzp7dC5zdHlsZS54PShjV2lkdGgtdC5zdHlsZS53aWR0aCkvMjt9XHJcblx0XHR9XHJcblx0XHR0aGlzLnJlbmRlcmluZy5hZGQodCk7XHJcblx0fVxyXG5cdF9jYWxjU2lkZURhbm1ha3VQb3NpdGlvbih0LFQ9dGhpcy5mcmFtZS50aW1lKXtcclxuXHRcdGxldCBSPSF0LmRhbm1ha3UubW9kZSxzdHlsZT10LnN0eWxlOy8vUjpmcm9tIHJpZ2h0XHJcblx0XHRyZXR1cm4gKFI/dGhpcy5mcmFtZS53aWR0aDooLXN0eWxlLndpZHRoKSlcclxuXHRcdFx0XHQrKFI/LTE6MSkqdGhpcy5mcmFtZS5yYXRlKihzdHlsZS53aWR0aCsxMDI0KSooVC10LnRpbWUpKnRoaXMub3B0aW9ucy5zcGVlZC82MDAwMDtcclxuXHR9XHJcblx0X2NhbGNEYW5tYWt1c1Bvc2l0aW9uKGZvcmNlKXtcclxuXHRcdGxldCBUPXRoaXMuZnJhbWUudGltZTtcclxuXHRcdGlmKHRoaXMucGF1c2VkJiYhZm9yY2UpcmV0dXJuO1xyXG5cdFx0Y29uc3QgY1dpZHRoPXRoaXMud2lkdGgscmF0ZT10aGlzLmZyYW1lLnJhdGU7XHJcblx0XHRsZXQgUixpLHQsc3R5bGUsWDtcclxuXHRcdHRoaXMuZGFubWFrdU1vdmVUaW1lPVQ7XHJcblx0XHRmb3IoaT10aGlzLkRhbm1ha3VUZXh0Lmxlbmd0aDtpLS07KXtcclxuXHRcdFx0dD10aGlzLkRhbm1ha3VUZXh0W2ldO1xyXG5cdFx0XHRpZih0LnRpbWU+VCl7XHJcblx0XHRcdFx0dGhpcy5yZW1vdmVUZXh0KHQpO1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlPXQuc3R5bGU7XHJcblxyXG5cdFx0XHRzd2l0Y2godC5kYW5tYWt1Lm1vZGUpe1xyXG5cdFx0XHRcdGNhc2UgMDpjYXNlIDE6e1xyXG5cdFx0XHRcdFx0Uj0hdC5kYW5tYWt1Lm1vZGU7XHJcblx0XHRcdFx0XHRzdHlsZS54PVg9dGhpcy5fY2FsY1NpZGVEYW5tYWt1UG9zaXRpb24odCxUKTtcclxuXHRcdFx0XHRcdGlmKHQudHVubmVsTnVtYmVyPj0wICYmICgoUiYmKFgrc3R5bGUud2lkdGgpKzEwPGNXaWR0aCkgfHwgKCFSJiZYPjEwKSkgKXtcclxuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXJpbmcudHVubmVsTWFuYWdlci5yZW1vdmVNYXJrKHQpO1xyXG5cdFx0XHRcdFx0fWVsc2UgaWYoIChSJiYoWDwtc3R5bGUud2lkdGgtMjApKSB8fCAoIVImJihYPmNXaWR0aCtzdHlsZS53aWR0aCsyMCkpICl7Ly9nbyBvdXQgdGhlIGNhbnZhc1xyXG5cdFx0XHRcdFx0XHR0aGlzLnJlbW92ZVRleHQodCk7XHJcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhc2UgMjpjYXNlIDM6e1xyXG5cdFx0XHRcdFx0aWYoKFQtdC50aW1lKT50aGlzLm9wdGlvbnMuc3BlZWQqMTAwMC9yYXRlKXtcclxuXHRcdFx0XHRcdFx0dGhpcy5yZW1vdmVUZXh0KHQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRfY2xlYW5DYWNoZShmb3JjZSl7Ly9jbGVhbiB0ZXh0IG9iamVjdCBjYWNoZVxyXG5cdFx0Zm9yY2UmJnRoaXMuZnJhbWUuY29yZS5kZWJ1ZygnZm9yY2UgY2xlYW5pbmcgZ3JhcGggY2FjaGUnKTtcclxuXHRcdGNvbnN0IG5vdz1EYXRlLm5vdygpO1xyXG5cdFx0aWYodGhpcy5HcmFwaENhY2hlLmxlbmd0aD4zMCB8fCBmb3JjZSl7Ly9zYXZlIDMwIGNhY2hlZCBkYW5tYWt1XHJcblx0XHRcdGZvcihsZXQgdGkgPSAwO3RpPHRoaXMuR3JhcGhDYWNoZS5sZW5ndGg7dGkrKyl7XHJcblx0XHRcdFx0aWYoZm9yY2UgfHwgKG5vdy10aGlzLkdyYXBoQ2FjaGVbdGldLnJlbW92ZVRpbWUpID4gMTAwMDApey8vZGVsZXRlIGNhY2hlIHdoaWNoIGhhcyBub3QgYmVlbiB1c2VkIGZvciAxMHNcclxuXHRcdFx0XHRcdHRoaXMuR3JhcGhDYWNoZVt0aV0uZGVzdHJ1Y3RvcigpO1xyXG5cdFx0XHRcdFx0dGhpcy5HcmFwaENhY2hlLnNwbGljZSh0aSwxKTtcclxuXHRcdFx0XHR9ZWxzZXticmVhazt9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0ZHJhdyhmb3JjZSl7XHJcblx0XHRpZigoIWZvcmNlJiZ0aGlzLnBhdXNlZCl8fCF0aGlzLmVuYWJsZWQpcmV0dXJuO1xyXG5cdFx0dGhpcy5fY2FsY0Rhbm1ha3VzUG9zaXRpb24oZm9yY2UpO1xyXG5cdFx0dGhpcy5hY3RpdmVSZW5kZXJlck1vZGUuZHJhdyhmb3JjZSk7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9Pnt0aGlzLl9jaGVja05ld0Rhbm1ha3UoZm9yY2UpfSk7XHJcblx0fVxyXG5cdHJlbW92ZVRleHQodCl7Ly9yZW1vdmUgdGhlIGRhbm1ha3UgZnJvbSBzY3JlZW5cclxuXHRcdHRoaXMucmVuZGVyaW5nLnJlbW92ZSh0KTtcclxuXHR9XHJcblx0cmVzaXplKCl7XHJcblx0XHRpZih0aGlzLmFjdGl2ZVJlbmRlcmVyTW9kZSl0aGlzLmFjdGl2ZVJlbmRlcmVyTW9kZS5yZXNpemUoKTtcclxuXHRcdHRoaXMuZHJhdyh0cnVlKTtcclxuXHR9XHJcblx0X2NsZWFyU2NyZWVuKGZvcmNlRnVsbCl7XHJcblx0XHR0aGlzLmFjdGl2ZVJlbmRlcmVyTW9kZSYmdGhpcy5hY3RpdmVSZW5kZXJlck1vZGUuY2xlYXIoZm9yY2VGdWxsKTtcclxuXHR9XHJcblx0Y2xlYXIoKXsvL2NsZWFyIGRhbm1ha3Ugb24gdGhlIHNjcmVlblxyXG5cdFx0dGhpcy5yZW5kZXJpbmcuY2xlYXIoKTtcclxuXHRcdHRoaXMuX2NsZWFyU2NyZWVuKHRydWUpO1xyXG5cdH1cclxuXHRyZWNoZWNrSW5kZXhNYXJrKHQ9dGhpcy5mcmFtZS50aW1lKXtcclxuXHRcdHRoaXMuaW5kZXhNYXJrPWRpY2hvdG9teSh0aGlzLmxpc3QsdCwwLHRoaXMubGlzdC5sZW5ndGgtMSx0cnVlKTtcclxuXHR9XHJcblx0cmF0ZShyKXtcclxuXHRcdGlmKHRoaXMuYWN0aXZlUmVuZGVyZXJNb2RlKXRoaXMuYWN0aXZlUmVuZGVyZXJNb2RlLnJhdGUocik7XHJcblx0fVxyXG5cdHRpbWUodD10aGlzLmZyYW1lLnRpbWUpey8vcmVzZXQgdGltZSx5b3Ugc2hvdWxkIGludm9rZSBpdCB3aGVuIHRoZSBtZWRpYSBoYXMgc2Vla2VkIHRvIGFub3RoZXIgdGltZVxyXG5cdFx0dGhpcy5yZWNoZWNrSW5kZXhNYXJrKHQpO1xyXG5cdFx0aWYodGhpcy5vcHRpb25zLmNsZWFyV2hlblRpbWVSZXNldCl7dGhpcy5jbGVhcigpO31cclxuXHRcdGVsc2V7dGhpcy5yZXNldFRpbWVPZkRhbm1ha3VPblNjcmVlbigpO31cclxuXHR9XHJcblx0cmVzZXRUaW1lT2ZEYW5tYWt1T25TY3JlZW4oY1RpbWUpe1xyXG5cdFx0Ly9jYXVzZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRhbm1ha3UgaXMgYmFzZWQgb24gdGltZVxyXG5cdFx0Ly9hbmQgaWYgeW91IGRvbid0IHdhbnQgdGhlc2UgZGFubWFrdSBvbiB0aGUgc2NyZWVuIHRvIGRpc2FwcGVhciBhZnRlciBzZWVraW5nLHRoZWlyIHRpbWUgc2hvdWxkIGJlIHJlc2V0XHJcblx0XHRpZihjVGltZT09PXVuZGVmaW5lZCljVGltZT10aGlzLmZyYW1lLnRpbWU7XHJcblx0XHR0aGlzLkRhbm1ha3VUZXh0LmZvckVhY2godD0+e1xyXG5cdFx0XHRpZighdC5kYW5tYWt1KXJldHVybjtcclxuXHRcdFx0dC50aW1lPWNUaW1lLSh0aGlzLmRhbm1ha3VNb3ZlVGltZS10LnRpbWUpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGRhbm1ha3VBdCh4LHkpey8vcmV0dXJuIGEgbGlzdCBvZiBkYW5tYWt1IHdoaWNoIGNvdmVycyB0aGlzIHBvc2l0aW9uXHJcblx0XHRjb25zdCBsaXN0PVtdO1xyXG5cdFx0aWYoIXRoaXMuZW5hYmxlZClyZXR1cm4gbGlzdDtcclxuXHRcdHRoaXMuRGFubWFrdVRleHQuZm9yRWFjaCh0PT57XHJcblx0XHRcdGlmKCF0LmRhbm1ha3UpcmV0dXJuO1xyXG5cdFx0XHRpZih0LnN0eWxlLng8PXggJiYgdC5zdHlsZS54K3Quc3R5bGUud2lkdGg+PXggJiYgdC5zdHlsZS55PD15ICYmIHQuc3R5bGUueSt0LnN0eWxlLmhlaWdodD49eSlcclxuXHRcdFx0XHRsaXN0LnB1c2godC5kYW5tYWt1KTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIGxpc3Q7XHJcblx0fVxyXG5cdGVuYWJsZSgpey8vZW5hYmxlIHRoZSBwbHVnaW5cclxuXHRcdHRoaXMuc2V0UmVuZGVyZXJNb2RlKHRoaXMubGFzdFJlbmRlcmVyTW9kZSk7XHJcblx0XHR0aGlzLmZyYW1lLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XHJcblx0XHRpZih0aGlzLmZyYW1lLndvcmtpbmcpdGhpcy5wbGF5KCk7XHJcblx0fVxyXG5cdGRpc2FibGUoKXsvL2Rpc2FibGUgdGhlIHBsdWdpblxyXG5cdFx0dGhpcy5mcmFtZS5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5jb250YWluZXIpO1xyXG5cdFx0dGhpcy5wYXVzZSgpO1xyXG5cdFx0dGhpcy5jbGVhcigpO1xyXG5cdFx0dGhpcy5zZXRSZW5kZXJlck1vZGUoMCk7XHJcblx0fVxyXG5cdHNldCB1c2VJbWFnZUJpdG1hcCh2KXtcclxuXHRcdHVzZUltYWdlQml0bWFwPSh0eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAgPT09J2Z1bmN0aW9uJyk/djpmYWxzZTtcclxuXHR9XHJcblx0Z2V0IHVzZUltYWdlQml0bWFwKCl7cmV0dXJuIHVzZUltYWdlQml0bWFwO31cclxufVxyXG5cclxuXHJcbmNsYXNzIFRleHRHcmFwaHsvL2NvZGUgY29waWVkIGZyb20gQ2FudmFzT2JqTGlicmFyeVxyXG5cdF9mb250U3RyaW5nPScnO1xyXG5cdF9yZW5kZXJMaXN0O1xyXG5cdF9jYWNoZTtcclxuXHRfYml0bWFwO1xyXG5cdGZvbnQ9e307XHJcblx0dGltZTtcclxuXHRzdHlsZT17fTtcclxuXHRkcmF3bj1mYWxzZTsvL2Jvb2w6IFxyXG5cdGRhbm1ha3U7XHJcblx0cmVtb3ZlVGltZTsvL251bWJlcjogcmVtb3ZlIHRpbWUgb2YgdGhlIGRhbm1ha3VcclxuXHR0dW5uZWxOdW1iZXI7Ly9udW1iZXI6IHR1bm5lbCBudW1iZXIgaW4gdGhlIHR1bm5lciBtYW5hZ2VyXHJcblx0dHVubmVsSGVpZ2h0Oy8vbnVtYmVyOiB0dW5uZWwgaGVpZ2h0XHJcblx0ZXN0aW1hdGVQYWRkaW5nOy8vbnVtYmVyOiBwYWRkaW5nIG9mIHRoZSBjYW52YXNcclxuXHRnZXQgdGV4dCgpe3JldHVybiB0aGlzLmRhbm1ha3UudGV4dDt9XHJcblx0Y29uc3RydWN0b3IoZGFubWFrdU9iaixmb250KXtcclxuXHRcdHRoaXMuX3JlbmRlclRvQ2FjaGU9dGhpcy5fcmVuZGVyVG9DYWNoZS5iaW5kKHRoaXMpO1xyXG5cdFx0ZGFubWFrdU9iaiYmdGhpcy5pbml0KGRhbm1ha3VPYmosZm9udCk7XHJcblx0fVxyXG5cdGluaXQoZCxmb250KXtcclxuXHRcdHRoaXMuZGFubWFrdT1kO1xyXG5cdFx0dGhpcy5kcmF3bj1mYWxzZTtcclxuXHRcdHRoaXMudGltZT1kLnRpbWU7XHJcblx0XHR0aGlzLmZvbnQ9Zm9udDtcclxuXHRcdGlmKCF0aGlzLmZvbnQubGluZUhlaWdodCl0aGlzLmZvbnQubGluZUhlaWdodD0odGhpcy5mb250LmZvbnRTaXplKzIpfHwxO1xyXG5cdFx0aWYoZC5zdHlsZS5jb2xvcil7XHJcblx0XHRcdGlmKHRoaXMuZm9udC5jb2xvciAmJiB0aGlzLmZvbnQuY29sb3JbMF0hPT0nIycpe1xyXG5cdFx0XHRcdHRoaXMuZm9udC5jb2xvcj0nIycrZC5zdHlsZS5jb2xvcjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYoZC5tb2RlPjEpdGhpcy5mb250LnRleHRBbGlnbj0nY2VudGVyJztcclxuXHR9XHJcblx0cHJlcGFyZShhc3luYz1mYWxzZSl7Ly9wcmVwYXJlIHRleHQgZGV0YWlsc1xyXG5cdFx0aWYoIXRoaXMuX2NhY2hlKXtcclxuXHRcdFx0dGhpcy5fY2FjaGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuXHRcdH1cclxuXHRcdGxldCB0YT1bXTtcclxuXHRcdCh0aGlzLmZvbnQuZm9udFN0eWxlKSYmdGEucHVzaCh0aGlzLmZvbnQuZm9udFN0eWxlKTtcclxuXHRcdCh0aGlzLmZvbnQuZm9udFZhcmlhbnQpJiZ0YS5wdXNoKHRoaXMuZm9udC5mb250VmFyaWFudCk7XHJcblx0XHQodGhpcy5mb250LmZvbnRXZWlnaHQpJiZ0YS5wdXNoKHRoaXMuZm9udC5mb250V2VpZ2h0KTtcclxuXHRcdHRhLnB1c2goYCR7dGhpcy5mb250LmZvbnRTaXplfXB4YCk7XHJcblx0XHQodGhpcy5mb250LmZvbnRGYW1pbHkpJiZ0YS5wdXNoKHRoaXMuZm9udC5mb250RmFtaWx5KTtcclxuXHRcdHRoaXMuX2ZvbnRTdHJpbmcgPSB0YS5qb2luKCcgJyk7XHJcblxyXG5cdFx0Y29uc3QgY2FudmFzID0gdGhpcy5fY2FjaGUsXHJcblx0XHRcdGN0ID0gKGNhbnZhcy5jdHgyZHx8KGNhbnZhcy5jdHgyZD1jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpKSk7XHJcblx0XHRjdC5mb250ID0gdGhpcy5fZm9udFN0cmluZztcclxuXHRcdHRoaXMuX3JlbmRlckxpc3QgPSB0aGlzLnRleHQuc3BsaXQoL1xcbi9nKTtcclxuXHRcdHRoaXMuZXN0aW1hdGVQYWRkaW5nPU1hdGgubWF4KFxyXG5cdFx0XHR0aGlzLmZvbnQuc2hhZG93Qmx1cis1K01hdGgubWF4KE1hdGguYWJzKHRoaXMuZm9udC5zaGFkb3dPZmZzZXRZKSxNYXRoLmFicyh0aGlzLmZvbnQuc2hhZG93T2Zmc2V0WCkpLFxyXG5cdFx0XHR0aGlzLmZvbnQuc3Ryb2tlV2lkdGgrM1xyXG5cdFx0KTtcclxuXHRcdGxldCB3ID0gMCx0dyxsaD0odHlwZW9mIHRoaXMuZm9udC5saW5lSGVpZ2h0ID09PSdudW1iZXInKT90aGlzLmZvbnQubGluZUhlaWdodDp0aGlzLmZvbnQuZm9udFNpemU7XHJcblx0XHRmb3IgKGxldCBpID0gdGhpcy5fcmVuZGVyTGlzdC5sZW5ndGg7IGkgLS0gOykge1xyXG5cdFx0XHR0dyA9IGN0Lm1lYXN1cmVUZXh0KHRoaXMuX3JlbmRlckxpc3RbaV0pLndpZHRoO1xyXG5cdFx0XHQodHc+dykmJih3PXR3KTsvL21heFxyXG5cdFx0fVxyXG5cdFx0Y2FudmFzLndpZHRoID0gKHRoaXMuc3R5bGUud2lkdGggPSB3KSArIHRoaXMuZXN0aW1hdGVQYWRkaW5nKjI7XHJcblx0XHRjYW52YXMuaGVpZ2h0ID0gKHRoaXMuc3R5bGUuaGVpZ2h0ID0gdGhpcy5fcmVuZGVyTGlzdC5sZW5ndGggKiBsaCkrICgobGg8dGhpcy5mb250LmZvbnRTaXplKT90aGlzLmZvbnQuZm9udFNpemUqMjowKSArIHRoaXMuZXN0aW1hdGVQYWRkaW5nKjI7XHJcblxyXG5cdFx0Y3QudHJhbnNsYXRlKHRoaXMuZXN0aW1hdGVQYWRkaW5nLCB0aGlzLmVzdGltYXRlUGFkZGluZyk7XHJcblx0XHRpZihhc3luYyl7XHJcblx0XHRcdFV0aWxzLnJlcXVlc3RJZGxlQ2FsbGJhY2sodGhpcy5fcmVuZGVyVG9DYWNoZSk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0dGhpcy5fcmVuZGVyVG9DYWNoZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRfcmVuZGVyVG9DYWNoZSgpe1xyXG5cdFx0aWYoIXRoaXMuZGFubWFrdSlyZXR1cm47XHJcblx0XHR0aGlzLnJlbmRlcih0aGlzLl9jYWNoZS5jdHgyZCk7XHJcblx0XHRpZih1c2VJbWFnZUJpdG1hcCl7Ly91c2UgSW1hZ2VCaXRtYXBcclxuXHRcdFx0aWYodGhpcy5fYml0bWFwKXtcclxuXHRcdFx0XHR0aGlzLl9iaXRtYXAuY2xvc2UoKTtcclxuXHRcdFx0XHR0aGlzLl9iaXRtYXA9bnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRjcmVhdGVJbWFnZUJpdG1hcCh0aGlzLl9jYWNoZSkudGhlbihiaXRtYXA9PntcclxuXHRcdFx0XHR0aGlzLl9iaXRtYXA9Yml0bWFwO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmVuZGVyKGN0KXsvL3JlbmRlciB0ZXh0XHJcblx0XHRpZighdGhpcy5fcmVuZGVyTGlzdClyZXR1cm47XHJcblx0XHRjdC5zYXZlKCk7XHJcblx0XHRpZih0aGlzLmRhbm1ha3UuaGlnaGxpZ2h0KXtcclxuXHRcdFx0Y3QuZmlsbFN0eWxlPSdyZ2JhKDI1NSwyNTUsMjU1LDAuMyknO1xyXG5cdFx0XHRjdC5iZWdpblBhdGgoKTtcclxuXHRcdFx0Y3QucmVjdCgwLDAsdGhpcy5zdHlsZS53aWR0aCx0aGlzLnN0eWxlLmhlaWdodCk7XHJcblx0XHRcdGN0LmZpbGwoKTtcclxuXHRcdH1cclxuXHRcdGN0LmZvbnQ9dGhpcy5fZm9udFN0cmluZzsvL3NldCBmb250XHJcblx0XHRjdC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuXHRcdGN0LmxpbmVXaWR0aCA9IHRoaXMuZm9udC5zdHJva2VXaWR0aDtcclxuXHRcdGN0LmZpbGxTdHlsZSA9IHRoaXMuZm9udC5jb2xvcjtcclxuXHRcdGN0LnN0cm9rZVN0eWxlID0gdGhpcy5mb250LnN0cm9rZUNvbG9yO1xyXG5cdFx0Y3Quc2hhZG93Qmx1ciA9IHRoaXMuZm9udC5zaGFkb3dCbHVyO1xyXG5cdFx0Y3Quc2hhZG93Q29sb3I9IHRoaXMuZm9udC5zaGFkb3dDb2xvcjtcclxuXHRcdGN0LnNoYWRvd09mZnNldFggPSB0aGlzLmZvbnQuc2hhZG93T2Zmc2V0WDtcclxuXHRcdGN0LnNoYWRvd09mZnNldFkgPSB0aGlzLmZvbnQuc2hhZG93T2Zmc2V0WTtcclxuXHRcdGN0LnRleHRBbGlnbiA9IHRoaXMuZm9udC50ZXh0QWxpZ247XHJcblx0XHRsZXQgbGg9KHR5cGVvZiB0aGlzLmZvbnQubGluZUhlaWdodCA9PT0nbnVtYmVyJyk/dGhpcy5mb250LmxpbmVIZWlnaHQ6dGhpcy5mb250LmZvbnRTaXplLFxyXG5cdFx0XHR4O1xyXG5cdFx0c3dpdGNoKHRoaXMuZm9udC50ZXh0QWxpZ24pe1xyXG5cdFx0XHRjYXNlICdsZWZ0JzpjYXNlICdzdGFydCc6e1xyXG5cdFx0XHRcdHg9MDticmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXNlICdjZW50ZXInOntcclxuXHRcdFx0XHR4PXRoaXMuc3R5bGUud2lkdGgvMjticmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXNlICdyaWdodCc6Y2FzZSAnZW5kJzp7XHJcblx0XHRcdFx0eD10aGlzLnN0eWxlLndpZHRoO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRmb3IgKGxldCBpID0gdGhpcy5fcmVuZGVyTGlzdC5sZW5ndGg7aS0tOykge1xyXG5cdFx0XHR0aGlzLmZvbnQuc3Ryb2tlV2lkdGgmJmN0LnN0cm9rZVRleHQodGhpcy5fcmVuZGVyTGlzdFtpXSx4LGxoKihpKzAuNSkpO1xyXG5cdFx0XHR0aGlzLmZvbnQuZmlsbCYmY3QuZmlsbFRleHQodGhpcy5fcmVuZGVyTGlzdFtpXSx4LCBsaCooaSswLjUpKTtcclxuXHRcdH1cclxuXHRcdGN0LnJlc3RvcmUoKTtcclxuXHRcdHRoaXMuX3JlbmRlckxpc3Q9dW5kZWZpbmVkO1xyXG5cdH1cclxuXHRkZXN0cnVjdG9yKCl7XHJcblx0XHR0aGlzLl9mb250U3RyaW5nPXVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX3JlbmRlckxpc3Q9dW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5kYW5tYWt1PXVuZGVmaW5lZDtcclxuXHRcdHRoaXMuc3R5bGU9dW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5mb250PXVuZGVmaW5lZDtcclxuXHRcdGlmKHRoaXMuX2JpdG1hcCl7XHJcblx0XHRcdHRoaXMuX2JpdG1hcC5jbG9zZSgpO1xyXG5cdFx0XHR0aGlzLl9iaXRtYXA9bnVsbDtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IHR1bm5lbHM9WydyaWdodCcsJ2xlZnQnLCdib3R0b20nLCd0b3AnXTtcclxuY2xhc3MgVHVubmVsTWFuYWdlcntcclxuXHRjb25zdHJ1Y3Rvcigpe1xyXG5cdFx0dGhpcy5yZXNldCgpO1xyXG5cdH1cclxuXHRyZXNldCgpe1xyXG5cdFx0dGhpcy5yaWdodD17fTtcclxuXHRcdHRoaXMubGVmdD17fTtcclxuXHRcdHRoaXMuYm90dG9tPXt9O1xyXG5cdFx0dGhpcy50b3A9e307XHJcblx0fVxyXG5cdGdldFR1bm5lbCh0b2JqLGNIZWlnaHQpey8vZ2V0IHRoZSB0dW5uZWwgaW5kZXggdGhhdCBjYW4gY29udGFpbiB0aGUgZGFubWFrdSBvZiB0aGUgc2l6ZXNcclxuXHRcdGxldCB0dW5uZWw9dGhpcy50dW5uZWwodG9iai5kYW5tYWt1Lm1vZGUpLFxyXG5cdFx0XHRzaXplPXRvYmouc3R5bGUuaGVpZ2h0LFxyXG5cdFx0XHR0aT0wLFxyXG5cdFx0XHR0bnVtPS0xO1xyXG5cdFx0aWYodHlwZW9mIHNpemUgIT09J251bWJlcicgfHwgc2l6ZTw9MCl7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0luY29ycmVjdCBzaXplOicrc2l6ZSk7XHJcblx0XHRcdHNpemU9MjQ7XHJcblx0XHR9XHJcblx0XHRpZihzaXplPmNIZWlnaHQpcmV0dXJuIDA7XHJcblxyXG5cdFx0d2hpbGUodG51bTwwKXtcclxuXHRcdFx0Zm9yKGxldCB0PXRpK3NpemUtMTt0aTw9dDspe1xyXG5cdFx0XHRcdGlmKHR1bm5lbFt0aV0pey8vdXNlZFxyXG5cdFx0XHRcdFx0dGkrPXR1bm5lbFt0aV0udHVubmVsSGVpZ2h0O1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fWVsc2UgaWYoKHRpIT09MCkmJih0aSUoY0hlaWdodC0xKSk9PT0wKXsvL25ldyBwYWdlXHJcblx0XHRcdFx0XHR0aSsrO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fWVsc2UgaWYodGk9PT10KXsvL2dldFxyXG5cdFx0XHRcdFx0dG51bT10aS1zaXplKzE7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdHRpKys7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR0b2JqLnR1bm5lbE51bWJlcj10bnVtO1xyXG5cdFx0dG9iai50dW5uZWxIZWlnaHQ9KCgodG9iai5zdHlsZS55K3NpemUpPmNIZWlnaHQpPzE6c2l6ZSk7XHJcblx0XHR0aGlzLmFkZE1hcmsodG9iaik7XHJcblx0XHRyZXR1cm4gdG51bTtcclxuXHR9XHJcblx0YWRkTWFyayh0b2JqKXtcclxuXHRcdGxldCB0PXRoaXMudHVubmVsKHRvYmouZGFubWFrdS5tb2RlKTtcclxuXHRcdGlmKCF0W3RvYmoudHVubmVsTnVtYmVyXSl0W3RvYmoudHVubmVsTnVtYmVyXT10b2JqO1xyXG5cdH1cclxuXHRyZW1vdmVNYXJrKHRvYmope1xyXG5cdFx0bGV0IHQsdHVuPXRvYmoudHVubmVsTnVtYmVyO1xyXG5cdFx0aWYodHVuPj0wJiYodD10aGlzLnR1bm5lbCh0b2JqLmRhbm1ha3UubW9kZSkpW3R1bl09PT10b2JqKXtcclxuXHRcdFx0ZGVsZXRlIHRbdHVuXTtcclxuXHRcdFx0dG9iai50dW5uZWxOdW1iZXI9LTE7XHJcblx0XHR9XHJcblx0fVxyXG5cdHR1bm5lbChpZCl7XHJcblx0XHRyZXR1cm4gdGhpc1t0dW5uZWxzW2lkXV07XHJcblx0fVxyXG59XHJcblxyXG5cclxuY2xhc3MgUmVuZGVyaW5nRGFubWFrdU1hbmFnZXJ7XHJcblx0dG90YWxBcmVhPTA7XHJcblx0b25TY3JlZW5BcmVhPTA7XHJcblx0bGltaXRBcmVhPUluZmluaXR5Oy8vbGltaXQgZGFubWFrdSBhcmVhIG9uIHRoZSBzY3JlZW4oYXV0byBjaGFuZ2UpXHJcblx0dHVubmVsTWFuYWdlcj1uZXcgVHVubmVsTWFuYWdlcigpO1xyXG5cdGNvbnN0cnVjdG9yKGRUZXh0KXsvL2RUZXh0OlRleHREYW5tYWt1XHJcblx0XHR0aGlzLmRUZXh0PWRUZXh0O1xyXG5cdFx0aWYoZFRleHQudGV4dDJkLnN1cHBvcnRlZCl0aGlzLnRpbWVyPXNldEludGVydmFsKCgpPT50aGlzLnJlbmRlcmVyTW9kZUNoZWNrKCksMTUwMCk7XHJcblx0fVxyXG5cdGFkZCh0KXtcclxuXHRcdGlmKHQuZGFubWFrdS5vblNjcmVlbilyZXR1cm47XHJcblx0XHR0LmRhbm1ha3Uub25TY3JlZW49dHJ1ZTtcclxuXHRcdHRoaXMuZFRleHQuRGFubWFrdVRleHQucHVzaCh0KTtcclxuXHRcdHRoaXMudG90YWxBcmVhKz10Ll9jYWNoZS53aWR0aCp0Ll9jYWNoZS5oZWlnaHQ7Ly9jdW11bGF0ZSBkYW5tYWt1IGFyZWFcclxuXHRcdHRoaXMub25TY3JlZW5BcmVhKz1NYXRoLm1pbih0Ll9jYWNoZS53aWR0aCx0aGlzLmRUZXh0LmZyYW1lLndpZHRoKSpNYXRoLm1pbih0Ll9jYWNoZS5oZWlnaHQsdGhpcy5kVGV4dC5mcmFtZS5oZWlnaHQpO1xyXG5cdFx0dGhpcy5kVGV4dC5hY3RpdmVSZW5kZXJlck1vZGUubmV3RGFubWFrdSh0KTtcclxuXHR9XHJcblx0cmVtb3ZlKHQpe1xyXG5cdFx0dC5kYW5tYWt1Lm9uU2NyZWVuPWZhbHNlO1xyXG5cdFx0bGV0IGluZD10aGlzLmRUZXh0LkRhbm1ha3VUZXh0LmluZGV4T2YodCk7XHJcblx0XHRpZihpbmQ+PTApe1xyXG5cdFx0XHR0aGlzLmRUZXh0LkRhbm1ha3VUZXh0LnNwbGljZShpbmQsMSk7XHJcblx0XHRcdHRoaXMudG90YWxBcmVhLT10Ll9jYWNoZS53aWR0aCp0Ll9jYWNoZS5oZWlnaHQ7XHJcblx0XHRcdHRoaXMub25TY3JlZW5BcmVhLT1NYXRoLm1pbih0Ll9jYWNoZS53aWR0aCx0aGlzLmRUZXh0LmZyYW1lLndpZHRoKSpNYXRoLm1pbih0Ll9jYWNoZS5oZWlnaHQsdGhpcy5kVGV4dC5mcmFtZS5oZWlnaHQpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy50dW5uZWxNYW5hZ2VyLnJlbW92ZU1hcmsodCk7XHJcblx0XHR0aGlzLmRUZXh0LmFjdGl2ZVJlbmRlcmVyTW9kZS5yZW1vdmUodCk7XHJcblx0XHR0aGlzLmRUZXh0LmFjdGl2ZVJlbmRlcmVyTW9kZS5kZWxldGVSZWxhdGVkVGV4dE9iamVjdCh0KTtcclxuXHRcdHQucmVtb3ZlVGltZT1EYXRlLm5vdygpO1xyXG5cdFx0dC5kYW5tYWt1PW51bGw7XHJcblx0XHR0aGlzLmRUZXh0LkdyYXBoQ2FjaGUucHVzaCh0KTtcclxuXHR9XHJcblx0Y2xlYXIoKXtcclxuXHRcdGZvcihsZXQgaT0wLFQ7aTx0aGlzLmRUZXh0LkRhbm1ha3VUZXh0Lmxlbmd0aDtpKyspe1xyXG5cdFx0XHRUPXRoaXMuZFRleHQuRGFubWFrdVRleHRbaV07XHJcblx0XHRcdHRoaXMucmVtb3ZlKFQpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy50dW5uZWxNYW5hZ2VyLnJlc2V0KCk7XHJcblx0fVxyXG5cdHJlbmRlcmVyTW9kZUNoZWNrKCl7Ly9hdXRvIHNoaWZ0IHJlbmRlcmluZyBtb2RlXHJcblx0XHRsZXQgRD10aGlzLmRUZXh0O1xyXG5cdFx0aWYoIXRoaXMuZFRleHQub3B0aW9ucy5hdXRvU2hpZnRSZW5kZXJpbmdNb2RlIHx8IEQucGF1c2VkKXJldHVybjtcclxuXHRcdGlmKEQuZnJhbWUuZnBzPChELmZyYW1lLmZwc0xpbWl0fHw2MCkqMC45KXsvL3doZW4gZnJhbWUgcmF0ZSBsb3dcclxuXHRcdFx0aWYodGhpcy5saW1pdEFyZWE+dGhpcy50b3RhbEFyZWEpdGhpcy5saW1pdEFyZWE9dGhpcy50b3RhbEFyZWE7Ly9yZWR1Y2UgYXJlYSBsaW1pdFxyXG5cdFx0fWVsc2UgaWYodGhpcy5saW1pdEFyZWE8dGhpcy50b3RhbEFyZWEpey8vaW5jcmVhc2UgYXJlYSBsaW1pdFxyXG5cdFx0XHR0aGlzLmxpbWl0QXJlYT10aGlzLnRvdGFsQXJlYTtcclxuXHRcdH1cclxuXHRcdGlmKEQucmVuZGVyZXJNb2RlPT09MSAmJiB0aGlzLnRvdGFsQXJlYT50aGlzLmxpbWl0QXJlYSl7Ly9zd2l0Y2ggdG8gY2FudmFzIG1vZGUgd2hlbiBmcHMgbG93XHJcblx0XHRcdEQudGV4dDJkLnN1cHBvcnRlZCYmRC5zZXRSZW5kZXJlck1vZGUoMik7XHJcblx0XHR9ZWxzZSBpZihELnJlbmRlcmVyTW9kZT09PTImJiB0aGlzLnRvdGFsQXJlYTx0aGlzLmxpbWl0QXJlYSowLjUpey8vcmVjb3ZlciB0byBjc3MgbW9kZSB3aGVuIGFuaW1hdGlvbiBpcyBmbHVlbnQgZW5vdWdoXHJcblx0XHRcdEQudGV4dENzcy5zdXBwb3J0ZWQmJkQuc2V0UmVuZGVyZXJNb2RlKDEpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGljaG90b215KGFycix0LHN0YXJ0LGVuZCxwb3NpdGlvbj1mYWxzZSl7XHJcblx0aWYoYXJyLmxlbmd0aD09PTApcmV0dXJuIDA7XHJcblx0bGV0IG09c3RhcnQvKiAscz1zdGFydCxlPWVuZCAqLztcclxuXHR3aGlsZShzdGFydCA8PSBlbmQpey8vZGljaG90b215XHJcblx0XHRtPShzdGFydCtlbmQpPj4xO1xyXG5cdFx0aWYodDw9YXJyW21dLnRpbWUpZW5kPW0tMTtcclxuXHRcdGVsc2V7c3RhcnQ9bSsxO31cclxuXHR9XHJcblx0aWYocG9zaXRpb24pey8vZmluZCB0byB0b3BcclxuXHRcdHdoaWxlKHN0YXJ0PjAgJiYgKGFycltzdGFydC0xXS50aW1lPT09dCkpXHJcblx0XHRcdHN0YXJ0LS07XHJcblx0fWVsc2V7Ly9maW5kIHRvIGVuZFxyXG5cdFx0d2hpbGUoc3RhcnQ8PWVuZCAmJiAoYXJyW3N0YXJ0XS50aW1lPT09dCkpXHJcblx0XHRcdHN0YXJ0Kys7XHJcblx0fVxyXG5cdHJldHVybiBzdGFydDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXQoRGFubWFrdUZyYW1lKXtcclxuXHREYW5tYWt1RnJhbWUuYWRkTW9kdWxlKCdUZXh0RGFubWFrdScsVGV4dERhbm1ha3UpO1xyXG59OzsiLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuY2xhc3MgdGV4dE1vZHVsZVRlbXBsYXRle1xyXG5cdHN1cHBvcnRlZD1mYWxzZTtcclxuXHRjb25zdHJ1Y3RvcihkVGV4dCl7XHJcblx0XHR0aGlzLmRUZXh0PWRUZXh0O1xyXG5cdH1cclxuXHRkcmF3KCl7fS8vZHJhdyBjYWxsIGZyb20gZGFubWFrdS1mcmFtZSBvbiBldmVyeSBhbmltYXRpb24gZnJhbWVcclxuXHRyYXRlKCl7fS8vcGxheWJhY2sgcmF0ZVxyXG5cdHBhdXNlKCl7fS8vdGhlIG1lZGlhIGlzIHBhdXNlZFxyXG5cdHBsYXkoKXt9Ly90aGUgbWVkaWEgaXMgc3RhcnRpbmdcclxuXHRjbGVhcigpe30vL2NsZWFyIGFsbCBkYW5tYWt1IG9uIHNjcmVlblxyXG5cdHJlc2l6ZSgpe30vL3RoZSBjb250YWluZXIgaXMgcmVzaXplZFxyXG5cdHJlbW92ZSgpe30vL3JlbW92ZSBhIGRhbm1ha3UgZnJlb20gdGhlIHNjcmVlblxyXG5cdGVuYWJsZSgpe30vL3RoaXMgbW9kdWxlIGlzIGVuYWJsZWRcclxuXHRkaXNhYmxlKCl7fS8vdGhpcyBtb2R1bGUgaXMgZGlzYWJsZWRcclxuXHRuZXdEYW5tYWt1KCl7fS8vYWRkIGRhbm1ha3UgdG8gdGhlIHNjcmVlblxyXG5cdGRlbGV0ZVJlbGF0ZWRUZXh0T2JqZWN0KCl7fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0ZXh0TW9kdWxlVGVtcGxhdGU7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvYXJyYXkvaXMtYXJyYXlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9kYXRlL25vd1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL2JpbmRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9jb25jYXRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9jb3B5LXdpdGhpblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL2ZpbGxcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9mb3ItZWFjaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL2luc3RhbmNlL2luZGV4LW9mXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2UvcmVwZWF0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2Uvc2xpY2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS9zb3J0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2Uvc3BsaWNlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvaW5zdGFuY2Uvc3RhcnRzLXdpdGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9pbnN0YW5jZS90cmltXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvb2JqZWN0L2Fzc2lnblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL29iamVjdC9jcmVhdGVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvb2JqZWN0L2VudHJpZXNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9zdGFibGUvcHJvbWlzZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvc3RhYmxlL3NldC1pbW1lZGlhdGVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9zZXQtaW50ZXJ2YWxcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL3N0YWJsZS9zZXQtdGltZW91dFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvYXJyYXkvZnJvbVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvYXJyYXkvaXMtYXJyYXlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL2ZlYXR1cmVzL2dldC1pdGVyYXRvclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvaW5zdGFuY2Uvc2xpY2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL2ZlYXR1cmVzL2lzLWl0ZXJhYmxlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvY3JlYXRlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjb3JlLWpzLXB1cmUvZmVhdHVyZXMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL2ZlYXR1cmVzL3Byb21pc2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL2ZlYXR1cmVzL3JlZmxlY3QvZ2V0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMtcHVyZS9mZWF0dXJlcy9zeW1ib2xcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy1wdXJlL2ZlYXR1cmVzL3N5bWJvbC9pdGVyYXRvclwiKTsiLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7IiwidmFyIF9BcnJheSRpc0FycmF5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvYXJyYXkvaXMtYXJyYXlcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKF9BcnJheSRpc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzOyIsInZhciBfQXJyYXkkaXNBcnJheSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2FycmF5L2lzLWFycmF5XCIpO1xuXG52YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKF9BcnJheSRpc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJ2YXIgX1Byb21pc2UgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9wcm9taXNlXCIpO1xuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgX1Byb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IF9Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsInZhciBfT2JqZWN0JGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG5cbiAgICBfT2JqZWN0JGRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBfT2JqZWN0JGRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwidmFyIF9PYmplY3QkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKTtcblxudmFyIF9SZWZsZWN0JGdldCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3JlZmxlY3QvZ2V0XCIpO1xuXG52YXIgc3VwZXJQcm9wQmFzZSA9IHJlcXVpcmUoXCIuL3N1cGVyUHJvcEJhc2VcIik7XG5cbmZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIF9SZWZsZWN0JGdldCkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX2dldCA9IF9SZWZsZWN0JGdldDtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgICB2YXIgYmFzZSA9IHN1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBpZiAoIWJhc2UpIHJldHVybjtcblxuICAgICAgdmFyIGRlc2MgPSBfT2JqZWN0JGdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXQ7IiwidmFyIF9PYmplY3QkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9PYmplY3Qkc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBfT2JqZWN0JHNldFByb3RvdHlwZU9mID8gX09iamVjdCRnZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IF9PYmplY3QkZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsInZhciBfT2JqZWN0JGNyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IF9PYmplY3QkY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsInZhciBfQXJyYXkkZnJvbSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2FycmF5L2Zyb21cIik7XG5cbnZhciBfaXNJdGVyYWJsZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2lzLWl0ZXJhYmxlXCIpO1xuXG52YXIgX1N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgX1N5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfaXNJdGVyYWJsZShPYmplY3QoaXRlcikpKSByZXR1cm4gX0FycmF5JGZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJ2YXIgX2dldEl0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvZ2V0LWl0ZXJhdG9yXCIpO1xuXG52YXIgX2lzSXRlcmFibGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9pcy1pdGVyYWJsZVwiKTtcblxudmFyIF9TeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBfU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICFfaXNJdGVyYWJsZShPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gX2dldEl0ZXJhdG9yKGFyciksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQ7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsInZhciBfT2JqZWN0JHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gX09iamVjdCRzZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJ2YXIgYXJyYXlXaXRoSG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheUxpbWl0ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVSZXN0ID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVSZXN0XCIpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zbGljZWRUb0FycmF5OyIsInZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL2dldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XG4gIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcbiAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhaztcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3N1cGVyUHJvcEJhc2U7IiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsInZhciBfU3ltYm9sJGl0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX1N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgX1N5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfU3ltYm9sJGl0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIF9TeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9TeW1ib2wgJiYgb2JqICE9PSBfU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwidmFyIF9BcnJheSRmcm9tID0gcmVxdWlyZShcIi4uL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxudmFyIF9zbGljZUluc3RhbmNlUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9pbnN0YW5jZS9zbGljZVwiKTtcblxudmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIHZhciBfY29udGV4dDtcblxuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuXG4gIHZhciBuID0gX3NsaWNlSW5zdGFuY2VQcm9wZXJ0eShfY29udGV4dCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSkuY2FsbChfY29udGV4dCwgOCwgLTEpO1xuXG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBfQXJyYXkkZnJvbShuKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuICAgIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHJlc2l6ZU9ic2VydmVycyA9IFtdO1xuXG4gICAgdmFyIGhhc0FjdGl2ZU9ic2VydmF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlc2l6ZU9ic2VydmVycy5zb21lKGZ1bmN0aW9uIChybykgeyByZXR1cm4gcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGggPiAwOyB9KTtcbiAgICB9O1xuXG4gICAgdmFyIGhhc1NraXBwZWRPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXNpemVPYnNlcnZlcnMuc29tZShmdW5jdGlvbiAocm8pIHsgcmV0dXJuIHJvLnNraXBwZWRUYXJnZXRzLmxlbmd0aCA+IDA7IH0pO1xuICAgIH07XG5cbiAgICB2YXIgbXNnID0gJ1Jlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9ucy4nO1xuICAgIHZhciBkZWxpdmVyUmVzaXplTG9vcEVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXZlbnQ7XG4gICAgICAgIGlmICh0eXBlb2YgRXJyb3JFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZXZlbnQgPSBuZXcgRXJyb3JFdmVudCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbXNnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2Vycm9yJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgIGV2ZW50Lm1lc3NhZ2UgPSBtc2c7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH07XG5cbiAgICB2YXIgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zO1xuICAgIChmdW5jdGlvbiAoUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zKSB7XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkJPUkRFUl9CT1hcIl0gPSBcImJvcmRlci1ib3hcIjtcbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zW1wiQ09OVEVOVF9CT1hcIl0gPSBcImNvbnRlbnQtYm94XCI7XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9uc1tcIkRFVklDRV9QSVhFTF9DT05URU5UX0JPWFwiXSA9IFwiZGV2aWNlLXBpeGVsLWNvbnRlbnQtYm94XCI7XG4gICAgfSkoUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIHx8IChSZXNpemVPYnNlcnZlckJveE9wdGlvbnMgPSB7fSkpO1xuXG4gICAgdmFyIERPTVJlY3RSZWFkT25seSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIERPTVJlY3RSZWFkT25seSh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLnk7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLng7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IHRoaXMudG9wICsgdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5sZWZ0ICsgdGhpcy53aWR0aDtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIERPTVJlY3RSZWFkT25seS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgeCA9IF9hLngsIHkgPSBfYS55LCB0b3AgPSBfYS50b3AsIHJpZ2h0ID0gX2EucmlnaHQsIGJvdHRvbSA9IF9hLmJvdHRvbSwgbGVmdCA9IF9hLmxlZnQsIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHRvcDogdG9wLCByaWdodDogcmlnaHQsIGJvdHRvbTogYm90dG9tLCBsZWZ0OiBsZWZ0LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG4gICAgICAgIH07XG4gICAgICAgIERPTVJlY3RSZWFkT25seS5mcm9tUmVjdCA9IGZ1bmN0aW9uIChyZWN0YW5nbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRE9NUmVjdFJlYWRPbmx5KHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgcmVjdGFuZ2xlLndpZHRoLCByZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERPTVJlY3RSZWFkT25seTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIGlzU1ZHID0gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCAmJiAnZ2V0QkJveCcgaW4gdGFyZ2V0OyB9O1xuICAgIHZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKGlzU1ZHKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRhcmdldC5nZXRCQm94KCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiAhd2lkdGggJiYgIWhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2IgPSB0YXJnZXQsIG9mZnNldFdpZHRoID0gX2Iub2Zmc2V0V2lkdGgsIG9mZnNldEhlaWdodCA9IF9iLm9mZnNldEhlaWdodDtcbiAgICAgICAgcmV0dXJuICEob2Zmc2V0V2lkdGggfHwgb2Zmc2V0SGVpZ2h0IHx8IHRhcmdldC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCk7XG4gICAgfTtcbiAgICB2YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgc2NvcGUgPSAoX2IgPSAoX2EgPSBvYmopID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGVmYXVsdFZpZXc7XG4gICAgICAgIHJldHVybiAhIShzY29wZSAmJiBvYmogaW5zdGFuY2VvZiBzY29wZS5FbGVtZW50KTtcbiAgICB9O1xuICAgIHZhciBpc1JlcGxhY2VkRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgc3dpdGNoICh0YXJnZXQudGFnTmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnSU5QVVQnOlxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQudHlwZSAhPT0gJ2ltYWdlJykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdWSURFTyc6XG4gICAgICAgICAgICBjYXNlICdBVURJTyc6XG4gICAgICAgICAgICBjYXNlICdFTUJFRCc6XG4gICAgICAgICAgICBjYXNlICdPQkpFQ1QnOlxuICAgICAgICAgICAgY2FzZSAnQ0FOVkFTJzpcbiAgICAgICAgICAgIGNhc2UgJ0lGUkFNRSc6XG4gICAgICAgICAgICBjYXNlICdJTUcnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG5cbiAgICB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuICAgIHZhciBzY3JvbGxSZWdleHAgPSAvYXV0b3xzY3JvbGwvO1xuICAgIHZhciB2ZXJ0aWNhbFJlZ2V4cCA9IC9edGJ8dmVydGljYWwvO1xuICAgIHZhciBJRSA9ICgvbXNpZXx0cmlkZW50L2kpLnRlc3QoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHBhcnNlRGltZW5zaW9uID0gZnVuY3Rpb24gKHBpeGVsKSB7IHJldHVybiBwYXJzZUZsb2F0KHBpeGVsIHx8ICcwJyk7IH07XG4gICAgdmFyIHNpemUgPSBmdW5jdGlvbiAoaW5saW5lU2l6ZSwgYmxvY2tTaXplLCBzd2l0Y2hTaXplcykge1xuICAgICAgICBpZiAoaW5saW5lU2l6ZSA9PT0gdm9pZCAwKSB7IGlubGluZVNpemUgPSAwOyB9XG4gICAgICAgIGlmIChibG9ja1NpemUgPT09IHZvaWQgMCkgeyBibG9ja1NpemUgPSAwOyB9XG4gICAgICAgIGlmIChzd2l0Y2hTaXplcyA9PT0gdm9pZCAwKSB7IHN3aXRjaFNpemVzID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgaW5saW5lU2l6ZTogKHN3aXRjaFNpemVzID8gYmxvY2tTaXplIDogaW5saW5lU2l6ZSkgfHwgMCxcbiAgICAgICAgICAgIGJsb2NrU2l6ZTogKHN3aXRjaFNpemVzID8gaW5saW5lU2l6ZSA6IGJsb2NrU2l6ZSkgfHwgMFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHZhciB6ZXJvQm94ZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTogc2l6ZSgpLFxuICAgICAgICBib3JkZXJCb3hTaXplOiBzaXplKCksXG4gICAgICAgIGNvbnRlbnRCb3hTaXplOiBzaXplKCksXG4gICAgICAgIGNvbnRlbnRSZWN0OiBuZXcgRE9NUmVjdFJlYWRPbmx5KDAsIDAsIDAsIDApXG4gICAgfSk7XG4gICAgdmFyIGNhbGN1bGF0ZUJveFNpemVzID0gZnVuY3Rpb24gKHRhcmdldCwgZm9yY2VSZWNhbGN1bGF0aW9uKSB7XG4gICAgICAgIGlmIChmb3JjZVJlY2FsY3VsYXRpb24gPT09IHZvaWQgMCkgeyBmb3JjZVJlY2FsY3VsYXRpb24gPSBmYWxzZTsgfVxuICAgICAgICBpZiAoY2FjaGUuaGFzKHRhcmdldCkgJiYgIWZvcmNlUmVjYWxjdWxhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmdldCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0hpZGRlbih0YXJnZXQpKSB7XG4gICAgICAgICAgICBjYWNoZS5zZXQodGFyZ2V0LCB6ZXJvQm94ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHplcm9Cb3hlcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gICAgICAgIHZhciBzdmcgPSBpc1NWRyh0YXJnZXQpICYmIHRhcmdldC5vd25lclNWR0VsZW1lbnQgJiYgdGFyZ2V0LmdldEJCb3goKTtcbiAgICAgICAgdmFyIHJlbW92ZVBhZGRpbmcgPSAhSUUgJiYgY3MuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCc7XG4gICAgICAgIHZhciBzd2l0Y2hTaXplcyA9IHZlcnRpY2FsUmVnZXhwLnRlc3QoY3Mud3JpdGluZ01vZGUgfHwgJycpO1xuICAgICAgICB2YXIgY2FuU2Nyb2xsVmVydGljYWxseSA9ICFzdmcgJiYgc2Nyb2xsUmVnZXhwLnRlc3QoY3Mub3ZlcmZsb3dZIHx8ICcnKTtcbiAgICAgICAgdmFyIGNhblNjcm9sbEhvcml6b250YWxseSA9ICFzdmcgJiYgc2Nyb2xsUmVnZXhwLnRlc3QoY3Mub3ZlcmZsb3dYIHx8ICcnKTtcbiAgICAgICAgdmFyIHBhZGRpbmdUb3AgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ1RvcCk7XG4gICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ1JpZ2h0KTtcbiAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MucGFkZGluZ0JvdHRvbSk7XG4gICAgICAgIHZhciBwYWRkaW5nTGVmdCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5wYWRkaW5nTGVmdCk7XG4gICAgICAgIHZhciBib3JkZXJUb3AgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyVG9wV2lkdGgpO1xuICAgICAgICB2YXIgYm9yZGVyUmlnaHQgPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyUmlnaHRXaWR0aCk7XG4gICAgICAgIHZhciBib3JkZXJCb3R0b20gPSBzdmcgPyAwIDogcGFyc2VEaW1lbnNpb24oY3MuYm9yZGVyQm90dG9tV2lkdGgpO1xuICAgICAgICB2YXIgYm9yZGVyTGVmdCA9IHN2ZyA/IDAgOiBwYXJzZURpbWVuc2lvbihjcy5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgICAgICB2YXIgaG9yaXpvbnRhbFBhZGRpbmcgPSBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodDtcbiAgICAgICAgdmFyIHZlcnRpY2FsUGFkZGluZyA9IHBhZGRpbmdUb3AgKyBwYWRkaW5nQm90dG9tO1xuICAgICAgICB2YXIgaG9yaXpvbnRhbEJvcmRlckFyZWEgPSBib3JkZXJMZWZ0ICsgYm9yZGVyUmlnaHQ7XG4gICAgICAgIHZhciB2ZXJ0aWNhbEJvcmRlckFyZWEgPSBib3JkZXJUb3AgKyBib3JkZXJCb3R0b207XG4gICAgICAgIHZhciBob3Jpem9udGFsU2Nyb2xsYmFyVGhpY2tuZXNzID0gIWNhblNjcm9sbEhvcml6b250YWxseSA/IDAgOiB0YXJnZXQub2Zmc2V0SGVpZ2h0IC0gdmVydGljYWxCb3JkZXJBcmVhIC0gdGFyZ2V0LmNsaWVudEhlaWdodDtcbiAgICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyVGhpY2tuZXNzID0gIWNhblNjcm9sbFZlcnRpY2FsbHkgPyAwIDogdGFyZ2V0Lm9mZnNldFdpZHRoIC0gaG9yaXpvbnRhbEJvcmRlckFyZWEgLSB0YXJnZXQuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciB3aWR0aFJlZHVjdGlvbiA9IHJlbW92ZVBhZGRpbmcgPyBob3Jpem9udGFsUGFkZGluZyArIGhvcml6b250YWxCb3JkZXJBcmVhIDogMDtcbiAgICAgICAgdmFyIGhlaWdodFJlZHVjdGlvbiA9IHJlbW92ZVBhZGRpbmcgPyB2ZXJ0aWNhbFBhZGRpbmcgKyB2ZXJ0aWNhbEJvcmRlckFyZWEgOiAwO1xuICAgICAgICB2YXIgY29udGVudFdpZHRoID0gc3ZnID8gc3ZnLndpZHRoIDogcGFyc2VEaW1lbnNpb24oY3Mud2lkdGgpIC0gd2lkdGhSZWR1Y3Rpb24gLSB2ZXJ0aWNhbFNjcm9sbGJhclRoaWNrbmVzcztcbiAgICAgICAgdmFyIGNvbnRlbnRIZWlnaHQgPSBzdmcgPyBzdmcuaGVpZ2h0IDogcGFyc2VEaW1lbnNpb24oY3MuaGVpZ2h0KSAtIGhlaWdodFJlZHVjdGlvbiAtIGhvcml6b250YWxTY3JvbGxiYXJUaGlja25lc3M7XG4gICAgICAgIHZhciBib3JkZXJCb3hXaWR0aCA9IGNvbnRlbnRXaWR0aCArIGhvcml6b250YWxQYWRkaW5nICsgdmVydGljYWxTY3JvbGxiYXJUaGlja25lc3MgKyBob3Jpem9udGFsQm9yZGVyQXJlYTtcbiAgICAgICAgdmFyIGJvcmRlckJveEhlaWdodCA9IGNvbnRlbnRIZWlnaHQgKyB2ZXJ0aWNhbFBhZGRpbmcgKyBob3Jpem9udGFsU2Nyb2xsYmFyVGhpY2tuZXNzICsgdmVydGljYWxCb3JkZXJBcmVhO1xuICAgICAgICB2YXIgYm94ZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgIGRldmljZVBpeGVsQ29udGVudEJveFNpemU6IHNpemUoTWF0aC5yb3VuZChjb250ZW50V2lkdGggKiBkZXZpY2VQaXhlbFJhdGlvKSwgTWF0aC5yb3VuZChjb250ZW50SGVpZ2h0ICogZGV2aWNlUGl4ZWxSYXRpbyksIHN3aXRjaFNpemVzKSxcbiAgICAgICAgICAgIGJvcmRlckJveFNpemU6IHNpemUoYm9yZGVyQm94V2lkdGgsIGJvcmRlckJveEhlaWdodCwgc3dpdGNoU2l6ZXMpLFxuICAgICAgICAgICAgY29udGVudEJveFNpemU6IHNpemUoY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LCBzd2l0Y2hTaXplcyksXG4gICAgICAgICAgICBjb250ZW50UmVjdDogbmV3IERPTVJlY3RSZWFkT25seShwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KVxuICAgICAgICB9KTtcbiAgICAgICAgY2FjaGUuc2V0KHRhcmdldCwgYm94ZXMpO1xuICAgICAgICByZXR1cm4gYm94ZXM7XG4gICAgfTtcbiAgICB2YXIgY2FsY3VsYXRlQm94U2l6ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9ic2VydmVkQm94LCBmb3JjZVJlY2FsY3VsYXRpb24pIHtcbiAgICAgICAgdmFyIF9hID0gY2FsY3VsYXRlQm94U2l6ZXModGFyZ2V0LCBmb3JjZVJlY2FsY3VsYXRpb24pLCBib3JkZXJCb3hTaXplID0gX2EuYm9yZGVyQm94U2l6ZSwgY29udGVudEJveFNpemUgPSBfYS5jb250ZW50Qm94U2l6ZSwgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSA9IF9hLmRldmljZVBpeGVsQ29udGVudEJveFNpemU7XG4gICAgICAgIHN3aXRjaCAob2JzZXJ2ZWRCb3gpIHtcbiAgICAgICAgICAgIGNhc2UgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLkRFVklDRV9QSVhFTF9DT05URU5UX0JPWDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTtcbiAgICAgICAgICAgIGNhc2UgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLkJPUkRFUl9CT1g6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvcmRlckJveFNpemU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50Qm94U2l6ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgUmVzaXplT2JzZXJ2ZXJFbnRyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRW50cnkodGFyZ2V0KSB7XG4gICAgICAgICAgICB2YXIgYm94ZXMgPSBjYWxjdWxhdGVCb3hTaXplcyh0YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRSZWN0ID0gYm94ZXMuY29udGVudFJlY3Q7XG4gICAgICAgICAgICB0aGlzLmJvcmRlckJveFNpemUgPSBbYm94ZXMuYm9yZGVyQm94U2l6ZV07XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRCb3hTaXplID0gW2JveGVzLmNvbnRlbnRCb3hTaXplXTtcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZSA9IFtib3hlcy5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJFbnRyeTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIGNhbGN1bGF0ZURlcHRoRm9yTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGlmIChpc0hpZGRlbihub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZXB0aCA9IDA7XG4gICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgICAgIGRlcHRoICs9IDE7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVwdGg7XG4gICAgfTtcblxuICAgIHZhciBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaGFsbG93ZXN0RGVwdGggPSBJbmZpbml0eTtcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICAgICAgICByZXNpemVPYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiBwcm9jZXNzT2JzZXJ2ZXIocm8pIHtcbiAgICAgICAgICAgIGlmIChyby5hY3RpdmVUYXJnZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgICAgICAgICByby5hY3RpdmVUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc1RhcmdldChvdCkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IG5ldyBSZXNpemVPYnNlcnZlckVudHJ5KG90LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldERlcHRoID0gY2FsY3VsYXRlRGVwdGhGb3JOb2RlKG90LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBvdC5sYXN0UmVwb3J0ZWRTaXplID0gY2FsY3VsYXRlQm94U2l6ZShvdC50YXJnZXQsIG90Lm9ic2VydmVkQm94KTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0RGVwdGggPCBzaGFsbG93ZXN0RGVwdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhbGxvd2VzdERlcHRoID0gdGFyZ2V0RGVwdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiByZXNpemVPYnNlcnZlckNhbGxiYWNrKCkge1xuICAgICAgICAgICAgICAgIHJvLmNhbGxiYWNrLmNhbGwocm8ub2JzZXJ2ZXIsIGVudHJpZXMsIHJvLm9ic2VydmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCwgcm8uYWN0aXZlVGFyZ2V0cy5sZW5ndGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjYWxsYmFja3NfMSA9IGNhbGxiYWNrczsgX2kgPCBjYWxsYmFja3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc18xW19pXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNoYWxsb3dlc3REZXB0aDtcbiAgICB9O1xuXG4gICAgdmFyIGdhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGggPSBmdW5jdGlvbiAoZGVwdGgpIHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gcHJvY2Vzc09ic2VydmVyKHJvKSB7XG4gICAgICAgICAgICByby5hY3RpdmVUYXJnZXRzLnNwbGljZSgwLCByby5hY3RpdmVUYXJnZXRzLmxlbmd0aCk7XG4gICAgICAgICAgICByby5za2lwcGVkVGFyZ2V0cy5zcGxpY2UoMCwgcm8uc2tpcHBlZFRhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIHJvLm9ic2VydmF0aW9uVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uIHByb2Nlc3NUYXJnZXQob3QpIHtcbiAgICAgICAgICAgICAgICBpZiAob3QuaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsY3VsYXRlRGVwdGhGb3JOb2RlKG90LnRhcmdldCkgPiBkZXB0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm8uYWN0aXZlVGFyZ2V0cy5wdXNoKG90KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvLnNraXBwZWRUYXJnZXRzLnB1c2gob3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgcHJvY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlcHRoID0gMDtcbiAgICAgICAgZ2F0aGVyQWN0aXZlT2JzZXJ2YXRpb25zQXREZXB0aChkZXB0aCk7XG4gICAgICAgIHdoaWxlIChoYXNBY3RpdmVPYnNlcnZhdGlvbnMoKSkge1xuICAgICAgICAgICAgZGVwdGggPSBicm9hZGNhc3RBY3RpdmVPYnNlcnZhdGlvbnMoKTtcbiAgICAgICAgICAgIGdhdGhlckFjdGl2ZU9ic2VydmF0aW9uc0F0RGVwdGgoZGVwdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNTa2lwcGVkT2JzZXJ2YXRpb25zKCkpIHtcbiAgICAgICAgICAgIGRlbGl2ZXJSZXNpemVMb29wRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVwdGggPiAwO1xuICAgIH07XG5cbiAgICB2YXIgdHJpZ2dlcjtcbiAgICB2YXIgY2FsbGJhY2tzID0gW107XG4gICAgdmFyIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrcy5zcGxpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIGNiKCk7IH0pOyB9O1xuICAgIHZhciBxdWV1ZU1pY3JvVGFzayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRyaWdnZXIpIHtcbiAgICAgICAgICAgIHZhciB0b2dnbGVfMSA9IDA7XG4gICAgICAgICAgICB2YXIgZWxfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7IGNoYXJhY3RlckRhdGE6IHRydWUgfTtcbiAgICAgICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5vdGlmeSgpOyB9KS5vYnNlcnZlKGVsXzEsIGNvbmZpZyk7XG4gICAgICAgICAgICB0cmlnZ2VyID0gZnVuY3Rpb24gKCkgeyBlbF8xLnRleHRDb250ZW50ID0gXCJcIiArICh0b2dnbGVfMSA/IHRvZ2dsZV8xLS0gOiB0b2dnbGVfMSsrKTsgfTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHRyaWdnZXIoKTtcbiAgICB9O1xuXG4gICAgdmFyIHF1ZXVlUmVzaXplT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgcXVldWVNaWNyb1Rhc2soZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXIoKSB7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIHdhdGNoaW5nID0gMDtcbiAgICB2YXIgaXNXYXRjaGluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhd2F0Y2hpbmc7IH07XG4gICAgdmFyIENBVENIX1BFUklPRCA9IDI1MDtcbiAgICB2YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xuICAgIHZhciBldmVudHMgPSBbXG4gICAgICAgICdyZXNpemUnLFxuICAgICAgICAnbG9hZCcsXG4gICAgICAgICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgJ2FuaW1hdGlvbmVuZCcsXG4gICAgICAgICdhbmltYXRpb25zdGFydCcsXG4gICAgICAgICdhbmltYXRpb25pdGVyYXRpb24nLFxuICAgICAgICAna2V5dXAnLFxuICAgICAgICAna2V5ZG93bicsXG4gICAgICAgICdtb3VzZXVwJyxcbiAgICAgICAgJ21vdXNlZG93bicsXG4gICAgICAgICdtb3VzZW92ZXInLFxuICAgICAgICAnbW91c2VvdXQnLFxuICAgICAgICAnYmx1cicsXG4gICAgICAgICdmb2N1cydcbiAgICBdO1xuICAgIHZhciB0aW1lID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkgeyB0aW1lb3V0ID0gMDsgfVxuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSArIHRpbWVvdXQ7XG4gICAgfTtcbiAgICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgdmFyIFNjaGVkdWxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFNjaGVkdWxlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNjaGVkdWxlKCk7IH07XG4gICAgICAgIH1cbiAgICAgICAgU2NoZWR1bGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAodGltZW91dCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ID09PSB2b2lkIDApIHsgdGltZW91dCA9IENBVENIX1BFUklPRDsgfVxuICAgICAgICAgICAgaWYgKHNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgdW50aWwgPSB0aW1lKHRpbWVvdXQpO1xuICAgICAgICAgICAgcXVldWVSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRzSGF2ZVJlc2l6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c0hhdmVSZXNpemVkID0gcHJvY2VzcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSB1bnRpbCAtIHRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1dhdGNoaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHNIYXZlUmVzaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucnVuKDEwMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW4odGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMucnVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIFNjaGVkdWxlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgY2IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5vYnNlcnZlciAmJiBfdGhpcy5vYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIG9ic2VydmVyQ29uZmlnKTsgfTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkgPyBjYigpIDogZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gICAgICAgIH07XG4gICAgICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmUoKTtcbiAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgX3RoaXMubGlzdGVuZXIsIHRydWUpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU2NoZWR1bGVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmICghdGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlciAmJiB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgX3RoaXMubGlzdGVuZXIsIHRydWUpOyB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU2NoZWR1bGVyO1xuICAgIH0oKSk7XG4gICAgdmFyIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoKTtcbiAgICB2YXIgdXBkYXRlQ291bnQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICAhd2F0Y2hpbmcgJiYgbiA+IDAgJiYgc2NoZWR1bGVyLnN0YXJ0KCk7XG4gICAgICAgIHdhdGNoaW5nICs9IG47XG4gICAgICAgICF3YXRjaGluZyAmJiBzY2hlZHVsZXIuc3RvcCgpO1xuICAgIH07XG5cbiAgICB2YXIgc2tpcE5vdGlmeU9uRWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuICFpc1NWRyh0YXJnZXQpXG4gICAgICAgICAgICAmJiAhaXNSZXBsYWNlZEVsZW1lbnQodGFyZ2V0KVxuICAgICAgICAgICAgJiYgZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT09ICdpbmxpbmUnO1xuICAgIH07XG4gICAgdmFyIFJlc2l6ZU9ic2VydmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvYnNlcnZlZEJveCkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVkQm94ID0gb2JzZXJ2ZWRCb3ggfHwgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLkNPTlRFTlRfQk9YO1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVwb3J0ZWRTaXplID0ge1xuICAgICAgICAgICAgICAgIGlubGluZVNpemU6IDAsXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzaXplID0gY2FsY3VsYXRlQm94U2l6ZSh0aGlzLnRhcmdldCwgdGhpcy5vYnNlcnZlZEJveCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoc2tpcE5vdGlmeU9uRWxlbWVudCh0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RSZXBvcnRlZFNpemUgPSBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGFzdFJlcG9ydGVkU2l6ZS5pbmxpbmVTaXplICE9PSBzaXplLmlubGluZVNpemVcbiAgICAgICAgICAgICAgICB8fCB0aGlzLmxhc3RSZXBvcnRlZFNpemUuYmxvY2tTaXplICE9PSBzaXplLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUmVzaXplT2JzZXJ2YXRpb247XG4gICAgfSgpKTtcblxuICAgIHZhciBSZXNpemVPYnNlcnZlckRldGFpbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRGV0YWlsKHJlc2l6ZU9ic2VydmVyLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVUYXJnZXRzID0gW107XG4gICAgICAgICAgICB0aGlzLnNraXBwZWRUYXJnZXRzID0gW107XG4gICAgICAgICAgICB0aGlzLm9ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlciA9IHJlc2l6ZU9ic2VydmVyO1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZXNpemVPYnNlcnZlckRldGFpbDtcbiAgICB9KCkpO1xuXG4gICAgdmFyIG9ic2VydmVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICB2YXIgZ2V0T2JzZXJ2YXRpb25JbmRleCA9IGZ1bmN0aW9uIChvYnNlcnZhdGlvblRhcmdldHMsIHRhcmdldCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ic2VydmF0aW9uVGFyZ2V0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKG9ic2VydmF0aW9uVGFyZ2V0c1tpXS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIHZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKSB7XG4gICAgICAgIH1cbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgZGV0YWlsID0gbmV3IFJlc2l6ZU9ic2VydmVyRGV0YWlsKHJlc2l6ZU9ic2VydmVyLCBjYWxsYmFjayk7XG4gICAgICAgICAgICBvYnNlcnZlck1hcC5zZXQocmVzaXplT2JzZXJ2ZXIsIGRldGFpbCk7XG4gICAgICAgIH07XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5vYnNlcnZlID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyLCB0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBkZXRhaWwgPSBvYnNlcnZlck1hcC5nZXQocmVzaXplT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgdmFyIGZpcnN0T2JzZXJ2YXRpb24gPSBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgICAgIGlmIChnZXRPYnNlcnZhdGlvbkluZGV4KGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMsIHRhcmdldCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RPYnNlcnZhdGlvbiAmJiByZXNpemVPYnNlcnZlcnMucHVzaChkZXRhaWwpO1xuICAgICAgICAgICAgICAgIGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMucHVzaChuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0LCBvcHRpb25zICYmIG9wdGlvbnMuYm94KSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci51bm9ic2VydmUgPSBmdW5jdGlvbiAocmVzaXplT2JzZXJ2ZXIsIHRhcmdldCkge1xuICAgICAgICAgICAgdmFyIGRldGFpbCA9IG9ic2VydmVyTWFwLmdldChyZXNpemVPYnNlcnZlcik7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRPYnNlcnZhdGlvbkluZGV4KGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMsIHRhcmdldCk7XG4gICAgICAgICAgICB2YXIgbGFzdE9ic2VydmF0aW9uID0gZGV0YWlsLm9ic2VydmF0aW9uVGFyZ2V0cy5sZW5ndGggPT09IDE7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIGxhc3RPYnNlcnZhdGlvbiAmJiByZXNpemVPYnNlcnZlcnMuc3BsaWNlKHJlc2l6ZU9ic2VydmVycy5pbmRleE9mKGRldGFpbCksIDEpO1xuICAgICAgICAgICAgICAgIGRldGFpbC5vYnNlcnZhdGlvblRhcmdldHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVDb3VudCgtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGRldGFpbCA9IG9ic2VydmVyTWFwLmdldChyZXNpemVPYnNlcnZlcik7XG4gICAgICAgICAgICBkZXRhaWwub2JzZXJ2YXRpb25UYXJnZXRzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAob3QpIHsgcmV0dXJuIF90aGlzLnVub2JzZXJ2ZShyZXNpemVPYnNlcnZlciwgb3QudGFyZ2V0KTsgfSk7XG4gICAgICAgICAgICBkZXRhaWwuYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCwgZGV0YWlsLmFjdGl2ZVRhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcbiAgICB9KCkpO1xuXG4gICAgdmFyIFJlc2l6ZU9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXIoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Jlc2l6ZU9ic2VydmVyJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzaXplT2JzZXJ2ZXInOiBUaGUgY2FsbGJhY2sgcHJvdmlkZWQgYXMgcGFyYW1ldGVyIDEgaXMgbm90IGEgZnVuY3Rpb24uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmNvbm5lY3QodGhpcywgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ29ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdvYnNlcnZlJyBvbiAnUmVzaXplT2JzZXJ2ZXInOiBwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSAnRWxlbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5vYnNlcnZlKHRoaXMsIHRhcmdldCwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS51bm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAndW5vYnNlcnZlJyBvbiAnUmVzaXplT2JzZXJ2ZXInOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAndW5vYnNlcnZlJyBvbiAnUmVzaXplT2JzZXJ2ZXInOiBwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSAnRWxlbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci51bm9ic2VydmUodGhpcywgdGFyZ2V0KTtcbiAgICAgICAgfTtcbiAgICAgICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZGlzY29ubmVjdCh0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgUmVzaXplT2JzZXJ2ZXIudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uIFJlc2l6ZU9ic2VydmVyICgpIHsgW3BvbHlmaWxsIGNvZGVdIH0nO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXI7XG4gICAgfSgpKTtcblxuICAgIGV4cG9ydHMuUmVzaXplT2JzZXJ2ZXIgPSBSZXNpemVPYnNlcnZlcjtcbiAgICBleHBvcnRzLlJlc2l6ZU9ic2VydmVyRW50cnkgPSBSZXNpemVPYnNlcnZlckVudHJ5O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmFycmF5LmZyb20nKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLkFycmF5LmZyb207XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5Jyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aC5BcnJheS5pc0FycmF5O1xuIiwicmVxdWlyZSgnLi4vLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5jb25jYXQnKTtcbnZhciBlbnRyeVZpcnR1YWwgPSByZXF1aXJlKCcuLi8uLi8uLi9pbnRlcm5hbHMvZW50cnktdmlydHVhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVudHJ5VmlydHVhbCgnQXJyYXknKS5jb25jYXQ7XG4iLCJyZXF1aXJlKCcuLi8uLi8uLi9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluJyk7XG52YXIgZW50cnlWaXJ0dWFsID0gcmVxdWlyZSgnLi4vLi4vLi4vaW50ZXJuYWxzL2VudHJ5LXZpcnR1YWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRyeVZpcnR1YWwoJ0FycmF5JykuY29weVdpdGhpbjtcbiIsInJlcXVpcmUoJy4uLy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuZmlsbCcpO1xudmFyIGVudHJ5VmlydHVhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2ludGVybmFscy9lbnRyeS12aXJ0dWFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlWaXJ0dWFsKCdBcnJheScpLmZpbGw7XG4iLCJyZXF1aXJlKCcuLi8uLi8uLi9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoJyk7XG52YXIgZW50cnlWaXJ0dWFsID0gcmVxdWlyZSgnLi4vLi4vLi4vaW50ZXJuYWxzL2VudHJ5LXZpcnR1YWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRyeVZpcnR1YWwoJ0FycmF5JykuZm9yRWFjaDtcbiIsInJlcXVpcmUoJy4uLy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YnKTtcbnZhciBlbnRyeVZpcnR1YWwgPSByZXF1aXJlKCcuLi8uLi8uLi9pbnRlcm5hbHMvZW50cnktdmlydHVhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVudHJ5VmlydHVhbCgnQXJyYXknKS5pbmRleE9mO1xuIiwicmVxdWlyZSgnLi4vLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5zbGljZScpO1xudmFyIGVudHJ5VmlydHVhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2ludGVybmFscy9lbnRyeS12aXJ0dWFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlWaXJ0dWFsKCdBcnJheScpLnNsaWNlO1xuIiwicmVxdWlyZSgnLi4vLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5zb3J0Jyk7XG52YXIgZW50cnlWaXJ0dWFsID0gcmVxdWlyZSgnLi4vLi4vLi4vaW50ZXJuYWxzL2VudHJ5LXZpcnR1YWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRyeVZpcnR1YWwoJ0FycmF5Jykuc29ydDtcbiIsInJlcXVpcmUoJy4uLy4uLy4uL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlJyk7XG52YXIgZW50cnlWaXJ0dWFsID0gcmVxdWlyZSgnLi4vLi4vLi4vaW50ZXJuYWxzL2VudHJ5LXZpcnR1YWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRyeVZpcnR1YWwoJ0FycmF5Jykuc3BsaWNlO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5kYXRlLm5vdycpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguRGF0ZS5ub3c7XG4iLCJyZXF1aXJlKCcuLi8uLi8uLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQnKTtcbnZhciBlbnRyeVZpcnR1YWwgPSByZXF1aXJlKCcuLi8uLi8uLi9pbnRlcm5hbHMvZW50cnktdmlydHVhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVudHJ5VmlydHVhbCgnRnVuY3Rpb24nKS5iaW5kO1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9mdW5jdGlvbi92aXJ0dWFsL2JpbmQnKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQuYmluZDtcbiAgcmV0dXJuIGl0ID09PSBGdW5jdGlvblByb3RvdHlwZSB8fCAoaXQgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBvd24gPT09IEZ1bmN0aW9uUHJvdG90eXBlLmJpbmQpID8gYmluZCA6IG93bjtcbn07XG4iLCJ2YXIgY29uY2F0ID0gcmVxdWlyZSgnLi4vYXJyYXkvdmlydHVhbC9jb25jYXQnKTtcblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQuY29uY2F0O1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpdCBpbnN0YW5jZW9mIEFycmF5ICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUuY29uY2F0KSA/IGNvbmNhdCA6IG93bjtcbn07XG4iLCJ2YXIgY29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2FycmF5L3ZpcnR1YWwvY29weS13aXRoaW4nKTtcblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQuY29weVdpdGhpbjtcbiAgcmV0dXJuIGl0ID09PSBBcnJheVByb3RvdHlwZSB8fCAoaXQgaW5zdGFuY2VvZiBBcnJheSAmJiBvd24gPT09IEFycmF5UHJvdG90eXBlLmNvcHlXaXRoaW4pID8gY29weVdpdGhpbiA6IG93bjtcbn07XG4iLCJ2YXIgZmlsbCA9IHJlcXVpcmUoJy4uL2FycmF5L3ZpcnR1YWwvZmlsbCcpO1xuXG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBvd24gPSBpdC5maWxsO1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpdCBpbnN0YW5jZW9mIEFycmF5ICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUuZmlsbCkgPyBmaWxsIDogb3duO1xufTtcbiIsInZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vYXJyYXkvdmlydHVhbC9pbmRleC1vZicpO1xuXG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBvd24gPSBpdC5pbmRleE9mO1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpdCBpbnN0YW5jZW9mIEFycmF5ICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUuaW5kZXhPZikgPyBpbmRleE9mIDogb3duO1xufTtcbiIsInZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9zdHJpbmcvdmlydHVhbC9yZXBlYXQnKTtcblxudmFyIFN0cmluZ1Byb3RvdHlwZSA9IFN0cmluZy5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBvd24gPSBpdC5yZXBlYXQ7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdzdHJpbmcnIHx8IGl0ID09PSBTdHJpbmdQcm90b3R5cGVcbiAgICB8fCAoaXQgaW5zdGFuY2VvZiBTdHJpbmcgJiYgb3duID09PSBTdHJpbmdQcm90b3R5cGUucmVwZWF0KSA/IHJlcGVhdCA6IG93bjtcbn07XG4iLCJ2YXIgc2xpY2UgPSByZXF1aXJlKCcuLi9hcnJheS92aXJ0dWFsL3NsaWNlJyk7XG5cbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIG93biA9IGl0LnNsaWNlO1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpdCBpbnN0YW5jZW9mIEFycmF5ICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUuc2xpY2UpID8gc2xpY2UgOiBvd247XG59O1xuIiwidmFyIHNvcnQgPSByZXF1aXJlKCcuLi9hcnJheS92aXJ0dWFsL3NvcnQnKTtcblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQuc29ydDtcbiAgcmV0dXJuIGl0ID09PSBBcnJheVByb3RvdHlwZSB8fCAoaXQgaW5zdGFuY2VvZiBBcnJheSAmJiBvd24gPT09IEFycmF5UHJvdG90eXBlLnNvcnQpID8gc29ydCA6IG93bjtcbn07XG4iLCJ2YXIgc3BsaWNlID0gcmVxdWlyZSgnLi4vYXJyYXkvdmlydHVhbC9zcGxpY2UnKTtcblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQuc3BsaWNlO1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpdCBpbnN0YW5jZW9mIEFycmF5ICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUuc3BsaWNlKSA/IHNwbGljZSA6IG93bjtcbn07XG4iLCJ2YXIgc3RhcnRzV2l0aCA9IHJlcXVpcmUoJy4uL3N0cmluZy92aXJ0dWFsL3N0YXJ0cy13aXRoJyk7XG5cbnZhciBTdHJpbmdQcm90b3R5cGUgPSBTdHJpbmcucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQuc3RhcnRzV2l0aDtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ3N0cmluZycgfHwgaXQgPT09IFN0cmluZ1Byb3RvdHlwZVxuICAgIHx8IChpdCBpbnN0YW5jZW9mIFN0cmluZyAmJiBvd24gPT09IFN0cmluZ1Byb3RvdHlwZS5zdGFydHNXaXRoKSA/IHN0YXJ0c1dpdGggOiBvd247XG59O1xuIiwidmFyIHRyaW0gPSByZXF1aXJlKCcuLi9zdHJpbmcvdmlydHVhbC90cmltJyk7XG5cbnZhciBTdHJpbmdQcm90b3R5cGUgPSBTdHJpbmcucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgb3duID0gaXQudHJpbTtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ3N0cmluZycgfHwgaXQgPT09IFN0cmluZ1Byb3RvdHlwZVxuICAgIHx8IChpdCBpbnN0YW5jZW9mIFN0cmluZyAmJiBvd24gPT09IFN0cmluZ1Byb3RvdHlwZS50cmltKSA/IHRyaW0gOiBvd247XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aC5PYmplY3QuYXNzaWduO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5vYmplY3QuY3JlYXRlJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbnZhciBPYmplY3QgPSBwYXRoLk9iamVjdDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxudmFyIE9iamVjdCA9IHBhdGguT2JqZWN0O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkuc2hhbSkgZGVmaW5lUHJvcGVydHkuc2hhbSA9IHRydWU7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aC5PYmplY3QuZW50cmllcztcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG52YXIgT2JqZWN0ID0gcGF0aC5PYmplY3Q7XG5cbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xufTtcblxuaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iuc2hhbSkgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLnNoYW0gPSB0cnVlO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnByb21pc2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHknKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLlByb21pc2U7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0Jyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aC5SZWZsZWN0LmdldDtcbiIsInJlcXVpcmUoJy4uLy4uLy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdCcpO1xudmFyIGVudHJ5VmlydHVhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2ludGVybmFscy9lbnRyeS12aXJ0dWFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlWaXJ0dWFsKCdTdHJpbmcnKS5yZXBlYXQ7XG4iLCJyZXF1aXJlKCcuLi8uLi8uLi9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCcpO1xudmFyIGVudHJ5VmlydHVhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2ludGVybmFscy9lbnRyeS12aXJ0dWFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlWaXJ0dWFsKCdTdHJpbmcnKS5zdGFydHNXaXRoO1xuIiwicmVxdWlyZSgnLi4vLi4vLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbScpO1xudmFyIGVudHJ5VmlydHVhbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2ludGVybmFscy9lbnRyeS12aXJ0dWFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlWaXJ0dWFsKCdTdHJpbmcnKS50cmltO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5jb25jYXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmpzb24udG8tc3RyaW5nLXRhZycpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguU3ltYm9sO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcbnZhciBXcmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXcmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoJ2l0ZXJhdG9yJyk7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvYXJyYXkvZnJvbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9hcnJheS9pcy1hcnJheScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJdGVyYXRvcjtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9pbnN0YW5jZS9zbGljZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnZhciBpc0l0ZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWl0ZXJhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJdGVyYWJsZTtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9vYmplY3QvY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2VzL29iamVjdC9kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5hZ2dyZWdhdGUtZXJyb3InKTtcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFsbC1zZXR0bGVkJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLnRyeScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQucHJvbWlzZS5hbnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvcmVmbGVjdC9nZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wuYXN5bmMtZGlzcG9zZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lc25leHQuc3ltYm9sLmRpc3Bvc2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzbmV4dC5zeW1ib2wucGF0dGVybi1tYXRjaCcpO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5yZXBsYWNlLWFsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9zeW1ib2wvaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAoIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIKSA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY2FjaGUgPSB7fTtcblxudmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoaXQpIHsgdGhyb3cgaXQ7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBvcHRpb25zKSB7XG4gIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXTtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHZhciBBQ0NFU1NPUlMgPSBoYXMob3B0aW9ucywgJ0FDQ0VTU09SUycpID8gb3B0aW9ucy5BQ0NFU1NPUlMgOiBmYWxzZTtcbiAgdmFyIGFyZ3VtZW50MCA9IGhhcyhvcHRpb25zLCAwKSA/IG9wdGlvbnNbMF0gOiB0aHJvd2VyO1xuICB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdID0gISFtZXRob2QgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQUNDRVNTT1JTICYmICFERVNDUklQVE9SUykgcmV0dXJuIHRydWU7XG4gICAgdmFyIE8gPSB7IGxlbmd0aDogLTEgfTtcblxuICAgIGlmIChBQ0NFU1NPUlMpIGRlZmluZVByb3BlcnR5KE8sIDEsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiB0aHJvd2VyIH0pO1xuICAgIGVsc2UgT1sxXSA9IDE7XG5cbiAgICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7XG4gIH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlZ2V4cFtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gLyhpcGhvbmV8aXBvZHxpcGFkKS4qYXBwbGV3ZWJraXQvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SKSB7XG4gIHJldHVybiBwYXRoW0NPTlNUUlVDVE9SICsgJ1Byb3RvdHlwZSddO1xufTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgd3JhcENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKE5hdGl2ZUNvbnN0cnVjdG9yKSB7XG4gIHZhciBXcmFwcGVyID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mIE5hdGl2ZUNvbnN0cnVjdG9yKSB7XG4gICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihhKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGEsIGIpO1xuICAgICAgfSByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGEsIGIsIGMpO1xuICAgIH0gcmV0dXJuIE5hdGl2ZUNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIFdyYXBwZXIucHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICByZXR1cm4gV3JhcHBlcjtcbn07XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgUFJPVE8gPSBvcHRpb25zLnByb3RvO1xuXG4gIHZhciBuYXRpdmVTb3VyY2UgPSBHTE9CQUwgPyBnbG9iYWwgOiBTVEFUSUMgPyBnbG9iYWxbVEFSR0VUXSA6IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuXG4gIHZhciB0YXJnZXQgPSBHTE9CQUwgPyBwYXRoIDogcGF0aFtUQVJHRVRdIHx8IChwYXRoW1RBUkdFVF0gPSB7fSk7XG4gIHZhciB0YXJnZXRQcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuXG4gIHZhciBGT1JDRUQsIFVTRV9OQVRJVkUsIFZJUlRVQUxfUFJPVE9UWVBFO1xuICB2YXIga2V5LCBzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHksIG5hdGl2ZVByb3BlcnR5LCByZXN1bHRQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcblxuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIFVTRV9OQVRJVkUgPSAhRk9SQ0VEICYmIG5hdGl2ZVNvdXJjZSAmJiBoYXMobmF0aXZlU291cmNlLCBrZXkpO1xuXG4gICAgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcblxuICAgIGlmIChVU0VfTkFUSVZFKSBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihuYXRpdmVTb3VyY2UsIGtleSk7XG4gICAgICBuYXRpdmVQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgbmF0aXZlUHJvcGVydHkgPSBuYXRpdmVTb3VyY2Vba2V5XTtcblxuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgaW1wbGVtZW50YXRpb25cbiAgICBzb3VyY2VQcm9wZXJ0eSA9IChVU0VfTkFUSVZFICYmIG5hdGl2ZVByb3BlcnR5KSA/IG5hdGl2ZVByb3BlcnR5IDogc291cmNlW2tleV07XG5cbiAgICBpZiAoVVNFX05BVElWRSAmJiB0eXBlb2YgdGFyZ2V0UHJvcGVydHkgPT09IHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSkgY29udGludWU7XG5cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGlmIChvcHRpb25zLmJpbmQgJiYgVVNFX05BVElWRSkgcmVzdWx0UHJvcGVydHkgPSBiaW5kKHNvdXJjZVByb3BlcnR5LCBnbG9iYWwpO1xuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ3MgaW4gdGhpcyB2ZXJzaW9uXG4gICAgZWxzZSBpZiAob3B0aW9ucy53cmFwICYmIFVTRV9OQVRJVkUpIHJlc3VsdFByb3BlcnR5ID0gd3JhcENvbnN0cnVjdG9yKHNvdXJjZVByb3BlcnR5KTtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICBlbHNlIGlmIChQUk9UTyAmJiB0eXBlb2Ygc291cmNlUHJvcGVydHkgPT0gJ2Z1bmN0aW9uJykgcmVzdWx0UHJvcGVydHkgPSBiaW5kKEZ1bmN0aW9uLmNhbGwsIHNvdXJjZVByb3BlcnR5KTtcbiAgICAvLyBkZWZhdWx0IGNhc2VcbiAgICBlbHNlIHJlc3VsdFByb3BlcnR5ID0gc291cmNlUHJvcGVydHk7XG5cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAoc291cmNlUHJvcGVydHkgJiYgc291cmNlUHJvcGVydHkuc2hhbSkgfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0UHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdGFyZ2V0W2tleV0gPSByZXN1bHRQcm9wZXJ0eTtcblxuICAgIGlmIChQUk9UTykge1xuICAgICAgVklSVFVBTF9QUk9UT1RZUEUgPSBUQVJHRVQgKyAnUHJvdG90eXBlJztcbiAgICAgIGlmICghaGFzKHBhdGgsIFZJUlRVQUxfUFJPVE9UWVBFKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocGF0aCwgVklSVFVBTF9QUk9UT1RZUEUsIHt9KTtcbiAgICAgIH1cbiAgICAgIC8vIGV4cG9ydCB2aXJ0dWFsIHByb3RvdHlwZSBtZXRob2RzXG4gICAgICBwYXRoW1ZJUlRVQUxfUFJPVE9UWVBFXVtrZXldID0gc291cmNlUHJvcGVydHk7XG4gICAgICAvLyBleHBvcnQgcmVhbCBwcm90b3R5cGUgbWV0aG9kc1xuICAgICAgaWYgKG9wdGlvbnMucmVhbCAmJiB0YXJnZXRQcm90b3R5cGUgJiYgIXRhcmdldFByb3RvdHlwZVtrZXldKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0YXJnZXRQcm90b3R5cGUsIGtleSwgc291cmNlUHJvcGVydHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghKGFyZ3NMZW5ndGggaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIGxpc3QgPSBbXSwgaSA9IDA7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIGxpc3RbaV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbYXJnc0xlbmd0aF0gPSBGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgbGlzdC5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogZm4uYXBwbHkodGhhdCwgYXJncyk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZEZ1bmN0aW9uLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kRnVuY3Rpb247XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0KTtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICB9IHJldHVybiBhbk9iamVjdChpdGVyYXRvck1ldGhvZC5jYWxsKGl0KSk7XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24udG9TdHJpbmc7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAodHlwZW9mIHN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTyA9IE9iamVjdChpdCk7XG4gIHJldHVybiBPW0lURVJBVE9SXSAhPT0gdW5kZWZpbmVkXG4gICAgfHwgJ0BAaXRlcmF0b3InIGluIE9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgfHwgSXRlcmF0b3JzLmhhc093blByb3BlcnR5KGNsYXNzb2YoTykpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG5cbml0ZXJhdGUuc3RvcCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgcmVzdWx0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgSVNfTk9ERSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoTXV0YXRpb25PYnNlcnZlciAmJiAhSVNfSU9TKSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICB0aGVuID0gcHJvbWlzZS50aGVuO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4uY2FsbChwcm9taXNlLCBmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxudmFyIG5hdGl2ZUFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gIW5hdGl2ZUFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiBuYXRpdmVBc3NpZ24oeyBiOiAxIH0sIG5hdGl2ZUFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xuICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW3N5bWJvbF0gPSA3O1xuICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7XG4gIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiBuYXRpdmVBc3NpZ247XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgKi9cbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpLmY7XG5cbi8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFRPX0VOVFJJRVMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgT2JqZWN0LmVudHJpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuICBlbnRyaWVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGZhbHNlLCB2YWx1ZTogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHRydWUsIHZhbHVlOiBlcnJvciB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy51bnNhZmUgJiYgdGFyZ2V0W2tleV0pIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgZWxzZSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICB9IHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZW51bWVyYWJsZSkgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGFyZ2V0LCBrZXksIHZhbHVlKTtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQywgU0VUX01FVEhPRCkge1xuICBpZiAoaXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGU7XG4gICAgaWYgKCFoYXModGFyZ2V0LCBUT19TVFJJTkdfVEFHKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgICB9XG4gICAgaWYgKFNFVF9NRVRIT0QgJiYgIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwgJ3RvU3RyaW5nJywgdG9TdHJpbmcpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuNi40JyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxubW9kdWxlLmV4cG9ydHMgPSAnJy5yZXBlYXQgfHwgZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKCkgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9IG5vbiB8fCB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUU7XG4gIH0pO1xufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcblxudmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xudmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXIgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmXG4gICAgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmXG4gICAgIWZhaWxzKHBvc3QpICYmXG4gICAgbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgKSB7XG4gICAgZGVmZXIgPSBwb3N0O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4oaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBjbGVhcjogY2xlYXJcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiAhU3ltYm9sLnNoYW1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbm1vZHVsZS5leHBvcnRzID0gJ1xcdTAwMDlcXHUwMDBBXFx1MDAwQlxcdTAwMENcXHUwMDBEXFx1MDAyMFxcdTAwQTBcXHUxNjgwXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJztcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgY29weVdpdGhpbjogY29weVdpdGhpblxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdjb3B5V2l0aGluJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmlsbDogZmlsbFxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBuYXRpdmVJbmRleE9mID0gW10uaW5kZXhPZjtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIW5hdGl2ZUluZGV4T2YgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2luZGV4T2YnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdpbmRleE9mJywgeyBBQ0NFU1NPUlM6IHRydWUsIDE6IDAgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gbmF0aXZlSW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxuLy8gYEFycmF5LmlzQXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuaXNhcnJheVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzQXJyYXk6IGlzQXJyYXlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdzbGljZScsIHsgQUNDRVNTT1JTOiB0cnVlLCAwOiAwLCAxOiAyIH0pO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgQ29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZS5jYWxsKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciB0ZXN0ID0gW107XG52YXIgbmF0aXZlU29ydCA9IHRlc3Quc29ydDtcblxuLy8gSUU4LVxudmFyIEZBSUxTX09OX1VOREVGSU5FRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KTtcbi8vIFY4IGJ1Z1xudmFyIEZBSUxTX09OX05VTEwgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydChudWxsKTtcbn0pO1xuLy8gT2xkIFdlYktpdFxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb3J0Jyk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgIVNUUklDVF9NRVRIT0Q7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29ydFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiBuYXRpdmVTb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdzcGxpY2UnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMDogMCwgMTogMiB9KTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZCc7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDEpIHtcbiAgICAgIGluc2VydENvdW50ID0gMDtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENvdW50ID0gYXJndW1lbnRzTGVuZ3RoIC0gMjtcbiAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEKTtcbiAgICB9XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYERhdGUubm93YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWRhdGUubm93XG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHN0YXQ6IHRydWUgfSwge1xuICBub3c6IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuJCh7IHRhcmdldDogJ0Z1bmN0aW9uJywgcHJvdG86IHRydWUgfSwge1xuICBiaW5kOiBiaW5kXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4vLyBNYXRoW0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1tYXRoLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBjcmVhdGU6IGNyZWF0ZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG9iamVjdERlZmluZVByb3BlcnR5TW9kaWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFERVNDUklQVE9SUywgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZGVmaW5lUHJvcGVydHk6IG9iamVjdERlZmluZVByb3BlcnR5TW9kaWxlLmZcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykuZW50cmllcztcblxuLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuICAgIHJldHVybiAkZW50cmllcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpOyB9KTtcbnZhciBGT1JDRUQgPSAhREVTQ1JJUFRPUlMgfHwgRkFJTFNfT05fUFJJTUlUSVZFUztcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBzZXRQcm90b3R5cGVPZjogc2V0UHJvdG90eXBlT2Zcbn0pO1xuIiwiLy8gZW1wdHlcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgUHJvbWlzZS5hbGxTZXR0bGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtYWxsU2V0dGxlZFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlIH0sIHtcbiAgYWxsU2V0dGxlZDogZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geyBzdGF0dXM6ICdmdWxmaWxsZWQnLCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geyBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogZSB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG4vLyBTYWZhcmkgYnVnIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDA4MjlcbnZhciBOT05fR0VORVJJQyA9ICEhTmF0aXZlUHJvbWlzZSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIE5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10uY2FsbCh7IHRoZW46IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmZpbmFsbHlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogTk9OX0dFTkVSSUMgfSwge1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBnZXRCdWlsdEluKCdQcm9taXNlJykpO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseSxcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHlcbiAgICApO1xuICB9XG59KTtcblxuLy8gcGF0Y2ggbmF0aXZlIFByb21pc2UucHJvdG90eXBlIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG5pZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJyAmJiAhTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSkge1xuICByZWRlZmluZShOYXRpdmVQcm9taXNlLnByb3RvdHlwZSwgJ2ZpbmFsbHknLCBnZXRCdWlsdEluKCdQcm9taXNlJykucHJvdG90eXBlWydmaW5hbGx5J10pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UpIHtcbiAgICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAgIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICBpZiAoIUlTX05PREUgJiYgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCAhPSAnZnVuY3Rpb24nKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBSZWZsZWN0LmdldGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldFxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2NyaXB0b3IsIHByb3RvdHlwZTtcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKVxuICAgID8gZGVzY3JpcHRvci52YWx1ZVxuICAgIDogZGVzY3JpcHRvci5nZXQgPT09IHVuZGVmaW5lZFxuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogZGVzY3JpcHRvci5nZXQuY2FsbChyZWNlaXZlcik7XG4gIGlmIChpc09iamVjdChwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90b3R5cGUsIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGdldDogZ2V0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IFN0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGVhdDogcmVwZWF0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIG5hdGl2ZVN0YXJ0c1dpdGggPSAnJy5zdGFydHNXaXRoO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnc3RhcnRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0YXJ0c3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoXG4gICAgICA/IG5hdGl2ZVN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmFzeW5jaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnYXN5bmNJdGVyYXRvcicpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5oYXNJbnN0YW5jZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5oYXNpbnN0YW5jZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXNjb25jYXRzcHJlYWRhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChpdCkgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8ICRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJpbWl0aXZlKFYsIHRydWUpO1xuICB2YXIgZW51bWVyYWJsZSA9IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIFApICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhcyh0aGlzLCBQKSB8fCAhaGFzKEFsbFN5bWJvbHMsIFApIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXSA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXMoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyICRyZXBsYWNlcjtcbiAgICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaW5kZXgpIGFyZ3MucHVzaChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgICAgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuICRzdHJpbmdpZnkuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoISRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLm1hdGNoQWxsYCB3ZWxsLWtub3duIHN5bWJvbFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5tYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5yZXBsYWNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnJlcGxhY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zZWFyY2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wuc2VhcmNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NlYXJjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zcGVjaWVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnNwZWNpZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zcGxpdGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGxpdFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGxpdCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1ByaW1pdGl2ZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3ByaW1pdGl2ZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3N0cmluZ3RhZ1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC51bnNjb3BhYmxlc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN5bWJvbC51bnNjb3BhYmxlc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbEFnZ3JlZ2F0ZUVycm9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcignQWdncmVnYXRlRXJyb3InKTtcblxudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIGlmICghKHRoYXQgaW5zdGFuY2VvZiAkQWdncmVnYXRlRXJyb3IpKSByZXR1cm4gbmV3ICRBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICB0aGF0ID0gc2V0UHJvdG90eXBlT2YobmV3IEVycm9yKG1lc3NhZ2UpLCBnZXRQcm90b3R5cGVPZih0aGF0KSk7XG4gIH1cbiAgdmFyIGVycm9yc0FycmF5ID0gW107XG4gIGl0ZXJhdGUoZXJyb3JzLCBlcnJvcnNBcnJheS5wdXNoLCBlcnJvcnNBcnJheSk7XG4gIGlmIChERVNDUklQVE9SUykgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7IGVycm9yczogZXJyb3JzQXJyYXksIHR5cGU6ICdBZ2dyZWdhdGVFcnJvcicgfSk7XG4gIGVsc2UgdGhhdC5lcnJvcnMgPSBlcnJvcnNBcnJheTtcbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgU3RyaW5nKG1lc3NhZ2UpKTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG4kQWdncmVnYXRlRXJyb3IucHJvdG90eXBlID0gY3JlYXRlKEVycm9yLnByb3RvdHlwZSwge1xuICBjb25zdHJ1Y3RvcjogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICRBZ2dyZWdhdGVFcnJvciksXG4gIG1lc3NhZ2U6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnJyksXG4gIG5hbWU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnQWdncmVnYXRlRXJyb3InKVxufSk7XG5cbmlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkuZigkQWdncmVnYXRlRXJyb3IucHJvdG90eXBlLCAnZXJyb3JzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxBZ2dyZWdhdGVFcnJvclN0YXRlKHRoaXMpLmVycm9ycztcbiAgfSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIEFnZ3JlZ2F0ZUVycm9yOiAkQWdncmVnYXRlRXJyb3Jcbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4vZXMucHJvbWlzZS5hbGwtc2V0dGxlZC5qcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyIFBST01JU0VfQU5ZX0VSUk9SID0gJ05vIG9uZSBwcm9taXNlIHJlc29sdmVkJztcblxuLy8gYFByb21pc2UuYW55YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtYW55XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICB2YXIgYWxyZWFkeVJlc29sdmVkID0gZmFsc2U7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5UmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgZXJyb3JzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5UmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGVycm9yc1tpbmRleF0gPSBlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgKGdldEJ1aWx0SW4oJ0FnZ3JlZ2F0ZUVycm9yJykpKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgKGdldEJ1aWx0SW4oJ0FnZ3JlZ2F0ZUVycm9yJykpKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcblxuLy8gYFByb21pc2UudHJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKHRoaXMpO1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAgIChyZXN1bHQuZXJyb3IgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuYXN5bmNEaXNwb3NlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtdXNpbmctc3RhdGVtZW50XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jRGlzcG9zZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5kaXNwb3NlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtdXNpbmctc3RhdGVtZW50XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2Rpc3Bvc2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wub2JzZXJ2YWJsZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5wYXR0ZXJuTWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wYXR0ZXJuLW1hdGNoaW5nXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3BhdHRlcm5NYXRjaCcpO1xuIiwiLy8gVE9ETzogcmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZUFsbCcpO1xuIiwicmVxdWlyZSgnLi9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgY2xhc3NvZihDb2xsZWN0aW9uUHJvdG90eXBlKSAhPT0gVE9fU1RSSU5HX1RBRykge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICB9XG4gIEl0ZXJhdG9yc1tDT0xMRUNUSU9OX05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpO1xuXG52YXIgRk9SQ0VEID0gIWdsb2JhbC5zZXRJbW1lZGlhdGUgfHwgIWdsb2JhbC5jbGVhckltbWVkaWF0ZTtcblxuLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlL1xuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgc2V0SW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1zZXRJbW1lZGlhdGVcbiAgc2V0SW1tZWRpYXRlOiB0YXNrLnNldCxcbiAgLy8gYGNsZWFySW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1jbGVhckltbWVkaWF0ZVxuICBjbGVhckltbWVkaWF0ZTogdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2NoZWR1bGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCAvKiAsIC4uLmFyZ3VtZW50cyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc2NoZWR1bGVyKGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBoYW5kbGVyID09ICdmdW5jdGlvbicgPyBoYW5kbGVyIDogRnVuY3Rpb24oaGFuZGxlcikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBoYW5kbGVyLCB0aW1lb3V0KTtcbiAgfTtcbn07XG5cbi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjdGltZXJzXG4kKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBmb3JjZWQ6IE1TSUUgfSwge1xuICAvLyBgc2V0VGltZW91dGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldHRpbWVvdXRcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIC8vIGBzZXRJbnRlcnZhbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldGludGVydmFsXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL2VzL2FycmF5L3ZpcnR1YWwvZm9yLWVhY2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvZGF0ZS9ub3cnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvaW5zdGFuY2UvYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9pbnN0YW5jZS9jb25jYXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvaW5zdGFuY2UvY29weS13aXRoaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvaW5zdGFuY2UvZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9hcnJheS92aXJ0dWFsL2Zvci1lYWNoJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgTm9kZUxpc3Q6IHRydWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBvd24gPSBpdC5mb3JFYWNoO1xuICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlIHx8IChpdCBpbnN0YW5jZW9mIEFycmF5ICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUuZm9yRWFjaClcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgfHwgRE9NSXRlcmFibGVzLmhhc093blByb3BlcnR5KGNsYXNzb2YoaXQpKSA/IGZvckVhY2ggOiBvd247XG59O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2VzL2luc3RhbmNlL2luZGV4LW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2VzL2luc3RhbmNlL3JlcGVhdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9pbnN0YW5jZS9zb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2VzL2luc3RhbmNlL3NwbGljZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9pbnN0YW5jZS9zdGFydHMtd2l0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInZhciBwYXJlbnQgPSByZXF1aXJlKCcuLi8uLi9lcy9pbnN0YW5jZS90cmltJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIHBhcmVudCA9IHJlcXVpcmUoJy4uLy4uL2VzL29iamVjdC9hc3NpZ24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvb2JqZWN0L2VudHJpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vZXMvcHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmVudDtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguc2V0SW1tZWRpYXRlO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0aC5zZXRJbnRlcnZhbDtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGguc2V0VGltZW91dDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvKlxyXG5Db3B5cmlnaHQgbHVvamlhQGx1b2ppYS5tZVxyXG5MR1BMIGxpY2Vuc2VcclxuKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IHtOeWFQQ29tbW9uLFxyXG5cdFx0RG9tVG9vbHMsXHJcblx0XHRVdGlsc1xyXG59IGZyb20gJy4vTnlhUENvbW1vbi5qcyc7XHJcbmNvbnN0IE8ySD1Eb21Ub29scy5PYmplY3QySFRNTDtcclxuXHJcblxyXG4vL055YVAgb3B0aW9uc1xyXG5jb25zdCBOeWFQT3B0aW9ucz17XHJcbn1cclxuXHJcbi8vbm9ybWFsIHBsYXllclxyXG5jbGFzcyBOeWFQIGV4dGVuZHMgTnlhUENvbW1vbntcclxuXHRnZXQgaWNvbnMoKXtyZXR1cm4gdGhpcy5vcHQuaWNvbnM7fVxyXG5cdGNvbnN0cnVjdG9yKG9wdCl7XHJcblx0XHRzdXBlcihVdGlscy5kZWVwQXNzaWduKHt9LE55YVBPcHRpb25zLG9wdCkpO1xyXG5cdFx0b3B0PXRoaXMub3B0O1xyXG5cdFx0Y29uc3QgTlA9dGhpcyxcclxuXHRcdFx0X3Q9dGhpcy5fdCxcclxuXHRcdFx0JD10aGlzLiQsXHJcblx0XHRcdHZpZGVvPXRoaXMudmlkZW87XHJcblx0XHQvL3NldCBpY29uc1xyXG5cdFx0ZnVuY3Rpb24gaWNvbihuYW1lLGV2ZW50LGF0dHI9e30sZXh0b3B0KXtcclxuXHRcdFx0Y29uc3QgaWNvPW9wdC5pY29uc1tuYW1lXTtcclxuXHRcdFx0cmV0dXJuIE8ySCh7Xzonc3BhbicsZXZlbnQsYXR0cixwcm9wOntpZDpgaWNvbl9zcGFuXyR7bmFtZX1gLFxyXG5cdFx0XHRcdGlubmVySFRNTDpgPHN2ZyB2aWV3Qm94PVwiMCAwICR7aWNvWzBdfSAke2ljb1sxXX1cIiBoZWlnaHQ9JHtleHRvcHQ/LmhlaWdodHx8aWNvWzFdfSB3aWR0aD0ke2V4dG9wdD8ud2lkdGh8fGljb1swXX0gaWQ9XCJpY29uXyR7bmFtZX1cIlwiPiR7aWNvWzJdfTwvc3ZnPmB9fSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHRoaXMuc3RhdCgnY3JlYXRpbmdfcGxheWVyJyk7XHJcblxyXG5cdFx0Ly9jcmVhdGUgcGxheWVyIGVsZW1lbnRzXHJcblx0XHROUC5fLnBsYXllcj1PMkgoe1xyXG5cdFx0XHRfOidkaXYnLGF0dHI6e2NsYXNzOidOeWFQJyxpZDonTnlhUCcsdGFiaW5kZXg6MH0sY2hpbGQ6W1xyXG5cdFx0XHRcdE5QLnZpZGVvRnJhbWUsXHJcblx0XHRcdFx0e186J2RpdicsYXR0cjp7aWQ6J2NvbnRyb2xzJ30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0e186J2RpdicsYXR0cjp7aWQ6J2NvbnRyb2wnfSxjaGlsZDpbXHJcblx0XHRcdFx0XHRcdHtfOidzcGFuJyxhdHRyOntpZDonY29udHJvbF9sZWZ0J30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0XHRcdGljb24oJ3BsYXknLHtjbGljazplPT5OUC5wbGF5VG9nZ2xlKCl9LHt0aXRsZTpfdCgncGxheScpfSksXHJcblx0XHRcdFx0XHRcdF19LFxyXG5cdFx0XHRcdFx0XHR7Xzonc3BhbicsYXR0cjp7aWQ6J2NvbnRyb2xfY2VudGVyJ30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0XHRcdHtfOidkaXYnLHByb3A6e2lkOidwcm9ncmVzc19pbmZvJ30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0XHRcdFx0e186J3NwYW4nLGNoaWxkOltcclxuXHRcdFx0XHRcdFx0XHRcdFx0e186J2NhbnZhcycscHJvcDp7aWQ6J3Byb2dyZXNzJyxwYWQ6MTB9fSxcclxuXHRcdFx0XHRcdFx0XHRcdF19LFxyXG5cdFx0XHRcdFx0XHRcdFx0e186J3NwYW4nLHByb3A6e2lkOid0aW1lJ30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR7Xzonc3BhbicscHJvcDp7aWQ6J2N1cnJlbnRfdGltZSd9LGNoaWxkOlsnMDA6MDAnXX0sXHJcblx0XHRcdFx0XHRcdFx0XHRcdCcvJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0e186J3NwYW4nLHByb3A6e2lkOid0b3RhbF90aW1lJ30sY2hpbGQ6WycwMDowMCddfSxcclxuXHRcdFx0XHRcdFx0XHRcdF19LFxyXG5cdFx0XHRcdFx0XHRcdF19LFxyXG5cdFx0XHRcdFx0XHRdfSxcclxuXHRcdFx0XHRcdFx0e186J3NwYW4nLGF0dHI6e2lkOidjb250cm9sX3JpZ2h0J30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0XHRcdGljb24oJ2FkZERhbm1ha3UnLHtjbGljazplPT5OUC5kYW5tYWt1SW5wdXQoKX0se3RpdGxlOl90KCdkYW5tYWt1IGlucHV0KEVudGVyKScpfSksXHJcblx0XHRcdFx0XHRcdFx0aWNvbignZGFubWFrdVRvZ2dsZScse2NsaWNrOmU9Pk5QLkRhbm1ha3UudG9nZ2xlKCl9LHt0aXRsZTpfdCgnZGFubWFrdSB0b2dnbGUoRCknKSxjbGFzczonYWN0aXZlX2ljb24nfSksXHJcblx0XHRcdFx0XHRcdFx0aWNvbigndm9sdW1lJyx7fSx7dGl0bGU6YCR7X3QoJ3ZvbHVtZScpfTooJHt2aWRlby5tdXRlZD9fdCgnbXV0ZWQnKToodmlkZW8udm9sdW1lKjEwMHwwKSsnJSd9KShbc2hpZnRdK+KGkeKGkykoJHtfdCgnd2hlZWxpbmcnKX0pYH0pLFxyXG5cdFx0XHRcdFx0XHRcdGljb24oJ2xvb3AnLHtjbGljazplPT57dmlkZW8ubG9vcD0hdmlkZW8ubG9vcDt9fSx7dGl0bGU6X3QoJ2xvb3AnKSsnKEwpJ30pLFxyXG5cdFx0XHRcdFx0XHRcdHtfOidzcGFuJyxwcm9wOntpZDoncGxheWVyX21vZGUnfSxjaGlsZDpbXHJcblx0XHRcdFx0XHRcdFx0XHRpY29uKCdmdWxsU2NyZWVuJyx7Y2xpY2s6ZT0+TlAucGxheWVyTW9kZSgnZnVsbFNjcmVlbicpfSx7dGl0bGU6X3QoJ2Z1bGwgc2NyZWVuKEYpJyl9KSxcclxuXHRcdFx0XHRcdFx0XHRcdGljb24oJ2Z1bGxQYWdlJyx7Y2xpY2s6ZT0+TlAucGxheWVyTW9kZSgnZnVsbFBhZ2UnKX0se3RpdGxlOl90KCdmdWxsIHBhZ2UoUCknKX0pXHJcblx0XHRcdFx0XHRcdFx0XX1cclxuXHRcdFx0XHRcdFx0XX0sXHJcblx0XHRcdFx0XHRdfVxyXG5cdFx0XHRcdF19LFxyXG5cdFx0XHRcdHtfOidkaXYnLHByb3A6e2lkOidkYW5tYWt1X2lucHV0X2ZyYW1lJyxzdHlsZTpcImRpc3BsYXk6bm9uZTtcIn0sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0e186J3NwYW4nLHByb3A6e2lkOidkYW5tYWt1X3N0eWxlJ30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0XHR7XzonZGl2JyxhdHRyOntpZDonZGFubWFrdV9zdHlsZV9wYW5uZWwnfSxjaGlsZDpbXHJcblx0XHRcdFx0XHRcdFx0e186J2RpdicsYXR0cjp7aWQ6J2Rhbm1ha3VfY29sb3JfYm94J319LFxyXG5cdFx0XHRcdFx0XHRcdHtfOidpbnB1dCcsYXR0cjp7aWQ6J2Rhbm1ha3VfY29sb3InLHBsYWNlaG9sZGVyOl90KCdoZXggY29sb3InKSxtYXhsZW5ndGg6XCI2XCJ9LGV2ZW50OntrZXlwcmVzczplPT57fX19LFxyXG5cdFx0XHRcdFx0XHRcdHtfOidzcGFuJyxhdHRyOntpZDonZGFubWFrdV9tb2RlX2JveCd9fSxcclxuXHRcdFx0XHRcdFx0XHR7Xzonc3BhbicsYXR0cjp7aWQ6J2Rhbm1ha3Vfc2l6ZV9ib3gnfX0sXHJcblx0XHRcdFx0XHRcdF19LFxyXG5cdFx0XHRcdFx0XHRpY29uKCdkYW5tYWt1U3R5bGUnLHVuZGVmaW5lZCx1bmRlZmluZWQse3dpZHRoOlwiMmVtXCIsaGVpZ2h0OlwiMmVtXCJ9KSxcclxuXHRcdFx0XHRcdF19LFxyXG5cdFx0XHRcdFx0e186J2lucHV0JyxhdHRyOntpZDonZGFubWFrdV9pbnB1dCcscGxhY2Vob2xkZXI6X3QoJ0lucHV0IGRhbm1ha3UgaGVyZScpfX0sXHJcblx0XHRcdFx0XHR7Xzonc3BhbicscHJvcDp7aWQ6J2Rhbm1ha3Vfc3VibWl0Jyxpbm5lckhUTUw6X3QoJ1NlbmQnKX19LFxyXG5cdFx0XHRcdF19LFxyXG5cdFx0XHRdXHJcblx0XHR9KTtcclxuXHJcblxyXG5cdFx0Ly9wcm9ncmVzc1xyXG5cdFx0c2V0VGltZW91dCgoKT0+ey8vYWRkIHJlc2l6ZSBldmVudFxyXG5cdFx0XHREb21Ub29scy5yZXNpemVFdmVudC5vYnNlcnZlKCQoJyNjb250cm9sJykpO1xyXG5cdFx0XHREb21Ub29scy5hZGRFdmVudHMoJCgnI2NvbnRyb2wnKSx7XHJcblx0XHRcdFx0cmVzaXplOmU9Pk5QLnJlc2l6ZVByb2dyZXNzKCksXHJcblx0XHRcdH0pO1xyXG5cdFx0XHROUC5yZXNpemVQcm9ncmVzcygpO1xyXG5cdFx0fSwwKTtcclxuXHRcdE5QLl8ucHJvZ3Jlc3NDb250ZXh0PSQoJyNwcm9ncmVzcycpLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cdFx0Ly9ldmVudHNcclxuXHRcdGNvbnN0IGV2ZW50cz17XHJcblx0XHRcdG1haW5fdmlkZW86e1xyXG5cdFx0XHRcdHBsYXlpbmc6ZT0+e1xyXG5cdFx0XHRcdFx0TlAuX2ljb25BY3RpdmUoJ3BsYXknLHRydWUpO1xyXG5cdFx0XHRcdFx0aWYodGhpcy4kKCcjZGFubWFrdV9pbnB1dF9mcmFtZScpLm9mZnNldEhlaWdodCl7XHJcblx0XHRcdFx0XHRcdHRoaXMuZGFubWFrdUlucHV0KGZhbHNlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHBhdXNlOmU9PntcclxuXHRcdFx0XHRcdE5QLl9pY29uQWN0aXZlKCdwbGF5JyxmYWxzZSk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR0aW1ldXBkYXRlOihlKT0+e1xyXG5cdFx0XHRcdFx0aWYoRGF0ZS5ub3coKS1OUC5fLmxhc3RUaW1lVXBkYXRlIDwzMClyZXR1cm47XHJcblx0XHRcdFx0XHROUC5fc2V0RGlzcGxheVRpbWUoVXRpbHMuZm9ybWF0VGltZSh2aWRlby5jdXJyZW50VGltZSx2aWRlby5kdXJhdGlvbikpO1xyXG5cdFx0XHRcdFx0TlAuZHJhd1Byb2dyZXNzKCk7XHJcblx0XHRcdFx0XHROUC5fLmxhc3RUaW1lVXBkYXRlPURhdGUubm93KCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRsb2FkZWRtZXRhZGF0YTplPT57XHJcblx0XHRcdFx0XHROUC5fc2V0RGlzcGxheVRpbWUobnVsbCxVdGlscy5mb3JtYXRUaW1lKHZpZGVvLmR1cmF0aW9uLHZpZGVvLmR1cmF0aW9uKSk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR2b2x1bWVjaGFuZ2U6ZT0+e1xyXG5cdFx0XHRcdFx0Ly9zaG93IHZvbHVtZSBtc2dcclxuXHRcdFx0XHRcdE5QLl8udm9sdW1lQm94LnJlbmV3KGAke190KCd2b2x1bWUnKX06JHsodmlkZW8udm9sdW1lKjEwMCkudG9GaXhlZCgwKX0lYCtgJHt2aWRlby5tdXRlZD8oJygnK190KCdtdXRlZCcpKycpJyk6Jyd9YCwzMDAwKTtcclxuXHRcdFx0XHRcdC8vY2hhbmdlIGljb24gc3R5bGVcclxuXHRcdFx0XHRcdERvbVRvb2xzLnNldEF0dHJzKCQoJyN2b2x1bWVfY2lyY2xlJykseydzdHJva2UtZGFzaGFycmF5JzpgJHt2aWRlby52b2x1bWUqMTIqTWF0aC5QSX0gOTBgLHN0eWxlOmBmaWxsLW9wYWNpdHk6JHt2aWRlby5tdXRlZD8uMjouNn0haW1wb3J0YW50YH0pO1xyXG5cdFx0XHRcdFx0Ly9jaGFuZ2UgaWNvbiB0aXBcclxuXHRcdFx0XHRcdCQoJyNpY29uX3NwYW5fdm9sdW1lJykuc2V0QXR0cmlidXRlKCd0aXRsZScsYCR7X3QoJ3ZvbHVtZScpfTooJHt2aWRlby5tdXRlZD9fdCgnbXV0ZWQnKTooKHZpZGVvLnZvbHVtZSoxMDB8MCkrJyUnKX0pKFtzaGlmdF0r4oaR4oaTKSgke190KCd3aGVlbGluZycpfSlgKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHByb2dyZXNzOmU9Pk5QLmRyYXdQcm9ncmVzcygpLFxyXG5cdFx0XHRcdGNsaWNrOmU9Pk5QLnBsYXlUb2dnbGUoKSxcclxuXHRcdFx0XHRjb250ZXh0bWVudTplPT5lLnByZXZlbnREZWZhdWx0KCksXHJcblx0XHRcdFx0ZXJyb3I6KCk9PntcclxuXHRcdFx0XHRcdE5QLm1zZyhg6KeG6aKR5Yqg6L296ZSZ6K+vYCwnZXJyb3InKTtcclxuXHRcdFx0XHRcdHRoaXMubG9nKCd2aWRlbyBlcnJvcicsJ2Vycm9yJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkYW5tYWt1X2NvbnRhaW5lcjp7XHJcblx0XHRcdFx0Y2xpY2s6ZT0+TlAucGxheVRvZ2dsZSgpLFxyXG5cdFx0XHRcdGNvbnRleHRtZW51OmU9PmUucHJldmVudERlZmF1bHQoKSxcclxuXHRcdFx0fSxcclxuXHRcdFx0cHJvZ3Jlc3M6e1xyXG5cdFx0XHRcdCdtb3VzZW1vdmUsY2xpY2snOmU9PntcclxuXHRcdFx0XHRcdGxldCB0PWUudGFyZ2V0LFxyXG5cdFx0XHRcdFx0XHRwcmU9VXRpbHMuY2xhbXAoKGUub2Zmc2V0WC10LnBhZCkvKHQub2Zmc2V0V2lkdGgtMip0LnBhZCksMCwxKTtcclxuXHRcdFx0XHRcdGlmKGUudHlwZT09PSdtb3VzZW1vdmUnKXtcclxuXHRcdFx0XHRcdFx0TlAuXy5wcm9ncmVzc1g9ZS5vZmZzZXRYO05QLmRyYXdQcm9ncmVzcygpO1xyXG5cdFx0XHRcdFx0XHROUC5fc2V0RGlzcGxheVRpbWUobnVsbCxVdGlscy5mb3JtYXRUaW1lKHByZSp2aWRlby5kdXJhdGlvbix2aWRlby5kdXJhdGlvbikpO1x0XHJcblx0XHRcdFx0XHR9ZWxzZSBpZihlLnR5cGU9PT0nY2xpY2snKXtcclxuXHRcdFx0XHRcdFx0dmlkZW8uY3VycmVudFRpbWU9cHJlKnZpZGVvLmR1cmF0aW9uO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0bW91c2VvdXQ6ZT0+e1xyXG5cdFx0XHRcdFx0TlAuXy5wcm9ncmVzc1g9dW5kZWZpbmVkO05QLmRyYXdQcm9ncmVzcygpO1xyXG5cdFx0XHRcdFx0TlAuX3NldERpc3BsYXlUaW1lKG51bGwsVXRpbHMuZm9ybWF0VGltZSh2aWRlby5kdXJhdGlvbix2aWRlby5kdXJhdGlvbikpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0sXHJcblx0XHRcdGRhbm1ha3Vfc3R5bGVfcGFubmVsOntcclxuXHRcdFx0XHRjbGljazplPT57aWYoZS50YXJnZXQudGFnTmFtZSE9PSdJTlBVVCcpc2V0SW1tZWRpYXRlKGE9Pk5QLiQoJyNkYW5tYWt1X2lucHV0JykuZm9jdXMoKSl9LFxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkYW5tYWt1X2NvbG9yOntcclxuXHRcdFx0XHQnaW5wdXQsY2hhbmdlJzplPT57XHJcblx0XHRcdFx0XHRsZXQgaT1lLnRhcmdldCxjPU5QLkRhbm1ha3UuaXNWYWlsZENvbG9yKGkudmFsdWUpO1xyXG5cdFx0XHRcdFx0aWYoYyl7Ly9tYXRjaCB2YWxpZCBoZXggY29sb3IgY29kZVxyXG5cdFx0XHRcdFx0XHRpLnN0eWxlLmJhY2tncm91bmRDb2xvcj1gIyR7Y31gO1xyXG5cdFx0XHRcdFx0XHROUC5fLmRhbm1ha3VDb2xvcj1jO1xyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdE5QLl8uZGFubWFrdUNvbG9yPXVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdFx0Yz1OUC5EYW5tYWt1LmlzVmFpbGRDb2xvcihOUC5vcHQuZGFubWFrdS5kZWZhdWx0RGFubWFrdUNvbG9yKTtcclxuXHRcdFx0XHRcdFx0aS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9Yz9gIyR7Y31gOicnO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0sXHJcblx0XHRcdGljb25fc3Bhbl92b2x1bWU6e1xyXG5cdFx0XHRcdGNsaWNrOmU9PnZpZGVvLm11dGVkPSF2aWRlby5tdXRlZCxcclxuXHRcdFx0XHR3aGVlbDplPT57XHJcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRsZXQgZD1lLndoZWVsRGVsdGFZO1xyXG5cdFx0XHRcdFx0aWYoZS5zaGlmdEtleSlkPWQ+MD8xMDotMTA7XHJcblx0XHRcdFx0XHR2aWRlby52b2x1bWU9VXRpbHMuY2xhbXAodmlkZW8udm9sdW1lK2QvOTAwLDAsMSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkYW5tYWt1X2lucHV0OntcclxuXHRcdFx0XHRrZXlkb3duOmU9PntpZihlLmtleT09PSdFbnRlcicpe05QLnNlbmQoKTt9ZWxzZSBpZihlLmtleT09PSdFc2NhcGUnKXtOUC5kYW5tYWt1SW5wdXQoZmFsc2UpO319XHJcblx0XHRcdH0sXHJcblx0XHRcdGRhbm1ha3Vfc3VibWl0OntcclxuXHRcdFx0XHRjbGljazplPT5OUC5zZW5kKCksXHJcblx0XHRcdH0sXHJcblx0XHRcdGRhbm1ha3VfbW9kZV9ib3g6e1xyXG5cdFx0XHRcdGNsaWNrOmU9PntcclxuXHRcdFx0XHRcdGxldCB0PWUudGFyZ2V0O1xyXG5cdFx0XHRcdFx0aWYodC5pZC5zdGFydHNXaXRoKCdpY29uX3NwYW5fZGFubWFrdU1vZGUnKSl7XHJcblx0XHRcdFx0XHRcdGxldCBtPTEqdC5pZC5tYXRjaCgvXFxkJC8pWzBdO1xyXG5cdFx0XHRcdFx0XHRpZihOUC5fLmRhbm1ha3VNb2RlIT09dW5kZWZpbmVkKVxyXG5cdFx0XHRcdFx0XHRcdCQoYCNpY29uX3NwYW5fZGFubWFrdU1vZGUke05QLl8uZGFubWFrdU1vZGV9YCkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcblx0XHRcdFx0XHRcdCQoYCNpY29uX3NwYW5fZGFubWFrdU1vZGUke219YCkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcblx0XHRcdFx0XHRcdE5QLl8uZGFubWFrdU1vZGU9bTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRhbm1ha3Vfc2l6ZV9ib3g6e1xyXG5cdFx0XHRcdGNsaWNrOmU9PntcclxuXHRcdFx0XHRcdGxldCB0PWUudGFyZ2V0O1xyXG5cdFx0XHRcdFx0aWYoIXQuc2l6ZSlyZXR1cm47XHJcblx0XHRcdFx0XHRVdGlscy50b0FycmF5KCQoJyNkYW5tYWt1X3NpemVfYm94JykuY2hpbGROb2RlcykuZm9yRWFjaChzcD0+e1xyXG5cdFx0XHRcdFx0XHRpZihOUC5fLmRhbm1ha3VTaXplPT09c3Auc2l6ZSlzcC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0dC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuXHRcdFx0XHRcdE5QLl8uZGFubWFrdVNpemU9dC5zaXplO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGFubWFrdV9jb2xvcl9ib3g6e1xyXG5cdFx0XHRcdGNsaWNrOmU9PntcclxuXHRcdFx0XHRcdGlmKGUudGFyZ2V0LmNvbG9yKXtcclxuXHRcdFx0XHRcdFx0JCgnI2Rhbm1ha3VfY29sb3InKS52YWx1ZT1lLnRhcmdldC5jb2xvcjtcclxuXHRcdFx0XHRcdFx0JCgnI2Rhbm1ha3VfY29sb3InKS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdH1cclxuXHRcdGZvcihsZXQgZWxlaWQgaW4gZXZlbnRzKXsvL2FkZCBldmVudHMgdG8gZWxlbWVudHNcclxuXHRcdFx0bGV0IGVsPSQoYCMke2VsZWlkfWApO1xyXG5cdFx0XHRpZighZWwpY29udGludWU7XHJcblx0XHRcdGxldCBldmVzPWV2ZW50c1tlbGVpZF07XHJcblx0XHRcdGV2ZXMmJkRvbVRvb2xzLmFkZEV2ZW50cygkKGAjJHtlbGVpZH1gKSxldmVzKTtcclxuXHRcdH1cclxuXHRcdERvbVRvb2xzLmFkZEV2ZW50cyh0aGlzLHtcclxuXHRcdFx0ZGFubWFrdUZyYW1lVG9nZ2xlOmJvb2w9Pk5QLl9pY29uQWN0aXZlKCdkYW5tYWt1VG9nZ2xlJyxib29sKSwvL2xpc3RlbiBkYW5tYWt1VG9nZ2xlIGV2ZW50IHRvIGNoYW5nZSBidXR0b24gc3R5bGVcclxuXHRcdFx0cGxheWVyTW9kZUNoYW5nZTptb2RlPT57XHJcblx0XHRcdFx0WydmdWxsUGFnZScsJ2Z1bGxTY3JlZW4nXS5mb3JFYWNoKG09PntcclxuXHRcdFx0XHRcdE5QLl9pY29uQWN0aXZlKG0sbW9kZT09PW0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHR2aWRlb19sb29wQ2hhbmdlOnZhbHVlPT5OUC5faWNvbkFjdGl2ZSgnbG9vcCcsdmFsdWUpLFxyXG5cdFx0fSk7XHJcblx0XHREb21Ub29scy5hZGRFdmVudHModGhpcy5fLnBsYXllcix7XHJcblx0XHRcdGtleWRvd246ZT0+TlAuX3BsYXllcktleUhhbmRsZShlKSxcclxuXHRcdFx0bW91c2Vtb3ZlOmU9PntcclxuXHRcdFx0XHR0aGlzLl91c2VyQWN0aXZlV2F0Y2hlcih0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHREb21Ub29scy5hZGRFdmVudHMoZG9jdW1lbnQse1xyXG5cdFx0XHQnZnVsbHNjcmVlbmNoYW5nZSxtb3pmdWxsc2NyZWVuY2hhbmdlLHdlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UsbXNmdWxsc2NyZWVuY2hhbmdlJzplPT57XHJcblx0XHRcdFx0aWYoTlAuY3VycmVudFBsYXllck1vZGU9PSdmdWxsU2NyZWVuJyAmJiAhRG9tVG9vbHMuaXNGdWxsc2NyZWVuKCkpXHJcblx0XHRcdFx0XHROUC5wbGF5ZXJNb2RlKCdub3JtYWwnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cclxuXHRcdFxyXG5cdFx0Ly9kYW5tYWt1IHVpXHJcblx0XHRpZih0aGlzLl9kYW5tYWt1RW5hYmxlZCl7XHJcblx0XHRcdC8vZGFubWFrdSBzaXplc1xyXG5cdFx0XHRvcHQudWlPcHRpb25zLmRhbm1ha3VTaXplcyYmb3B0LnVpT3B0aW9ucy5kYW5tYWt1U2l6ZXMuZm9yRWFjaCgocyxpbmQpPT57XHJcblx0XHRcdFx0bGV0IGU9TzJIKHtfOidzcGFuJyxhdHRyOntzdHlsZTpgZm9udC1zaXplOiR7MTIraW5kKjN9cHg7YCx0aXRsZTpzfSxwcm9wOntzaXplOnN9LGNoaWxkOlsnQSddfSk7XHJcblx0XHRcdFx0JCgnI2Rhbm1ha3Vfc2l6ZV9ib3gnKS5hcHBlbmRDaGlsZChlKTtcclxuXHRcdFx0XHRpZihzPT09b3B0Py51aU9wdGlvbnM/LmRhbm1ha3VTaXplKXsvL2NsaWNrIHNwZWNpZmllZCBidXR0b25cclxuXHRcdFx0XHRcdGUuY2xpY2soKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvL2Rhbm1ha3UgY29sb3JzXHJcblx0XHRcdG9wdC51aU9wdGlvbnMuZGFubWFrdUNvbG9ycyYmb3B0LnVpT3B0aW9ucy5kYW5tYWt1Q29sb3JzLmZvckVhY2goYz0+e1xyXG5cdFx0XHRcdGxldCBlPU8ySCh7Xzonc3BhbicsYXR0cjp7c3R5bGU6YGJhY2tncm91bmQtY29sb3I6IyR7Y307YCx0aXRsZTpjfSxwcm9wOntjb2xvcjpjfX0pO1xyXG5cdFx0XHRcdCQoJyNkYW5tYWt1X2NvbG9yX2JveCcpLmFwcGVuZENoaWxkKGUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYob3B0LnVpT3B0aW9ucz8uZGFubWFrdUNvbG9yKXsvL3NldCBkZWZhdWx0IGNvbG9yXHJcblx0XHRcdFx0JCgnI2Rhbm1ha3VfY29sb3InKS52YWx1ZT1vcHQudWlPcHRpb25zLmRhbm1ha3VDb2xvcjtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL2Rhbm1ha3UgbW9kZXNcclxuXHRcdFx0b3B0LnVpT3B0aW9ucy5kYW5tYWt1TW9kZXMmJm9wdC51aU9wdGlvbnMuZGFubWFrdU1vZGVzLmZvckVhY2gobT0+e1xyXG5cdFx0XHRcdGxldCBlPWljb24oYGRhbm1ha3VNb2RlJHttfWApO1xyXG5cdFx0XHRcdCQoJyNkYW5tYWt1X21vZGVfYm94JykuYXBwZW5kQ2hpbGQoZSk7XHJcblx0XHRcdFx0aWYobT09PW9wdD8udWlPcHRpb25zPy5kYW5tYWt1TW9kZSl7Ly9jbGljayBzcGVjaWZpZWQgYnV0dG9uXHJcblx0XHRcdFx0XHRlLmNsaWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR0aGlzLiQkKCdbaWQqPWRhbm1ha3VdJykuZm9yRWFjaChlbD0+ey8vcmVtb3ZlIGRhbm1ha3UgYnV0dG9uc1xyXG5cdFx0XHRcdGVsLnBhcmVudE5vZGUscmVtb3ZlQ2hpbGQoZWwpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly9wdXQgaW50byB0aGUgY29udGFpbmVyXHJcblx0XHRpZihvcHQucGxheWVyQ29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpXHJcblx0XHRcdG9wdC5wbGF5ZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoTlAucGxheWVyKTtcclxuXHJcblx0XHR0aGlzLnN0YXRSZXN1bHQoJ2NyZWF0aW5nX3BsYXllcicpO1xyXG5cdH1cclxuXHRfdXNlckFjdGl2ZVdhdGNoZXIoYWN0aXZlPWZhbHNlKXsvL3dhdGNoIHVzZXIgYWN0aXZlLGZvciBhdXRvIGhpZGluZyB1aVxyXG5cdFx0bGV0IGRlbGF5PTUwMDAsdD1EYXRlLm5vdygpO1xyXG5cdFx0aWYoYWN0aXZlKXtcclxuXHRcdFx0dGhpcy5fLmxhc3RVc2VyQWN0aXZlPXQ7XHJcblx0XHRcdGlmKHRoaXMuXy51c2VySW5hY3RpdmUpe1xyXG5cdFx0XHRcdHRoaXMuXy51c2VySW5hY3RpdmU9ZmFsc2U7XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXIuY2xhc3NMaXN0LnJlbW92ZSgndXNlci1pbmFjdGl2ZScpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZih0aGlzLl8udXNlckFjdGl2ZVRpbWVyKXJldHVybjtcclxuXHRcdHRoaXMuXy51c2VyQWN0aXZlVGltZXI9c2V0VGltZW91dCgoKT0+e1xyXG5cdFx0XHR0aGlzLl8udXNlckFjdGl2ZVRpbWVyPTA7XHJcblx0XHRcdGxldCBub3c9RGF0ZS5ub3coKTtcclxuXHRcdFx0aWYobm93LXRoaXMuXy5sYXN0VXNlckFjdGl2ZTxkZWxheSl7XHJcblx0XHRcdFx0dGhpcy5fdXNlckFjdGl2ZVdhdGNoZXIoKTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXIuY2xhc3NMaXN0LmFkZCgndXNlci1pbmFjdGl2ZScpO1xyXG5cdFx0XHRcdHRoaXMuXy51c2VySW5hY3RpdmU9dHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fSxkZWxheS10K3RoaXMuXy5sYXN0VXNlckFjdGl2ZSk7XHJcblx0fVxyXG5cdF9wbGF5ZXJLZXlIYW5kbGUoZSl7Ly9ob3Qga2V5c1xyXG5cdFx0aWYoZS50YXJnZXQudGFnTmFtZT09PSdJTlBVVCcpcmV0dXJuO1xyXG5cdFx0Y29uc3QgVj10aGlzLnZpZGVvLF9TSD1lLnNoaWZ0S2V5LF9SRT1lLnJlcGVhdDtcclxuXHRcdC8vdG8gcHJldmVudCBkZWZhdWx0LHVzZSBicmVhay5vdGhlcndpc2UsdXNlIHJldHVybi5cclxuXHRcdHN3aXRjaChlLmtleSl7XHJcblx0XHRcdGNhc2UgJyAnOntcclxuXHRcdFx0XHRpZihfUkUpcmV0dXJuOy8vaWdub3JlIHJlcGVhdCBrZXlzXHJcblx0XHRcdFx0dGhpcy5wbGF5VG9nZ2xlKCk7YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnQXJyb3dSaWdodCc6ey8vc2VlayBmb3J3YXJkXHJcblx0XHRcdFx0Vi5jdXJyZW50VGltZSs9KDMqKF9TSD8yOjEpKTticmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXNlICdBcnJvd0xlZnQnOnsvL3NlZWsgYmFja3dhcmRcclxuXHRcdFx0XHRWLmN1cnJlbnRUaW1lLT0oMS41KihfU0g/MjoxKSk7YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnQXJyb3dVcCc6ey8vdm9sdW1lIHVwXHJcblx0XHRcdFx0Vi52b2x1bWU9VXRpbHMuY2xhbXAoVi52b2x1bWUrKDAuMDMqKF9TSD8yOjEpKSwwLDEpO2JyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhc2UgJ0Fycm93RG93bic6ey8vdm9sdW1lIGRvd25cclxuXHRcdFx0XHRWLnZvbHVtZT1VdGlscy5jbGFtcChWLnZvbHVtZS0oMC4wMyooX1NIPzI6MSkpLDAsMSk7YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAncCc6ey8vZnVsbCBwYWdlXHJcblx0XHRcdFx0aWYoX1JFKXJldHVybjtcclxuXHRcdFx0XHR0aGlzLnBsYXllck1vZGUoJ2Z1bGxQYWdlJyk7YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnZic6ey8vZnVsbHNjcmVlblxyXG5cdFx0XHRcdHRoaXMucGxheWVyTW9kZSgnZnVsbFNjcmVlbicpO2JyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhc2UgJ2QnOnsvL2Rhbm1ha3UgdG9nZ2xlXHJcblx0XHRcdFx0aWYoX1JFKXJldHVybjtcclxuXHRcdFx0XHR0aGlzLl9kYW5tYWt1RW5hYmxlZCYmdGhpcy5EYW5tYWt1LnRvZ2dsZSgpO2JyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhc2UgJ20nOnsvL211dGVcclxuXHRcdFx0XHRpZihfUkUpcmV0dXJuO1xyXG5cdFx0XHRcdHRoaXMudmlkZW8ubXV0ZWQ9IXRoaXMudmlkZW8ubXV0ZWQ7YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnbCc6ey8vbG9vcFxyXG5cdFx0XHRcdHRoaXMudmlkZW8ubG9vcD0hdGhpcy52aWRlby5sb29wO2JyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhc2UgJ0VudGVyJzp7Ly9kYW5tYWt1IGlucHV0IHRvZ2dsZVxyXG5cdFx0XHRcdGlmKF9SRSlyZXR1cm47XHJcblx0XHRcdFx0dGhpcy5fZGFubWFrdUVuYWJsZWQmJnRoaXMuZGFubWFrdUlucHV0KCk7YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnRXNjYXBlJzp7Ly9leGl0IGZ1bGwgcGFnZSBtb2RlXHJcblx0XHRcdFx0aWYodGhpcy5jdXJyZW50UGxheWVyTW9kZT09PSdmdWxsUGFnZScpe1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXJNb2RlKCdub3JtYWwnKTticmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGRlZmF1bHQ6cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdH1cclxuXHRkYW5tYWt1SW5wdXQoYm9vbD0hdGhpcy4kKCcjZGFubWFrdV9pbnB1dF9mcmFtZScpLm9mZnNldEhlaWdodCl7Ly9oaWRlIG9yIHNob3cgZGFubWFrdSBpbnB1dFxyXG5cdFx0bGV0ICQ9dGhpcy4kO1xyXG5cdFx0JCgnI2Rhbm1ha3VfaW5wdXRfZnJhbWUnKS5zdHlsZS5kaXNwbGF5PWJvb2w/Jyc6J25vbmUnO1xyXG5cdFx0dGhpcy5faWNvbkFjdGl2ZSgnYWRkRGFubWFrdScsYm9vbCk7XHJcblx0XHRzZXRJbW1lZGlhdGUoKCk9Pntib29sPyQoJyNkYW5tYWt1X2lucHV0JykuZm9jdXMoKTp0aGlzLl8ucGxheWVyLmZvY3VzKCk7fSk7XHJcblx0fVxyXG5cdHJlc2l6ZVByb2dyZXNzKCl7XHJcblx0XHRjb25zdCBjPXRoaXMuJCgnI3Byb2dyZXNzJyk7XHJcblx0XHRjLndpZHRoPWMub2Zmc2V0V2lkdGg7XHJcblx0XHRjLmhlaWdodD1jLm9mZnNldEhlaWdodDtcclxuXHRcdHRoaXMuZHJhd1Byb2dyZXNzKCk7XHJcblx0XHR0aGlzLmVtaXQoJ3Byb2dyZXNzUmVmcmVzaCcpO1xyXG5cdH1cclxuXHRfcHJvZ3Jlc3NEcmF3ZXIoKXtcclxuXHRcdGNvbnN0IGN0eD10aGlzLl8ucHJvZ3Jlc3NDb250ZXh0LFxyXG5cdFx0XHRcdGM9dGhpcy4kKCcjcHJvZ3Jlc3MnKSxcclxuXHRcdFx0XHR3PWMud2lkdGgsXHJcblx0XHRcdFx0aD1jLmhlaWdodCxcclxuXHRcdFx0XHR2PXRoaXMudmlkZW8sXHJcblx0XHRcdFx0ZD12LmR1cmF0aW9uLFxyXG5cdFx0XHRcdGNUPXYuY3VycmVudFRpbWUsXHJcblx0XHRcdFx0cGFkPWMucGFkLFxyXG5cdFx0XHRcdGxlbj13LTIqcGFkO1xyXG5cdFx0bGV0IGk7XHJcblx0XHRjdHguY2xlYXJSZWN0KDAsMCx3LGgpO1xyXG5cdFx0Y3R4LmxpbmVDYXAgPSBcInJvdW5kXCI7XHJcblx0XHQvL2JhY2tncm91bmRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5zdHJva2VTdHlsZT0nI2VlZSc7XHJcblx0XHRjdHgubGluZVdpZHRoPTc7XHJcblx0XHRjdHgubW92ZVRvKHBhZCwgMTUpO1xyXG5cdFx0Y3R4LmxpbmVUbyhwYWQrbGVuLCAxNSk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQvL2J1ZmZlcmVkXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSAnI0MwQkJCQic7XHJcblx0XHRjdHgubGluZVdpZHRoID0gMjtcclxuXHRcdGxldCB0ciA9IHYuYnVmZmVyZWQ7XHJcblx0XHRmb3IgKGkgPSB0ci5sZW5ndGg7aS0tOykge1xyXG5cdFx0XHRjdHgubW92ZVRvKHBhZCt0ci5zdGFydChpKSAvIGQgKiBsZW4sIDE4KTtcclxuXHRcdFx0Y3R4LmxpbmVUbyhwYWQrdHIuZW5kKGkpIC8gZCAqIGxlbiwgMTgpO1xyXG5cdFx0fVxyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Ly9wcm9ncmVzc1xyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y3R4LnN0cm9rZVN0eWxlPScjNmNmJztcclxuXHRcdGN0eC5saW5lV2lkdGggPSA1O1xyXG5cdFx0Y3R4Lm1vdmVUbyhwYWQsMTUpO1xyXG5cdFx0Y3R4LmxpbmVUbyhwYWQrbGVuKmNUL2QsMTUpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Ly9hbHJlYWR5IHBsYXllZFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsLjMpJztcclxuXHRcdGN0eC5saW5lV2lkdGggPSA1O1xyXG5cdFx0dHIgPSB2LnBsYXllZDtcclxuXHRcdGZvciAoaSA9IHRyLmxlbmd0aDtpLS07KSB7XHJcblx0XHRcdGN0eC5tb3ZlVG8ocGFkK3RyLnN0YXJ0KGkpIC8gZCAqIGxlbiwgMTUpO1xyXG5cdFx0XHRjdHgubGluZVRvKHBhZCt0ci5lbmQoaSkgLyBkICogbGVuLCAxNSk7XHJcblx0XHR9XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQvL21vdXNlXHJcblx0XHRpZih0aGlzLl8ucHJvZ3Jlc3NYKXtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRjdHguc3Ryb2tlU3R5bGU9J3JnYmEoMCwwLDAsLjA1KSc7XHJcblx0XHRcdGN0eC5tb3ZlVG8ocGFkK2xlbipjVC9kLDE1KTtcclxuXHRcdFx0Y3R4LmxpbmVUbyhVdGlscy5jbGFtcCh0aGlzLl8ucHJvZ3Jlc3NYLHBhZCxwYWQrbGVuKSwxNSk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuXy5kcmF3aW5nUHJvZ3Jlc3M9ZmFsc2U7XHJcblx0fVxyXG5cdGRyYXdQcm9ncmVzcygpe1xyXG5cdFx0aWYodGhpcy5fLmRyYXdpbmdQcm9ncmVzcylyZXR1cm47XHJcblx0XHR0aGlzLl8uZHJhd2luZ1Byb2dyZXNzPXRydWU7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PnRoaXMuX3Byb2dyZXNzRHJhd2VyKCkpOy8vcHJldmVudCBwcm9ncmVzcyBiYXIgZHJhd2luZyBtdWx0aSB0aW1lcyBpbiBhIGZyYW1lXHJcblx0fVxyXG59XHJcblxyXG5cclxuXHJcblxyXG53aW5kb3cuTnlhUD1OeWFQO1xyXG4iLCJpbXBvcnQge1xyXG4gICAgTnlhUGxheWVyQ29yZSxcclxuXHREb21Ub29scyxcclxuXHRVdGlscyxcclxufSBmcm9tICcuLi9jb21wb25lbnQvTnlhUC1Db3JlL2luZGV4LmpzJztcclxuXHJcbmltcG9ydCBOeWFQRGFubWFrdSBmcm9tICcuLi9jb21wb25lbnQvTnlhUC1EYW5tYWt1L2luZGV4LmpzJztcclxuXHJcbmNvbnN0IE8ySD1Eb21Ub29scy5PYmplY3QySFRNTDtcclxuXHJcbi8vZGVmYXVsdCBvcHRpb25zXHJcbmNvbnN0IE55YVBDb21tb25PcHRpb25zPXtcclxuXHQvL2ZvciBkYW5tYWt1IGZyYW1lXHJcblx0ZGFubWFrdTp7XHJcblx0XHRlbmFibGU6dHJ1ZSxcclxuXHRcdG1vZHVsZXM6e1xyXG5cdFx0XHRUZXh0RGFubWFrdTp7XHJcblx0XHRcdFx0ZW5hYmxlOnRydWUsXHJcblx0XHRcdFx0ZGVmYXVsdFN0eWxlczp7fSxcclxuXHRcdFx0XHRvcHRpb25zOnt9LFxyXG5cdFx0XHR9LFxyXG5cdFx0fSxcclxuXHRcdGRlZmF1bHREYW5tYWt1Q29sb3I6bnVsbCwvL2EgaGV4IGNvbG9yKHdpdGhvdXQgIyksZGVmYXVsdCB3aGVuIHRoZSBjb2xvciBpbnB1dGVkIGlzIGludmFsaWRcclxuXHRcdHNlbmQ6ZD0+e3JldHVybiBQcm9taXNlLnJlamVjdCgpO30sLy90aGUgbWV0aG9kIGZvciBzZW5kaW5nIGRhbm1ha3VcclxuXHR9LFxyXG5cdC8vIGZvciB1aVxyXG5cdHVpT3B0aW9uczp7XHJcblx0XHRkYW5tYWt1Q29sb3JzOlsnZmZmJywnNmNmJywnZmYwJywnZjAwJywnMGYwJywnMDBmJywnZjBmJywnMDAwJ10sLy9jb2xvcnMgaW4gdGhlIGRhbm1ha3Ugc3R5bGUgcGFubmVsXHJcblx0XHRkYW5tYWt1TW9kZXM6WzAsMywyLDFdLC8vMDpyaWdodFx0MTpsZWZ0XHQyOmJvdHRvbVx0Mzp0b3AgIDs7IG1vZGUgaW4gdGhlIGRhbm1ha3Ugc3R5bGUgcGFubmVsXHJcblx0XHRkYW5tYWt1U2l6ZXM6WzIwLDI0LDM2XSwvL2Rhbm1ha3Ugc2l6ZSBidXR0b25zIGluIHRoZSBkYW5tYWt1IHN0eWxlIHBhbm5lbFxyXG5cdFx0ZGFubWFrdUNvbG9yOm51bGwsLy9kZWZhdWx0IGNvbG9yIHRvIGZpbGwgdGhlIGNvbG9yIG9wdGlvbiBpbnB1dFxyXG5cdFx0ZGFubWFrdU1vZGU6MCwvLzA6IHJpZ2h0IHRvIGxlZnQuXHJcblx0XHRkYW5tYWt1U2l6ZToyNCxcclxuXHRcdGF1dG9IaWRlRGFubWFrdUlucHV0OnRydWUsLy9oaWRlIGRhbm1ha3VpbnB1dCBhZnRlciBkYW5tYWt1IHNlbmRpbmdcclxuXHR9LFxyXG5cclxuXHRsb2FkaW5nSW5mbzp7Ly90ZXh0IHJlcGxhY2VtZW50IGF0IGxvYWRpbmcgdGltZSAoZm9yIGxlZnQtYm90dG9tIG1lc3NhZ2UpXHJcblx0XHRkb25lVGV4dDonb2snLFxyXG5cdFx0ZmFpbFRleHQ6J2ZhaWxlZCcsXHJcblx0XHRjb250ZW50U3BsaXRlcjonLi4uJyxcclxuXHR9LFxyXG5cdGxvYWRpbmdBbmltYXRpb246e1xyXG5cdFx0c3RhcnQoTlApe1xyXG5cdFx0XHROUC4kKCcjbG9hZGluZ19hbmltZScpLmlubmVySFRNTD0nKOC5keKAosyBIM+JIOKAosyA4LmRKSc7XHJcblx0XHRcdE5QLl8ubG9hZGluZ0FuaW1hdGlvbkludGVydmFsPXNldEludGVydmFsKCgpPT57Ly9sb2FkaW5nIGFuaW1hdGlvblxyXG5cdFx0XHRcdE5QLiQoJyNsb2FkaW5nX2FuaW1lJykuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlKFwiK1V0aWxzLnJhbmQoLTIwLDIwKStcInB4LFwiK1V0aWxzLnJhbmQoLTIwLDIwKStcInB4KSByb3RhdGUoXCIrVXRpbHMucmFuZCgtMTAsMTApK1wiZGVnKVwiO1xyXG5cdFx0XHR9LDgwKTtcclxuXHRcdH0sXHJcblx0XHRzdG9wKE5QKXtcclxuXHRcdFx0Y2xlYXJJbnRlcnZhbChOUC5fLmxvYWRpbmdBbmltYXRpb25JbnRlcnZhbCk7XHJcblx0XHRcdGxldCBsZj1OUC4kKCcjbG9hZGluZ19mcmFtZScpO1xyXG5cdFx0XHRpZihsZi5wYXJlbnROb2RlKS8vcmVtb3ZlIGxvYWRpbmcgYW5pbWF0aW9uXHJcblx0XHRcdFx0bGYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsZik7XHJcblx0XHR9LFxyXG5cdFx0ZXJyb3IoTlApe1xyXG5cdFx0XHRjbGVhckludGVydmFsKE5QLl8ubG9hZGluZ0FuaW1hdGlvbkludGVydmFsKTtcclxuXHRcdFx0TlAuJCgnI2xvYWRpbmdfYW5pbWUnKS5pbm5lckhUTUw9JyjguZHigKIgLiDigKLguZEpJztcclxuXHRcdFx0TlAuJCgnI2xvYWRpbmdfYW5pbWUnKS5zdHlsZS50cmFuc2Zvcm09XCJcIjtcclxuXHRcdH0sXHJcblx0fSxcclxuXHJcblx0Ly9vdGhlciBjb21tb24gb3B0aW9uc1xyXG5cdHBsYXllckNvbnRhaW5lcjpudWxsLC8vdGhlIGVsZW1lbnQgZm9yIGNvbnRhaW5pbmcgdGhlIHBsYXllclxyXG5cdGljb25zOntcclxuXHRcdHBsYXk6WzMwLDMwLCc8cGF0aCBkPVwibTEwLjA2Myw4Ljg1Nmw5Ljg3Myw2LjE0M2wtOS44NzMsNi4xNDN2LTEyLjI4N3pcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+J10sXHJcblx0XHRkYW5tYWt1U3R5bGU6WzMwLDMwLCc8cGF0aCBzdHlsZT1cImZpbGwtb3BhY2l0eTowIWltcG9ydGFudDtcIiBzdHJva2Utd2lkdGg9XCIxLjRcIiBkPVwibTIxLjAwNCw4Ljk5NWMtMC41MTMsLTAuNTEzIC0xLjEzNSwtMC43NzAgLTEuODY0LC0wLjc3MGwtOC4yODEsMGMtMC43MjksMCAtMS4zNTAsMC4yNTYgLTEuODY0LDAuNzcwYy0wLjUxMywwLjUxMyAtMC43NzAsMS4xMzUgLTAuNzcwLDEuODY0bDAsOC4yODFjMCwwLjcyMSAwLjI1NiwxLjM0MSAwLjc3MCwxLjg1OGMwLjUxMywwLjUxNyAxLjEzNSwwLjc3NiAxLjg2NCwwLjc3Nmw4LjI4MSwwYzAuNzI5LDAgMS4zNTAsLTAuMjU4IDEuODY0LC0wLjc3NmMwLjUxMywtMC41MTcgMC43NzAsLTEuMTM2IDAuNzcwLC0xLjg1OGwwLC04LjI4MWMwLC0wLjcyOSAtMC4yNTcsLTEuMzUwIC0wLjc3MCwtMS44NjR6XCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+J1xyXG5cdFx0XHRcdFx0XHRcdCsnPHBhdGggZD1cIm0xMi4xNDIsMTQuMDMxbDEuODg4LDBsMCwtMS44ODhsMS45MzcsMGwwLDEuODg4bDEuODg4LDBsMCwxLjkzN2wtMS44ODgsMGwwLDEuODg4bC0xLjkzNywwbDAsLTEuODg4bC0xLjg4OCwwbDAsLTEuOTM3elwiIHN0cm9rZS13aWR0aD1cIjFcIi8+J10sXHJcblx0XHRkYW5tYWt1VG9nZ2xlOlszMCwzMCwnPHBhdGggZD1cIm04LjU2OSwxMC40NTVsMCwwYzAsLTAuNzY3IDAuNjU5LC0xLjM4OSAxLjQ3MywtMS4zODlsMC42NjksMGwwLDBsMy4yMTUsMGw2LjAyOCwwYzAuMzkwLDAgMC43NjUsMC4xNDYgMS4wNDEsMC40MDZjMC4yNzYsMC4yNjAgMC40MzEsMC42MTMgMC40MzEsMC45ODJsMCwzLjQ3M2wwLDBsMCwyLjA4M2wwLDBjMCwwLjc2NyAtMC42NTksMS4zODkgLTEuNDczLDEuMzg5bC02LjAyOCwwbC00LjIwMCwzLjUzMmwwLjk4NSwtMy41MzJsLTAuNjY5LDBjLTAuODEzLDAgLTEuNDczLC0wLjYyMSAtMS40NzMsLTEuMzg5bDAsMGwwLC0yLjA4M2wwLDBsMCwtMy40NzN6XCIvPiddLFxyXG5cdFx0YWRkRGFubWFrdTpbMzAsMzAsJzxwYXRoIHN0eWxlPVwiZmlsbC1vcGFjaXR5OjEhaW1wb3J0YW50XCIgZD1cIm0yMS43ODEsOS44NzJsLTEuNTAwLC0xLjUzMGMtMC4zNzgsLTAuMzg1IC0wLjk5NywtMC4zOTEgLTEuMzg0LC0wLjAxMmwtMC45NTksMC45NDFsMi44NzAsMi45MjZsMC45NjAsLTAuOTQwYzAuMzg1LC0wLjM3OSAwLjM5MiwtMC45OTggMC4wMTMsLTEuMzgzem0tMTIuMTM0LDcuNTMybDIuODcxLDIuOTI2bDcuNTkzLC03LjQ0OGwtMi44NzIsLTIuOTI3bC03LjU5MSw3LjQ0OWwwLjAwMCwwLjAwMHptLTEuMTU4LDIuNTcxbC0wLjU0OSwxLjk3NGwxLjk4NCwtMC41MTFsMS44NDMsLTAuNDc0bC0yLjc2OSwtMi44MjRsLTAuNTA5LDEuODM1elwiIHN0cm9rZS13aWR0aD1cIjBcIi8+J10sXHJcblx0XHRmdWxsU2NyZWVuOlszMCwzMCwnPHBhdGggc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBkPVwibTExLjE2Niw5Ljc2MWwtNS4yMzcsNS4yMzlsNS4yMzcsNS4yMzhsMS45MDUsLTEuOTA1bC0zLjMzMywtMy4zMzNsMy4zMzIsLTMuMzMzbC0xLjkwNCwtMS45MDZ6bTcuNjY1LDBsLTEuOTAzLDEuOTA1bDMuMzMyLDMuMzMzbC0zLjMzMiwzLjMzMmwxLjkwMywxLjkwNWw1LjIzOCwtNS4yMzhsLTUuMjM4LC01LjIzN3pcIiBzdHJva2Utd2lkdGg9XCIxLjNcIiAvPiddLFxyXG5cdFx0ZnVsbFBhZ2U6WzMwLDMwLCc8cmVjdCBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGhlaWdodD1cIjExLjE2OVwiIHdpZHRoPVwiMTcuNjU1XCIgeT1cIjkuNDE1XCIgeD1cIjYuMTcyXCIgc3Ryb2tlLXdpZHRoPVwiMS41XCIvPidcclxuXHRcdFx0XHRcdFx0ICArJzxwYXRoIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgZD1cIm0xMi4zNjEsMTEuMzk0bC0zLjYwNCwzLjYwNWwzLjYwNSwzLjYwNWwxLjMxMSwtMS4zMTFsLTIuMjk0LC0yLjI5NGwyLjI5MywtMi4yOTRsLTEuMzExLC0xLjMxMXptNS4yNzUsMGwtMS4zMTAsMS4zMTFsMi4yOTMsMi4yOTRsLTIuMjkzLDIuMjkzbDEuMzEwLDEuMzExbDMuNjA1LC0zLjYwNWwtMy42MDUsLTMuNjA1elwiLz4nXSxcclxuXHRcdGxvb3A6WzMwLDMwLCc8cGF0aCBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjFcIiBkPVwibTIwLjk0NSwxNS4yODJjLTAuMjA0LC0wLjI0NSAtMC41MDQsLTAuMzg3IC0wLjgyMywtMC4zODdjLTAuNTgzLDAgLTEuMDc5LDAuMzk4IC0xLjIwNSwwLjk2OWMtMC40MDAsMS43OTkgLTIuMDI3LDMuMTA2IC0zLjg3MCwzLjEwNmMtMi4xODgsMCAtMy45NjksLTEuNzgwIC0zLjk2OSwtMy45NjljMCwtMi4xODkgMS43ODEsLTMuOTY5IDMuOTY5LC0zLjk2OWMwLjcyMCwwIDEuNDEyLDAuMTkyIDIuMDI0LDAuNTYxbC0wLjMzNCwwLjMzOGMtMC4wOTgsMC4xMDAgLTAuMTI3LDAuMjUwIC0wLjA3MywwLjM4MGMwLjA1NSwwLjEzMCAwLjE4MywwLjIxMyAwLjMyNCwwLjIxMmwyLjE3NiwwLjAwMWMwLjI1NSwtMC4wMDIgMC40NjcsLTAuMjMxIDAuNDY2LC0wLjQ4MmwtMC4wMDgsLTIuMTgzYy0wLjAwMCwtMC4xNDQgLTAuMDg1LC0wLjI3MiAtMC4yMTcsLTAuMzI1Yy0wLjEzMSwtMC4wNTIgLTAuMjgwLC0wLjAyMiAtMC4zNzksMC4wNzdsLTAuMzI5LDAuMzM0Yy0xLjA1OCwtMC43NjUgLTIuMzQwLC0xLjE4MiAtMy42NDksLTEuMTgyYy0zLjQzOCwwIC02LjIzNiwyLjc5NyAtNi4yMzYsNi4yMzZjMCwzLjQzOCAyLjc5Nyw2LjIzNiA2LjIzNiw2LjIzNmMyLjk5MywwIDUuNTY5LC0yLjEzMyA2LjEyNiwtNS4wNzJjMC4wNTksLTAuMzE0IC0wLjAyMiwtMC42MzUgLTAuMjI3LC0wLjg4MnpcIi8+J10sXHJcblx0XHR2b2x1bWU6WzMwLDMwLCc8ZWxsaXBzZSBpZD1cInZvbHVtZV9jaXJjbGVcIiBzdHlsZT1cImZpbGwtb3BhY2l0eTouNiFpbXBvcnRhbnRcIiByeT1cIjZcIiByeD1cIjZcIiBjeT1cIjE1XCIgY3g9XCIxNVwiIHN0cm9rZS1kYXNoYXJyYXk9XCIzOCA5MFwiIHN0cm9rZS13aWR0aD1cIjEuOFwiLz4nXSxcclxuXHRcdGRhbm1ha3VNb2RlMDpbMzAsMzAsJzxwYXRoIHN0eWxlPVwiZmlsbC1vcGFjaXR5OjEhaW1wb3J0YW50XCIgc3Ryb2tlLXdpZHRoPVwiMFwiIGQ9XCJtMTQuOTgxLDE3LjgyMWwtNy45MzcsLTIuODIxbDcuOTM3LC0yLjgyMWwwLDEuNDA5bDcuOTc1LDBsMCwyLjgyMWwtNy45NzUsMGwwLDEuNDA5bDAsMC4wMDJ6XCIvPiddLFxyXG5cdFx0ZGFubWFrdU1vZGUxOlszMCwzMCwnPHBhdGggc3R5bGU9XCJmaWxsLW9wYWNpdHk6MSFpbXBvcnRhbnRcIiBzdHJva2Utd2lkdGg9XCIwXCIgZD1cIm0xNS4wMTksMTIuMTc4bDcuOTM3LDIuODIxbC03LjkzNywyLjgyMWwwLC0xLjQwOWwtNy45NzUsMGwwLC0yLjgyMWw3Ljk3NSwwbDAsLTEuNDA5bDAsLTAuMDAyelwiLz4nXSxcclxuXHRcdGRhbm1ha3VNb2RlMzpbMzAsMzAsJzxwYXRoIHN0cm9rZS13aWR0aD1cIjNcIiBkPVwibTcuOTcyLDcuNDg2bDE0LjA1NCwwXCIvPiddLFxyXG5cdFx0ZGFubWFrdU1vZGUyOlszMCwzMCwnPHBhdGggc3Ryb2tlLXdpZHRoPVwiM1wiIGQ9XCJtNy45NzIsMjIuNTEzbDE0LjA1NCwwXCIvPiddLFxyXG5cdH0sXHJcbn1cclxuXHJcbi8vTnlhUCBjbGFzc2ljIHRoZW1lIENvcmVcclxuY2xhc3MgTnlhUENvbW1vbiBleHRlbmRzIE55YVBsYXllckNvcmV7XHJcblx0Z2V0IGZyYW1lKCl7cmV0dXJuIHRoaXMuXy5wbGF5ZXJ8fHRoaXMudmlkZW9GcmFtZTt9XHJcblx0Z2V0IHBsYXllcigpe3JldHVybiB0aGlzLl8ucGxheWVyO31cclxuXHRnZXQgY3VycmVudFBsYXllck1vZGUoKXtyZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0QXR0cmlidXRlKCdwbGF5ZXJNb2RlJyl8fCdub3JtYWwnO31cclxuXHRnZXQgX2Rhbm1ha3VFbmFibGVkKCl7cmV0dXJuIHRoaXMub3B0LmRhbm1ha3UuZW5hYmxlO31cclxuXHRjb25zdHJ1Y3RvcihvcHQpe1xyXG5cdFx0c3VwZXIoVXRpbHMuZGVlcEFzc2lnbih7fSxOeWFQQ29tbW9uT3B0aW9ucyxvcHQpKTtcclxuXHRcdHRoaXMubG9nKCclYyBodHRwczovL2dpdGh1Yi5jb20vSmlhSmlhSmlhbmcvTnlhUC8gJywnbG9nJyxcImJhY2tncm91bmQ6IzZmOGZhMjtjb2xvcjojY2NjO3BhZGRpbmc6LjNlbVwiKTtcclxuXHRcdG9wdD10aGlzLm9wdDtcclxuXHJcblx0XHR0aGlzLiQ9dGhpcy4kLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLiQkPXRoaXMuJCQuYmluZCh0aGlzKTtcclxuXHJcblx0XHQvL2xhbmd1YWdlXHJcblx0XHRjb25zdCBfdD10aGlzLl90PXRoaXMuaTE4bi5fLmJpbmQodGhpcy5pMThuKTsvL3RyYW5zbGF0ZVxyXG5cdFx0Ly9sb2FkIGxhbmd1YWdlcyB0byB0aGUgY29yZVxyXG5cdFx0bGV0IGxhbmdzPXJlcXVpcmUoJy4vbGFuZ3MuanNvbicpO1xyXG5cdFx0Zm9yKGxldCBsIGluIGxhbmdzKXtcclxuXHRcdFx0dGhpcy5pMThuLmFkZChsLGxhbmdzW2xdKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL3RoZSB2aWRlbyBmcmFtZSBmb3IgTnlhUCBhbmQgTnlhUFRvdWNoXHJcblx0XHR0aGlzLnZpZGVvRnJhbWU9TzJIKFxyXG5cdFx0XHR7XzonZGl2JyxhdHRyOntpZDondmlkZW9fZnJhbWUnfSxjaGlsZDpbXHJcblx0XHRcdFx0dGhpcy52aWRlbyxcclxuXHRcdFx0XHQvL3RoaXMuY29udGFpbmVyLFxyXG5cdFx0XHRcdHtfOidkaXYnLGF0dHI6e2lkOidsb2FkaW5nX2ZyYW1lJ30sY2hpbGQ6W1xyXG5cdFx0XHRcdFx0e186J2RpdicsYXR0cjp7aWQ6J2xvYWRpbmdfYW5pbWUnfX0sXHJcblx0XHRcdFx0XHR7XzonZGl2JyxhdHRyOntpZDonbG9hZGluZ19pbmZvJ319LFxyXG5cdFx0XHRcdF19LFxyXG5cdFx0XHRcdHtfOidkaXYnLGF0dHI6e2lkOidtc2dfYm94J319LFxyXG5cdFx0XHRdfVxyXG5cdFx0KTtcclxuXHJcblx0XHQvL2FkZCBwcml2YXRlIHZhcnNcclxuXHRcdHRoaXMuXy5zZWxlY3RvckNhY2hlPXt9O1xyXG5cdFx0dGhpcy5fLnZvbHVtZUJveD1uZXcgTXNnQm94KCcnLCdpbmZvJyx0aGlzLiQoJyNtc2dfYm94JykpO1xyXG5cdFx0dGhpcy5fLmlvcz0hIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lbQS16XSs/OyBDUFUgLis/bGlrZSBNYWMgT1MvKTtcclxuXHRcdHRoaXMuXy5tb2JpbGVYNT0hIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL01RUUJyb3dzZXIvKTtcclxuXHJcblx0XHQvL3JlY2VpdmUgc3RhdCByZXF1ZXN0c1xyXG5cdFx0dGhpcy5vbignc3RhdCcsc3RhdD0+e1xyXG5cdFx0XHRsZXQgbmFtZT1fdChzdGF0WzFdKTtcclxuXHRcdFx0dGhpcy5kZWJ1Zygnc3RhdDonLG5hbWUpO1xyXG5cdFx0XHRsZXQgZD1PMkgoe186J2RpdicsY2hpbGQ6W25hbWVdfSk7XHJcblx0XHRcdGQuYXBwZW5kKHRoaXMub3B0LmxvYWRpbmdJbmZvLmNvbnRlbnRTcGxpdGVyKTtcclxuXHRcdFx0dGhpcy4kKCcjbG9hZGluZ19pbmZvJykuYXBwZW5kQ2hpbGQoZCk7XHJcblx0XHRcdHN0YXRbMl0udGhlbihyZXN1bHQ9PnsvL3dhaXQgZm9yIHRoZSByZXN1bHRcclxuXHRcdFx0XHRkLmFwcGVuZChyZXN1bHR8fHRoaXMub3B0LmxvYWRpbmdJbmZvLmRvbmVUZXh0KTtcclxuXHRcdFx0fSkuY2F0Y2goZT0+e1xyXG5cdFx0XHRcdGQuYXBwZW5kKGUubWVzc2FnZXx8ZXx8dGhpcy5vcHQubG9hZGluZ0luZm8uZmFpbFRleHQpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vbG9hZGluZyBhbmltYXRpb25cclxuXHRcdGlmKG9wdC5sb2FkaW5nQW5pbWF0aW9uKXtcclxuXHRcdFx0b3B0Py5sb2FkaW5nQW5pbWF0aW9uPy5zdGFydCh0aGlzKTtcclxuXHRcdH1cclxuXHRcdERvbVRvb2xzLmFkZEV2ZW50cyh0aGlzLnZpZGVvLHtcclxuXHRcdFx0bG9hZGVkbWV0YWRhdGE6ZT0+e1xyXG5cdFx0XHRcdHRoaXMuc3RhdFJlc3VsdCgnbG9hZGluZ192aWRlbycpO1xyXG5cdFx0XHRcdG9wdD8ubG9hZGluZ0FuaW1hdGlvbj8uc3RvcCh0aGlzKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0ZXJyb3I6ZT0+e1xyXG5cdFx0XHRcdHRoaXMuc3RhdFJlc3VsdCgnbG9hZGluZ192aWRlbycsZT8ubWVzc2FnZSk7XHJcblx0XHRcdFx0b3B0Py5sb2FkaW5nQW5pbWF0aW9uPy5lcnJvcih0aGlzKTtcclxuXHRcdFx0fSxcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vbG9hZCBkYW5tYWt1IGZyYW1lXHJcblx0XHRpZih0aGlzLl9kYW5tYWt1RW5hYmxlZCl7XHJcblx0XHRcdHRoaXMuZGFubWFrdUNvbnRhaW5lcj1PMkgoe186J2RpdicscHJvcDp7aWQ6J2Rhbm1ha3VfY29udGFpbmVyJ319KTtcclxuXHRcdFx0dGhpcy5zdGF0KCdsb2FkaW5nX2Rhbm1ha3VGcmFtZScsKCk9PntcclxuXHRcdFx0XHR0aGlzLkRhbm1ha3U9bmV3IE55YVBEYW5tYWt1KHRoaXMpO1xyXG5cdFx0XHRcdHRoaXMudmlkZW9GcmFtZS5pbnNlcnRCZWZvcmUodGhpcy5kYW5tYWt1Q29udGFpbmVyLHRoaXMuJCgnI2xvYWRpbmdfZnJhbWUnKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vc3R1cGlkIHg1IGNvcmVcclxuXHRcdGlmKHRoaXMuXy5tb2JpbGVYNSl7XHJcblx0XHRcdHRyeXtcclxuXHRcdFx0XHR0aGlzLkRhbm1ha3UubW9kdWxlcy5UZXh0RGFubWFrdS5zZXRSZW5kZXJlck1vZGUoMSk7Ly9mb3JjZSBjc3MgbW9kZVxyXG5cdFx0XHRcdHRoaXMuRGFubWFrdS5tb2R1bGVzLlRleHREYW5tYWt1LnRleHQyZC5zdXBwb3J0ZWQ9ZmFsc2U7XHJcblx0XHRcdH1jYXRjaChlKXtcclxuXHRcdFx0XHRhbGVydChlLm1lc3NhZ2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdCQoc2VsZWN0b3IsdXNlQ2FjaGU9dHJ1ZSl7Ly9xdWVyeVNlbGVjdG9yIGZvciB0aGUgZnJhbWUgZWxlbWVudFxyXG5cdFx0aWYodXNlQ2FjaGUmJnRoaXMuXy5zZWxlY3RvckNhY2hlW3NlbGVjdG9yXSlcclxuXHRcdFx0cmV0dXJuIHRoaXMuXy5zZWxlY3RvckNhY2hlW3NlbGVjdG9yXTtcclxuXHRcdGxldCBlbD10aGlzLmZyYW1lLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG5cdFx0aWYoZWwpdGhpcy5fLnNlbGVjdG9yQ2FjaGVbc2VsZWN0b3JdPWVsO1xyXG5cdFx0cmV0dXJuIGVsO1xyXG5cdH1cclxuXHQkJChzZWxlY3Rvcil7Ly9xdWVyeVNlbGVjdG9yQWxsIGZvciB0aGUgZnJhbWUgZWxlbWVudFxyXG5cdFx0cmV0dXJuIHRoaXMuZnJhbWUucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblx0fVxyXG5cdHBsYXllck1vZGUobW9kZT0nbm9ybWFsJyl7XHJcblx0XHRsZXQgaW9zPXRoaXMuXy5pb3M7XHJcblx0XHRpZihtb2RlPT09J25vcm1hbCcgJiYgdGhpcy5jdXJyZW50UGxheWVyTW9kZT09PW1vZGUpcmV0dXJuO1xyXG5cdFx0aWYodGhpcy5jdXJyZW50UGxheWVyTW9kZT09PSdmdWxsU2NyZWVuJyl7XHJcblx0XHRcdGlvc3x8RG9tVG9vbHMuZXhpdEZ1bGxzY3JlZW4oKS5jYXRjaChlPT57fSk7XHJcblx0XHR9XHJcblx0XHRpZihtb2RlIT09J25vcm1hbCcgJiYgdGhpcy5jdXJyZW50UGxheWVyTW9kZT09PW1vZGUpbW9kZT0nbm9ybWFsJzsvL2JhY2sgdG8gbm9ybWFsIG1vZGVcclxuXHRcdHN3aXRjaChtb2RlKXtcclxuXHRcdFx0Y2FzZSAnZnVsbFBhZ2UnOntcclxuXHRcdFx0XHR0aGlzLnBsYXllci5zZXRBdHRyaWJ1dGUoJ3BsYXllck1vZGUnLCdmdWxsUGFnZScpO1xyXG5cdFx0XHRcdHRoaXMuZW1pdCgncGxheWVyTW9kZUNoYW5nZScsbW9kZSk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2FzZSAnZnVsbFNjcmVlbic6e1xyXG5cdFx0XHRcdGlmKGlvcyl7Ly9mb3IgaW9zLCBvbmx5IGZ1bGxzY3JlZW4gdmlkZW8sIG5vdCB0aGUgcGxheWVyXHJcblx0XHRcdFx0XHREb21Ub29scy5yZXF1ZXN0RnVsbHNjcmVlbih0aGlzLnZpZGVvKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHREb21Ub29scy5yZXF1ZXN0RnVsbHNjcmVlbih0aGlzLnBsYXllcikudGhlbigoKT0+e1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5ZXIuc2V0QXR0cmlidXRlKCdwbGF5ZXJNb2RlJywnZnVsbFNjcmVlbicpO1xyXG5cdFx0XHRcdFx0dGhpcy5lbWl0KCdwbGF5ZXJNb2RlQ2hhbmdlJyxtb2RlKTtcclxuXHRcdFx0XHR9KS5jYXRjaChlPT57YWxlcnQoJ0ZhaWxlZCB0byBlbnRlciBzY3JlZW4gbW9kZScpfSk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0ZGVmYXVsdDp7XHJcblx0XHRcdFx0dGhpcy5wbGF5ZXIuc2V0QXR0cmlidXRlKCdwbGF5ZXJNb2RlJywnbm9ybWFsJyk7XHJcblx0XHRcdFx0dGhpcy5lbWl0KCdwbGF5ZXJNb2RlQ2hhbmdlJyxtb2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRtc2codGV4dCx0eXBlPSd0aXAnKXsvL3R5cGU6dGlwfGluZm98ZXJyb3JcclxuXHRcdGxldCBtc2c9bmV3IE1zZ0JveCh0ZXh0LHR5cGUsdGhpcy4kKCcjbXNnX2JveCcpKTtcclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+bXNnLnNob3coKSk7XHJcblx0fVxyXG5cdF9pY29uQWN0aXZlKG5hbWUsYm9vbCl7XHJcblx0XHR0aGlzLiQoYCNpY29uX3NwYW5fJHtuYW1lfWApPy5jbGFzc0xpc3RbYm9vbD8nYWRkJzoncmVtb3ZlJ10oJ2FjdGl2ZV9pY29uJyk7XHJcblx0fVxyXG5cdF9zZXREaXNwbGF5VGltZShjdXJyZW50PW51bGwsdG90YWw9bnVsbCl7XHJcblx0XHRcdGlmKGN1cnJlbnQhPT1udWxsKXRoaXMuJCgnI2N1cnJlbnRfdGltZScpLmlubmVySFRNTD1jdXJyZW50O1xyXG5cdFx0XHRpZih0b3RhbCE9PW51bGwpdGhpcy4kKCcjdG90YWxfdGltZScpLmlubmVySFRNTD10b3RhbDtcclxuXHR9XHJcblx0c2VuZCgpe1xyXG5cdFx0bGV0IGNvbG9yPXRoaXMuXy5kYW5tYWt1Q29sb3J8fHRoaXMub3B0LmRhbm1ha3UuZGVmYXVsdERhbm1ha3VDb2xvcixcclxuXHRcdFx0dGV4dD10aGlzLiQoJyNkYW5tYWt1X2lucHV0JykudmFsdWUsXHJcblx0XHRcdHNpemU9dGhpcy5fLmRhbm1ha3VTaXplLFxyXG5cdFx0XHRtb2RlPXRoaXMuXy5kYW5tYWt1TW9kZSxcclxuXHRcdFx0dGltZT10aGlzLkRhbm1ha3UudGltZSxcclxuXHRcdFx0ZD17Y29sb3IsdGV4dCxzaXplLG1vZGUsdGltZX07XHJcblxyXG5cdFx0bGV0IFM9dGhpcy5EYW5tYWt1LnNlbmQoZCxkYW5tYWt1PT57XHJcblx0XHRcdGlmKGRhbm1ha3UmJmRhbm1ha3UuXz09PSd0ZXh0JylcclxuXHRcdFx0XHR0aGlzLiQoJyNkYW5tYWt1X2lucHV0JykudmFsdWU9Jyc7XHJcblx0XHRcdGRhbm1ha3UuaGlnaGxpZ2h0PXRydWU7XHJcblx0XHRcdHRoaXMuRGFubWFrdS5sb2FkKGRhbm1ha3UsdHJ1ZSk7XHJcblx0XHRcdGlmKHRoaXMub3B0LnVpT3B0aW9ucy5hdXRvSGlkZURhbm1ha3VJbnB1dCl7dGhpcy5kYW5tYWt1SW5wdXQoZmFsc2UpO31cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmKCFTKXtcclxuXHRcdFx0dGhpcy5kYW5tYWt1SW5wdXQoZmFsc2UpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBNc2dCb3h7XHJcblx0Y29uc3RydWN0b3IodGV4dCx0eXBlLHBhcmVudE5vZGUpe1xyXG5cdFx0dGhpcy51c2luZz1mYWxzZTtcclxuXHRcdGxldCBtc2c9dGhpcy5tc2c9TzJIKHtfOidkaXYnLGF0dHI6e2NsYXNzOmBtc2dfdHlwZV8ke3R5cGV9YH19KTtcclxuXHRcdG1zZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PnRoaXMucmVtb3ZlKCkpO1xyXG5cdFx0dGhpcy5wYXJlbnROb2RlPXBhcmVudE5vZGU7XHJcblx0XHR0aGlzLnNldFRleHQodGV4dCk7XHJcblx0fVxyXG5cdHNldFRpbWVvdXQodGltZSl7XHJcblx0XHRpZih0aGlzLnRpbWVvdXQpY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XHJcblx0XHR0aGlzLnRpbWVvdXQ9c2V0VGltZW91dCgoKT0+dGhpcy5yZW1vdmUoKSx0aW1lfHxNYXRoLm1heCgodGhpcy50ZXh0cz90aGlzLnRleHRzLmxlbmd0aDowKSowLjYqMTAwMCw1MDAwKSk7XHJcblx0fVxyXG5cdHNldFRleHQodGV4dCl7XHJcblx0XHR0aGlzLm1zZy5pbm5lckhUTUw9Jyc7XHJcblx0XHRsZXQgZT1PMkgodGV4dCk7XHJcblx0XHRlJiZ0aGlzLm1zZy5hcHBlbmRDaGlsZChlKTtcclxuXHRcdGlmKHRleHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl0ZXh0PXRleHQudGV4dENvbnRlbnQ7XHJcblx0XHRsZXQgdGV4dHM9U3RyaW5nKHRleHQpLm1hdGNoKC9cXHcrfFxcUy9nKTtcclxuXHRcdHRoaXMudGV4dD10ZXh0O1xyXG5cdFx0dGhpcy50ZXh0cz10ZXh0cztcclxuXHR9XHJcblx0cmVuZXcodGV4dCx0aW1lKXtcclxuXHRcdHRoaXMuc2V0VGV4dCh0ZXh0KTtcclxuXHRcdHRoaXMuc2V0VGltZW91dCh0aW1lKTtcclxuXHRcdGlmKCF0aGlzLnVzaW5nKXRoaXMuc2hvdygpO1xyXG5cdH1cclxuXHRzaG93KCl7XHJcblx0XHRpZih0aGlzLnVzaW5nKXJldHVybjtcclxuXHRcdHRoaXMubXNnLnN0eWxlLm9wYWNpdHk9MDtcclxuXHRcdGlmKHRoaXMucGFyZW50Tm9kZSAmJiB0aGlzLnBhcmVudE5vZGUhPT10aGlzLm1zZy5wYXJlbnROb2RlKXtcclxuXHRcdFx0dGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMubXNnKTtcclxuXHRcdH1cclxuXHRcdHRoaXMubXNnLnBhcmVudE5vZGUmJnNldFRpbWVvdXQoKCk9PntcclxuXHRcdFx0dGhpcy51c2luZz10cnVlO1xyXG5cdFx0XHR0aGlzLm1zZy5zdHlsZS5vcGFjaXR5PTE7XHJcblx0XHR9LDApO1xyXG5cdFx0dGhpcy5zZXRUaW1lb3V0KCk7XHJcblx0fVxyXG5cdHJlbW92ZSgpe1xyXG5cdFx0aWYoIXRoaXMudXNpbmcpcmV0dXJuO1xyXG5cdFx0dGhpcy51c2luZz1mYWxzZTtcclxuXHRcdHRoaXMubXNnLnN0eWxlLm9wYWNpdHk9MDtcclxuXHRcdGlmKHRoaXMudGltZW91dCl7XHJcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG5cdFx0XHR0aGlzLnRpbWVvdXQ9MDtcclxuXHRcdH1cclxuXHRcdHNldFRpbWVvdXQoKCk9PntcclxuXHRcdFx0dGhpcy5tc2cucGFyZW50Tm9kZSYmdGhpcy5tc2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm1zZyk7XHJcblx0XHR9LDYwMCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQge1xyXG5cdE55YVBDb21tb24sXHJcblx0RG9tVG9vbHMsXHJcblx0VXRpbHMsXHJcbn1cclxuIiwibW9kdWxlLmV4cG9ydHM9e1wiemgtQ05cIjp7XCJwbGF5XCI6XCLmkq3mlL5cIixcIlNlbmRcIjpcIuWPkemAgVwiLFwiRG9uZVwiOlwi5a6M5oiQXCIsXCJsb29wXCI6XCLlvqrnjq9cIixcInBhdXNlXCI6XCLmmoLlgZxcIixcIm11dGVkXCI6XCLpnZnpn7NcIixcInZvbHVtZVwiOlwi6Z+z6YePXCIsXCJzZXR0aW5nc1wiOlwi6K6+572uXCIsXCJ3aGVlbGluZ1wiOlwi5rua6L2uXCIsXCJoZXggY29sb3JcIjpcIkhleOminOiJslwiLFwiTG9hZGluZyBjb3JlXCI6XCLliqDovb3moLjlv4NcIixcIkxvYWRpbmcgdmlkZW9cIjpcIuWKoOi9veinhumikVwiLFwiTG9hZGluZyBwbHVnaW5cIjpcIuWKoOi9veaPkuS7tlwiLFwiZnVsbCBwYWdlKFApXCI6XCLlhajpobXmqKHlvI8oUClcIixcIkxvYWRpbmcgZGFubWFrdVwiOlwi5Yqg6L295by55bmVXCIsXCJDcmVhdGluZyBwbGF5ZXJcIjpcIuWIm+W7uuaSreaUvuWZqFwiLFwiZnVsbCBzY3JlZW4oRilcIjpcIuWFqOWxj+aooeW8jyhGKVwiLFwiZGFubWFrdSB0b2dnbGUoRClcIjpcIuW8ueW5leW8gOWFsyhEKVwiLFwiSW5wdXQgZGFubWFrdSBoZXJlXCI6XCLlnKjov5nph4zovpPlhaXlvLnluZVcIixcIkxvYWRpbmcgZGFubWFrdSBmcmFtZVwiOlwi5Yqg6L295by55bmV5qGG5p62XCIsXCJkYW5tYWt1IGlucHV0KEVudGVyKVwiOlwi5by55bmV6L6T5YWl5qGGKOWbnui9pilcIixcIkZhaWxlZCB0byBjaGFuZ2UgdG8gZnVsbHNjcmVlbiBtb2RlXCI6XCLml6Dms5XliIfmjaLliLDlhajlsY/mqKHlvI9cIixcImxvYWRpbmdfY29yZVwiOlwi5Yqg6L295qC45b+DXCIsXCJsb2FkaW5nX3BsdWdpblwiOlwi5Yqg6L295o+S5Lu2XCIsXCJsb2FkaW5nX2Rhbm1ha3VGcmFtZVwiOlwi5Yqg6L295by55bmV5qGG5p62XCIsXCJjcmVhdGluZ19wbGF5ZXJcIjpcIuWIm+W7uuaSreaUvuWZqFwiLFwibG9hZGluZ19kYW5tYWt1XCI6XCLliqDovb3lvLnluZVcIixcImxvYWRpbmdfdmlkZW9cIjpcIuWKoOi9veinhumikVwifX0iXX0="}