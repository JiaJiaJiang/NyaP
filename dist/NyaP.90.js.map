{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../component/NyaP-Core/index.js","../component/NyaP-Core/lib/Object2HTML.js","../component/NyaP-Core/node_modules/@juggle/resize-observer/lib/exports/resize-observer.umd.js","../component/NyaP-Core/src/core.js","../component/NyaP-Core/src/domTools.js","../component/NyaP-Core/src/i18n.js","../component/NyaP-Core/src/utils.js","../component/NyaP-Danmaku/index.js","../component/NyaP-Danmaku/lib/Mat/Mat.js","../component/NyaP-Danmaku/src/danmaku-frame.js","../component/NyaP-Danmaku/src/danmaku-text/TextCanvas2D.js","../component/NyaP-Danmaku/src/danmaku-text/TextCss.js","../component/NyaP-Danmaku/src/danmaku-text/TextWebGL.js","../component/NyaP-Danmaku/src/danmaku-text/Textoff.js","../component/NyaP-Danmaku/src/danmaku-text/danmaku-text.js","../component/NyaP-Danmaku/src/danmaku-text/textModuleTemplate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js","../node_modules/@babel/runtime-corejs3/core-js-stable/date/now.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/copy-within.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/fill.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/repeat.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js","../node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/assign.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js","../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js","../node_modules/@babel/runtime-corejs3/core-js-stable/promise.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-immediate.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-interval.js","../node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js","../node_modules/@babel/runtime-corejs3/core-js/array/from.js","../node_modules/@babel/runtime-corejs3/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs3/core-js/get-iterator.js","../node_modules/@babel/runtime-corejs3/core-js/instance/slice.js","../node_modules/@babel/runtime-corejs3/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs3/core-js/object/create.js","../node_modules/@babel/runtime-corejs3/core-js/object/define-property.js","../node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js","../node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js","../node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js","../node_modules/@babel/runtime-corejs3/core-js/promise.js","../node_modules/@babel/runtime-corejs3/core-js/reflect/get.js","../node_modules/@babel/runtime-corejs3/core-js/symbol.js","../node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js","../node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js","../node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js","../node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js","../node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js","../node_modules/@babel/runtime-corejs3/helpers/createClass.js","../node_modules/@babel/runtime-corejs3/helpers/defineProperty.js","../node_modules/@babel/runtime-corejs3/helpers/get.js","../node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js","../node_modules/@babel/runtime-corejs3/helpers/inherits.js","../node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js","../node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js","../node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js","../node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js","../node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js","../node_modules/@babel/runtime-corejs3/helpers/superPropBase.js","../node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs3/helpers/typeof.js","../node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime-corejs3/regenerator/index.js","../node_modules/core-js-pure/es/array/from.js","../node_modules/core-js-pure/es/array/is-array.js","../node_modules/core-js-pure/es/array/virtual/concat.js","../node_modules/core-js-pure/es/array/virtual/copy-within.js","../node_modules/core-js-pure/es/array/virtual/fill.js","../node_modules/core-js-pure/es/array/virtual/for-each.js","../node_modules/core-js-pure/es/array/virtual/index-of.js","../node_modules/core-js-pure/es/array/virtual/slice.js","../node_modules/core-js-pure/es/array/virtual/sort.js","../node_modules/core-js-pure/es/array/virtual/splice.js","../node_modules/core-js-pure/es/date/now.js","../node_modules/core-js-pure/es/function/virtual/bind.js","../node_modules/core-js-pure/es/instance/bind.js","../node_modules/core-js-pure/es/instance/concat.js","../node_modules/core-js-pure/es/instance/copy-within.js","../node_modules/core-js-pure/es/instance/fill.js","../node_modules/core-js-pure/es/instance/index-of.js","../node_modules/core-js-pure/es/instance/repeat.js","../node_modules/core-js-pure/es/instance/slice.js","../node_modules/core-js-pure/es/instance/sort.js","../node_modules/core-js-pure/es/instance/splice.js","../node_modules/core-js-pure/es/instance/starts-with.js","../node_modules/core-js-pure/es/instance/trim.js","../node_modules/core-js-pure/es/object/assign.js","../node_modules/core-js-pure/es/object/create.js","../node_modules/core-js-pure/es/object/define-property.js","../node_modules/core-js-pure/es/object/entries.js","../node_modules/core-js-pure/es/object/get-own-property-descriptor.js","../node_modules/core-js-pure/es/object/get-prototype-of.js","../node_modules/core-js-pure/es/object/set-prototype-of.js","../node_modules/core-js-pure/es/promise/index.js","../node_modules/core-js-pure/es/reflect/get.js","../node_modules/core-js-pure/es/string/virtual/repeat.js","../node_modules/core-js-pure/es/string/virtual/starts-with.js","../node_modules/core-js-pure/es/string/virtual/trim.js","../node_modules/core-js-pure/es/symbol/index.js","../node_modules/core-js-pure/es/symbol/iterator.js","../node_modules/core-js-pure/features/array/from.js","../node_modules/core-js-pure/features/array/is-array.js","../node_modules/core-js-pure/features/get-iterator.js","../node_modules/core-js-pure/features/instance/slice.js","../node_modules/core-js-pure/features/is-iterable.js","../node_modules/core-js-pure/features/object/create.js","../node_modules/core-js-pure/features/object/define-property.js","../node_modules/core-js-pure/features/object/get-own-property-descriptor.js","../node_modules/core-js-pure/features/object/get-prototype-of.js","../node_modules/core-js-pure/features/object/set-prototype-of.js","../node_modules/core-js-pure/features/promise/index.js","../node_modules/core-js-pure/features/reflect/get.js","../node_modules/core-js-pure/features/symbol/index.js","../node_modules/core-js-pure/features/symbol/iterator.js","../node_modules/core-js-pure/internals/a-function.js","../node_modules/core-js-pure/internals/a-possible-prototype.js","../node_modules/core-js-pure/internals/add-to-unscopables.js","../node_modules/core-js-pure/internals/an-instance.js","../node_modules/core-js-pure/internals/an-object.js","../node_modules/core-js-pure/internals/array-copy-within.js","../node_modules/core-js-pure/internals/array-fill.js","../node_modules/core-js-pure/internals/array-for-each.js","../node_modules/core-js-pure/internals/array-from.js","../node_modules/core-js-pure/internals/array-includes.js","../node_modules/core-js-pure/internals/array-iteration.js","../node_modules/core-js-pure/internals/array-method-has-species-support.js","../node_modules/core-js-pure/internals/array-method-is-strict.js","../node_modules/core-js-pure/internals/array-method-uses-to-length.js","../node_modules/core-js-pure/internals/array-species-create.js","../node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js","../node_modules/core-js-pure/internals/check-correctness-of-iteration.js","../node_modules/core-js-pure/internals/classof-raw.js","../node_modules/core-js-pure/internals/classof.js","../node_modules/core-js-pure/internals/correct-is-regexp-logic.js","../node_modules/core-js-pure/internals/correct-prototype-getter.js","../node_modules/core-js-pure/internals/create-iterator-constructor.js","../node_modules/core-js-pure/internals/create-non-enumerable-property.js","../node_modules/core-js-pure/internals/create-property-descriptor.js","../node_modules/core-js-pure/internals/create-property.js","../node_modules/core-js-pure/internals/define-iterator.js","../node_modules/core-js-pure/internals/define-well-known-symbol.js","../node_modules/core-js-pure/internals/descriptors.js","../node_modules/core-js-pure/internals/document-create-element.js","../node_modules/core-js-pure/internals/dom-iterables.js","../node_modules/core-js-pure/internals/engine-is-ios.js","../node_modules/core-js-pure/internals/engine-user-agent.js","../node_modules/core-js-pure/internals/engine-v8-version.js","../node_modules/core-js-pure/internals/entry-virtual.js","../node_modules/core-js-pure/internals/enum-bug-keys.js","../node_modules/core-js-pure/internals/export.js","../node_modules/core-js-pure/internals/fails.js","../node_modules/core-js-pure/internals/function-bind-context.js","../node_modules/core-js-pure/internals/function-bind.js","../node_modules/core-js-pure/internals/get-built-in.js","../node_modules/core-js-pure/internals/get-iterator-method.js","../node_modules/core-js-pure/internals/get-iterator.js","../node_modules/core-js-pure/internals/global.js","../node_modules/core-js-pure/internals/has.js","../node_modules/core-js-pure/internals/hidden-keys.js","../node_modules/core-js-pure/internals/host-report-errors.js","../node_modules/core-js-pure/internals/html.js","../node_modules/core-js-pure/internals/ie8-dom-define.js","../node_modules/core-js-pure/internals/indexed-object.js","../node_modules/core-js-pure/internals/inspect-source.js","../node_modules/core-js-pure/internals/internal-state.js","../node_modules/core-js-pure/internals/is-array-iterator-method.js","../node_modules/core-js-pure/internals/is-array.js","../node_modules/core-js-pure/internals/is-forced.js","../node_modules/core-js-pure/internals/is-iterable.js","../node_modules/core-js-pure/internals/is-object.js","../node_modules/core-js-pure/internals/is-pure.js","../node_modules/core-js-pure/internals/is-regexp.js","../node_modules/core-js-pure/internals/iterate.js","../node_modules/core-js-pure/internals/iterators-core.js","../node_modules/core-js-pure/internals/microtask.js","../node_modules/core-js-pure/internals/native-promise-constructor.js","../node_modules/core-js-pure/internals/native-symbol.js","../node_modules/core-js-pure/internals/native-weak-map.js","../node_modules/core-js-pure/internals/new-promise-capability.js","../node_modules/core-js-pure/internals/not-a-regexp.js","../node_modules/core-js-pure/internals/object-assign.js","../node_modules/core-js-pure/internals/object-create.js","../node_modules/core-js-pure/internals/object-define-properties.js","../node_modules/core-js-pure/internals/object-define-property.js","../node_modules/core-js-pure/internals/object-get-own-property-descriptor.js","../node_modules/core-js-pure/internals/object-get-own-property-names-external.js","../node_modules/core-js-pure/internals/object-get-own-property-names.js","../node_modules/core-js-pure/internals/object-get-own-property-symbols.js","../node_modules/core-js-pure/internals/object-get-prototype-of.js","../node_modules/core-js-pure/internals/object-keys-internal.js","../node_modules/core-js-pure/internals/object-keys.js","../node_modules/core-js-pure/internals/object-property-is-enumerable.js","../node_modules/core-js-pure/internals/object-set-prototype-of.js","../node_modules/core-js-pure/internals/object-to-array.js","../node_modules/core-js-pure/internals/object-to-string.js","../node_modules/core-js-pure/internals/perform.js","../node_modules/core-js-pure/internals/promise-resolve.js","../node_modules/core-js-pure/internals/redefine-all.js","../node_modules/core-js-pure/internals/redefine.js","../node_modules/core-js-pure/internals/require-object-coercible.js","../node_modules/core-js-pure/internals/set-global.js","../node_modules/core-js-pure/internals/set-species.js","../node_modules/core-js-pure/internals/set-to-string-tag.js","../node_modules/core-js-pure/internals/shared-key.js","../node_modules/core-js-pure/internals/shared-store.js","../node_modules/core-js-pure/internals/shared.js","../node_modules/core-js-pure/internals/species-constructor.js","../node_modules/core-js-pure/internals/string-multibyte.js","../node_modules/core-js-pure/internals/string-repeat.js","../node_modules/core-js-pure/internals/string-trim-forced.js","../node_modules/core-js-pure/internals/string-trim.js","../node_modules/core-js-pure/internals/task.js","../node_modules/core-js-pure/internals/to-absolute-index.js","../node_modules/core-js-pure/internals/to-indexed-object.js","../node_modules/core-js-pure/internals/to-integer.js","../node_modules/core-js-pure/internals/to-length.js","../node_modules/core-js-pure/internals/to-object.js","../node_modules/core-js-pure/internals/to-primitive.js","../node_modules/core-js-pure/internals/to-string-tag-support.js","../node_modules/core-js-pure/internals/uid.js","../node_modules/core-js-pure/internals/use-symbol-as-uid.js","../node_modules/core-js-pure/internals/well-known-symbol-wrapped.js","../node_modules/core-js-pure/internals/well-known-symbol.js","../node_modules/core-js-pure/internals/whitespaces.js","../node_modules/core-js-pure/modules/es.array.concat.js","../node_modules/core-js-pure/modules/es.array.copy-within.js","../node_modules/core-js-pure/modules/es.array.fill.js","../node_modules/core-js-pure/modules/es.array.for-each.js","../node_modules/core-js-pure/modules/es.array.from.js","../node_modules/core-js-pure/modules/es.array.index-of.js","../node_modules/core-js-pure/modules/es.array.is-array.js","../node_modules/core-js-pure/modules/es.array.iterator.js","../node_modules/core-js-pure/modules/es.array.slice.js","../node_modules/core-js-pure/modules/es.array.sort.js","../node_modules/core-js-pure/modules/es.array.splice.js","../node_modules/core-js-pure/modules/es.date.now.js","../node_modules/core-js-pure/modules/es.function.bind.js","../node_modules/core-js-pure/modules/es.json.to-string-tag.js","../node_modules/core-js-pure/modules/es.math.to-string-tag.js","../node_modules/core-js-pure/modules/es.object.assign.js","../node_modules/core-js-pure/modules/es.object.create.js","../node_modules/core-js-pure/modules/es.object.define-property.js","../node_modules/core-js-pure/modules/es.object.entries.js","../node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js","../node_modules/core-js-pure/modules/es.object.get-prototype-of.js","../node_modules/core-js-pure/modules/es.object.set-prototype-of.js","../node_modules/core-js-pure/modules/es.object.to-string.js","../node_modules/core-js-pure/modules/es.promise.all-settled.js","../node_modules/core-js-pure/modules/es.promise.finally.js","../node_modules/core-js-pure/modules/es.promise.js","../node_modules/core-js-pure/modules/es.reflect.get.js","../node_modules/core-js-pure/modules/es.string.iterator.js","../node_modules/core-js-pure/modules/es.string.repeat.js","../node_modules/core-js-pure/modules/es.string.starts-with.js","../node_modules/core-js-pure/modules/es.string.trim.js","../node_modules/core-js-pure/modules/es.symbol.async-iterator.js","../node_modules/core-js-pure/modules/es.symbol.has-instance.js","../node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js","../node_modules/core-js-pure/modules/es.symbol.iterator.js","../node_modules/core-js-pure/modules/es.symbol.js","../node_modules/core-js-pure/modules/es.symbol.match-all.js","../node_modules/core-js-pure/modules/es.symbol.match.js","../node_modules/core-js-pure/modules/es.symbol.replace.js","../node_modules/core-js-pure/modules/es.symbol.search.js","../node_modules/core-js-pure/modules/es.symbol.species.js","../node_modules/core-js-pure/modules/es.symbol.split.js","../node_modules/core-js-pure/modules/es.symbol.to-primitive.js","../node_modules/core-js-pure/modules/es.symbol.to-string-tag.js","../node_modules/core-js-pure/modules/es.symbol.unscopables.js","../node_modules/core-js-pure/modules/esnext.aggregate-error.js","../node_modules/core-js-pure/modules/esnext.promise.all-settled.js","../node_modules/core-js-pure/modules/esnext.promise.any.js","../node_modules/core-js-pure/modules/esnext.promise.try.js","../node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js","../node_modules/core-js-pure/modules/esnext.symbol.dispose.js","../node_modules/core-js-pure/modules/esnext.symbol.observable.js","../node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js","../node_modules/core-js-pure/modules/esnext.symbol.replace-all.js","../node_modules/core-js-pure/modules/web.dom-collections.iterator.js","../node_modules/core-js-pure/modules/web.immediate.js","../node_modules/core-js-pure/modules/web.timers.js","../node_modules/core-js-pure/stable/array/virtual/for-each.js","../node_modules/core-js-pure/stable/date/now.js","../node_modules/core-js-pure/stable/instance/bind.js","../node_modules/core-js-pure/stable/instance/concat.js","../node_modules/core-js-pure/stable/instance/copy-within.js","../node_modules/core-js-pure/stable/instance/fill.js","../node_modules/core-js-pure/stable/instance/for-each.js","../node_modules/core-js-pure/stable/instance/index-of.js","../node_modules/core-js-pure/stable/instance/repeat.js","../node_modules/core-js-pure/stable/instance/sort.js","../node_modules/core-js-pure/stable/instance/splice.js","../node_modules/core-js-pure/stable/instance/starts-with.js","../node_modules/core-js-pure/stable/instance/trim.js","../node_modules/core-js-pure/stable/object/assign.js","../node_modules/core-js-pure/stable/object/entries.js","../node_modules/core-js-pure/stable/promise/index.js","../node_modules/core-js-pure/stable/set-immediate.js","../node_modules/core-js-pure/stable/set-interval.js","../node_modules/core-js-pure/stable/set-timeout.js","../node_modules/regenerator-runtime/runtime.js","NyaP.js","NyaPCommon.js","langs.json"],"names":[],"mappings":"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qDADR,KACQ;AACjB,SAAK,KAAL,GAAW,KAAX;AACA;;;;2BACK,CAAE,C,CAAA;;;;2BACF,CAAE,C,CAAA;;;;4BACD,CAAE,C,CAAA;;;;2BACH,CAAE,C,CAAA;;;;4BACD,CAAE,C,CAAA;;;;6BACD,CAAE,C,CAAA;;;;6BACF,CAAE,C,CAAA;;;;6BACF,CAAE,C,CAAA;;;;8BACD,CAAE,C,CAAA;;;;iCACC,CAAE,C,CAAA;;;;8CACW,CAAE;;;;;eAGb,kB;;;;ACtBf;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC5BA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChztBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAIA,IAAM,GAAG,GAAC,sBAAS,WAAnB,C,CAGA;;AACA,IAAM,WAAW,GAAC,EAAlB,C,CAGA;;IACM,I;;;;wBACM;AAAC,aAAO,KAAK,GAAL,CAAS,KAAhB;AAAuB;;;AACnC,gBAAY,GAAZ,EAAgB;AAAA;;AAAA;;AAAA;AACf,0GAAM,mBAAM,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","file":"NyaP.90.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nexport {NyaPlayerCore} from './src/core.js'\nexport {DomTools} from './src/domTools.js'\nexport {i18n} from './src/i18n.js'\nexport {Utils} from './src/utils.js'","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nfunction Object2HTML(obj,func){\n\tlet ele,o={},a=[];\n\tif(obj===null || typeof obj !=='object')ele=document.createTextNode(String(obj));//text node\n\telse if(obj instanceof Node)ele=obj;\n\telse{\n\t\tif(obj===undefined)throw(new TypeError(`'undefined' received, object or string expect.`));\n\t\tif(!obj._)obj._='div';\n\t\tele||(ele=document.createElement(obj._));\n\t\t//attributes\n\t\tfor(let [attr,value] of Object.entries(obj.attr||obj.a||o))\n\t\t\tele.setAttribute(attr,value);\n\t\t//properties\n\t\tfor(let [prop,value] of Object.entries(obj.prop||obj.p||o))\n\t\t\tele[prop]=value;\n\t\t//events\n\t\tfor(let [e,cb] of Object.entries(obj.event||obj.e||o))\n\t\t\tele.addEventListener(e,cb);\n\t\t//childNodes\n\t\tfor(let c of (obj.child||obj.c||a)){\n\t\t\tlet e=Object2HTML(c,func);\n\t\t\t(e instanceof Node)&&ele.appendChild(e);\n\t\t}\n\t}\n\tfunc&&func(ele);\n\treturn ele;\n}\n\nexport default Object2HTML;\nexport {Object2HTML}","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = global || self, factory(global.ResizeObserver = {}));\n}(this, (function (exports) { 'use strict';\n\n    var resizeObservers = [];\n\n    var hasActiveObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });\n    };\n\n    var hasSkippedObservations = function () {\n        return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });\n    };\n\n    var msg = 'ResizeObserver loop completed with undelivered notifications.';\n    var deliverResizeLoopError = function () {\n        var event;\n        if (typeof ErrorEvent === 'function') {\n            event = new ErrorEvent('error', {\n                message: msg\n            });\n        }\n        else {\n            event = document.createEvent('Event');\n            event.initEvent('error', false, false);\n            event.message = msg;\n        }\n        window.dispatchEvent(event);\n    };\n\n    var ResizeObserverBoxOptions;\n    (function (ResizeObserverBoxOptions) {\n        ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n        ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n        ResizeObserverBoxOptions[\"DEVICE_PIXEL_CONTENT_BOX\"] = \"device-pixel-content-box\";\n    })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\n\n    var DOMRectReadOnly = (function () {\n        function DOMRectReadOnly(x, y, width, height) {\n            this.x = x;\n            this.y = y;\n            this.width = width;\n            this.height = height;\n            this.top = this.y;\n            this.left = this.x;\n            this.bottom = this.top + this.height;\n            this.right = this.left + this.width;\n            return Object.freeze(this);\n        }\n        DOMRectReadOnly.prototype.toJSON = function () {\n            var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n            return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };\n        };\n        DOMRectReadOnly.fromRect = function (rectangle) {\n            return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n        };\n        return DOMRectReadOnly;\n    }());\n\n    var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };\n    var isHidden = function (target) {\n        if (isSVG(target)) {\n            var _a = target.getBBox(), width = _a.width, height = _a.height;\n            return !width && !height;\n        }\n        var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;\n        return !(offsetWidth || offsetHeight || target.getClientRects().length);\n    };\n    var isElement = function (obj) {\n        var _a, _b;\n        var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;\n        return !!(scope && obj instanceof scope.Element);\n    };\n    var isReplacedElement = function (target) {\n        switch (target.tagName) {\n            case 'INPUT':\n                if (target.type !== 'image') {\n                    break;\n                }\n            case 'VIDEO':\n            case 'AUDIO':\n            case 'EMBED':\n            case 'OBJECT':\n            case 'CANVAS':\n            case 'IFRAME':\n            case 'IMG':\n                return true;\n        }\n        return false;\n    };\n\n    var global = typeof window !== 'undefined' ? window : {};\n\n    var cache = new Map();\n    var scrollRegexp = /auto|scroll/;\n    var verticalRegexp = /^tb|vertical/;\n    var IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);\n    var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\n    var size = function (inlineSize, blockSize, switchSizes) {\n        if (inlineSize === void 0) { inlineSize = 0; }\n        if (blockSize === void 0) { blockSize = 0; }\n        if (switchSizes === void 0) { switchSizes = false; }\n        return Object.freeze({\n            inlineSize: (switchSizes ? blockSize : inlineSize) || 0,\n            blockSize: (switchSizes ? inlineSize : blockSize) || 0\n        });\n    };\n    var zeroBoxes = Object.freeze({\n        devicePixelContentBoxSize: size(),\n        borderBoxSize: size(),\n        contentBoxSize: size(),\n        contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n    });\n    var calculateBoxSizes = function (target) {\n        if (cache.has(target)) {\n            return cache.get(target);\n        }\n        if (isHidden(target)) {\n            cache.set(target, zeroBoxes);\n            return zeroBoxes;\n        }\n        var cs = getComputedStyle(target);\n        var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();\n        var removePadding = !IE && cs.boxSizing === 'border-box';\n        var switchSizes = verticalRegexp.test(cs.writingMode || '');\n        var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n        var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n        var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n        var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n        var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n        var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n        var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n        var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n        var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n        var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n        var horizontalPadding = paddingLeft + paddingRight;\n        var verticalPadding = paddingTop + paddingBottom;\n        var horizontalBorderArea = borderLeft + borderRight;\n        var verticalBorderArea = borderTop + borderBottom;\n        var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n        var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n        var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n        var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n        var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n        var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n        var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n        var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n        var boxes = Object.freeze({\n            devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),\n            borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n            contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n            contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n        });\n        cache.set(target, boxes);\n        return boxes;\n    };\n    var calculateBoxSize = function (target, observedBox) {\n        var _a = calculateBoxSizes(target), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;\n        switch (observedBox) {\n            case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:\n                return devicePixelContentBoxSize;\n            case ResizeObserverBoxOptions.BORDER_BOX:\n                return borderBoxSize;\n            default:\n                return contentBoxSize;\n        }\n    };\n\n    var ResizeObserverEntry = (function () {\n        function ResizeObserverEntry(target) {\n            var boxes = calculateBoxSizes(target);\n            this.target = target;\n            this.contentRect = boxes.contentRect;\n            this.borderBoxSize = [boxes.borderBoxSize];\n            this.contentBoxSize = [boxes.contentBoxSize];\n            this.devicePixelContentBoxSize = [boxes.devicePixelContentBoxSize];\n        }\n        return ResizeObserverEntry;\n    }());\n\n    var calculateDepthForNode = function (node) {\n        if (isHidden(node)) {\n            return Infinity;\n        }\n        var depth = 0;\n        var parent = node.parentNode;\n        while (parent) {\n            depth += 1;\n            parent = parent.parentNode;\n        }\n        return depth;\n    };\n\n    var broadcastActiveObservations = function () {\n        var shallowestDepth = Infinity;\n        var callbacks = [];\n        resizeObservers.forEach(function processObserver(ro) {\n            if (ro.activeTargets.length === 0) {\n                return;\n            }\n            var entries = [];\n            ro.activeTargets.forEach(function processTarget(ot) {\n                var entry = new ResizeObserverEntry(ot.target);\n                var targetDepth = calculateDepthForNode(ot.target);\n                entries.push(entry);\n                ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n                if (targetDepth < shallowestDepth) {\n                    shallowestDepth = targetDepth;\n                }\n            });\n            callbacks.push(function resizeObserverCallback() {\n                ro.callback.call(ro.observer, entries, ro.observer);\n            });\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n        });\n        for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n            var callback = callbacks_1[_i];\n            callback();\n        }\n        return shallowestDepth;\n    };\n\n    var gatherActiveObservationsAtDepth = function (depth) {\n        cache.clear();\n        resizeObservers.forEach(function processObserver(ro) {\n            ro.activeTargets.splice(0, ro.activeTargets.length);\n            ro.skippedTargets.splice(0, ro.skippedTargets.length);\n            ro.observationTargets.forEach(function processTarget(ot) {\n                if (ot.isActive()) {\n                    if (calculateDepthForNode(ot.target) > depth) {\n                        ro.activeTargets.push(ot);\n                    }\n                    else {\n                        ro.skippedTargets.push(ot);\n                    }\n                }\n            });\n        });\n    };\n\n    var process = function () {\n        var depth = 0;\n        gatherActiveObservationsAtDepth(depth);\n        while (hasActiveObservations()) {\n            depth = broadcastActiveObservations();\n            gatherActiveObservationsAtDepth(depth);\n        }\n        if (hasSkippedObservations()) {\n            deliverResizeLoopError();\n        }\n        return depth > 0;\n    };\n\n    var trigger;\n    var callbacks = [];\n    var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };\n    var queueMicroTask = function (callback) {\n        if (!trigger) {\n            var el_1 = document.createTextNode('');\n            var config = { characterData: true };\n            new MutationObserver(function () { return notify(); }).observe(el_1, config);\n            trigger = function () { el_1.textContent = ''; };\n        }\n        callbacks.push(callback);\n        trigger();\n    };\n\n    var queueResizeObserver = function (cb) {\n        queueMicroTask(function ResizeObserver() {\n            requestAnimationFrame(cb);\n        });\n    };\n\n    var watching = 0;\n    var isWatching = function () { return !!watching; };\n    var CATCH_FRAMES = 60 / 5;\n    var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\n    var events = [\n        'resize',\n        'load',\n        'transitionend',\n        'animationend',\n        'animationstart',\n        'animationiteration',\n        'keyup',\n        'keydown',\n        'mouseup',\n        'mousedown',\n        'mouseover',\n        'mouseout',\n        'blur',\n        'focus'\n    ];\n    var scheduled = false;\n    var Scheduler = (function () {\n        function Scheduler() {\n            var _this = this;\n            this.stopped = true;\n            this.listener = function () { return _this.schedule(); };\n        }\n        Scheduler.prototype.run = function (frames) {\n            var _this = this;\n            if (scheduled) {\n                return;\n            }\n            scheduled = true;\n            queueResizeObserver(function () {\n                var elementsHaveResized = false;\n                try {\n                    elementsHaveResized = process();\n                }\n                finally {\n                    scheduled = false;\n                    if (!isWatching()) {\n                        return;\n                    }\n                    if (elementsHaveResized) {\n                        _this.run(60);\n                    }\n                    else if (frames) {\n                        _this.run(frames - 1);\n                    }\n                    else {\n                        _this.start();\n                    }\n                }\n            });\n        };\n        Scheduler.prototype.schedule = function () {\n            this.stop();\n            this.run(CATCH_FRAMES);\n        };\n        Scheduler.prototype.observe = function () {\n            var _this = this;\n            var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };\n            document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);\n        };\n        Scheduler.prototype.start = function () {\n            var _this = this;\n            if (this.stopped) {\n                this.stopped = false;\n                this.observer = new MutationObserver(this.listener);\n                this.observe();\n                events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });\n            }\n        };\n        Scheduler.prototype.stop = function () {\n            var _this = this;\n            if (!this.stopped) {\n                this.observer && this.observer.disconnect();\n                events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });\n                this.stopped = true;\n            }\n        };\n        return Scheduler;\n    }());\n    var scheduler = new Scheduler();\n    var updateCount = function (n) {\n        !watching && n > 0 && scheduler.start();\n        watching += n;\n        !watching && scheduler.stop();\n    };\n\n    var skipNotifyOnElement = function (target) {\n        return !isSVG(target)\n            && !isReplacedElement(target)\n            && getComputedStyle(target).display === 'inline';\n    };\n    var ResizeObservation = (function () {\n        function ResizeObservation(target, observedBox) {\n            this.target = target;\n            this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n            this.lastReportedSize = {\n                inlineSize: 0,\n                blockSize: 0\n            };\n        }\n        ResizeObservation.prototype.isActive = function () {\n            var size = calculateBoxSize(this.target, this.observedBox);\n            if (skipNotifyOnElement(this.target)) {\n                this.lastReportedSize = size;\n            }\n            if (this.lastReportedSize.inlineSize !== size.inlineSize\n                || this.lastReportedSize.blockSize !== size.blockSize) {\n                return true;\n            }\n            return false;\n        };\n        return ResizeObservation;\n    }());\n\n    var ResizeObserverDetail = (function () {\n        function ResizeObserverDetail(resizeObserver, callback) {\n            this.activeTargets = [];\n            this.skippedTargets = [];\n            this.observationTargets = [];\n            this.observer = resizeObserver;\n            this.callback = callback;\n        }\n        return ResizeObserverDetail;\n    }());\n\n    var observerMap = new Map();\n    var getObservationIndex = function (observationTargets, target) {\n        for (var i = 0; i < observationTargets.length; i += 1) {\n            if (observationTargets[i].target === target) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    var ResizeObserverController = (function () {\n        function ResizeObserverController() {\n        }\n        ResizeObserverController.connect = function (resizeObserver, callback) {\n            var detail = new ResizeObserverDetail(resizeObserver, callback);\n            resizeObservers.push(detail);\n            observerMap.set(resizeObserver, detail);\n        };\n        ResizeObserverController.observe = function (resizeObserver, target, options) {\n            if (observerMap.has(resizeObserver)) {\n                var detail = observerMap.get(resizeObserver);\n                if (getObservationIndex(detail.observationTargets, target) < 0) {\n                    detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n                    updateCount(1);\n                    scheduler.schedule();\n                }\n            }\n        };\n        ResizeObserverController.unobserve = function (resizeObserver, target) {\n            if (observerMap.has(resizeObserver)) {\n                var detail = observerMap.get(resizeObserver);\n                var index = getObservationIndex(detail.observationTargets, target);\n                if (index >= 0) {\n                    detail.observationTargets.splice(index, 1);\n                    updateCount(-1);\n                }\n            }\n        };\n        ResizeObserverController.disconnect = function (resizeObserver) {\n            if (observerMap.has(resizeObserver)) {\n                var detail = observerMap.get(resizeObserver);\n                resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n                observerMap.delete(resizeObserver);\n                updateCount(-detail.observationTargets.length);\n            }\n        };\n        return ResizeObserverController;\n    }());\n\n    var ResizeObserver = (function () {\n        function ResizeObserver(callback) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (typeof callback !== 'function') {\n                throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n            }\n            ResizeObserverController.connect(this, callback);\n        }\n        ResizeObserver.prototype.observe = function (target, options) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.observe(this, target, options);\n        };\n        ResizeObserver.prototype.unobserve = function (target) {\n            if (arguments.length === 0) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n            }\n            if (!isElement(target)) {\n                throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n            }\n            ResizeObserverController.unobserve(this, target);\n        };\n        ResizeObserver.prototype.disconnect = function () {\n            ResizeObserverController.disconnect(this);\n        };\n        ResizeObserver.toString = function () {\n            return 'function ResizeObserver () { [polyfill code] }';\n        };\n        return ResizeObserver;\n    }());\n\n    exports.ResizeObserver = ResizeObserver;\n    exports.ResizeObserverEntry = ResizeObserverEntry;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\n\nimport {i18n} from './i18n.js';\nimport {DomTools} from './domTools.js';\nimport {Utils} from './utils.js';\n\n//default options\nconst NyaPCoreOptions={\n\t//for video\n\tmuted:false,//set video muted\n\tvolume:1,//set volume (0 ~ 1) \n\tloop:false,//set video loop\n\tvideoSrc:'',\n\tplugins:[],//NyaP dynamic plugins list\n}\n\n\nclass NyaPEventEmitter{\n\tconstructor(){\n\t\tthis._events={};\n\t}\n\temit(e,...args){\n\t\tthis._resolve(e,...args);\n\t\tthis.globalListener(e,...args);\n\t\treturn this;\n\t}\n\t_resolve(e,...args){\n\t\tif(e in this._events){\n\t\t\tconst hs=this._events[e];\n\t\t\ttry{\n\t\t\t\tfor(let h of hs){\n\t\t\t\t\tif(h.apply(this,args)===false)return;\n\t\t\t\t}\n\t\t\t}catch(err){\n\t\t\t\tconsole.error(`NyaP event callback error for \"${e}\"`,err);\n\t\t\t}\n\t\t}\n\t}\n\taddEventListener(...args){\n\t\treturn this.on(...args);\n\t}\n\ton(e,handle,top=false){\n\t\tif(!(handle instanceof Function))return this;\n\t\tif(!(e in this._events))this._events[e]=[];\n\t\tif(top)\n\t\t\tthis._events[e].unshift(handle);\n\t\telse\n\t\t\tthis._events[e].push(handle);\n\t\treturn this;\n\t}\n\tremoveEvent(e,handle){\n\t\tif(!(e in this._events))return this;\n\t\tif(arguments.length===1){delete this._events[e];return this;}\n\t\tlet ind;\n\t\tif(ind=(this._events[e].indexOf(handle))>=0)this._events[e].splice(ind,1);\n\t\tif(this._events[e].length===0)delete this._events[e];\n\t\treturn this;\n\t}\n\tglobalListener(name,...args){}//all events will be passed to this function\n}\n\nclass NyaPlayerCore extends NyaPEventEmitter{\n\tstatic i18n=i18n;\n\tstatic Utils=Utils;\n\tstatic DomTools=DomTools;\n\tstatic NyaPCoreOptions=NyaPCoreOptions;\n\tstats=[];//stats of the player. Item: [[time,name,promise or result],...]\n\tdebugs=[];//debug messages. Item: [[time,...msgs],...]\n\tplugins={};//loaded core plugins. name=>plugin object\n\ti18n=new i18n();//core i18n instanse\n\t_={//for private variables, do not change vars here\n\t\tvideoSrc:'',\n\t\tvideo:DomTools.Object2HTML({_:'video',attr:{id:'main_video',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'webkit-playsinline':'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'playsinline':'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-playsinline':'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x-webkit-airplay':'allow',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'controlsList':\"nodownload\" ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'x5-video-player-type':'h5',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'preload':'auto',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'poster':'',\n\t\t\t\t\t\t\t\t\t\t\t\t}}),\n\t\turlResolvers:[],//functions to resolve urls. Item: [priority,func]\n\t};\n\tget video(){return this._.video;}//get video element\n\tget videoSize(){return [this.video.videoWidth,this.video.videoHeight];}\n\tget videoSrc(){return this._.videoSrc;}//get current video src\n\n\tconstructor(opt){\n\t\tsuper();\n\t\tlet _=this.i18n;\n\t\t{\n\t\t\tlet done=this.stat('loading_core');\n\t\t\tthis.on('coreLoad',()=>done());\n\t\t\tthis.on('coreLoadError',e=>done(e));\n\t\t}\n\t\tthis.debug('Languages:'+this.i18n.langsArr.join(','));\n\n\t\topt=this.opt=Utils.deepAssign({},NyaPCoreOptions,opt);\n\t\t//add events\n\t\t{\n\t\t\t//video:video_loopChange\n\t\t\tlet LoopDesc=Object.getOwnPropertyDescriptor(HTMLMediaElement.prototype,'loop');\n\t\t\tObject.defineProperty(this.video,'loop',{\n\t\t\t\tget:LoopDesc.get,\n\t\t\t\tset:bool=>{\n\t\t\t\t\tif(bool===this.video.loop)return;\n\t\t\t\t\tthis.emit('video_loopChange',bool);\n\t\t\t\t\tLoopDesc.set.call(this.video,bool);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tDomTools.addEvents(this.video,{\n\t\t\tloadedmetadata:e=>this.debug('Video loadded'),\n\t\t\terror:e=>this.debug('Video error:',e),\n\t\t\tloadstart:e=>{this.stat('loading_video')},\n\t\t});\n\t\t\n\t\t//define default src resolver\n\t\tthis.addURLResolver((url)=>{\n\t\t\treturn Promise.resolve(url);//return the url\n\t\t},999);//most lower priority\n\n\t\t/*opts*/\n\t\trequestAnimationFrame(()=>{//active after events are attached\n\t\t\t['muted','volume','loop'].forEach(o=>{//dont change the order\n\t\t\t\t(opt[o]!==undefined)&&(this.video[o]=opt[o]);\n\t\t\t});\n\t\t\tif(opt.videoSrc)this.setVideoSrc(opt.videoSrc);//videoSrc\n\t\t});\n\n\n\t\tif(Array.isArray(opt.plugins)){//load plugins,opt.plugins is a list of url for plugins\n\t\t\tlet done=this.stat('loading_plugin');\n\t\t\tlet pluginList=[];\n\t\t\tfor(let url of opt.plugins){\n\t\t\t\tpluginList.push(this.loadPlugin(url));\n\t\t\t}\n\t\t\tPromise.all(pluginList).then(()=>{\n\t\t\t\tdone();\n\t\t\t\tthis.emit('coreLoad');\n\t\t\t}).catch(e=>{\n\t\t\t\tdone(e);\n\t\t\t\tthis.debug('coreLoadError',e);\n\t\t\t\tthis.emit('coreLoadError',e);\n\t\t\t})\n\t\t\treturn;\n\t\t}\n\n\t\t\n\t\tthis.emit('coreLoad');\n\t}\n\tstat(statusName,cb){\n\t\tlet doneFunc,failFunc;\n\t\tlet resultFunc=r=>{\n\t\t\tif(r instanceof Error){\n\t\t\t\tthis.debug(r);\n\t\t\t\tfailFunc(r.message);\n\t\t\t}else{\n\t\t\t\tdoneFunc(r);\n\t\t\t}\n\t\t}\n\t\tlet p=new Promise((ok,no)=>{\n\t\t\tdoneFunc=ok;\n\t\t\tfailFunc=no;\n\t\t});\n\t\tp.catch(e=>{\n\t\t\tthis.debug(`fail stat:${e}`);\n\t\t});\n\t\tlet s=[Date.now(),statusName,p,doneFunc,failFunc];\n\t\tthis.stats.push(s);//add to core debug log\n\t\tif(cb){\n\t\t\t(async ()=>{\n\t\t\t\ttry{\n\t\t\t\t\tresultFunc(await cb());\n\t\t\t\t}catch(err){\n\t\t\t\t\tresultFunc(err);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\tsetTimeout(()=>this.emit('stat',s),0);\n\t\treturn resultFunc;\n\t}\n\tstatResult(statusName,result){\n\t\tfor(let i=this.stats.length,s;i--;){\n\t\t\ts=this.stats[i];\n\t\t\tif(s[1]===statusName){\n\t\t\t\tif(result instanceof Error){\n\t\t\t\t\ts[4](result.message);\n\t\t\t\t}else{\n\t\t\t\t\ts[3](result);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\taddURLResolver(func,priority=0){\n\t\tthis._.urlResolvers.push([priority,func]);\n\t\tthis._.urlResolvers.sort((a,b)=>a[0]-b[0]);//sort by priority\n\t}\n\tasync resolveURL(url){//resolve the url by url resolvers\n\t\tfor(let n of this._.urlResolvers){\n\t\t\tlet func=n[1];\n\t\t\tlet r=await func(url);\n\t\t\tif(r===false){\n\t\t\t\tthis.debug(`Stop resolving url: ${url}`);\n\t\t\t\treturn false;//stop resolving the url\n\t\t\t}\n\t\t\tif(r){\n\t\t\t\tthis.debug('URL resolver: ['+url+'] => ['+r+']');\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject('No url resolver hit');\n\t}\n\tasync setVideoSrc(s){\n\t\ts=s.trim();\n\t\tlet url=await this.resolveURL(s);\n\t\tif(url===false)return;//won't change the url if false returned\n\t\tthis._.videoSrc=s;\n\t\tthis.emit('srcChanged',s);\n\t\tthis.video.src=url;\n\t\treturn;\n\t}\n\tplayToggle(Switch=this.video.paused){\n\t\treturn this.video[Switch?'play':'pause']();\n\t}\n\tloadPlugin(url,name){//load js plugins for NyaP\n\t\tif(name&&this.plugins[name]){//check if exists\n\t\t\tthis.debug(`Plugin already loaded: ${name}`);\n\t\t\treturn this.plugins[name];\n\t\t}\n\t\tlet p=fetch(url)\n\t\t.then(res=>res.text())\n\t\t.then(async script=>{\n\t\t\tscript=script.trim();\n\t\t\tlet plugin=eval(script);\n\t\t\tif((typeof plugin.name!=='string')||!plugin.name)\n\t\t\t\tthrow(new TypeError('Invalid plugin name'));\n\t\t\tif(this.plugins[plugin.name]){//check if exists\n\t\t\t\tthis.debug(`Plugin already loaded: ${plugin.name}`);\n\t\t\t\treturn plugin;\n\t\t\t}\n\t\t\tif(typeof plugin.init==='function')\n\t\t\t\tawait plugin.init(this);//init the plugin\n\t\t\tthis.plugins[plugin.name]=plugin;\n\t\t\tthis.debug('Plugin loaded',plugin.name);\n\t\t\treturn plugin;\n\t\t});\n\t\tp.catch(e=>{\n\t\t\tthis.debug('Plugin loading error:',e);\n\t\t\t// this.emit('pluginLoadError',e);\n\t\t});\n\t\treturn p;\n\t}\n\tlog(content,type='log',...styles){//log to console\n\t\tconsole[type](`%c NyaP %c${content}`,\"background:#e0e0e0;padding:.2em\",\"background:unset\",...styles);\n\t}\n\tdebug(...msg){//debug messages\n\t\tconsole.debug('NyaP[debug]',...msg);\n\t\tmsg.unshift(Date.now());\n\t\tthis.debugs.push(msg);\n\t\tthis.emit('debug',msg);\n\t}\n}\n\nexport {\n\tNyaPlayerCore,\n}\n","import {ResizeObserver as ResizeObserverPolyfill} from '@juggle/resize-observer';\nimport {Object2HTML as O2H} from '../lib/Object2HTML.js';\nimport {Utils} from './utils.js';\n\nexport class DomTools{\n\tstatic addEvents(target,events){\n\t\tif(!Array.isArray(target))target=[target];\n\t\ttarget.forEach(function(t){\n\t\t\tif(!Utils.isObject(t.__NyaPEvents__)){\n\t\t\t\tt.__NyaPEvents__=[];\n\t\t\t}\n\t\t\tfor(let e in events)\n\t\t\t\te.split(/\\,/g).forEach(function(e2){\n\t\t\t\t\tt.addEventListener(e2,events[e]);\n\t\t\t\t\tt.__NyaPEvents__.push([e2,events[e]]);\n\t\t\t\t});\n\t\t});\n\t}\n    static setAttrs(ele,obj){//set multi attrs to a Element\n        for(let a in obj)\n            ele.setAttribute(a,obj[a]);\n        return ele;\n    }\n\tstatic fullscreenElement(){\n\t\tconst d=document;\n\t\treturn d.webkitFullscreenElement\n\t\t\t\t||d.msFullscreenElement\n\t\t\t\t||d.mozFullScreenElement\n\t\t\t\t||d.fullscreenElement;\n\t}\n\tstatic requestFullscreen(d=document){\n\t\ttry{\n\t\t\treturn (d.requestFullscreen||\n\t\t\td.msRequestFullscreen||\n\t\t\td.mozRequestFullScreen||\n\t\t\td.webkitRequestFullScreen||\n\t\t\td.webkitEnterFullScreen)\n\t\t\t.call(d);\n\t\t}catch(e){\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\tstatic exitFullscreen(d=document){\n\t\ttry{\n\t\t\treturn (d.exitFullscreen||\n\t\t\t\td.msExitFullscreen||\n\t\t\t\td.mozCancelFullScreen||\n\t\t\t\td.webkitExitFullScreen||\n\t\t\t\td.webkitCancelFullScreen).call(d);\n\t\t}catch(e){\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\tstatic isFullscreen(d=document){\n\t\treturn !!(d.fullscreen || d.mozFullScreen || d.webkitIsFullScreen || d.msFullscreenElement || d.webkitDisplayingFullscreen);\n\t}\n\tstatic Object2HTML(...args){\n\t\treturn O2H(...args);\n\t}\n\tstatic resizeEvent={\n\t\tresizeObserverInstance:null,\n\t\tobserve(dom){\n\t\t\tif(!this.resizeObserverInstance){\n\t\t\t\tlet ResizeObserver=window.ResizeObserver;\n\t\t\t\tif(typeof  ResizeObserver!== 'function'){\n\t\t\t\t\tResizeObserver=ResizeObserverPolyfill;\n\t\t\t\t}\n\t\t\t\tthis.resizeObserverInstance=new ResizeObserver(entries => {\n\t\t\t\t\tfor (let entry of entries) {\n\t\t\t\t\t\tlet el = entry.target;\n\t\t\t\t\t\tlet e=new Event('resize',{bubbles:false,cancelable:true});\n\t\t\t\t\t\te.contentRect=entry.contentRect;\n\t\t\t\t\t\tel.dispatchEvent(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.resizeObserverInstance.observe(dom);\n\t\t},\n\t\tunobserve(dom){\n\t\t\tif(!this.resizeObserverInstance)\n\t\t\t\tthrow(new Error('resizeObserver not initialized'));\n\t\t\tthis.resizeObserverInstance.unobserve(dom);\n\t\t},\n\t}\n}\n\n ","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n\n\n//polyfill\nif(!navigator.languages){\n\tnavigator.languages=[navigator.language||navigator.browserLanguage];\n}\n\n\nclass i18n{\n\t/*\n\t*@param{object}langs Language text object indexed by language code\n\t*@param{array}langsArr Language priority array\n\t*/\n\tconstructor(langs={},langsArr=[...navigator.languages]){\n\t\tthis.langs=langs;//defines texts\n\t\tthis.langsArr=langsArr;\n\t\tthis.langsArr.push('zh-CN');//add zh-CN as default language\n\t}\n\tlangsArr=[];//language priority array\n\t_(str,...args){//translate\n\t\tlet s=this.findTranslation(str);\n\t\targs.length&&args.forEach((arg,ind)=>{s=s.replace(`$${ind}`,arg)});//fill args in the string\n\t\treturn s;\n\t}\n\tfindTranslation(text){\n\t\tfor(let lang of this.langsArr){//find by language priority\n\t\t\tif((lang in this.langs) && (text in this.langs[lang])){\n\t\t\t\treturn this.langs[lang][text];\n\t\t\t}\n\t\t\t//fallback to other same main code\n\t\t\tlet code=lang.match(/^\\w+/)[0];\n\t\t\tfor(let c in this.langs){\n\t\t\t\tif(c.startsWith(code) && (text in this.langs[c])){\n\t\t\t\t\treturn this.langs[c][text];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn text;\n\t}\n\tadd(langCode,texts){\n\t\tthis.langs[langCode]=texts;\n\t}\n}\n\nexport {i18n};","\nfunction padTime(n){//pad number to 2 chars\n    return n>9&&n||`0${n}`;\n}\n\nexport class Utils{\n    static clamp(num,min,max){\n        return num<min?min:(num>max?max:num);\n    }\n    static isObject(obj){\n        return Object.prototype.toString.call(obj) === '[object Object]';\n    }\n    static deepAssign(target,...args){\n        //本函数不处理循环引用\n        let obj=args.shift();\n        if(target===null || target===undefined || typeof target !== 'object'){\n            throw(new TypeError('target should be an object'));\n        }\n        if(!Utils.isObject(obj)){//obj不是对象则跳过\n            if(args.length===0)return target;//没有参数了就返回结果\n            return Utils.deepAssign(target,...args);//提取一个参数出来继续\n        }\n        for(let i in obj){//遍历obj\n            if(Utils.isObject(obj[i])){//是个子对象\n                if(!Utils.isObject(target[i]))target[i]={};\n                Utils.deepAssign(target[i],obj[i]);//递归\n            }else{\n                target[i]=obj[i];//直接赋值\n            }\n        }\n        if(args.length===0)return target;\n        return Utils.deepAssign(target,...args);\n    }\n    static formatTime(sec,total){\n        if(total==undefined)total=sec;\n        let r,s=sec|0,h=(s/3600)|0;\n        if(total>=3600)s=s%3600;\n        r=[padTime((s/60)|0),padTime(s%60)];\n        (total>=3600)&&r.unshift(h);\n        return r.join(':');\n    }\n    static rand(min, max) {\n        return (min+Math.random()*(max-min)+0.5)|0;\n    }\n    static toArray(obj){\n        if(obj instanceof Array)return obj.slice();\n        if(obj.length!==undefined)\n            return Array.prototype.slice.call(obj);\n        return [...obj];\n    }\n    static animationFrameLoop(cb){\n        requestAnimationFrame(()=>{\n           if(cb()===false)return;;\n           Utils.animationFrameLoop(cb);\n        });\n    }\n    static requestIdleCallback=window.requestIdleCallback?.bind(window)||setImmediate;\n}\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\nimport {Utils} from '../NyaP-Core/index.js';//load DomTools from NyaP-Core project\nimport {DanmakuFrame} from './src/danmaku-frame.js'\nimport initTextDanmaku from './src/danmaku-text/danmaku-text.js'\ninitTextDanmaku(DanmakuFrame);//init TextDanmaku mod\n\nconst colorChars='0123456789abcdef';\nconst danmakuProp=['color','text','size','mode','time'];\nclass NyaPDanmaku extends DanmakuFrame{\n\tget opt(){return this.core.opt.danmaku};\n\tconstructor(core){\n\t\tsuper(core,core.opt.danmaku);\n\n\t\t//init mods\n\t\tfor(let mod in DanmakuFrame.availableModules){\n\t\t\tif(this.opt.modules[mod]?.enable===true)\n\t\t\t\tthis.initModule(mod);\n\t\t\t\tthis.enable(mod);\n\t\t}\n\n\t\tthis.setMedia(core.video);\n\t}\n\ttoggle(name,bool){\n\t\tif(typeof name==='boolean' || name==undefined){//danmaku frame switch mode\n\t\t\tbool=(name!=undefined)?name:!this.enabled;\n\t\t\tthis[bool?'enable':'disable']();\n\t\t\treturn bool;\n\t\t}\n\t\ttry{//module switch mode\n\t\t\tif(bool==undefined)bool=!this.module(name).enabled;\n\t\t\tthis[bool?'enable':'disable'](name);\n\t\t\tthis.core.emit('danmakuModuleToggle',name,this.module(name)?.enabled);\n\t\t}catch(e){\n\t\t\tthis.core.log('','error',e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tmodule(name){\n\t\treturn super.modules[name];\n\t}\n\tsend(obj,callback){\n\t\tfor(let i of danmakuProp)\n\t\t\tif((i in obj)===false)return false;\n\t\tif((obj.text||'').match(/^\\s*$/))return false;\n\t\tobj.color=this.isVaildColor(obj.color);\n\t\tif(obj.color){\n\t\t\tobj.color=obj.color.replace(/\\$/g,()=>{\n\t\t\t\treturn colorChars[Utils.clamp((16*Math.random())|0,0,15)];\n\t\t\t});\n\t\t}else{\n\t\t\tobj.color=null;\n\t\t}\n\t\tif(this.opt.send instanceof Function){\n\t\t\tthis.opt.send(obj,callback||(()=>{}));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tisVaildColor(co){\n\t\tif(typeof co !== 'string')return false;\n\t\treturn (co=co.match(/^\\#?(([\\da-f\\$]{3}){1,2})$/i))?co[1]:false;\n\t}\n}\n\nexport default NyaPDanmaku;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\n\n(function(f){\n\tif (typeof define === \"function\" && define.amd) {\n\t    define(f);\n\t}else if (typeof exports === \"object\") {\n\t    module.exports = f();\n\t}else {\n\t    (0,eval)('this').Mat = f();\n\t}\n})(function(){\nconst global= (0,eval)('this');\nconst TypedArray=global.Float32Array&&global.Float32Array.prototype;\n\nfunction createClass(Constructor){\n\tclass Matrix{\n\t\tconstructor(l,c,fill=0){\n\t\t\tthis.array=new Constructor(l*c);\n\t\t\tObject.defineProperty(this.array,'row',{value:l});\n\t\t\tObject.defineProperty(this.array,'column',{value:c});\n\t\t\tif(arguments.length==3){\n\t\t\t\tif(Matrix._instanceofTypedArray&&(fill===0)){}\n\t\t\t\telse if(typeof fill === 'number'){\n\t\t\t\t\tthis.fill(fill);\n\t\t\t\t}else if(fill.length){\n\t\t\t\t\tthis.set(fill);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tget length(){return this.array.length;}\n\t\tget row(){return this.array.row;}\n\t\tget column(){return this.array.column;}\n\t\tleftMultiply(m){\n\t\t\treturn this.set(Matrix.multiply(m,this,new Matrix(m.row,this.column)));\n\t\t}\n\t\trightMultiply(m){\n\t\t\treturn this.set(Matrix.multiply(this,m,new Matrix(this.row,m,column)));\n\t\t}\n\t\tfill(n){\n\t\t\targuments.length||(n=0);\n\t\t\tfor(let i=this.length;i--;)this.array[i]=n;\n\t\t\treturn this;\n\t\t}\n\t\tset(arr,offset){\n\t\t\toffset||(offset=0);\n\t\t\t(arr instanceof Matrix)&&(arr=arr.array);\n\t\t\tfor(let i=(arr.length+offset)<=this.length?arr.length:(this.length-offset);i--;)\n\t\t\t\tthis.array[offset+i]=arr[i];\n\t\t\treturn this;\n\t\t}\n\t\tput(m,row,column){\n\t\t\tMatrix.put(this,m,row||0,column||0);\n\t\t\treturn this;\n\t\t}\n\t\trotate2d(t){\n\t\t\treturn this.set(Matrix.rotate2d(this,t,Matrix.Matrixes.T3));\n\t\t}\n\t\ttranslate2d(x,y){\n\t\t\treturn this.set(Matrix.translate2d(this,x,y,Matrix.Matrixes.T3));\n\t\t}\n\t\tscale2d(x,y){\n\t\t\treturn this.set(Matrix.scale2d(this,x,y,Matrix.Matrixes.T3));\n\t\t}\n\t\trotate3d(tx,ty,tz){\n\t\t\treturn this.set(Matrix.rotate3d(this,tx,ty,tz,Matrix.Matrixes.T4));\n\t\t}\n\t\tscale3d(x,y,z){\n\t\t\treturn this.set(Matrix.scale3d(this,x,y,z,Matrix.Matrixes.T4));\n\t\t}\n\t\ttranslate3d(x,y,z){\n\t\t\treturn this.set(Matrix.translate3d(this,x,y,z,Matrix.Matrixes.T4));\n\t\t}\n\t\trotateX(t){\n\t\t\treturn this.set(Matrix.rotateX(this,t,Matrix.Matrixes.T4));\n\t\t}\n\t\trotateY(t){\n\t\t\treturn this.set(Matrix.rotateY(this,t,Matrix.Matrixes.T4));\n\t\t}\n\t\trotateZ(t){\n\t\t\treturn this.set(Matrix.rotateZ(this,t,Matrix.Matrixes.T4));\n\t\t}\n\t\tclone(){\n\t\t\treturn new Matrix(this.row,this.column,this);\n\t\t}\n\t\ttoString(){\n\t\t\tif(this.length === 0)return '';\n\t\t\tfor(var i=0,lines=[],tmp=[];i<this.length;i++){\n\t\t\t\tif(i && (i%this.column === 0)){\n\t\t\t\t\tlines.push(tmp.join('\\t'));\n\t\t\t\t\ttmp.length=0;\n\t\t\t\t}\n\t\t\t\ttmp.push(this.array[i]||0);\n\t\t\t}\n\t\t\tlines.push(tmp.join('\t'));\n\t\t\treturn lines.join('\\n');\n\t\t}\n\n\t\t//static methods\n\t\tstatic Identity(n){//return a new Identity Matrix\n\t\t\tlet m=new Matrix(n,n,0);\n\t\t\tfor(let i=n;i--;)m.array[i*n+i]=1;\n\t\t\treturn m;\n\t\t}\n\t\tstatic Perspective(fovy,aspect,znear,zfar,result){\n\t\t\tvar y1=znear*Math.tan(fovy*Math.PI/360.0),\n\t\t\t\tx1=y1*aspect,\n\t\t\t\tm=result||new Matrix(4,4,0),\n\t\t\t\tarr=m.array;\n\n\t\t\tarr[0]=2*znear/(x1+x1);\n\t\t\tarr[5]=2*znear/(y1+y1);\n\t\t\tarr[10]=-(zfar+znear)/(zfar-znear);\n\t\t\tarr[14]=-2*zfar*znear/(zfar-znear);\n\t\t\tarr[11]=-1;\n\t\t    if(result)arr[1]=arr[2]=arr[3]=arr[4]=arr[6]=arr[7]=arr[8]=arr[9]=arr[12]=arr[13]=arr[15]=0;\n\t\t    return m;\n\t\t}\n\t\tstatic multiply(a,b,result){\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\n\t\t\tlet row=a.row,column=Math.min(a.column,b.column),r=result||new Matrix(row,column),c,i,ind;\n\t\t\tfor(let l=row;l--;){\n\t\t\t\tfor(c=column;c--;){\n\t\t\t\t\tr.array[ind=(l*r.column+c)]=0;\n\t\t\t\t\tfor(i=a.column;i--;){\n\t\t\t\t\t\tr.array[ind]+=(a.array[l*a.column+i]*b.array[c+i*b.column]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\tstatic multiplyString(a,b,array,ignoreZero=true){//work out the equation for every elements,only for debug and only works with Array matrixes\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\n\t\t\tvar r=array||new Matrix(a.row,b.column),l,c,i,ind;\n\t\t\tfor(l=a.row;l--;){\n\t\t\t\tfor(c=b.column;c--;){\n\t\t\t\t\tr.array[ind=(l*b.column+c)]='';\n\t\t\t\t\tfor(i=0;i<a.column;i++){\n\t\t\t\t\t\tif(ignoreZero && (a.array[l*a.column+i]==0 ||b.array[c+i*b.column]==0))continue;\n\t\t\t\t\t\tr.array[ind]+=(((i&&r.array[ind])?'+':'')+'('+a.array[l*a.column+i]+')*('+b.array[c+i*b.column])+')';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\tstatic add(a,b,result){\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\n\t\t\tlet r=result||new Matrix(a.row,b.column);\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]+b.array[i];\n\t\t\treturn r;\n\t\t}\n\t\tstatic minus(a,b,result){\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\n\t\t\tlet r=result||new Matrix(a.row,b.column);\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]-b.array[i];\n\t\t\treturn r;\n\t\t}\n\t\tstatic rotate2d(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotate2d;\n\t\t\tMr.array[0]=Mr.array[4]=Math.cos(t);\n\t\t\tMr.array[1]=-(Mr.array[3]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\n\t\t}\n\t\tstatic scale2d(m,x,y,result){\n\t\t\tconst Mr=Matrix.Matrixes.scale2d;\n\t\t\tMr.array[0]=x;\n\t\t\tMr.array[4]=y;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\n\t\t}\n\t\tstatic translate2d(m,x,y,result){\n\t\t\tconst Mr=Matrix.Matrixes.translate2d;\n\t\t\tMr.array[2]=x;\n\t\t\tMr.array[5]=y;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\n\t\t}\n\t\tstatic rotate3d(m,tx,ty,tz,result){\n\t\t\tconst Xc=Math.cos(tx),Xs=Math.sin(tx),\n\t\t\t\tYc=Math.cos(ty),Ys=Math.sin(ty),\n\t\t\t\tZc=Math.cos(tz),Zs=Math.sin(tz),\n\t\t\t\tMr=Matrix.Matrixes.rotate3d;\n\t\t\tMr.array[0]=Zc*Yc;\n\t\t\tMr.array[1]=Zc*Ys*Xs-Zs*Xc;\n\t\t\tMr.array[2]=Zc*Ys*Xc+Zs*Xs;\n\t\t\tMr.array[4]=Zs*Yc;\n\t\t\tMr.array[5]=Zs*Ys*Xs+Zc*Xc;\n\t\t\tMr.array[6]=Zs*Ys*Xc-Zc*Xs;\n\t\t\tMr.array[8]=-Ys;\n\t\t\tMr.array[9]=Yc*Xs;\n\t\t\tMr.array[10]=Yc*Xc;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic rotateX(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotateX;\n\t\t\tMr.array[10]=Mr.array[5]=Math.cos(t);\n\t\t\tMr.array[6]=-(Mr.array[9]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic rotateY(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotateY;\n\t\t\tMr.array[10]=Mr.array[0]=Math.cos(t);\n\t\t\tMr.array[8]=-(Mr.array[2]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic rotateZ(m,t,result){\n\t\t\tconst Mr=Matrix.Matrixes.rotateZ;\n\t\t\tMr.array[5]=Mr.array[0]=Math.cos(t);\n\t\t\tMr.array[1]=-(Mr.array[4]=Math.sin(t));\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic scale3d(m,x,y,z,result){\n\t\t\tconst Mr=Matrix.Matrixes.scale3d;\n\t\t\tMr.array[0]=x;\n\t\t\tMr.array[5]=y;\n\t\t\tMr.array[10]=z;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic translate3d(m,x,y,z,result){\n\t\t\tconst Mr=Matrix.Matrixes.translate3d;\n\t\t\tMr.array[12]=x;\n\t\t\tMr.array[13]=y;\n\t\t\tMr.array[14]=z;\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\n\t\t}\n\t\tstatic put(m,sub,row,column){\n\t\t\tlet c,ind,i;\n\t\t\trow||(row=0);\n\t\t\tcolumn||(column=0);\n\t\t\tfor(let l=sub.row;l--;){\n\t\t\t\tif(l+row>=m.row)continue;\n\t\t\t\tfor(c=sub.column;c--;){\n\t\t\t\t\tif(c+column>=m.column)continue;\n\t\t\t\t\tm.array[(l+row)*m.column+c+column]=sub.array[l*sub.column+c];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstatic createClass(Constructor){\n\t\t\treturn createClass(Constructor);\n\t\t}\n\t}\n\n\tvar testArray=new Constructor(1);\n\tObject.defineProperty(Matrix,'_instanceofTypedArray',{value:!!(TypedArray&&TypedArray.isPrototypeOf(testArray))});\n\ttestArray=null;\n\n\tMatrix.Matrixes={//do not modify these matrixes manually and dont use them\n\t\tI2:Matrix.Identity(2),\n\t\tI3:Matrix.Identity(3),\n\t\tI4:Matrix.Identity(4),\n\t\tT3:new Matrix(3,3,0),\n\t\tT4:new Matrix(4,4,0),\n\t\trotate2d:Matrix.Identity(3),\n\t\ttranslate2d:Matrix.Identity(3),\n\t\tscale2d:Matrix.Identity(3),\n\t\ttranslate3d:Matrix.Identity(4),\n\t\trotate3d:Matrix.Identity(4),\n\t\trotateX:Matrix.Identity(4),\n\t\trotateY:Matrix.Identity(4),\n\t\trotateZ:Matrix.Identity(4),\n\t\tscale3d:Matrix.Identity(4),\n\t}\n\treturn Matrix;\n}\nreturn createClass(global.Float32Array?Float32Array:Array);\n});\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\nimport {\n\tDomTools,\n\tUtils\n} from '../../NyaP-Core/index.js';//load from NyaP-Core project\n\nexport {\n\tDomTools,\n\tUtils\n} \n\nclass DanmakuFrameModule{\n\tconstructor(frame){\n\t\tthis.frame=frame;\n\t\tthis.enabled=false;\n\t}\n\tget width(){return this.frame.width;}\n\tget height(){return this.frame.height;}\n}\n\n\nclass DanmakuFrame{\n\tstatic availableModules={};\n\tstatic addModule(name,module){\n\t\tif(name in this.availableModules){\n\t\t\tconsole.warn('The module \"'+name+'\" has already been added.');\n\t\t\treturn;\n\t\t}\n\t\tthis.availableModules[name]=module;\n\t} \n\tget availableModules(){return this.constructor.availableModules;}\n\tget opt(){return this._opt||{}};\n\tset time(t){//current media time (ms)\n\t\tthis.media||(this.timeBase=Date.now()-t);\n\t\tthis.moduleFunction('time',t);//let all mods know when the time be set\n\t}\n\tget time(){return this.media?(this.media.currentTime*1000):(Date.now()-this.timeBase);}\n\tget area(){return this.width*this.height;}\n\t_opt;\n\trate=1;\n\ttimeBase=0;//for no fixed duration evn\n\twidth=0;\n\theight=0;\n\tfpsLimit=0;\n\tfps=0;//fps result\n\tfpsRec=new Uint32Array(9);//frame time record\n\tmedia=null;\n\tworking=false;//set working stat\n\tenabled=true;//is enabled\n\tmodules={};//constructed module list\n\tconstructor(core,opt){\n\t\tthis.core=core;\n\t\tthis._opt=opt;\n\t\tthis.container=core.danmakuContainer||document.createElement('div');\n\t\t// create a styleSheet\n\t\tconst style=document.createElement(\"style\");\n\t\tdocument.head.appendChild(style);\n\t\tthis.styleSheet=style.sheet;\n\t\t\n\t\tsetImmediate(()=>{//container size sensor\n\t\t\tDomTools.resizeEvent.observe(this.container);\n\t\t\tDomTools.addEvents(this.container,{\n\t\t\t\tresize:e=>this.resize(e.contentRect),\n\t\t\t});\n\t\t\tthis.resize();\n\t\t},0);\n\t\t\n\t\tUtils.animationFrameLoop(()=>{//fps recorder\n\t\t\tlet rec=this.fpsRec,length=rec.length;\n\t\t\t//move left\n\t\t\trec.copyWithin(rec,1);\n\t\t\trec[length-1]=Date.now();//set this frame's time\n\t\t\tlet result=0;\n\t\t\tfor(let i=1;i<length;i++){//weighted average\n\t\t\t\tresult+=i*(rec[i]-rec[i-1]);\n\t\t\t}\n\t\t\tresult/=length*(length-1)/2;\n\t\t\tthis.fps=1000/result;\n\t\t});\n\n\t\tthis.draw=this.draw.bind(this);\n\n\t}\n\tenable(name){//enable a amdule\n\t\tif(name===undefined){//no name means enable this frame\n\t\t\tthis.enabled=true;\n\t\t\tif(this.media){\n\t\t\t\tthis.media.paused||this.play();\n\t\t\t}\n\t\t\tthis.container.style.display='';\n\t\t\tthis.core.emit('danmakuFrameToggle',true);\n\t\t\tthis.core.debug('danmaku frame enabled');\n\t\t\treturn;\n\t\t}else if(!name){\n\t\t\tthrow(new Error(`Wrong name: ${name}`));\n\t\t}\n\t\tlet module=this.modules[name]||this.initModule(name);\n\t\tif(!module)return false;\n\t\tmodule.enabled=true;\n\t\tmodule.enable&&module.enable();\n\t\treturn true;\n\t}\n\tdisable(name){\n\t\tif(name===undefined){\n\t\t\tthis.pause();\n\t\t\tthis.moduleFunction('clear');\n\t\t\tthis.enabled=false;\n\t\t\tthis.container.style.display='none';\n\t\t\tthis.core.emit('danmakuFrameToggle',false);\n\t\t\tthis.core.debug('danmaku frame disabled');\n\t\t\treturn;\n\t\t}\n\t\tlet module=this.modules[name];\n\t\tif(!module)return false;\n\t\tmodule.enabled=false;\n\t\tmodule.disable&&module.disable();\n\t\treturn true;\n\t}\n\taddStyle(s){\n\t\tif(typeof s === 'string')s=[s];\n\t\tif(s instanceof Array === false)return;\n\t\ts.forEach(r=>this.styleSheet.insertRule(r,this.styleSheet.cssRules.length));\n\t}\n\tinitModule(name,arg=this.opt.modules[name]){\n\t\tif(this.modules[name]){\n\t\t\tconsole.warn(`The module [${name}] has already inited.`);\n\t\t\treturn this.modules[name];\n\t\t}\n\t\tlet mod=DanmakuFrame.availableModules[name];\n\t\tif(!mod)throw('Module ['+name+'] does not exist.');\n\t\tlet module=new mod(this,arg);\n\t\tif(module instanceof DanmakuFrameModule === false)\n\t\t\tthrow('Constructor of '+name+' is not child class of DanmakuFrameModule');\n\t\tthis.modules[name]=module;\n\t\tconsole.debug(`Mod Inited: ${name}`);\n\t\treturn module;\n\t}\n\tdraw(force){\n\t\tif(!this.working)return;\n\t\tthis.moduleFunction('draw',force);\n\t\tif(this.fpsLimit<=0){\n\t\t\trequestAnimationFrame(()=>this.draw());\n\t\t}else{\n\t\t\tsetTimeout(this.draw,1000/this.fpsLimit);\n\t\t}\n\t}\n\tload(...danmakuObj){\n\t\tthis.moduleFunction('load',...danmakuObj);\n\t}\n\tloadList(danmakuArray){\n\t\tthis.moduleFunction('loadList',danmakuArray);\n\t}\n\tunload(danmakuObj){\n\t\tthis.moduleFunction('unload',danmakuObj);\n\t}\n\tplay(){\n\t\tif(this.working||!this.enabled)return;\n\t\tthis.working=true;\n\t\tthis.moduleFunction('play');\n\t\tthis.draw(true);\n\t}\n\tpause(){\n\t\tif(!this.enabled)return;\n\t\tthis.working=false;\n\t\tthis.moduleFunction('pause');\n\t}\n\tresize(rect=this.container.getBoundingClientRect()){\n\t\tthis.width=rect.width;\n\t\tthis.height=rect.height;\n\t\tthis.moduleFunction('resize',rect);\n\t}\n\tmoduleFunction(name,...arg){\n\t\tlet m;\n\t\tfor(let n in this.modules){\n\t\t\tm=this.modules[n];\n\t\t\tif(m.enabled&&m[name])m[name](...arg);\n\t\t}\n\t}\n\tsetMedia(media){\n\t\tconst F=this;\n\t\tF.media=media;\n\t\tDomTools.addEvents(media,{\n\t\t\tplaying:()=>F.play(),\n\t\t\t'pause,stalled,seeking,waiting':()=>F.pause(),\n\t\t\tratechange:()=>{\n\t\t\t\tF.rate=F.media.playbackRate;\n\t\t\t\tF.moduleFunction('rate',F.rate);\n\t\t\t},\n\t\t});\n\t\tF.moduleFunction('media',media);\n\t}\n}\n\n\nexport {DanmakuFrame,DanmakuFrameModule}\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Template from './textModuleTemplate.js';\n\nclass TextCanvas2D extends Template{\n\tcanvas;\n\tcontext2d;\n\tget container(){return this.canvas;}\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tthis.canvas=document.createElement('canvas');//the canvas\n\t\tthis.context2d=this.canvas.getContext('2d');//the canvas contex\n\t\tif(!this.context2d){\n\t\t\tconsole.warn('text 2d not supported');\n\t\t\treturn;\n\t\t}\n\t\tthis.canvas.classList.add(`${dText.randomText}_fullfill`);\n\t\tthis.canvas.id=`${dText.randomText}_text2d`;\n\t\tthis.supported=true;\n\t}\n\tdraw(force){\n\t\tlet ctx=this.context2d,\n\t\t\tcW=ctx.canvas.width,\n\t\t\tdT=this.dText.DanmakuText,\n\t\t\ti=dT.length,\n\t\t\tt,\n\t\t\tleft,\n\t\t\tright,\n\t\t\tvW;\n\t\tlet debug=false;\n\t\tctx.globalCompositeOperation='destination-over';\n\t\tthis.clear(force);\n\t\tfor(;i--;){\n\t\t\tif(!(t=dT[i]).drawn)(t.drawn=true);\n\t\t\tleft=t.style.x-t.estimatePadding;\n\t\t\tright=left+t._cache.width;\n\t\t\tif(left>cW || right<0){continue;}//ignore danmakus out of the screen\n\t\t\tif(debug){\n\t\t\t\tctx.save();\n\t\t\t\tctx.fillStyle='rgba(255,255,255,0.3)';\n\t\t\t\tctx.fillRect(left,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t\tif(cW>=t._cache.width){//danmaku which is smaller than canvas width\n\t\t\t\tctx.drawImage(t._bitmap||t._cache, left, t.style.y-t.estimatePadding);\n\t\t\t}else{//only draw the part on screen if the danmau overflow\n\t\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0)\n\t\t\t\tctx.drawImage(t._bitmap||t._cache,\n\t\t\t\t\t(left<0)?-left:0,0,\n\t\t\t\t\t\t\tvW,t._cache.height,\n\t\t\t\t\t(left<0)?0:left,t.style.y-t.estimatePadding,\n\t\t\t\t\t\t\tvW,t._cache.height);\n\t\t\t}\n\t\t}\n\t}\n\tclear(force){\n\t\tconst D=this.dText;\n\t\tif(force||this._evaluateIfFullClearMode()){\n\t\t\tthis.context2d.clearRect(0,0,this.canvas.width,this.canvas.height);\n\t\t\treturn;\n\t\t}\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\n\t\t\tt=D.DanmakuText[i];\n\t\t\tif(t.drawn)\n\t\t\t\tthis.context2d.clearRect(t.style.x-t.estimatePadding,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\n\t\t}\n\t}\n\t_evaluateIfFullClearMode(){\n\t\tif(this.dText.DanmakuText.length>3)return true;\n\t\treturn false;\n\t}\n\tdeleteRelatedTextObject(t){\n\t\tif(t._bitmap){\n\t\t\tt._bitmap.close();\n\t\t\tt._bitmap=null;\n\t\t}\n\t}\n\tresize(){\n\t\tlet D=this.dText,C=this.canvas;\n\t\tC.width=D.width;\n\t\tC.height=D.height;\n\t}\n\tenable(){\n\t\tthis.draw();\n\t\tthis.dText.useImageBitmap=true;\n\t}\n\tdisable(){\n\t\tfor(let tobj of this.dText.DanmakuText){\n\t\t\tthis.deleteRelatedTextObject(tobj);\n\t\t}\n\t\tthis.clear(true);\n\t}\n}\n\nexport default TextCanvas2D;","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Template from './textModuleTemplate.js';\n\nclass TextCss extends Template{\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tthis.supported=dText.text2d.supported;\n\t\tif(!this.supported)return;\n\t\tdText.frame.addStyle([`#${dText.randomText}_textCanvasContainer canvas{will-change:transform;top:0;left:0;position:absolute;}`,\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer.moving canvas{transition:transform 500s linear;}`,\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer{will-change:transform;pointer-events:none;overflow:hidden;}`]);\n\n\t\tthis.container=document.createElement('div');//for text canvas\n\t\tthis.container.classList.add(`${dText.randomText}_fullfill`);\n\t\tthis.container.id=`${dText.randomText}_textCanvasContainer`;\n\t}\n\t_toggle(s){\n\t\tlet D=this.dText,T=D.frame.time;\n\t\tthis.container.classList[s?'add':'remove']('moving');\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\n\t\t\tif((t=D.DanmakuText[i]).danmaku.mode>=2)continue;\n\t\t\tif(s){requestAnimationFrame(()=>this._move(t));}\n\t\t\telse{this._move(t,T);}\n\t\t}\n\t}\n\tclear(){\n\t\tthis.container.innerHTML='';\n\t}\n\tpause(){\n\t\tthis._toggle(false);\n\t}\n\tplay(){\n\t\tthis._toggle(true);\n\t}\n\trate(){\n\t\tthis.resetPos();\n\t}\n\t_move(t,T){\n\t\tif(!t.danmaku)return;\n\t\tif(T===undefined)T=this.dText.frame.time+500000;\n\t\tt._cache.style.transform=`translate(${(((this.dText._calcSideDanmakuPosition(t,T)-t.estimatePadding)*10)|0)/10}px,${t.style.y-t.estimatePadding}px)`;\n\t}\n\tresetPos(){\n\t\tthis.pause();\n\t\tthis.dText.paused||requestAnimationFrame(()=>this.play());\n\t}\n\tresize(){\n\t\tthis.resetPos();\n\t}\n\tremove(t){\n\t\tt._cache.parentNode&&this.container.removeChild(t._cache);\n\t}\n\tenable(){\n\t\tthis.dText.useImageBitmap=false;\n\t\trequestAnimationFrame(()=>{\n\t\t\tthis.dText.DanmakuText.forEach(t=>this.newDanmaku(t));\n\t\t});\n\t}\n\tdisable(){\n\t\tthis.container.innerHTML='';\n\t}\n\tnewDanmaku(t){\n\t\tt._cache.style.transform=`translate(${t.style.x-t.estimatePadding}px,${t.style.y-t.estimatePadding}px)`;\n\t\tthis.container.appendChild(t._cache);\n\t\tt.danmaku.mode<2&&!this.dText.paused&&requestAnimationFrame(()=>this._move(t));\n\t}\n}\n\n\nexport default TextCss;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Mat from '../../lib/Mat/Mat.js'\nimport Template from './textModuleTemplate.js';\nimport {Utils} from '../danmaku-frame.js';\n\nclass TextWebGL extends Template{\n\tget container(){return this.c3d;}\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tlet c3d=this.c3d=document.createElement('canvas');\n\t\tc3d.classList.add(`${dText.randomText}_fullfill`);\n\t\tc3d.id=`${dText.randomText}_text3d`;\n\t\t//init webgl\n\t\tconst gl=this.gl=c3d.getContext('webgl')||c3d.getContext('experimental-webgl');//the canvas3d context\n\t\tif(!gl){\n\t\t\tconsole.warn('text 3d not supported');\n\t\t\treturn;\n\t\t}\n\t\t//shader\n\t\tvar shaders={\n\t\t\tdanmakuFrag:[gl.FRAGMENT_SHADER,`\n\t\t\t\t#pragma optimize(on)\n\t\t\t\tprecision lowp float;\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\n\t\t\t\tuniform sampler2D uSampler;\n\t\t\t\tvoid main(void) {\n\t\t\t\t\tvec4 co=texture2D(uSampler,vDanmakuTexCoord);\n\t\t\t\t\tif(co.a == 0.0)discard;\n\t\t\t\t\tgl_FragColor = co;\n\t\t\t\t}`\n\t\t\t],\n\t\t\tdanmakuVert:[gl.VERTEX_SHADER,`\n\t\t\t\t#pragma optimize(on)\n\t\t\t\tattribute vec2 aVertexPosition;\n\t\t\t\tattribute vec2 aDanmakuTexCoord;\n\t\t\t\tuniform mat4 u2dCoordinate;\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\n\t\t\t\tvoid main(void) {\n\t\t\t\t\tgl_Position = u2dCoordinate * vec4(aVertexPosition,0,1);\n\t\t\t\t\tvDanmakuTexCoord = aDanmakuTexCoord;\n\t\t\t\t}`\n\t\t\t],\n\t\t}\n\t\tfunction shader(name){\n\t\t\tvar s=gl.createShader(shaders[name][0]);\n\t\t\tgl.shaderSource(s,shaders[name][1]);\n\t\t\tgl.compileShader(s);\n\t\t\tif (!gl.getShaderParameter(s,gl.COMPILE_STATUS))\n\t\t\t\tthrow(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(s));\n\t\t\treturn s;\n\t\t}\n\t\tvar fragmentShader = shader(\"danmakuFrag\");\n\t\tvar vertexShader = shader(\"danmakuVert\");\n\t\tvar shaderProgram = this.shaderProgram = gl.createProgram();\n\t\tgl.attachShader(shaderProgram,vertexShader);\n\t\tgl.attachShader(shaderProgram,fragmentShader);\n\t\tgl.linkProgram(shaderProgram);\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\t\tconsole.error(\"Unable to initialize the shader program.\");\n\t\t\treturn;\n\t\t}\n\t\tgl.useProgram(shaderProgram);\n\n\t\t//scene\n\t\tgl.clearColor(0, 0, 0, 0.0);\n\t\tgl.enable(gl.BLEND);\n\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA ,gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n\t\tthis.maxTexSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n\t\tthis.uSampler=gl.getUniformLocation(shaderProgram,\"uSampler\");\n\t\tthis.u2dCoord=gl.getUniformLocation(shaderProgram,\"u2dCoordinate\");\n\t\tthis.aVertexPosition=gl.getAttribLocation(shaderProgram,\"aVertexPosition\");\n\t\tthis.atextureCoord=gl.getAttribLocation(shaderProgram,\"aDanmakuTexCoord\");\n\n\t\tgl.enableVertexAttribArray(this.aVertexPosition);\n\t\tgl.enableVertexAttribArray(this.atextureCoord);\n\n\t\tthis.commonTexCoordBuffer=gl.createBuffer();\n\t\tthis.commonVertCoordBuffer=gl.createBuffer();\n\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.uniform1i(this.uSampler,0);\n\n\t\tthis.supported=true;\n\t}\n\tdraw(force){\n\t\tconst gl=this.gl,l=this.dText.DanmakuText.length;\n\t\tlet cW=this.c3d.width,left,right,vW;\n\t\tfor(let i=0,t;i<l;i++){\n\t\t\tt=this.dText.DanmakuText[i];\n\t\t\tif(!t || !t.glDanmaku)continue;\n\t\t\tleft=t.style.x-t.estimatePadding;\n\t\t\tright=left+t._cache.width,\n\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0);\n\t\t\tif(left>cW || right<0)continue;\n\n\t\t\t//vert\n\t\t\tt.vertCoord[0]=t.vertCoord[4]=(left<0)?0:left;\n\t\t\tt.vertCoord[2]=t.vertCoord[6]=t.vertCoord[0]+vW;\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonVertCoordBuffer);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,t.vertCoord,gl.DYNAMIC_DRAW);\n\t\t\tgl.vertexAttribPointer(this.aVertexPosition,2,gl.FLOAT,false,0,0);\n\n\t\t\t//tex\n\t\t\tcommonTextureCoord[0]=commonTextureCoord[4]=(left<0)?-left/t._cache.width:0;\n\t\t\tcommonTextureCoord[2]=commonTextureCoord[6]=commonTextureCoord[0]+vW/t._cache.width;\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonTexCoordBuffer);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,commonTextureCoord,gl.DYNAMIC_DRAW);\n\t\t\tgl.vertexAttribPointer(this.atextureCoord,2,gl.FLOAT,false,0,0);\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,t.texture);\n\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP,0,4);\n\t\t}\n\t\tgl.flush();\n\t}\n\tclear(){\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\t}\n\tdeleteRelatedTextObject(t){\n\t\tif(t.texture)this.gl.deleteTexture(t.texture);\n\t\tt.texture=null;\n\t\tt.vertCoord=null;\n\t\tdelete t.glDanmaku;\n\t}\n\tresize(w,h){\n\t\tconst gl=this.gl,C=this.c3d;\n\t\tC.width=this.dText.width;\n\t\tC.height=this.dText.height;\n\t\tgl.viewport(0,0,C.width,C.height);\n\t\tgl.uniformMatrix4fv(this.u2dCoord,false,(Mat.Identity(4).translate3d(-1,1,0).scale3d(2/C.width,-2/C.height,0)).array);\n\t}\n\tenable(){\n\t\tthis.dText.DanmakuText.forEach(t=>{\n\t\t\tthis.newDanmaku(t,false);\n\t\t});\n\t\tthis.dText.useImageBitmap=false;\n\t\trequestAnimationFrame(()=>this.draw());\n\t}\n\tdisable(){\n\t\t//clean related objects\n\t\tfor(let tobj of this.dText.DanmakuText){\n\t\t\tthis.deleteRelatedTextObject(tobj);\n\t\t}\n\t\tthis.clear();\n\t}\n\tnewDanmaku(t,async=true){\n\t\tconst gl=this.gl;\n\t\tt.glDanmaku=false;\n\t\tif(t._cache.height>this.maxTexSize || t._cache.width>this.maxTexSize){//ignore too large danmaku image\n\t\t\tconsole.warn('Ignore a danmaku width too large size',t.danmaku);\n\t\t\treturn;\n\t\t}\n\t\tlet tex;\n\t\tif(!(tex=t.texture)){\n\t\t\ttex=t.texture=gl.createTexture();\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);\n\t\t}\n\t\tif(async){\n\t\t\tUtils.requestIdleCallback(()=>{\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\n\t\t\t\tt.glDanmaku=true;\n\t\t\t});\n\t\t}else{\n\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\n\t\t\tt.glDanmaku=true;\n\t\t}\n\n\t\t//vert\n\t\tlet y=t.style.y-t.estimatePadding;\n\t\tt.vertCoord=new Float32Array([\n\t\t\t0,y,\n\t\t\t0,y,\n\t\t\t0,y+t._cache.height,\n\t\t\t0,y+t._cache.height,\n\t\t]);\n\t}\n}\n\n\n\nconst commonTextureCoord=new Float32Array([\n\t0.0,  0.0,//↖\n\t1.0,  0.0,//↗\n\t0.0,  1.0,//↙\n\t1.0,  1.0,//↘\n]);\n\n\nexport default TextWebGL;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nimport Template from './textModuleTemplate.js';\n\nclass TextOff extends Template{\n\tconstructor(dText){\n\t\tsuper(dText);\n\t\tthis.supported=true;\n        this.container=document.createElement('div');\n        this.container.style.display='none';\n\t}\n}\n\nexport default TextOff;\n","/*\nCopyright luojia@luojia.me\nLGPL license\n\ndanmaku-frame mod\n*/\n'use strict';\nimport {DomTools,Utils} from '../danmaku-frame.js';\nimport TextCanvas2D from './TextCanvas2D.js';\nimport TextWebGL from './TextWebGL.js';\nimport TextCss from './TextCss.js';\nimport Textoff from './Textoff.js';\nimport {DanmakuFrameModule} from '../danmaku-frame.js'\n\n/*\ndanmaku obj struct\n{\n\t_:'text',\n\ttime:(number)msec time,\n\ttext:(string),\n\tstyle:(object)to be combined whit default style,\n\tmode:(number),\n\tonScreen:(bool)on the screen\n}\n\ndanmaku mode\n\t0:right\n\t1:left\n\t2:bottom\n\t3:top\n*/\nconst defProp=Object.defineProperty;\nlet useImageBitmap=false;\n\nclass TextDanmaku extends DanmakuFrameModule{\n\tget paused(){return !this.frame.working;}\n\tlist=[];//danmaku object array\n\tindexMark=0;//to record the index of last danmaku loaded to screen in the DanmakuText\n\trandomText=`danmaku_text_${(Math.random()*999999)|0}`;\n\tlastRendererMode=0;\n\t//time record\n\tcacheCleanTime=0;\n\tdanmakuMoveTime=0;\n\tdanmakuCheckTime=0;\n\tdanmakuCheckSwitch=true;\n\tGraphCache=[];//text graph cache, for reusable TextGraph obj\n\tDanmakuText=[];//TextGraph on screen\n\tdefaultStyle={//these styles can be overwrote by the 'font' property of danmaku object\n\t\tfontStyle: null,\n\t\tfontWeight: 300,\n\t\tfontVariant: null,\n\t\tcolor: \"#fff\",\n\t\tfontSize: 24,\n\t\tfontFamily: \"Arial\",\n\t\tstrokeWidth: 1,//outline width\n\t\tstrokeColor: \"#888\",\n\t\tshadowBlur: 5,\n\t\ttextAlign:'start',//left right center start end\n\t\tshadowColor: \"#000\",\n\t\tshadowOffsetX:0,\n\t\tshadowOffsetY:0,\n\t\tfill:true,//if the text should be filled\n\t};\n\toptions={\n\t\tallowLines:false,//allow multi-line danmaku\n\t\tscreenLimit:0,//the most area% of danmaku on the screen\n\t\tclearWhenTimeReset:true,//clear danmaku on screen when the time is reset\n\t\tspeed:6.5,\n\t\tdanmakuSizeScale:1,//scale for the default size\n\t\tautoShiftRenderingMode:true,//auto shift to a low load mode\n\t\trenderingMode:1,//default to css mode\n\t}\n\tconstructor(frame,arg={}){\n\t\tsuper(frame);\n\t\tif(arg.defaultStyle)\n\t\t\tObject.assign(this.defaultStyle,arg.defaultStyle);\n\t\tif(arg.options)\n\t\t\tUtils.deepAssign(this.options,arg.options);\n\t\t\n\t\tframe.addStyle(`.${this.randomText}_fullfill{top:0;left:0;width:100%;height:100%;position:absolute;}`);\n\n\t\tdefProp(this,'rendererMode',{configurable:true});\n\t\tdefProp(this,'activeRendererMode',{configurable:true,value:null});\n\t\tconst con=this.container=document.createElement('div');\n\t\tcon.id=`${this.randomText}_textDanmakuContainer`;\n\t\tcon.classList.add(`${this.randomText}_fullfill`);\n\n\t\t//init modes\n\t\tthis.modes={\n\t\t\t0:this.textoff=new Textoff(this),//off\n\t\t\t2:this.text2d=new TextCanvas2D(this),\n\t\t\t1:this.textCss=new TextCss(this),\n\t\t\t3:this.text3d=new TextWebGL(this),\n\t\t};\n\n\t\t\n\t\tthis.rendering=new RenderingDanmakuManager(this);\n\n\t\tDomTools.addEvents(document,{\n\t\t\tvisibilitychange:e=>{\n\t\t\t\t//?\n\t\t\t}\n\t\t});\n\t\tthis._checkNewDanmaku=this._checkNewDanmaku.bind(this);\n\t\tthis._cleanCache=this._cleanCache.bind(this);\n\t\tsetInterval(this._cleanCache,5000);//set an interval for cache cleaning\n\t\t\n\t\tthis.setRendererMode(this.lastRendererMode=(this.options.renderingMode||1));\n\t}\n\tsetRendererMode(n){\n\t\tif(this.rendererMode===n || !(n in this.modes) || !this.modes[n].supported)return false;\n\t\tif(this.activeRendererMode){\n\t\t\tthis.lastRendererMode=this.rendererMode;\n\t\t\tthis.activeRendererMode.disable();\n\t\t\tthis.container.removeChild(this.activeRendererMode.container);\n\t\t}\n\t\tdefProp(this,'activeRendererMode',{value:this.modes[n]});\n\t\tdefProp(this,'rendererMode',{value:n});\n\t\tthis.container.appendChild(this.activeRendererMode.container);\n\t\tthis.activeRendererMode.resize();\n\t\tthis.activeRendererMode.enable();\n\t\tthis.frame.core.debug('rendererMode:',this.rendererMode);\n\t\treturn true;\n\t}\n\tmedia(media){\n\t\tDomTools.addEvents(media,{\n\t\t\tseeked:()=>this.time(),\n\t\t\tseeking:()=>this.pause(),\n\t\t});\n\t}\n\tplay(){\n\t\tthis.recheckIndexMark();\n\t\tthis.activeRendererMode.play();\n\t}\n\tpause(){\n\t\tthis.activeRendererMode.pause();\n\t}\n\tload(d,autoAddToScreen){\n\t\tif(d?._!=='text'){\n\t\t\treturn false;\n\t\t}\n\t\tif(typeof d.text !== 'string'){\n\t\t\tconsole.error('wrong danmaku object:',d);\n\t\t\treturn false;\n\t\t}\n\t\tlet ind,arr=this.list;\n\t\tind=dichotomy(arr,d.time,0,arr.length-1,false);//find a place for this obj in the list in time order\n\t\tarr.splice(ind,0,d);//insert the obj\n\t\tif(ind<this.indexMark)this.indexMark++;\n\t\t//round d.style.fontSize to prevent Iifinity loop in tunnel\n\t\tif(typeof d.style!=='object')d.style={};\n\t\td.style.fontSize=Math.round((d.style.fontSize||this.defaultStyle.fontSize)*this.options.danmakuSizeScale);\n\t\tif(isNaN(d.style.fontSize)|| d.style.fontSize===Infinity || d.style.fontSize===0)d.style.fontSize=this.defaultStyle.fontSize*this.options.danmakuSizeScale;\n\t\tif(typeof d.mode !== 'number')d.mode=0;\n\t\tif(autoAddToScreen)this._addNewDanmaku(d);\n\t\treturn d;\n\t}\n\tloadList(danmakuArray){\n\t\tdanmakuArray.forEach(d=>this.load(d));\n\t}\n\tunload(d){\n\t\tif(!d || d._!=='text')return false;\n\t\tconst i=this.list.indexOf(d);\n\t\tif(i<0)return false;\n\t\tthis.list.splice(i,1);\n\t\tif(i<this.indexMark)this.indexMark--;\n\t\treturn true;\n\t}\n\t_checkNewDanmaku(force){\n\t\tif(this.paused&&!force)return;\n\t\tlet d,time=this.frame.time;\n\t\tif(this.danmakuCheckTime===time || !this.danmakuCheckSwitch)return;\n\t\tif(this.list.length)\n\t\tfor(;(this.indexMark<this.list.length)&&(d=this.list[this.indexMark])&&(d.time<=time);this.indexMark++){//add new danmaku\n\t\t\tif(this.options.screenLimit>0 && this.rendering.onScreenArea>=this.options.screenLimit/100*this.frame.area){continue;}//continue if the number of danmaku on screen has up to limit or doc is not visible\n\t\t\tthis._addNewDanmaku(d);\n\t\t}\n\t\tthis.danmakuCheckTime=time;\n\t}\n\t_addNewDanmaku(d){\n\t\tconst cHeight=this.height,cWidth=this.width;\n\t\tlet t=this.GraphCache.length?this.GraphCache.shift():new TextGraph();\n\t\tif(!this.options.allowLines){\n\t\t\td=Object.create(d);\n\t\t\td.text=d.text.replace(/\\n/g,' ');\n\t\t}\n\t\tlet font=Object.create(this.defaultStyle);\n\t\tt.init(d,Object.assign(font,d.style));\n\t\tt.prepare(false);\n\t\t//find tunnel number\n\t\tconst tnum=this.rendering.tunnelManager.getTunnel(t,cHeight);\n\t\t//calc margin\n\t\tlet margin=(tnum<0?0:tnum)%cHeight;\n\t\tswitch(d.mode){\n\t\t\tcase 0:case 1:case 3:{\n\t\t\t\tt.style.y=margin;break;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tt.style.y=cHeight-margin-t.style.height-1;\n\t\t\t}\n\t\t}\n\t\tswitch(d.mode){\n\t\t\tcase 0:{t.style.x=cWidth;break;}\n\t\t\tcase 1:{t.style.x=-t.style.width;break;}\n\t\t\tcase 2:case 3:{t.style.x=(cWidth-t.style.width)/2;}\n\t\t}\n\t\tthis.rendering.add(t);\n\t}\n\t_calcSideDanmakuPosition(t,T=this.frame.time){\n\t\tlet R=!t.danmaku.mode,style=t.style;//R:from right\n\t\treturn (R?this.frame.width:(-style.width))\n\t\t\t\t+(R?-1:1)*this.frame.rate*(style.width+1024)*(T-t.time)*this.options.speed/60000;\n\t}\n\t_calcDanmakusPosition(force){\n\t\tlet T=this.frame.time;\n\t\tif(this.paused&&!force)return;\n\t\tconst cWidth=this.width,rate=this.frame.rate;\n\t\tlet R,i,t,style,X;\n\t\tthis.danmakuMoveTime=T;\n\t\tfor(i=this.DanmakuText.length;i--;){\n\t\t\tt=this.DanmakuText[i];\n\t\t\tif(t.time>T){\n\t\t\t\tthis.removeText(t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tstyle=t.style;\n\n\t\t\tswitch(t.danmaku.mode){\n\t\t\t\tcase 0:case 1:{\n\t\t\t\t\tR=!t.danmaku.mode;\n\t\t\t\t\tstyle.x=X=this._calcSideDanmakuPosition(t,T);\n\t\t\t\t\tif(t.tunnelNumber>=0 && ((R&&(X+style.width)+10<cWidth) || (!R&&X>10)) ){\n\t\t\t\t\t\tthis.rendering.tunnelManager.removeMark(t);\n\t\t\t\t\t}else if( (R&&(X<-style.width-20)) || (!R&&(X>cWidth+style.width+20)) ){//go out the canvas\n\t\t\t\t\t\tthis.removeText(t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 2:case 3:{\n\t\t\t\t\tif((T-t.time)>this.options.speed*1000/rate){\n\t\t\t\t\t\tthis.removeText(t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t_cleanCache(force){//clean text object cache\n\t\tforce&&this.frame.core.debug('force cleaning graph cache');\n\t\tconst now=Date.now();\n\t\tif(this.GraphCache.length>30 || force){//save 30 cached danmaku\n\t\t\tfor(let ti = 0;ti<this.GraphCache.length;ti++){\n\t\t\t\tif(force || (now-this.GraphCache[ti].removeTime) > 10000){//delete cache which has not been used for 10s\n\t\t\t\t\tthis.GraphCache[ti].destructor();\n\t\t\t\t\tthis.GraphCache.splice(ti,1);\n\t\t\t\t}else{break;}\n\t\t\t}\n\t\t}\n\t}\n\tdraw(force){\n\t\tif((!force&&this.paused)||!this.enabled)return;\n\t\tthis._calcDanmakusPosition(force);\n\t\tthis.activeRendererMode.draw(force);\n\t\trequestAnimationFrame(()=>{this._checkNewDanmaku(force)});\n\t}\n\tremoveText(t){//remove the danmaku from screen\n\t\tthis.rendering.remove(t);\n\t}\n\tresize(){\n\t\tif(this.activeRendererMode)this.activeRendererMode.resize();\n\t\tthis.draw(true);\n\t}\n\t_clearScreen(forceFull){\n\t\tthis.activeRendererMode&&this.activeRendererMode.clear(forceFull);\n\t}\n\tclear(){//clear danmaku on the screen\n\t\tthis.rendering.clear();\n\t\tthis._clearScreen(true);\n\t}\n\trecheckIndexMark(t=this.frame.time){\n\t\tthis.indexMark=dichotomy(this.list,t,0,this.list.length-1,true);\n\t}\n\trate(r){\n\t\tif(this.activeRendererMode)this.activeRendererMode.rate(r);\n\t}\n\ttime(t=this.frame.time){//reset time,you should invoke it when the media has seeked to another time\n\t\tthis.recheckIndexMark(t);\n\t\tif(this.options.clearWhenTimeReset){this.clear();}\n\t\telse{this.resetTimeOfDanmakuOnScreen();}\n\t}\n\tresetTimeOfDanmakuOnScreen(cTime){\n\t\t//cause the position of the danmaku is based on time\n\t\t//and if you don't want these danmaku on the screen to disappear after seeking,their time should be reset\n\t\tif(cTime===undefined)cTime=this.frame.time;\n\t\tthis.DanmakuText.forEach(t=>{\n\t\t\tif(!t.danmaku)return;\n\t\t\tt.time=cTime-(this.danmakuMoveTime-t.time);\n\t\t});\n\t}\n\tdanmakuAt(x,y){//return a list of danmaku which covers this position\n\t\tconst list=[];\n\t\tif(!this.enabled)return list;\n\t\tthis.DanmakuText.forEach(t=>{\n\t\t\tif(!t.danmaku)return;\n\t\t\tif(t.style.x<=x && t.style.x+t.style.width>=x && t.style.y<=y && t.style.y+t.style.height>=y)\n\t\t\t\tlist.push(t.danmaku);\n\t\t});\n\t\treturn list;\n\t}\n\tenable(){//enable the plugin\n\t\tthis.setRendererMode(this.lastRendererMode);\n\t\tthis.frame.container.appendChild(this.container);\n\t\tif(this.frame.working)this.play();\n\t}\n\tdisable(){//disable the plugin\n\t\tthis.frame.container.removeChild(this.container);\n\t\tthis.pause();\n\t\tthis.clear();\n\t\tthis.setRendererMode(0);\n\t}\n\tset useImageBitmap(v){\n\t\tuseImageBitmap=(typeof createImageBitmap ==='function')?v:false;\n\t}\n\tget useImageBitmap(){return useImageBitmap;}\n}\n\n\nclass TextGraph{//code copied from CanvasObjLibrary\n\t_fontString='';\n\t_renderList;\n\t_cache;\n\t_bitmap;\n\tfont={};\n\ttime;\n\tstyle={};\n\tdrawn=false;//bool: \n\tdanmaku;\n\tremoveTime;//number: remove time of the danmaku\n\ttunnelNumber;//number: tunnel number in the tunner manager\n\ttunnelHeight;//number: tunnel height\n\testimatePadding;//number: padding of the canvas\n\tget text(){return this.danmaku.text;}\n\tconstructor(danmakuObj,font){\n\t\tthis._renderToCache=this._renderToCache.bind(this);\n\t\tdanmakuObj&&this.init(danmakuObj,font);\n\t}\n\tinit(d,font){\n\t\tthis.danmaku=d;\n\t\tthis.drawn=false;\n\t\tthis.time=d.time;\n\t\tthis.font=font;\n\t\tif(!this.font.lineHeight)this.font.lineHeight=(this.font.fontSize+2)||1;\n\t\tif(d.style.color){\n\t\t\tif(this.font.color && this.font.color[0]!=='#'){\n\t\t\t\tthis.font.color='#'+d.style.color;\n\t\t\t}\n\t\t}\n\t\tif(d.mode>1)this.font.textAlign='center';\n\t}\n\tprepare(async=false){//prepare text details\n\t\tif(!this._cache){\n\t\t\tthis._cache=document.createElement(\"canvas\");\n\t\t}\n\t\tlet ta=[];\n\t\t(this.font.fontStyle)&&ta.push(this.font.fontStyle);\n\t\t(this.font.fontVariant)&&ta.push(this.font.fontVariant);\n\t\t(this.font.fontWeight)&&ta.push(this.font.fontWeight);\n\t\tta.push(`${this.font.fontSize}px`);\n\t\t(this.font.fontFamily)&&ta.push(this.font.fontFamily);\n\t\tthis._fontString = ta.join(' ');\n\n\t\tconst canvas = this._cache,\n\t\t\tct = (canvas.ctx2d||(canvas.ctx2d=canvas.getContext(\"2d\")));\n\t\tct.font = this._fontString;\n\t\tthis._renderList = this.text.split(/\\n/g);\n\t\tthis.estimatePadding=Math.max(\n\t\t\tthis.font.shadowBlur+5+Math.max(Math.abs(this.font.shadowOffsetY),Math.abs(this.font.shadowOffsetX)),\n\t\t\tthis.font.strokeWidth+3\n\t\t);\n\t\tlet w = 0,tw,lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize;\n\t\tfor (let i = this._renderList.length; i -- ;) {\n\t\t\ttw = ct.measureText(this._renderList[i]).width;\n\t\t\t(tw>w)&&(w=tw);//max\n\t\t}\n\t\tcanvas.width = (this.style.width = w) + this.estimatePadding*2;\n\t\tcanvas.height = (this.style.height = this._renderList.length * lh)+ ((lh<this.font.fontSize)?this.font.fontSize*2:0) + this.estimatePadding*2;\n\n\t\tct.translate(this.estimatePadding, this.estimatePadding);\n\t\tif(async){\n\t\t\tUtils.requestIdleCallback(this._renderToCache);\n\t\t}else{\n\t\t\tthis._renderToCache();\n\t\t}\n\t}\n\t_renderToCache(){\n\t\tif(!this.danmaku)return;\n\t\tthis.render(this._cache.ctx2d);\n\t\tif(useImageBitmap){//use ImageBitmap\n\t\t\tif(this._bitmap){\n\t\t\t\tthis._bitmap.close();\n\t\t\t\tthis._bitmap=null;\n\t\t\t}\n\t\t\tcreateImageBitmap(this._cache).then(bitmap=>{\n\t\t\t\tthis._bitmap=bitmap;\n\t\t\t});\n\t\t}\n\t}\n\trender(ct){//render text\n\t\tif(!this._renderList)return;\n\t\tct.save();\n\t\tif(this.danmaku.highlight){\n\t\t\tct.fillStyle='rgba(255,255,255,0.3)';\n\t\t\tct.beginPath();\n\t\t\tct.rect(0,0,this.style.width,this.style.height);\n\t\t\tct.fill();\n\t\t}\n\t\tct.font=this._fontString;//set font\n\t\tct.textBaseline = 'middle';\n\t\tct.lineWidth = this.font.strokeWidth;\n\t\tct.fillStyle = this.font.color;\n\t\tct.strokeStyle = this.font.strokeColor;\n\t\tct.shadowBlur = this.font.shadowBlur;\n\t\tct.shadowColor= this.font.shadowColor;\n\t\tct.shadowOffsetX = this.font.shadowOffsetX;\n\t\tct.shadowOffsetY = this.font.shadowOffsetY;\n\t\tct.textAlign = this.font.textAlign;\n\t\tlet lh=(typeof this.font.lineHeight ==='number')?this.font.lineHeight:this.font.fontSize,\n\t\t\tx;\n\t\tswitch(this.font.textAlign){\n\t\t\tcase 'left':case 'start':{\n\t\t\t\tx=0;break;\n\t\t\t}\n\t\t\tcase 'center':{\n\t\t\t\tx=this.style.width/2;break;\n\t\t\t}\n\t\t\tcase 'right':case 'end':{\n\t\t\t\tx=this.style.width;\n\t\t\t}\n\t\t}\n\t\tfor (let i = this._renderList.length;i--;) {\n\t\t\tthis.font.strokeWidth&&ct.strokeText(this._renderList[i],x,lh*(i+0.5));\n\t\t\tthis.font.fill&&ct.fillText(this._renderList[i],x, lh*(i+0.5));\n\t\t}\n\t\tct.restore();\n\t\tthis._renderList=undefined;\n\t}\n\tdestructor(){\n\t\tthis._fontString=undefined;\n\t\tthis._renderList=undefined;\n\t\tthis.danmaku=undefined;\n\t\tthis.style=undefined;\n\t\tthis.font=undefined;\n\t\tif(this._bitmap){\n\t\t\tthis._bitmap.close();\n\t\t\tthis._bitmap=null;\n\t\t}\n\t}\n}\n\nconst tunnels=['right','left','bottom','top'];\nclass TunnelManager{\n\tconstructor(){\n\t\tthis.reset();\n\t}\n\treset(){\n\t\tthis.right={};\n\t\tthis.left={};\n\t\tthis.bottom={};\n\t\tthis.top={};\n\t}\n\tgetTunnel(tobj,cHeight){//get the tunnel index that can contain the danmaku of the sizes\n\t\tlet tunnel=this.tunnel(tobj.danmaku.mode),\n\t\t\tsize=tobj.style.height,\n\t\t\tti=0,\n\t\t\ttnum=-1;\n\t\tif(typeof size !=='number' || size<=0){\n\t\t\tconsole.error('Incorrect size:'+size);\n\t\t\tsize=24;\n\t\t}\n\t\tif(size>cHeight)return 0;\n\n\t\twhile(tnum<0){\n\t\t\tfor(let t=ti+size-1;ti<=t;){\n\t\t\t\tif(tunnel[ti]){//used\n\t\t\t\t\tti+=tunnel[ti].tunnelHeight;\n\t\t\t\t\tbreak;\n\t\t\t\t}else if((ti!==0)&&(ti%(cHeight-1))===0){//new page\n\t\t\t\t\tti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}else if(ti===t){//get\n\t\t\t\t\ttnum=ti-size+1;\n\t\t\t\t\tbreak;\n\t\t\t\t}else{\n\t\t\t\t\tti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttobj.tunnelNumber=tnum;\n\t\ttobj.tunnelHeight=(((tobj.style.y+size)>cHeight)?1:size);\n\t\tthis.addMark(tobj);\n\t\treturn tnum;\n\t}\n\taddMark(tobj){\n\t\tlet t=this.tunnel(tobj.danmaku.mode);\n\t\tif(!t[tobj.tunnelNumber])t[tobj.tunnelNumber]=tobj;\n\t}\n\tremoveMark(tobj){\n\t\tlet t,tun=tobj.tunnelNumber;\n\t\tif(tun>=0&&(t=this.tunnel(tobj.danmaku.mode))[tun]===tobj){\n\t\t\tdelete t[tun];\n\t\t\ttobj.tunnelNumber=-1;\n\t\t}\n\t}\n\ttunnel(id){\n\t\treturn this[tunnels[id]];\n\t}\n}\n\n\nclass RenderingDanmakuManager{\n\ttotalArea=0;\n\tonScreenArea=0;\n\tlimitArea=Infinity;//limit danmaku area on the screen(auto change)\n\ttunnelManager=new TunnelManager();\n\tconstructor(dText){//dText:TextDanmaku\n\t\tthis.dText=dText;\n\t\tif(dText.text2d.supported)this.timer=setInterval(()=>this.rendererModeCheck(),1500);\n\t}\n\tadd(t){\n\t\tif(t.danmaku.onScreen)return;\n\t\tt.danmaku.onScreen=true;\n\t\tthis.dText.DanmakuText.push(t);\n\t\tthis.totalArea+=t._cache.width*t._cache.height;//cumulate danmaku area\n\t\tthis.onScreenArea+=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\n\t\tthis.dText.activeRendererMode.newDanmaku(t);\n\t}\n\tremove(t){\n\t\tt.danmaku.onScreen=false;\n\t\tlet ind=this.dText.DanmakuText.indexOf(t);\n\t\tif(ind>=0){\n\t\t\tthis.dText.DanmakuText.splice(ind,1);\n\t\t\tthis.totalArea-=t._cache.width*t._cache.height;\n\t\t\tthis.onScreenArea-=Math.min(t._cache.width,this.dText.frame.width)*Math.min(t._cache.height,this.dText.frame.height);\n\t\t}\n\t\tthis.tunnelManager.removeMark(t);\n\t\tthis.dText.activeRendererMode.remove(t);\n\t\tthis.dText.activeRendererMode.deleteRelatedTextObject(t);\n\t\tt.removeTime=Date.now();\n\t\tt.danmaku=null;\n\t\tthis.dText.GraphCache.push(t);\n\t}\n\tclear(){\n\t\tfor(let i=0,T;i<this.dText.DanmakuText.length;i++){\n\t\t\tT=this.dText.DanmakuText[i];\n\t\t\tthis.remove(T);\n\t\t}\n\t\tthis.tunnelManager.reset();\n\t}\n\trendererModeCheck(){//auto shift rendering mode\n\t\tlet D=this.dText;\n\t\tif(!this.dText.options.autoShiftRenderingMode || D.paused)return;\n\t\tif(D.frame.fps<(D.frame.fpsLimit||60)*0.9){//when frame rate low\n\t\t\tif(this.limitArea>this.totalArea)this.limitArea=this.totalArea;//reduce area limit\n\t\t}else if(this.limitArea<this.totalArea){//increase area limit\n\t\t\tthis.limitArea=this.totalArea;\n\t\t}\n\t\tif(D.rendererMode===1 && this.totalArea>this.limitArea){//switch to canvas mode when fps low\n\t\t\tD.text2d.supported&&D.setRendererMode(2);\n\t\t}else if(D.rendererMode===2&& this.totalArea<this.limitArea*0.5){//recover to css mode when animation is fluent enough\n\t\t\tD.textCss.supported&&D.setRendererMode(1);\n\t\t}\n\t}\n}\n\nfunction dichotomy(arr,t,start,end,position=false){\n\tif(arr.length===0)return 0;\n\tlet m=start/* ,s=start,e=end */;\n\twhile(start <= end){//dichotomy\n\t\tm=(start+end)>>1;\n\t\tif(t<=arr[m].time)end=m-1;\n\t\telse{start=m+1;}\n\t}\n\tif(position){//find to top\n\t\twhile(start>0 && (arr[start-1].time===t))\n\t\t\tstart--;\n\t}else{//find to end\n\t\twhile(start<=end && (arr[start].time===t))\n\t\t\tstart++;\n\t}\n\treturn start;\n}\n\n\nexport default function init(DanmakuFrame){\n\tDanmakuFrame.addModule('TextDanmaku',TextDanmaku);\n};;","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\nclass textModuleTemplate{\n\tsupported=false;\n\tconstructor(dText){\n\t\tthis.dText=dText;\n\t}\n\tdraw(){}//draw call from danmaku-frame on every animation frame\n\trate(){}//playback rate\n\tpause(){}//the media is paused\n\tplay(){}//the media is starting\n\tclear(){}//clear all danmaku on screen\n\tresize(){}//the container is resized\n\tremove(){}//remove a danmaku freom the screen\n\tenable(){}//this module is enabled\n\tdisable(){}//this module is disabled\n\tnewDanmaku(){}//add danmaku to the screen\n\tdeleteRelatedTextObject(){}\n}\n\nexport default textModuleTemplate;\n","module.exports = require(\"core-js-pure/stable/array/is-array\");","module.exports = require(\"core-js-pure/stable/date/now\");","module.exports = require(\"core-js-pure/stable/instance/bind\");","module.exports = require(\"core-js-pure/stable/instance/concat\");","module.exports = require(\"core-js-pure/stable/instance/copy-within\");","module.exports = require(\"core-js-pure/stable/instance/fill\");","module.exports = require(\"core-js-pure/stable/instance/for-each\");","module.exports = require(\"core-js-pure/stable/instance/index-of\");","module.exports = require(\"core-js-pure/stable/instance/repeat\");","module.exports = require(\"core-js-pure/stable/instance/slice\");","module.exports = require(\"core-js-pure/stable/instance/sort\");","module.exports = require(\"core-js-pure/stable/instance/splice\");","module.exports = require(\"core-js-pure/stable/instance/starts-with\");","module.exports = require(\"core-js-pure/stable/instance/trim\");","module.exports = require(\"core-js-pure/stable/object/assign\");","module.exports = require(\"core-js-pure/stable/object/create\");","module.exports = require(\"core-js-pure/stable/object/define-property\");","module.exports = require(\"core-js-pure/stable/object/entries\");","module.exports = require(\"core-js-pure/stable/object/get-own-property-descriptor\");","module.exports = require(\"core-js-pure/stable/promise\");","module.exports = require(\"core-js-pure/stable/set-immediate\");","module.exports = require(\"core-js-pure/stable/set-interval\");","module.exports = require(\"core-js-pure/stable/set-timeout\");","module.exports = require(\"core-js-pure/features/array/from\");","module.exports = require(\"core-js-pure/features/array/is-array\");","module.exports = require(\"core-js-pure/features/get-iterator\");","module.exports = require(\"core-js-pure/features/instance/slice\");","module.exports = require(\"core-js-pure/features/is-iterable\");","module.exports = require(\"core-js-pure/features/object/create\");","module.exports = require(\"core-js-pure/features/object/define-property\");","module.exports = require(\"core-js-pure/features/object/get-own-property-descriptor\");","module.exports = require(\"core-js-pure/features/object/get-prototype-of\");","module.exports = require(\"core-js-pure/features/object/set-prototype-of\");","module.exports = require(\"core-js-pure/features/promise\");","module.exports = require(\"core-js-pure/features/reflect/get\");","module.exports = require(\"core-js-pure/features/symbol\");","module.exports = require(\"core-js-pure/features/symbol/iterator\");","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithHoles(arr) {\n  if (_Array$isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nvar arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n\n    _Object$defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var _Object$getOwnPropertyDescriptor = require(\"../core-js/object/get-own-property-descriptor\");\n\nvar _Reflect$get = require(\"../core-js/reflect/get\");\n\nvar superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && _Reflect$get) {\n    module.exports = _get = _Reflect$get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n\n      var desc = _Object$getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","var _Object$getPrototypeOf = require(\"../core-js/object/get-prototype-of\");\n\nvar _Object$setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nfunction _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var _Object$create = require(\"../core-js/object/create\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nvar _Symbol = require(\"../core-js/symbol\");\n\nfunction _iterableToArray(iter) {\n  if (typeof _Symbol !== \"undefined\" && _isIterable(Object(iter))) return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","var _getIterator = require(\"../core-js/get-iterator\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nvar _Symbol = require(\"../core-js/symbol\");\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof _Symbol === \"undefined\" || !_isIterable(Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","var _Object$setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nfunction _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var _Symbol$iterator = require(\"../core-js/symbol/iterator\");\n\nvar _Symbol = require(\"../core-js/symbol\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var _Array$from = require(\"../core-js/array/from\");\n\nvar _sliceInstanceProperty = require(\"../core-js/instance/slice\");\n\nvar arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context;\n\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","module.exports = require(\"regenerator-runtime\");\n","require('../../modules/es.string.iterator');\nrequire('../../modules/es.array.from');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Array.from;\n","require('../../modules/es.array.is-array');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Array.isArray;\n","require('../../../modules/es.array.concat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').concat;\n","require('../../../modules/es.array.copy-within');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').copyWithin;\n","require('../../../modules/es.array.fill');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').fill;\n","require('../../../modules/es.array.for-each');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').forEach;\n","require('../../../modules/es.array.index-of');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').indexOf;\n","require('../../../modules/es.array.slice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').slice;\n","require('../../../modules/es.array.sort');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').sort;\n","require('../../../modules/es.array.splice');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Array').splice;\n","require('../../modules/es.date.now');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Date.now;\n","require('../../../modules/es.function.bind');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('Function').bind;\n","var bind = require('../function/virtual/bind');\n\nvar FunctionPrototype = Function.prototype;\n\nmodule.exports = function (it) {\n  var own = it.bind;\n  return it === FunctionPrototype || (it instanceof Function && own === FunctionPrototype.bind) ? bind : own;\n};\n","var concat = require('../array/virtual/concat');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.concat;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.concat) ? concat : own;\n};\n","var copyWithin = require('../array/virtual/copy-within');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.copyWithin;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.copyWithin) ? copyWithin : own;\n};\n","var fill = require('../array/virtual/fill');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.fill;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.fill) ? fill : own;\n};\n","var indexOf = require('../array/virtual/index-of');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.indexOf;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.indexOf) ? indexOf : own;\n};\n","var repeat = require('../string/virtual/repeat');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.repeat;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.repeat) ? repeat : own;\n};\n","var slice = require('../array/virtual/slice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.slice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.slice) ? slice : own;\n};\n","var sort = require('../array/virtual/sort');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.sort;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.sort) ? sort : own;\n};\n","var splice = require('../array/virtual/splice');\n\nvar ArrayPrototype = Array.prototype;\n\nmodule.exports = function (it) {\n  var own = it.splice;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.splice) ? splice : own;\n};\n","var startsWith = require('../string/virtual/starts-with');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.startsWith;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.startsWith) ? startsWith : own;\n};\n","var trim = require('../string/virtual/trim');\n\nvar StringPrototype = String.prototype;\n\nmodule.exports = function (it) {\n  var own = it.trim;\n  return typeof it === 'string' || it === StringPrototype\n    || (it instanceof String && own === StringPrototype.trim) ? trim : own;\n};\n","require('../../modules/es.object.assign');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.assign;\n","require('../../modules/es.object.create');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nmodule.exports = function create(P, D) {\n  return Object.create(P, D);\n};\n","require('../../modules/es.object.define-property');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar defineProperty = module.exports = function defineProperty(it, key, desc) {\n  return Object.defineProperty(it, key, desc);\n};\n\nif (Object.defineProperty.sham) defineProperty.sham = true;\n","require('../../modules/es.object.entries');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.entries;\n","require('../../modules/es.object.get-own-property-descriptor');\nvar path = require('../../internals/path');\n\nvar Object = path.Object;\n\nvar getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {\n  return Object.getOwnPropertyDescriptor(it, key);\n};\n\nif (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;\n","require('../../modules/es.object.get-prototype-of');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.getPrototypeOf;\n","require('../../modules/es.object.set-prototype-of');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Object.setPrototypeOf;\n","require('../../modules/es.object.to-string');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\nrequire('../../modules/es.promise');\nrequire('../../modules/es.promise.all-settled');\nrequire('../../modules/es.promise.finally');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Promise;\n","require('../../modules/es.reflect.get');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Reflect.get;\n","require('../../../modules/es.string.repeat');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').repeat;\n","require('../../../modules/es.string.starts-with');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').startsWith;\n","require('../../../modules/es.string.trim');\nvar entryVirtual = require('../../../internals/entry-virtual');\n\nmodule.exports = entryVirtual('String').trim;\n","require('../../modules/es.array.concat');\nrequire('../../modules/es.object.to-string');\nrequire('../../modules/es.symbol');\nrequire('../../modules/es.symbol.async-iterator');\nrequire('../../modules/es.symbol.description');\nrequire('../../modules/es.symbol.has-instance');\nrequire('../../modules/es.symbol.is-concat-spreadable');\nrequire('../../modules/es.symbol.iterator');\nrequire('../../modules/es.symbol.match');\nrequire('../../modules/es.symbol.match-all');\nrequire('../../modules/es.symbol.replace');\nrequire('../../modules/es.symbol.search');\nrequire('../../modules/es.symbol.species');\nrequire('../../modules/es.symbol.split');\nrequire('../../modules/es.symbol.to-primitive');\nrequire('../../modules/es.symbol.to-string-tag');\nrequire('../../modules/es.symbol.unscopables');\nrequire('../../modules/es.math.to-string-tag');\nrequire('../../modules/es.json.to-string-tag');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Symbol;\n","require('../../modules/es.symbol.iterator');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\nvar WrappedWellKnownSymbolModule = require('../../internals/well-known-symbol-wrapped');\n\nmodule.exports = WrappedWellKnownSymbolModule.f('iterator');\n","var parent = require('../../es/array/from');\n\nmodule.exports = parent;\n","var parent = require('../../es/array/is-array');\n\nmodule.exports = parent;\n","require('../modules/web.dom-collections.iterator');\nrequire('../modules/es.string.iterator');\nvar getIterator = require('../internals/get-iterator');\n\nmodule.exports = getIterator;\n","var parent = require('../../es/instance/slice');\n\nmodule.exports = parent;\n","require('../modules/web.dom-collections.iterator');\nrequire('../modules/es.string.iterator');\nvar isIterable = require('../internals/is-iterable');\n\nmodule.exports = isIterable;\n","var parent = require('../../es/object/create');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/define-property');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/get-own-property-descriptor');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/get-prototype-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/set-prototype-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/promise');\nrequire('../../modules/esnext.aggregate-error');\n// TODO: Remove from `core-js@4`\nrequire('../../modules/esnext.promise.all-settled');\nrequire('../../modules/esnext.promise.try');\nrequire('../../modules/esnext.promise.any');\n\nmodule.exports = parent;\n","var parent = require('../../es/reflect/get');\n\nmodule.exports = parent;\n","var parent = require('../../es/symbol');\nrequire('../../modules/esnext.symbol.async-dispose');\nrequire('../../modules/esnext.symbol.dispose');\nrequire('../../modules/esnext.symbol.observable');\nrequire('../../modules/esnext.symbol.pattern-match');\n// TODO: Remove from `core-js@4`\nrequire('../../modules/esnext.symbol.replace-all');\n\nmodule.exports = parent;\n","var parent = require('../../es/symbol/iterator');\n\nmodule.exports = parent;\n","module.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name) {\n  if (!(it instanceof Constructor)) {\n    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n  } return it;\n};\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\nvar min = Math.min;\n\n// `Array.prototype.copyWithin` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","'use strict';\nvar toObject = require('../internals/to-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.fill` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n","'use strict';\nvar bind = require('../internals/function-bind-context');\nvar toObject = require('../internals/to-object');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\n// `Array.from` method implementation\n// https://tc39.github.io/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var C = typeof this == 'function' ? this : Array;\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = iteratorMethod.call(O);\n    next = iterator.next;\n    result = new C();\n    for (;!(step = next.call(iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty(result, index, value);\n    }\n  } else {\n    length = toLength(O.length);\n    result = new C(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else if (IS_EVERY) return false;  // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6)\n};\n","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\n\nvar defineProperty = Object.defineProperty;\nvar cache = {};\n\nvar thrower = function (it) { throw it; };\n\nmodule.exports = function (METHOD_NAME, options) {\n  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n  if (!options) options = {};\n  var method = [][METHOD_NAME];\n  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n  var argument0 = has(options, 0) ? options[0] : thrower;\n  var argument1 = has(options, 1) ? options[1] : undefined;\n\n  return cache[METHOD_NAME] = !!method && !fails(function () {\n    if (ACCESSORS && !DESCRIPTORS) return true;\n    var O = { length: -1 };\n\n    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n    else O[1] = 1;\n\n    method.call(O, argument0, argument1);\n  });\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","var anObject = require('../internals/an-object');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (error) {\n    var returnMethod = iterator['return'];\n    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));\n    throw error;\n  }\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n  }\n  Iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n","var path = require('../internals/path');\nvar has = require('../internals/has');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineProperty = require('../internals/object-define-property').f;\n\nmodule.exports = function (NAME) {\n  var Symbol = path.Symbol || (path.Symbol = {});\n  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {\n    value: wrappedWellKnownSymbolModule.f(NAME)\n  });\n};\n","var fails = require('../internals/fails');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !fails(function () {\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","var userAgent = require('../internals/engine-user-agent');\n\nmodule.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n","var path = require('../internals/path');\n\nmodule.exports = function (CONSTRUCTOR) {\n  return path[CONSTRUCTOR + 'Prototype'];\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","'use strict';\nvar global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar isForced = require('../internals/is-forced');\nvar path = require('../internals/path');\nvar bind = require('../internals/function-bind-context');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\n\nvar wrapConstructor = function (NativeConstructor) {\n  var Wrapper = function (a, b, c) {\n    if (this instanceof NativeConstructor) {\n      switch (arguments.length) {\n        case 0: return new NativeConstructor();\n        case 1: return new NativeConstructor(a);\n        case 2: return new NativeConstructor(a, b);\n      } return new NativeConstructor(a, b, c);\n    } return NativeConstructor.apply(this, arguments);\n  };\n  Wrapper.prototype = NativeConstructor.prototype;\n  return Wrapper;\n};\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var PROTO = options.proto;\n\n  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;\n\n  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});\n  var targetPrototype = target.prototype;\n\n  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n\n  for (key in source) {\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contains in native\n    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);\n\n    targetProperty = target[key];\n\n    if (USE_NATIVE) if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(nativeSource, key);\n      nativeProperty = descriptor && descriptor.value;\n    } else nativeProperty = nativeSource[key];\n\n    // export native or implementation\n    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];\n\n    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;\n\n    // bind timers to global for call from export context\n    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global);\n    // wrap global constructors for prevent changs in this version\n    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);\n    // make static versions for prototype methods\n    else if (PROTO && typeof sourceProperty == 'function') resultProperty = bind(Function.call, sourceProperty);\n    // default case\n    else resultProperty = sourceProperty;\n\n    // add a flag to not completely full polyfills\n    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(resultProperty, 'sham', true);\n    }\n\n    target[key] = resultProperty;\n\n    if (PROTO) {\n      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n      if (!has(path, VIRTUAL_PROTOTYPE)) {\n        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});\n      }\n      // export virtual prototype methods\n      path[VIRTUAL_PROTOTYPE][key] = sourceProperty;\n      // export real prototype methods\n      if (options.real && targetPrototype && !targetPrototype[key]) {\n        createNonEnumerableProperty(targetPrototype, key, sourceProperty);\n      }\n    }\n  }\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\nvar aFunction = require('../internals/a-function');\nvar isObject = require('../internals/is-object');\n\nvar slice = [].slice;\nvar factories = {};\n\nvar construct = function (C, argsLength, args) {\n  if (!(argsLength in factories)) {\n    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');\n  } return factories[argsLength](C, args);\n};\n\n// `Function.prototype.bind` method implementation\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = slice.call(arguments, 1);\n  var boundFunction = function bound(/* args... */) {\n    var args = partArgs.concat(slice.call(arguments));\n    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);\n  };\n  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;\n  return boundFunction;\n};\n","var path = require('../internals/path');\nvar global = require('../internals/global');\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n","var classof = require('../internals/classof');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var anObject = require('../internals/an-object');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nmodule.exports = function (it) {\n  var iteratorMethod = getIteratorMethod(it);\n  if (typeof iteratorMethod != 'function') {\n    throw TypeError(String(it) + ' is not iterable');\n  } return anObject(iteratorMethod.call(it));\n};\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  Function('return this')();\n","var hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = {};\n","var global = require('../internals/global');\n\nmodule.exports = function (a, b) {\n  var console = global.console;\n  if (console && console.error) {\n    arguments.length === 1 ? console.error(a) : console.error(a, b);\n  }\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","var store = require('../internals/shared-store');\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar objectHas = require('../internals/has');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = new WeakMap();\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var fails = require('../internals/fails');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","var classof = require('../internals/classof');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","module.exports = true;\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","var anObject = require('../internals/an-object');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, next, step;\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = AS_ENTRIES\n          ? boundFunction(anObject(step = iterable[index])[0], step[1])\n          : boundFunction(iterable[index]);\n        if (result && result instanceof Result) return result;\n      } return new Result(false);\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n  while (!(step = next.call(iterator)).done) {\n    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  } return new Result(false);\n};\n\niterate.stop = function (result) {\n  return new Result(true, result);\n};\n","'use strict';\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nif (IteratorPrototype == undefined) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar classof = require('../internals/classof-raw');\nvar macrotask = require('../internals/task').set;\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar IS_NODE = classof(process) == 'process';\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  } else if (MutationObserver && !IS_IOS) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    then = promise.then;\n    notify = function () {\n      then.call(promise, flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n}\n\nmodule.exports = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify();\n  } last = task;\n};\n","var global = require('../internals/global');\n\nmodule.exports = global.Promise;\n","var fails = require('../internals/fails');\n\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n","var global = require('../internals/global');\nvar inspectSource = require('../internals/inspect-source');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n","'use strict';\nvar aFunction = require('../internals/a-function');\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n};\n\n// 25.4.1.5 NewPromiseCapability(C)\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\n\nvar nativeAssign = Object.assign;\nvar defineProperty = Object.defineProperty;\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\nmodule.exports = !nativeAssign || fails(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject(arguments[index++]);\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : nativeAssign;\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;\n\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return nativeGetOwnPropertyNames(it);\n  } catch (error) {\n    return windowNames.slice();\n  }\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]'\n    ? getWindowNames(it)\n    : nativeGetOwnPropertyNames(toIndexedObject(it));\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","var has = require('../internals/has');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype : null;\n};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","'use strict';\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n","var anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.github.io/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.github.io/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n","module.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n","var anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar newPromiseCapability = require('../internals/new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var redefine = require('../internals/redefine');\n\nmodule.exports = function (target, src, options) {\n  for (var key in src) {\n    if (options && options.unsafe && target[key]) target[key] = src[key];\n    else redefine(target, key, src[key], options);\n  } return target;\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (target, key, value, options) {\n  if (options && options.enumerable) target[key] = value;\n  else createNonEnumerableProperty(target, key, value);\n};\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var global = require('../internals/global');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar definePropertyModule = require('../internals/object-define-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule.f;\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineProperty(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar defineProperty = require('../internals/object-define-property').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar has = require('../internals/has');\nvar toString = require('../internals/object-to-string');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC, SET_METHOD) {\n  if (it) {\n    var target = STATIC ? it : it.prototype;\n    if (!has(target, TO_STRING_TAG)) {\n      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });\n    }\n    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n      createNonEnumerableProperty(target, 'toString', toString);\n    }\n  }\n};\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.6.4',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n","var anObject = require('../internals/an-object');\nvar aFunction = require('../internals/a-function');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.github.io/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\n};\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var global = require('../internals/global');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\nvar bind = require('../internals/function-bind-context');\nvar html = require('../internals/html');\nvar createElement = require('../internals/document-create-element');\nvar IS_IOS = require('../internals/engine-is-ios');\n\nvar location = global.location;\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\n\nvar run = function (id) {\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global.postMessage(id + '', location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (classof(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    typeof postMessage == 'function' &&\n    !global.importScripts &&\n    !fails(post) &&\n    location.protocol !== 'file:'\n  ) {\n    defer = post;\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n","var toInteger = require('../internals/to-integer');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","var toInteger = require('../internals/to-integer');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n","var NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = NATIVE_SYMBOL\n  // eslint-disable-next-line no-undef\n  && !Symbol.sham\n  // eslint-disable-next-line no-undef\n  && typeof Symbol.iterator == 'symbol';\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nexports.f = wellKnownSymbol;\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar has = require('../internals/has');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name)) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];\n    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","'use strict';\nvar $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\nvar copyWithin = require('../internals/array-copy-within');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.copyWithin` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin\n$({ target: 'Array', proto: true }, {\n  copyWithin: copyWithin\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('copyWithin');\n","var $ = require('../internals/export');\nvar fill = require('../internals/array-fill');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n","'use strict';\nvar $ = require('../internals/export');\nvar forEach = require('../internals/array-for-each');\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {\n  forEach: forEach\n});\n","var $ = require('../internals/export');\nvar from = require('../internals/array-from');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.github.io/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var $ = require('../internals/export');\nvar isArray = require('../internals/is-array');\n\n// `Array.isArray` method\n// https://tc39.github.io/ecma262/#sec-array.isarray\n$({ target: 'Array', stat: true }, {\n  isArray: isArray\n});\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.github.io/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar fails = require('../internals/fails');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar test = [];\nvar nativeSort = test.sort;\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;\n\n// `Array.prototype.sort` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? nativeSort.call(toObject(this))\n      : nativeSort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toInteger = require('../internals/to-integer');\nvar toLength = require('../internals/to-length');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n","var $ = require('../internals/export');\n\n// `Date.now` method\n// https://tc39.github.io/ecma262/#sec-date.now\n$({ target: 'Date', stat: true }, {\n  now: function now() {\n    return new Date().getTime();\n  }\n});\n","var $ = require('../internals/export');\nvar bind = require('../internals/function-bind');\n\n// `Function.prototype.bind` method\n// https://tc39.github.io/ecma262/#sec-function.prototype.bind\n$({ target: 'Function', proto: true }, {\n  bind: bind\n});\n","var global = require('../internals/global');\nvar setToStringTag = require('../internals/set-to-string-tag');\n\n// JSON[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-json-@@tostringtag\nsetToStringTag(global.JSON, 'JSON', true);\n","var setToStringTag = require('../internals/set-to-string-tag');\n\n// Math[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-math-@@tostringtag\nsetToStringTag(Math, 'Math', true);\n","var $ = require('../internals/export');\nvar assign = require('../internals/object-assign');\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {\n  assign: assign\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar create = require('../internals/object-create');\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\n$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {\n  create: create\n});\n","var $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar objectDefinePropertyModile = require('../internals/object-define-property');\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\n$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {\n  defineProperty: objectDefinePropertyModile.f\n});\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.github.io/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });\nvar FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\n$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);\n  }\n});\n","var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toObject = require('../internals/to-object');\nvar nativeGetPrototypeOf = require('../internals/object-get-prototype-of');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\n$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {\n  getPrototypeOf: function getPrototypeOf(it) {\n    return nativeGetPrototypeOf(toObject(it));\n  }\n});\n\n","var $ = require('../internals/export');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n$({ target: 'Object', stat: true }, {\n  setPrototypeOf: setPrototypeOf\n});\n","// empty\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://github.com/tc39/proposal-promise-allSettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (e) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: e };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.github.io/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = typeof onFinally == 'function';\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// patch native Promise.prototype for native async functions\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar setSpecies = require('../internals/set-species');\nvar isObject = require('../internals/is-object');\nvar aFunction = require('../internals/a-function');\nvar anInstance = require('../internals/an-instance');\nvar classof = require('../internals/classof-raw');\nvar inspectSource = require('../internals/inspect-source');\nvar iterate = require('../internals/iterate');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar speciesConstructor = require('../internals/species-constructor');\nvar task = require('../internals/task').set;\nvar microtask = require('../internals/microtask');\nvar promiseResolve = require('../internals/promise-resolve');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar InternalStateModule = require('../internals/internal-state');\nvar isForced = require('../internals/is-forced');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\nvar PROMISE = 'Promise';\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar PromiseConstructor = NativePromise;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar $fetch = getBuiltIn('fetch');\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\nvar IS_NODE = classof(process) == 'process';\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\nvar FORCED = isForced(PROMISE, function () {\n  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);\n  if (!GLOBAL_CORE_JS_PROMISE) {\n    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n    // We can't detect it synchronously, so just check versions\n    if (V8_VERSION === 66) return true;\n    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;\n  }\n  // We need Promise#finally in the pure version for preventing prototype pollution\n  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = PromiseConstructor.resolve(1);\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES] = FakePromise;\n  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);\n});\n\nvar INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {\n  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });\n});\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\n\nvar notify = function (promise, state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  var chain = state.reactions;\n  microtask(function () {\n    var value = state.value;\n    var ok = state.state == FULFILLED;\n    var index = 0;\n    // variable length - can't use forEach\n    while (chain.length > index) {\n      var reaction = chain[index++];\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);\n            state.rejection = HANDLED;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // can throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (error) {\n        if (domain && !exited) domain.exit();\n        reject(error);\n      }\n    }\n    state.reactions = [];\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(promise, state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (handler = global['on' + name]) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (promise, state) {\n  task.call(global, function () {\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (promise, state) {\n  task.call(global, function () {\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, promise, state, unwrap) {\n  return function (value) {\n    fn(promise, state, value, unwrap);\n  };\n};\n\nvar internalReject = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(promise, state, true);\n};\n\nvar internalResolve = function (promise, state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          then.call(value,\n            bind(internalResolve, promise, wrapper, state),\n            bind(internalReject, promise, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(promise, wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(promise, state, false);\n    }\n  } catch (error) {\n    internalReject(promise, { done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromiseConstructor, PROMISE);\n    aFunction(executor);\n    Internal.call(this);\n    var state = getInternalState(this);\n    try {\n      executor(bind(internalResolve, this, state), bind(internalReject, this, state));\n    } catch (error) {\n      internalReject(this, state, error);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: [],\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n  Internal.prototype = redefineAll(PromiseConstructor.prototype, {\n    // `Promise.prototype.then` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.then\n    then: function then(onFulfilled, onRejected) {\n      var state = getInternalPromiseState(this);\n      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = IS_NODE ? process.domain : undefined;\n      state.parent = true;\n      state.reactions.push(reaction);\n      if (state.state != PENDING) notify(this, state, false);\n      return reaction.promise;\n    },\n    // `Promise.prototype.catch` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, promise, state);\n    this.reject = bind(internalReject, promise, state);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && typeof NativePromise == 'function') {\n    nativeThen = NativePromise.prototype.then;\n\n    // wrap native Promise#then for native async functions\n    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {\n      var that = this;\n      return new PromiseConstructor(function (resolve, reject) {\n        nativeThen.call(that, resolve, reject);\n      }).then(onFulfilled, onRejected);\n    // https://github.com/zloirock/core-js/issues/640\n    }, { unsafe: true });\n\n    // wrap fetch result\n    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {\n      // eslint-disable-next-line no-unused-vars\n      fetch: function fetch(input /* , init */) {\n        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));\n      }\n    });\n  }\n}\n\n$({ global: true, wrap: true, forced: FORCED }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n\nPromiseWrapper = getBuiltIn(PROMISE);\n\n// statics\n$({ target: PROMISE, stat: true, forced: FORCED }, {\n  // `Promise.reject` method\n  // https://tc39.github.io/ecma262/#sec-promise.reject\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    capability.reject.call(undefined, r);\n    return capability.promise;\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {\n  // `Promise.resolve` method\n  // https://tc39.github.io/ecma262/#sec-promise.resolve\n  resolve: function resolve(x) {\n    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {\n  // `Promise.all` method\n  // https://tc39.github.io/ecma262/#sec-promise.all\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        $promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  },\n  // `Promise.race` method\n  // https://tc39.github.io/ecma262/#sec-promise.race\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      iterate(iterable, function (promise) {\n        $promiseResolve.call(C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","var $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar anObject = require('../internals/an-object');\nvar has = require('../internals/has');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\n\n// `Reflect.get` method\n// https://tc39.github.io/ecma262/#sec-reflect.get\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var descriptor, prototype;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value')\n    ? descriptor.value\n    : descriptor.get === undefined\n      ? undefined\n      : descriptor.get.call(receiver);\n  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);\n}\n\n$({ target: 'Reflect', stat: true }, {\n  get: get\n});\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n","var $ = require('../internals/export');\nvar repeat = require('../internals/string-repeat');\n\n// `String.prototype.repeat` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\n$({ target: 'String', proto: true }, {\n  repeat: repeat\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar toLength = require('../internals/to-length');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\nvar IS_PURE = require('../internals/is-pure');\n\nvar nativeStartsWith = ''.startsWith;\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = String(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith\n      ? nativeStartsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.asyncIterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.asynciterator\ndefineWellKnownSymbol('asyncIterator');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.hasInstance` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.hasinstance\ndefineWellKnownSymbol('hasInstance');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.isConcatSpreadable` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable\ndefineWellKnownSymbol('isConcatSpreadable');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar IS_PURE = require('../internals/is-pure');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\nvar fails = require('../internals/fails');\nvar has = require('../internals/has');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar nativeObjectCreate = require('../internals/object-create');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar shared = require('../internals/shared');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar uid = require('../internals/uid');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineWellKnownSymbol = require('../internals/define-well-known-symbol');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar InternalStateModule = require('../internals/internal-state');\nvar $forEach = require('../internals/array-iteration').forEach;\n\nvar HIDDEN = sharedKey('hidden');\nvar SYMBOL = 'Symbol';\nvar PROTOTYPE = 'prototype';\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(SYMBOL);\nvar ObjectPrototype = Object[PROTOTYPE];\nvar $Symbol = global.Symbol;\nvar $stringify = getBuiltIn('JSON', 'stringify');\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\nvar nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\nvar AllSymbols = shared('symbols');\nvar ObjectPrototypeSymbols = shared('op-symbols');\nvar StringToSymbolRegistry = shared('string-to-symbol-registry');\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\nvar WellKnownSymbolsStore = shared('wks');\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDescriptor = DESCRIPTORS && fails(function () {\n  return nativeObjectCreate(nativeDefineProperty({}, 'a', {\n    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (O, P, Attributes) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];\n  nativeDefineProperty(O, P, Attributes);\n  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {\n    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);\n  }\n} : nativeDefineProperty;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);\n  setInternalState(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!DESCRIPTORS) symbol.description = description;\n  return symbol;\n};\n\nvar isSymbol = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return Object(it) instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(O, P, Attributes) {\n  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n  anObject(O);\n  var key = toPrimitive(P, true);\n  anObject(Attributes);\n  if (has(AllSymbols, key)) {\n    if (!Attributes.enumerable) {\n      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));\n      O[HIDDEN][key] = true;\n    } else {\n      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(O, key, Attributes);\n  } return nativeDefineProperty(O, key, Attributes);\n};\n\nvar $defineProperties = function defineProperties(O, Properties) {\n  anObject(O);\n  var properties = toIndexedObject(Properties);\n  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n  $forEach(keys, function (key) {\n    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);\n  });\n  return O;\n};\n\nvar $create = function create(O, Properties) {\n  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(V) {\n  var P = toPrimitive(V, true);\n  var enumerable = nativePropertyIsEnumerable.call(this, P);\n  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;\n  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n  var it = toIndexedObject(O);\n  var key = toPrimitive(P, true);\n  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;\n  var descriptor = nativeGetOwnPropertyDescriptor(it, key);\n  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {\n    descriptor.enumerable = true;\n  }\n  return descriptor;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(O) {\n  var names = nativeGetOwnPropertyNames(toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);\n  });\n  return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(O) {\n  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;\n  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {\n      result.push(AllSymbols[key]);\n    }\n  });\n  return result;\n};\n\n// `Symbol` constructor\n// https://tc39.github.io/ecma262/#sec-symbol-constructor\nif (!NATIVE_SYMBOL) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');\n    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var tag = uid(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n    };\n    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  redefine($Symbol, 'withoutSetter', function (description) {\n    return wrap(uid(description), description);\n  });\n\n  propertyIsEnumerableModule.f = $propertyIsEnumerable;\n  definePropertyModule.f = $defineProperty;\n  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;\n  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;\n\n  wrappedWellKnownSymbolModule.f = function (name) {\n    return wrap(wellKnownSymbol(name), name);\n  };\n\n  if (DESCRIPTORS) {\n    // https://github.com/tc39/proposal-Symbol-description\n    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n    if (!IS_PURE) {\n      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });\n    }\n  }\n}\n\n$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {\n  Symbol: $Symbol\n});\n\n$forEach(objectKeys(WellKnownSymbolsStore), function (name) {\n  defineWellKnownSymbol(name);\n});\n\n$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Symbol.for` method\n  // https://tc39.github.io/ecma262/#sec-symbol.for\n  'for': function (key) {\n    var string = String(key);\n    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n    var symbol = $Symbol(string);\n    StringToSymbolRegistry[string] = symbol;\n    SymbolToStringRegistry[symbol] = string;\n    return symbol;\n  },\n  // `Symbol.keyFor` method\n  // https://tc39.github.io/ecma262/#sec-symbol.keyfor\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');\n    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  },\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {\n  // `Object.create` method\n  // https://tc39.github.io/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // `Object.getOwnPropertySymbols` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\n$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return getOwnPropertySymbolsModule.f(toObject(it));\n  }\n});\n\n// `JSON.stringify` method behavior with symbols\n// https://tc39.github.io/ecma262/#sec-json.stringify\nif ($stringify) {\n  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {\n    var symbol = $Symbol();\n    // MS Edge converts symbol values to JSON as {}\n    return $stringify([symbol]) != '[null]'\n      // WebKit converts symbol values to JSON as null\n      || $stringify({ a: symbol }) != '{}'\n      // V8 throws on boxed symbols\n      || $stringify(Object(symbol)) != '{}';\n  });\n\n  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {\n    // eslint-disable-next-line no-unused-vars\n    stringify: function stringify(it, replacer, space) {\n      var args = [it];\n      var index = 1;\n      var $replacer;\n      while (arguments.length > index) args.push(arguments[index++]);\n      $replacer = replacer;\n      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n      if (!isArray(replacer)) replacer = function (key, value) {\n        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n        if (!isSymbol(value)) return value;\n      };\n      args[1] = replacer;\n      return $stringify.apply(null, args);\n    }\n  });\n}\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive\nif (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {\n  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n}\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag($Symbol, SYMBOL);\n\nhiddenKeys[HIDDEN] = true;\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.matchAll` well-known symbol\ndefineWellKnownSymbol('matchAll');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.match` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.match\ndefineWellKnownSymbol('match');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.replace` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.replace\ndefineWellKnownSymbol('replace');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.search` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.search\ndefineWellKnownSymbol('search');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.species` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.species\ndefineWellKnownSymbol('species');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.split` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.split\ndefineWellKnownSymbol('split');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toStringTag` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.tostringtag\ndefineWellKnownSymbol('toStringTag');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.unscopables` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.unscopables\ndefineWellKnownSymbol('unscopables');\n","'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar create = require('../internals/object-create');\nvar defineProperty = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar iterate = require('../internals/iterate');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar setInternalState = InternalStateModule.set;\nvar getInternalAggregateErrorState = InternalStateModule.getterFor('AggregateError');\n\nvar $AggregateError = function AggregateError(errors, message) {\n  var that = this;\n  if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);\n  if (setPrototypeOf) {\n    that = setPrototypeOf(new Error(message), getPrototypeOf(that));\n  }\n  var errorsArray = [];\n  iterate(errors, errorsArray.push, errorsArray);\n  if (DESCRIPTORS) setInternalState(that, { errors: errorsArray, type: 'AggregateError' });\n  else that.errors = errorsArray;\n  if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));\n  return that;\n};\n\n$AggregateError.prototype = create(Error.prototype, {\n  constructor: createPropertyDescriptor(5, $AggregateError),\n  message: createPropertyDescriptor(5, ''),\n  name: createPropertyDescriptor(5, 'AggregateError')\n});\n\nif (DESCRIPTORS) defineProperty.f($AggregateError.prototype, 'errors', {\n  get: function () {\n    return getInternalAggregateErrorState(this).errors;\n  },\n  configurable: true\n});\n\n$({ global: true }, {\n  AggregateError: $AggregateError\n});\n","// TODO: Remove from `core-js@4`\nrequire('./es.promise.all-settled.js');\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar getBuiltIn = require('../internals/get-built-in');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\nvar PROMISE_ANY_ERROR = 'No one promise resolved';\n\n// `Promise.any` method\n// https://github.com/tc39/proposal-promise-any\n$({ target: 'Promise', stat: true }, {\n  any: function any(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var errors = [];\n      var counter = 0;\n      var remaining = 1;\n      var alreadyResolved = false;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyRejected = false;\n        errors.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyResolved = true;\n          resolve(value);\n        }, function (e) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyRejected = true;\n          errors[index] = e;\n          --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));\n        });\n      });\n      --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\n\n// `Promise.try` method\n// https://github.com/tc39/proposal-promise-try\n$({ target: 'Promise', stat: true }, {\n  'try': function (callbackfn) {\n    var promiseCapability = newPromiseCapabilityModule.f(this);\n    var result = perform(callbackfn);\n    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);\n    return promiseCapability.promise;\n  }\n});\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.asyncDispose` well-known symbol\n// https://github.com/tc39/proposal-using-statement\ndefineWellKnownSymbol('asyncDispose');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.dispose` well-known symbol\n// https://github.com/tc39/proposal-using-statement\ndefineWellKnownSymbol('dispose');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.observable` well-known symbol\n// https://github.com/tc39/proposal-observable\ndefineWellKnownSymbol('observable');\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.patternMatch` well-known symbol\n// https://github.com/tc39/proposal-pattern-matching\ndefineWellKnownSymbol('patternMatch');\n","// TODO: remove from `core-js@4`\nvar defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\ndefineWellKnownSymbol('replaceAll');\n","require('./es.array.iterator');\nvar DOMIterables = require('../internals/dom-iterables');\nvar global = require('../internals/global');\nvar classof = require('../internals/classof');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {\n    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n  }\n  Iterators[COLLECTION_NAME] = Iterators.Array;\n}\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar task = require('../internals/task');\n\nvar FORCED = !global.setImmediate || !global.clearImmediate;\n\n// http://w3c.github.io/setImmediate/\n$({ global: true, bind: true, enumerable: true, forced: FORCED }, {\n  // `setImmediate` method\n  // http://w3c.github.io/setImmediate/#si-setImmediate\n  setImmediate: task.set,\n  // `clearImmediate` method\n  // http://w3c.github.io/setImmediate/#si-clearImmediate\n  clearImmediate: task.clear\n});\n","var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\n\nvar wrap = function (scheduler) {\n  return function (handler, timeout /* , ...arguments */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : undefined;\n    return scheduler(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);\n    } : handler, timeout);\n  };\n};\n\n// ie9- setTimeout & setInterval additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n$({ global: true, bind: true, forced: MSIE }, {\n  // `setTimeout` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\n  setTimeout: wrap(global.setTimeout),\n  // `setInterval` method\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\n  setInterval: wrap(global.setInterval)\n});\n","var parent = require('../../../es/array/virtual/for-each');\n\nmodule.exports = parent;\n","var parent = require('../../es/date/now');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/bind');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/concat');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/copy-within');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/fill');\n\nmodule.exports = parent;\n","require('../../modules/web.dom-collections.iterator');\nvar forEach = require('../array/virtual/for-each');\nvar classof = require('../../internals/classof');\nvar ArrayPrototype = Array.prototype;\n\nvar DOMIterables = {\n  DOMTokenList: true,\n  NodeList: true\n};\n\nmodule.exports = function (it) {\n  var own = it.forEach;\n  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.forEach)\n    // eslint-disable-next-line no-prototype-builtins\n    || DOMIterables.hasOwnProperty(classof(it)) ? forEach : own;\n};\n","var parent = require('../../es/instance/index-of');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/repeat');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/sort');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/splice');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/starts-with');\n\nmodule.exports = parent;\n","var parent = require('../../es/instance/trim');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/assign');\n\nmodule.exports = parent;\n","var parent = require('../../es/object/entries');\n\nmodule.exports = parent;\n","var parent = require('../../es/promise');\n\nmodule.exports = parent;\n","require('../modules/web.immediate');\nvar path = require('../internals/path');\n\nmodule.exports = path.setImmediate;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setInterval;\n","require('../modules/web.timers');\nvar path = require('../internals/path');\n\nmodule.exports = path.setTimeout;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\nCopyright luojia@luojia.me\nLGPL license\n*/\n'use strict';\n\nimport {NyaPCommon,\n\t\tDomTools,\n\t\tUtils\n} from './NyaPCommon.js';\nconst O2H=DomTools.Object2HTML;\n\n\n//NyaP options\nconst NyaPOptions={\n}\n\n//normal player\nclass NyaP extends NyaPCommon{\n\tget icons(){return this.opt.icons;}\n\tconstructor(opt){\n\t\tsuper(Utils.deepAssign({},NyaPOptions,opt));\n\t\topt=this.opt;\n\t\tconst NP=this,\n\t\t\t_t=this._t,\n\t\t\t$=this.$,\n\t\t\tvideo=this.video;\n\t\t//set icons\n\t\tfunction icon(name,event,attr={},extopt){\n\t\t\tconst ico=opt.icons[name];\n\t\t\treturn O2H({_:'span',event,attr,prop:{id:`icon_span_${name}`,\n\t\t\t\tinnerHTML:`<svg viewBox=\"0 0 ${ico[0]} ${ico[1]}\" height=${extopt?.height||ico[1]} width=${extopt?.width||ico[0]} id=\"icon_${name}\"\">${ico[2]}</svg>`}});\n\t\t}\n\t\t\n\t\tthis.stat('creating_player');\n\n\t\t//create player elements\n\t\tNP._.player=O2H({\n\t\t\t_:'div',attr:{class:'NyaP',id:'NyaP',tabindex:0},child:[\n\t\t\t\tNP.videoFrame,\n\t\t\t\t{_:'div',attr:{id:'controls'},child:[\n\t\t\t\t\t{_:'div',attr:{id:'control'},child:[\n\t\t\t\t\t\t{_:'span',attr:{id:'control_left'},child:[\n\t\t\t\t\t\t\ticon('play',{click:e=>NP.playToggle()},{title:_t('play')}),\n\t\t\t\t\t\t]},\n\t\t\t\t\t\t{_:'span',attr:{id:'control_center'},child:[\n\t\t\t\t\t\t\t{_:'div',prop:{id:'progress_info'},child:[\n\t\t\t\t\t\t\t\t{_:'span',child:[\n\t\t\t\t\t\t\t\t\t{_:'canvas',prop:{id:'progress',pad:10}},\n\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'time'},child:[\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'current_time'},child:['00:00']},\n\t\t\t\t\t\t\t\t\t'/',\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'total_time'},child:['00:00']},\n\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t]},\n\t\t\t\t\t\t{_:'span',attr:{id:'control_right'},child:[\n\t\t\t\t\t\t\ticon('addDanmaku',{click:e=>NP.danmakuInput()},{title:_t('danmaku input(Enter)')}),\n\t\t\t\t\t\t\ticon('danmakuToggle',{click:e=>NP.Danmaku.toggle()},{title:_t('danmaku toggle(D)'),class:'active_icon'}),\n\t\t\t\t\t\t\ticon('volume',{},{title:`${_t('volume')}:(${video.muted?_t('muted'):(video.volume*100|0)+'%'})([shift]+↑↓)(${_t('wheeling')})`}),\n\t\t\t\t\t\t\ticon('loop',{click:e=>{video.loop=!video.loop;}},{title:_t('loop')+'(L)'}),\n\t\t\t\t\t\t\t{_:'span',prop:{id:'player_mode'},child:[\n\t\t\t\t\t\t\t\ticon('fullScreen',{click:e=>NP.playerMode('fullScreen')},{title:_t('full screen(F)')}),\n\t\t\t\t\t\t\t\ticon('fullPage',{click:e=>NP.playerMode('fullPage')},{title:_t('full page(P)')})\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t]},\n\t\t\t\t\t]}\n\t\t\t\t]},\n\t\t\t\t{_:'div',prop:{id:'danmaku_input_frame',style:\"display:none;\"},child:[\n\t\t\t\t\t{_:'span',prop:{id:'danmaku_style'},child:[\n\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_style_pannel'},child:[\n\t\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_color_box'}},\n\t\t\t\t\t\t\t{_:'input',attr:{id:'danmaku_color',placeholder:_t('hex color'),maxlength:\"6\"},event:{keypress:e=>{}}},\n\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_mode_box'}},\n\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_size_box'}},\n\t\t\t\t\t\t]},\n\t\t\t\t\t\ticon('danmakuStyle',undefined,undefined,{width:\"2em\",height:\"2em\"}),\n\t\t\t\t\t]},\n\t\t\t\t\t{_:'input',attr:{id:'danmaku_input',placeholder:_t('Input danmaku here')}},\n\t\t\t\t\t{_:'span',prop:{id:'danmaku_submit',innerHTML:_t('Send')}},\n\t\t\t\t]},\n\t\t\t]\n\t\t});\n\n\n\t\t//progress\n\t\tsetTimeout(()=>{//add resize event\n\t\t\tDomTools.resizeEvent.observe($('#control'));\n\t\t\tDomTools.addEvents($('#control'),{\n\t\t\t\tresize:e=>NP.resizeProgress(),\n\t\t\t});\n\t\t\tNP.resizeProgress();\n\t\t},0);\n\t\tNP._.progressContext=$('#progress').getContext('2d');\n\n\t\t//events\n\t\tconst events={\n\t\t\tmain_video:{\n\t\t\t\tplaying:e=>{\n\t\t\t\t\tNP._iconActive('play',true);\n\t\t\t\t\tif(this.$('#danmaku_input_frame').offsetHeight){\n\t\t\t\t\t\tthis.danmakuInput(false);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tpause:e=>{\n\t\t\t\t\tNP._iconActive('play',false);\n\t\t\t\t},\n\t\t\t\ttimeupdate:(e)=>{\n\t\t\t\t\tif(Date.now()-NP._.lastTimeUpdate <30)return;\n\t\t\t\t\tNP._setDisplayTime(Utils.formatTime(video.currentTime,video.duration));\n\t\t\t\t\tNP.drawProgress();\n\t\t\t\t\tNP._.lastTimeUpdate=Date.now();\n\t\t\t\t},\n\t\t\t\tloadedmetadata:e=>{\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\n\t\t\t\t},\n\t\t\t\tvolumechange:e=>{\n\t\t\t\t\t//show volume msg\n\t\t\t\t\tNP._.volumeBox.renew(`${_t('volume')}:${(video.volume*100).toFixed(0)}%`+`${video.muted?('('+_t('muted')+')'):''}`,3000);\n\t\t\t\t\t//change icon style\n\t\t\t\t\tDomTools.setAttrs($('#volume_circle'),{'stroke-dasharray':`${video.volume*12*Math.PI} 90`,style:`fill-opacity:${video.muted?.2:.6}!important`});\n\t\t\t\t\t//change icon tip\n\t\t\t\t\t$('#icon_span_volume').setAttribute('title',`${_t('volume')}:(${video.muted?_t('muted'):((video.volume*100|0)+'%')})([shift]+↑↓)(${_t('wheeling')})`);\n\t\t\t\t},\n\t\t\t\tprogress:e=>NP.drawProgress(),\n\t\t\t\tclick:e=>NP.playToggle(),\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\n\t\t\t\terror:()=>{\n\t\t\t\t\tNP.msg(`视频加载错误`,'error');\n\t\t\t\t\tthis.log('video error','error');\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_container:{\n\t\t\t\tclick:e=>NP.playToggle(),\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\n\t\t\t},\n\t\t\tprogress:{\n\t\t\t\t'mousemove,click':e=>{\n\t\t\t\t\tlet t=e.target,\n\t\t\t\t\t\tpre=Utils.clamp((e.offsetX-t.pad)/(t.offsetWidth-2*t.pad),0,1);\n\t\t\t\t\tif(e.type==='mousemove'){\n\t\t\t\t\t\tNP._.progressX=e.offsetX;NP.drawProgress();\n\t\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(pre*video.duration,video.duration));\t\n\t\t\t\t\t}else if(e.type==='click'){\n\t\t\t\t\t\tvideo.currentTime=pre*video.duration;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmouseout:e=>{\n\t\t\t\t\tNP._.progressX=undefined;NP.drawProgress();\n\t\t\t\t\tNP._setDisplayTime(null,Utils.formatTime(video.duration,video.duration));\n\t\t\t\t},\n\t\t\t},\n\t\t\tdanmaku_style_pannel:{\n\t\t\t\tclick:e=>{if(e.target.tagName!=='INPUT')setImmediate(a=>NP.$('#danmaku_input').focus())},\n\t\t\t},\n\t\t\tdanmaku_color:{\n\t\t\t\t'input,change':e=>{\n\t\t\t\t\tlet i=e.target,c=NP.Danmaku.isVaildColor(i.value);\n\t\t\t\t\tif(c){//match valid hex color code\n\t\t\t\t\t\ti.style.backgroundColor=`#${c}`;\n\t\t\t\t\t\tNP._.danmakuColor=c;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tNP._.danmakuColor=undefined;\n\t\t\t\t\t\tc=NP.Danmaku.isVaildColor(NP.opt.danmaku.defaultDanmakuColor);\n\t\t\t\t\t\ti.style.backgroundColor=c?`#${c}`:'';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ticon_span_volume:{\n\t\t\t\tclick:e=>video.muted=!video.muted,\n\t\t\t\twheel:e=>{\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tlet d=e.wheelDeltaY;\n\t\t\t\t\tif(e.shiftKey)d=d>0?10:-10;\n\t\t\t\t\tvideo.volume=Utils.clamp(video.volume+d/900,0,1);\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_input:{\n\t\t\t\tkeydown:e=>{if(e.key==='Enter'){NP.send();}else if(e.key==='Escape'){NP.danmakuInput(false);}}\n\t\t\t},\n\t\t\tdanmaku_submit:{\n\t\t\t\tclick:e=>NP.send(),\n\t\t\t},\n\t\t\tdanmaku_mode_box:{\n\t\t\t\tclick:e=>{\n\t\t\t\t\tlet t=e.target;\n\t\t\t\t\tif(t.id.startsWith('icon_span_danmakuMode')){\n\t\t\t\t\t\tlet m=1*t.id.match(/\\d$/)[0];\n\t\t\t\t\t\tif(NP._.danmakuMode!==undefined)\n\t\t\t\t\t\t\t$(`#icon_span_danmakuMode${NP._.danmakuMode}`).classList.remove('active');\n\t\t\t\t\t\t$(`#icon_span_danmakuMode${m}`).classList.add('active');\n\t\t\t\t\t\tNP._.danmakuMode=m;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_size_box:{\n\t\t\t\tclick:e=>{\n\t\t\t\t\tlet t=e.target;\n\t\t\t\t\tif(!t.size)return;\n\t\t\t\t\tUtils.toArray($('#danmaku_size_box').childNodes).forEach(sp=>{\n\t\t\t\t\t\tif(NP._.danmakuSize===sp.size)sp.classList.remove('active');\n\t\t\t\t\t});\n\t\t\t\t\tt.classList.add('active');\n\t\t\t\t\tNP._.danmakuSize=t.size;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdanmaku_color_box:{\n\t\t\t\tclick:e=>{\n\t\t\t\t\tif(e.target.color){\n\t\t\t\t\t\t$('#danmaku_color').value=e.target.color;\n\t\t\t\t\t\t$('#danmaku_color').dispatchEvent(new Event('change'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t\tfor(let eleid in events){//add events to elements\n\t\t\tlet el=$(`#${eleid}`);\n\t\t\tif(!el)continue;\n\t\t\tlet eves=events[eleid];\n\t\t\teves&&DomTools.addEvents($(`#${eleid}`),eves);\n\t\t}\n\t\tDomTools.addEvents(this,{\n\t\t\tdanmakuFrameToggle:bool=>NP._iconActive('danmakuToggle',bool),//listen danmakuToggle event to change button style\n\t\t\tplayerModeChange:mode=>{\n\t\t\t\t['fullPage','fullScreen'].forEach(m=>{\n\t\t\t\t\tNP._iconActive(m,mode===m);\n\t\t\t\t});\n\t\t\t},\n\t\t\tvideo_loopChange:value=>NP._iconActive('loop',value),\n\t\t});\n\t\tDomTools.addEvents(this._.player,{\n\t\t\tkeydown:e=>NP._playerKeyHandle(e),\n\t\t\tmousemove:e=>{\n\t\t\t\tthis._userActiveWatcher(true);\n\t\t\t}\n\t\t});\n\t\tDomTools.addEvents(document,{\n\t\t\t'fullscreenchange,mozfullscreenchange,webkitfullscreenchange,msfullscreenchange':e=>{\n\t\t\t\tif(NP.currentPlayerMode=='fullScreen' && !DomTools.isFullscreen())\n\t\t\t\t\tNP.playerMode('normal');\n\t\t\t}\n\t\t});\n\n\n\t\t\n\t\t//danmaku ui\n\t\tif(this._danmakuEnabled){\n\t\t\t//danmaku sizes\n\t\t\topt.uiOptions.danmakuSizes&&opt.uiOptions.danmakuSizes.forEach((s,ind)=>{\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`font-size:${12+ind*3}px;`,title:s},prop:{size:s},child:['A']});\n\t\t\t\t$('#danmaku_size_box').appendChild(e);\n\t\t\t\tif(s===opt?.uiOptions?.danmakuSize){//click specified button\n\t\t\t\t\te.click();\n\t\t\t\t}\n\t\t\t});\n\t\t\t//danmaku colors\n\t\t\topt.uiOptions.danmakuColors&&opt.uiOptions.danmakuColors.forEach(c=>{\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`background-color:#${c};`,title:c},prop:{color:c}});\n\t\t\t\t$('#danmaku_color_box').appendChild(e);\n\t\t\t});\n\t\t\tif(opt.uiOptions?.danmakuColor){//set default color\n\t\t\t\t$('#danmaku_color').value=opt.uiOptions.danmakuColor;\n\t\t\t}\n\t\t\t//danmaku modes\n\t\t\topt.uiOptions.danmakuModes&&opt.uiOptions.danmakuModes.forEach(m=>{\n\t\t\t\tlet e=icon(`danmakuMode${m}`);\n\t\t\t\t$('#danmaku_mode_box').appendChild(e);\n\t\t\t\tif(m===opt?.uiOptions?.danmakuMode){//click specified button\n\t\t\t\t\te.click();\n\t\t\t\t}\n\t\t\t});\n\t\t}else{\n\t\t\tthis.$$('[id*=danmaku]').forEach(el=>{//remove danmaku buttons\n\t\t\t\tel.parentNode,removeChild(el);\n\t\t\t});\n\t\t}\n\t\t\n\t\t//put into the container\n\t\tif(opt.playerContainer instanceof HTMLElement)\n\t\t\topt.playerContainer.appendChild(NP.player);\n\n\t\tthis.statResult('creating_player');\n\t}\n\t_userActiveWatcher(active=false){//watch user active,for auto hiding ui\n\t\tlet delay=5000,t=Date.now();\n\t\tif(active){\n\t\t\tthis._.lastUserActive=t;\n\t\t\tif(this._.userInactive){\n\t\t\t\tthis._.userInactive=false;\n\t\t\t\tthis.player.classList.remove('user-inactive');\n\t\t\t}\n\t\t}\n\t\tif(this._.userActiveTimer)return;\n\t\tthis._.userActiveTimer=setTimeout(()=>{\n\t\t\tthis._.userActiveTimer=0;\n\t\t\tlet now=Date.now();\n\t\t\tif(now-this._.lastUserActive<delay){\n\t\t\t\tthis._userActiveWatcher();\n\t\t\t}else{\n\t\t\t\tthis.player.classList.add('user-inactive');\n\t\t\t\tthis._.userInactive=true;\n\t\t\t}\n\t\t},delay-t+this._.lastUserActive);\n\t}\n\t_playerKeyHandle(e){//hot keys\n\t\tif(e.target.tagName==='INPUT')return;\n\t\tconst V=this.video,_SH=e.shiftKey,_RE=e.repeat;\n\t\t//to prevent default,use break.otherwise,use return.\n\t\tswitch(e.key){\n\t\t\tcase ' ':{\n\t\t\t\tif(_RE)return;//ignore repeat keys\n\t\t\t\tthis.playToggle();break;\n\t\t\t}\n\t\t\tcase 'ArrowRight':{//seek forward\n\t\t\t\tV.currentTime+=(3*(_SH?2:1));break;\n\t\t\t}\n\t\t\tcase 'ArrowLeft':{//seek backward\n\t\t\t\tV.currentTime-=(1.5*(_SH?2:1));break;\n\t\t\t}\n\t\t\tcase 'ArrowUp':{//volume up\n\t\t\t\tV.volume=Utils.clamp(V.volume+(0.03*(_SH?2:1)),0,1);break;\n\t\t\t}\n\t\t\tcase 'ArrowDown':{//volume down\n\t\t\t\tV.volume=Utils.clamp(V.volume-(0.03*(_SH?2:1)),0,1);break;\n\t\t\t}\n\t\t\tcase 'p':{//full page\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis.playerMode('fullPage');break;\n\t\t\t}\n\t\t\tcase 'f':{//fullscreen\n\t\t\t\tthis.playerMode('fullScreen');break;\n\t\t\t}\n\t\t\tcase 'd':{//danmaku toggle\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis._danmakuEnabled&&this.Danmaku.toggle();break;\n\t\t\t}\n\t\t\tcase 'm':{//mute\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis.video.muted=!this.video.muted;break;\n\t\t\t}\n\t\t\tcase 'l':{//loop\n\t\t\t\tthis.video.loop=!this.video.loop;break;\n\t\t\t}\n\t\t\tcase 'Enter':{//danmaku input toggle\n\t\t\t\tif(_RE)return;\n\t\t\t\tthis._danmakuEnabled&&this.danmakuInput();break;\n\t\t\t}\n\t\t\tcase 'Escape':{//exit full page mode\n\t\t\t\tif(this.currentPlayerMode==='fullPage'){\n\t\t\t\t\tthis.playerMode('normal');break;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdefault:return;\n\t\t}\n\t\te.preventDefault();\n\t}\n\tdanmakuInput(bool=!this.$('#danmaku_input_frame').offsetHeight){//hide or show danmaku input\n\t\tlet $=this.$;\n\t\t$('#danmaku_input_frame').style.display=bool?'':'none';\n\t\tthis._iconActive('addDanmaku',bool);\n\t\tsetImmediate(()=>{bool?$('#danmaku_input').focus():this._.player.focus();});\n\t}\n\tresizeProgress(){\n\t\tconst c=this.$('#progress');\n\t\tc.width=c.offsetWidth;\n\t\tc.height=c.offsetHeight;\n\t\tthis.drawProgress();\n\t\tthis.emit('progressRefresh');\n\t}\n\t_progressDrawer(){\n\t\tconst ctx=this._.progressContext,\n\t\t\t\tc=this.$('#progress'),\n\t\t\t\tw=c.width,\n\t\t\t\th=c.height,\n\t\t\t\tv=this.video,\n\t\t\t\td=v.duration,\n\t\t\t\tcT=v.currentTime,\n\t\t\t\tpad=c.pad,\n\t\t\t\tlen=w-2*pad;\n\t\tlet i;\n\t\tctx.clearRect(0,0,w,h);\n\t\tctx.lineCap = \"round\";\n\t\t//background\n\t\tctx.beginPath();\n\t\tctx.strokeStyle='#eee';\n\t\tctx.lineWidth=7;\n\t\tctx.moveTo(pad, 15);\n\t\tctx.lineTo(pad+len, 15);\n\t\tctx.stroke();\n\t\t//buffered\n\t\tctx.beginPath();\n\t\tctx.strokeStyle = '#C0BBBB';\n\t\tctx.lineWidth = 2;\n\t\tlet tr = v.buffered;\n\t\tfor (i = tr.length;i--;) {\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 18);\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 18);\n\t\t}\n\t\tctx.stroke();\n\t\t//progress\n\t\tctx.beginPath();\n\t\tctx.strokeStyle='#6cf';\n\t\tctx.lineWidth = 5;\n\t\tctx.moveTo(pad,15);\n\t\tctx.lineTo(pad+len*cT/d,15);\n\t\tctx.stroke();\n\t\t//already played\n\t\tctx.beginPath();\n\t\tctx.strokeStyle = 'rgba(255,255,255,.3)';\n\t\tctx.lineWidth = 5;\n\t\ttr = v.played;\n\t\tfor (i = tr.length;i--;) {\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 15);\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 15);\n\t\t}\n\t\tctx.stroke();\n\t\t//mouse\n\t\tif(this._.progressX){\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle='rgba(0,0,0,.05)';\n\t\t\tctx.moveTo(pad+len*cT/d,15);\n\t\t\tctx.lineTo(Utils.clamp(this._.progressX,pad,pad+len),15);\n\t\t\tctx.stroke();\n\t\t}\n\t\tthis._.drawingProgress=false;\n\t}\n\tdrawProgress(){\n\t\tif(this._.drawingProgress)return;\n\t\tthis._.drawingProgress=true;\n\t\trequestAnimationFrame(()=>this._progressDrawer());//prevent progress bar drawing multi times in a frame\n\t}\n}\n\n\n\n\nwindow.NyaP=NyaP;\n","import {\n    NyaPlayerCore,\n\tDomTools,\n\tUtils,\n} from '../component/NyaP-Core/index.js';\n\nimport NyaPDanmaku from '../component/NyaP-Danmaku/index.js';\n\nconst O2H=DomTools.Object2HTML;\n\n//default options\nconst NyaPCommonOptions={\n\t//for danmaku frame\n\tdanmaku:{\n\t\tenable:true,\n\t\tmodules:{\n\t\t\tTextDanmaku:{\n\t\t\t\tenable:true,\n\t\t\t\tdefaultStyles:{},\n\t\t\t\toptions:{},\n\t\t\t},\n\t\t},\n\t\tdefaultDanmakuColor:null,//a hex color(without #),default when the color inputed is invalid\n\t\tsend:d=>{return Promise.reject();},//the method for sending danmaku\n\t},\n\t// for ui\n\tuiOptions:{\n\t\tdanmakuColors:['fff','6cf','ff0','f00','0f0','00f','f0f','000'],//colors in the danmaku style pannel\n\t\tdanmakuModes:[0,3,2,1],//0:right\t1:left\t2:bottom\t3:top  ;; mode in the danmaku style pannel\n\t\tdanmakuSizes:[20,24,36],//danmaku size buttons in the danmaku style pannel\n\t\tdanmakuColor:null,//default color to fill the color option input\n\t\tdanmakuMode:0,//0: right to left.\n\t\tdanmakuSize:24,\n\t\tautoHideDanmakuInput:true,//hide danmakuinput after danmaku sending\n\t},\n\n\tloadingInfo:{//text replacement at loading time (for left-bottom message)\n\t\tdoneText:'ok',\n\t\tfailText:'failed',\n\t\tcontentSpliter:'...',\n\t},\n\tloadingAnimation:true,\n\n\t//other common options\n\tplayerContainer:null,//the element for containing the player\n\ticons:{\n\t\tplay:[30,30,'<path d=\"m10.063,8.856l9.873,6.143l-9.873,6.143v-12.287z\" stroke-width=\"3\" stroke-linejoin=\"round\"/>'],\n\t\tdanmakuStyle:[30,30,'<path style=\"fill-opacity:0!important;\" stroke-width=\"1.4\" d=\"m21.004,8.995c-0.513,-0.513 -1.135,-0.770 -1.864,-0.770l-8.281,0c-0.729,0 -1.350,0.256 -1.864,0.770c-0.513,0.513 -0.770,1.135 -0.770,1.864l0,8.281c0,0.721 0.256,1.341 0.770,1.858c0.513,0.517 1.135,0.776 1.864,0.776l8.281,0c0.729,0 1.350,-0.258 1.864,-0.776c0.513,-0.517 0.770,-1.136 0.770,-1.858l0,-8.281c0,-0.729 -0.257,-1.350 -0.770,-1.864z\" stroke-linejoin=\"round\"/>'\n\t\t\t\t\t\t\t+'<path d=\"m12.142,14.031l1.888,0l0,-1.888l1.937,0l0,1.888l1.888,0l0,1.937l-1.888,0l0,1.888l-1.937,0l0,-1.888l-1.888,0l0,-1.937z\" stroke-width=\"1\"/>'],\n\t\tdanmakuToggle:[30,30,'<path d=\"m8.569,10.455l0,0c0,-0.767 0.659,-1.389 1.473,-1.389l0.669,0l0,0l3.215,0l6.028,0c0.390,0 0.765,0.146 1.041,0.406c0.276,0.260 0.431,0.613 0.431,0.982l0,3.473l0,0l0,2.083l0,0c0,0.767 -0.659,1.389 -1.473,1.389l-6.028,0l-4.200,3.532l0.985,-3.532l-0.669,0c-0.813,0 -1.473,-0.621 -1.473,-1.389l0,0l0,-2.083l0,0l0,-3.473z\"/>'],\n\t\taddDanmaku:[30,30,'<path style=\"fill-opacity:1!important\" d=\"m21.781,9.872l-1.500,-1.530c-0.378,-0.385 -0.997,-0.391 -1.384,-0.012l-0.959,0.941l2.870,2.926l0.960,-0.940c0.385,-0.379 0.392,-0.998 0.013,-1.383zm-12.134,7.532l2.871,2.926l7.593,-7.448l-2.872,-2.927l-7.591,7.449l0.000,0.000zm-1.158,2.571l-0.549,1.974l1.984,-0.511l1.843,-0.474l-2.769,-2.824l-0.509,1.835z\" stroke-width=\"0\"/>'],\n\t\tfullScreen:[30,30,'<path stroke-linejoin=\"round\" d=\"m11.166,9.761l-5.237,5.239l5.237,5.238l1.905,-1.905l-3.333,-3.333l3.332,-3.333l-1.904,-1.906zm7.665,0l-1.903,1.905l3.332,3.333l-3.332,3.332l1.903,1.905l5.238,-5.238l-5.238,-5.237z\" stroke-width=\"1.3\" />'],\n\t\tfullPage:[30,30,'<rect stroke-linejoin=\"round\" height=\"11.169\" width=\"17.655\" y=\"9.415\" x=\"6.172\" stroke-width=\"1.5\"/>'\n\t\t\t\t\t\t  +'<path stroke-linejoin=\"round\" d=\"m12.361,11.394l-3.604,3.605l3.605,3.605l1.311,-1.311l-2.294,-2.294l2.293,-2.294l-1.311,-1.311zm5.275,0l-1.310,1.311l2.293,2.294l-2.293,2.293l1.310,1.311l3.605,-3.605l-3.605,-3.605z\"/>'],\n\t\tloop:[30,30,'<path stroke-linejoin=\"round\" stroke-width=\"1\" d=\"m20.945,15.282c-0.204,-0.245 -0.504,-0.387 -0.823,-0.387c-0.583,0 -1.079,0.398 -1.205,0.969c-0.400,1.799 -2.027,3.106 -3.870,3.106c-2.188,0 -3.969,-1.780 -3.969,-3.969c0,-2.189 1.781,-3.969 3.969,-3.969c0.720,0 1.412,0.192 2.024,0.561l-0.334,0.338c-0.098,0.100 -0.127,0.250 -0.073,0.380c0.055,0.130 0.183,0.213 0.324,0.212l2.176,0.001c0.255,-0.002 0.467,-0.231 0.466,-0.482l-0.008,-2.183c-0.000,-0.144 -0.085,-0.272 -0.217,-0.325c-0.131,-0.052 -0.280,-0.022 -0.379,0.077l-0.329,0.334c-1.058,-0.765 -2.340,-1.182 -3.649,-1.182c-3.438,0 -6.236,2.797 -6.236,6.236c0,3.438 2.797,6.236 6.236,6.236c2.993,0 5.569,-2.133 6.126,-5.072c0.059,-0.314 -0.022,-0.635 -0.227,-0.882z\"/>'],\n\t\tvolume:[30,30,'<ellipse id=\"volume_circle\" style=\"fill-opacity:.6!important\" ry=\"6\" rx=\"6\" cy=\"15\" cx=\"15\" stroke-dasharray=\"38 90\" stroke-width=\"1.8\"/>'],\n\t\tdanmakuMode0:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m14.981,17.821l-7.937,-2.821l7.937,-2.821l0,1.409l7.975,0l0,2.821l-7.975,0l0,1.409l0,0.002z\"/>'],\n\t\tdanmakuMode1:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m15.019,12.178l7.937,2.821l-7.937,2.821l0,-1.409l-7.975,0l0,-2.821l7.975,0l0,-1.409l0,-0.002z\"/>'],\n\t\tdanmakuMode3:[30,30,'<path stroke-width=\"3\" d=\"m7.972,7.486l14.054,0\"/>'],\n\t\tdanmakuMode2:[30,30,'<path stroke-width=\"3\" d=\"m7.972,22.513l14.054,0\"/>'],\n\t},\n}\n\n//NyaP classic theme Core\nclass NyaPCommon extends NyaPlayerCore{\n\tget frame(){return this._.player||this.videoFrame;}\n\tget player(){return this._.player;}\n\tget currentPlayerMode(){return this.player.getAttribute('playerMode')||'normal';}\n\tget _danmakuEnabled(){return this.opt.danmaku.enable;}\n\tconstructor(opt){\n\t\tsuper(Utils.deepAssign({},NyaPCommonOptions,opt));\n\t\tthis.log('%c https://github.com/JiaJiaJiang/NyaP/ ','log',\"background:#6f8fa2;color:#ccc;padding:.3em\");\n\t\topt=this.opt;\n\n\t\tthis.$=this.$.bind(this);\n\t\tthis.$$=this.$$.bind(this);\n\n\t\t//language\n\t\tconst _t=this._t=this.i18n._.bind(this.i18n);//translate\n\t\t//load languages to the core\n\t\tlet langs=require('./langs.json');\n\t\tfor(let l in langs){\n\t\t\tthis.i18n.add(l,langs[l]);\n\t\t}\n\n\t\t//the video frame for NyaP and NyaPTouch\n\t\tthis.videoFrame=O2H(\n\t\t\t{_:'div',attr:{id:'video_frame'},child:[\n\t\t\t\tthis.video,\n\t\t\t\t//this.container,\n\t\t\t\t{_:'div',attr:{id:'loading_frame'},child:[\n\t\t\t\t\t{_:'div',attr:{id:'loading_anime'}},\n\t\t\t\t\t{_:'div',attr:{id:'loading_info'}},\n\t\t\t\t]},\n\t\t\t\t{_:'div',attr:{id:'msg_box'}},\n\t\t\t]}\n\t\t);\n\n\t\t//add private vars\n\t\tthis._.selectorCache={};\n\t\tthis._.volumeBox=new MsgBox('','info',this.$('#msg_box'));\n\t\tthis._.ios=!!navigator.userAgent.match(/i[A-z]+?; CPU .+?like Mac OS/);\n\t\tthis._.mobileX5=!!navigator.userAgent.match(/MQQBrowser/);\n\n\t\t//receive stat requests\n\t\tthis.on('stat',stat=>{\n\t\t\tlet name=_t(stat[1]);\n\t\t\tthis.debug('stat:',name);\n\t\t\tlet d=O2H({_:'div',child:[name]});\n\t\t\td.append(this.opt.loadingInfo.contentSpliter);\n\t\t\tthis.$('#loading_info').appendChild(d);\n\t\t\tstat[2].then(result=>{//wait for the result\n\t\t\t\td.append(result||this.opt.loadingInfo.doneText);\n\t\t\t}).catch(e=>{\n\t\t\t\td.append(e.message||e||this.opt.loadingInfo.failText);\n\t\t\t});\n\t\t});\n\n\t\t//loading animation\n\t\tif(opt.loadingAnimation){\n\t\t\tthis.$('#loading_anime').innerHTML='(๑•́ ω •̀๑)';\n\t\t\tthis._.loadingAnimationInterval=setInterval(()=>{//loading animation\n\t\t\t\tthis.$('#loading_anime').style.transform=\"translate(\"+Utils.rand(-20,20)+\"px,\"+Utils.rand(-20,20)+\"px) rotate(\"+Utils.rand(-10,10)+\"deg)\";\n\t\t\t},80);\n\t\t}\n\t\tDomTools.addEvents(this.video,{\n\t\t\tloadedmetadata:e=>{\n\t\t\t\tthis.statResult('loading_video');\n\t\t\t\tclearInterval(this._.loadingAnimationInterval);\n\t\t\t\tlet lf=this.$('#loading_frame');\n\t\t\t\tif(lf.parentNode)//remove loading animation\n\t\t\t\t\tlf.parentNode.removeChild(lf);\n\t\t\t},\n\t\t\terror:e=>{\n\t\t\t\tthis.statResult('loading_video',e?.message);\n\t\t\t\tclearInterval(this._.loadingAnimationInterval);\n\t\t\t\tthis.$('#loading_anime').innerHTML='(๑• . •๑)';\n\t\t\t\tthis.$('#loading_anime').style.transform=\"\";\n\t\t\t},\n\t\t});\n\n\t\t//load danmaku frame\n\t\tif(this._danmakuEnabled){\n\t\t\tthis.danmakuContainer=O2H({_:'div',prop:{id:'danmaku_container'}});\n\t\t\tthis.stat('loading_danmakuFrame',()=>{\n\t\t\t\tthis.Danmaku=new NyaPDanmaku(this);\n\t\t\t\tthis.videoFrame.insertBefore(this.danmakuContainer,this.$('#loading_frame'));\n\t\t\t});\n\t\t}\n\n\t\t//stupid x5 core\n\t\tif(this._.mobileX5){\n\t\t\ttry{\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.setRendererMode(1);//force css mode\n\t\t\t\tthis.Danmaku.modules.TextDanmaku.text2d.supported=false;\n\t\t\t}catch(e){\n\t\t\t\talert(e.message);\n\t\t\t}\n\t\t}\n\t}\n\t$(selector,useCache=true){//querySelector for the frame element\n\t\tif(useCache&&this._.selectorCache[selector])\n\t\t\treturn this._.selectorCache[selector];\n\t\tlet el=this.frame.querySelector(selector);\n\t\tif(el)this._.selectorCache[selector]=el;\n\t\treturn el;\n\t}\n\t$$(selector){//querySelectorAll for the frame element\n\t\treturn this.frame.querySelectorAll(selector);\n\t}\n\tplayerMode(mode='normal'){\n\t\tlet ios=this._.ios;\n\t\tif(mode==='normal' && this.currentPlayerMode===mode)return;\n\t\tif(this.currentPlayerMode==='fullScreen'){\n\t\t\tios||DomTools.exitFullscreen().catch(e=>{});\n\t\t}\n\t\tif(mode!=='normal' && this.currentPlayerMode===mode)mode='normal';//back to normal mode\n\t\tswitch(mode){\n\t\t\tcase 'fullPage':{\n\t\t\t\tthis.player.setAttribute('playerMode','fullPage');\n\t\t\t\tthis.emit('playerModeChange',mode);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'fullScreen':{\n\t\t\t\tif(ios){//for ios, only fullscreen video, not the player\n\t\t\t\t\tDomTools.requestFullscreen(this.video);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tDomTools.requestFullscreen(this.player).then(()=>{\n\t\t\t\t\tthis.player.setAttribute('playerMode','fullScreen');\n\t\t\t\t\tthis.emit('playerModeChange',mode);\n\t\t\t\t}).catch(e=>{alert('Failed to enter screen mode')});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:{\n\t\t\t\tthis.player.setAttribute('playerMode','normal');\n\t\t\t\tthis.emit('playerModeChange',mode);\n\t\t\t}\n\t\t}\n\t}\n\tmsg(text,type='tip'){//type:tip|info|error\n\t\tlet msg=new MsgBox(text,type,this.$('#msg_box'));\n\t\trequestAnimationFrame(()=>msg.show());\n\t}\n\t_iconActive(name,bool){\n\t\tthis.$(`#icon_span_${name}`)?.classList[bool?'add':'remove']('active_icon');\n\t}\n\t_setDisplayTime(current=null,total=null){\n\t\t\tif(current!==null)this.$('#current_time').innerHTML=current;\n\t\t\tif(total!==null)this.$('#total_time').innerHTML=total;\n\t}\n\n\tsend(){\n\t\tlet color=this._.danmakuColor||this.opt.danmaku.defaultDanmakuColor,\n\t\t\ttext=this.$('#danmaku_input').value,\n\t\t\tsize=this._.danmakuSize,\n\t\t\tmode=this._.danmakuMode,\n\t\t\ttime=this.Danmaku.time,\n\t\t\td={color,text,size,mode,time};\n\n\t\tlet S=this.Danmaku.send(d,danmaku=>{\n\t\t\tif(danmaku&&danmaku._==='text')\n\t\t\t\tthis.$('#danmaku_input').value='';\n\t\t\tdanmaku.highlight=true;\n\t\t\tthis.Danmaku.load(danmaku,true);\n\t\t\tif(this.opt.uiOptions.autoHideDanmakuInput){this.danmakuInput(false);}\n\t\t});\n\n\t\tif(!S){\n\t\t\tthis.danmakuInput(false);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nclass MsgBox{\n\tconstructor(text,type,parentNode){\n\t\tthis.using=false;\n\t\tlet msg=this.msg=O2H({_:'div',attr:{class:`msg_type_${type}`}});\n\t\tmsg.addEventListener('click',()=>this.remove());\n\t\tthis.parentNode=parentNode;\n\t\tthis.setText(text);\n\t}\n\tsetTimeout(time){\n\t\tif(this.timeout)clearTimeout(this.timeout);\n\t\tthis.timeout=setTimeout(()=>this.remove(),time||Math.max((this.texts?this.texts.length:0)*0.6*1000,5000));\n\t}\n\tsetText(text){\n\t\tthis.msg.innerHTML='';\n\t\tlet e=O2H(text);\n\t\te&&this.msg.appendChild(e);\n\t\tif(text instanceof HTMLElement)text=text.textContent;\n\t\tlet texts=String(text).match(/\\w+|\\S/g);\n\t\tthis.text=text;\n\t\tthis.texts=texts;\n\t}\n\trenew(text,time){\n\t\tthis.setText(text);\n\t\tthis.setTimeout(time);\n\t\tif(!this.using)this.show();\n\t}\n\tshow(){\n\t\tif(this.using)return;\n\t\tthis.msg.style.opacity=0;\n\t\tif(this.parentNode && this.parentNode!==this.msg.parentNode){\n\t\t\tthis.parentNode.appendChild(this.msg);\n\t\t}\n\t\tthis.msg.parentNode&&setTimeout(()=>{\n\t\t\tthis.using=true;\n\t\t\tthis.msg.style.opacity=1;\n\t\t},0);\n\t\tthis.setTimeout();\n\t}\n\tremove(){\n\t\tif(!this.using)return;\n\t\tthis.using=false;\n\t\tthis.msg.style.opacity=0;\n\t\tif(this.timeout){\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout=0;\n\t\t}\n\t\tsetTimeout(()=>{\n\t\t\tthis.msg.parentNode&&this.msg.parentNode.removeChild(this.msg);\n\t\t},600);\n\t}\n}\n\nexport {\n\tNyaPCommon,\n\tDomTools,\n\tUtils,\n}\n","module.exports={\"zh-CN\":{\"play\":\"播放\",\"Send\":\"发送\",\"Done\":\"完成\",\"loop\":\"循环\",\"pause\":\"暂停\",\"muted\":\"静音\",\"volume\":\"音量\",\"settings\":\"设置\",\"wheeling\":\"滚轮\",\"hex color\":\"Hex颜色\",\"Loading core\":\"加载核心\",\"Loading video\":\"加载视频\",\"Loading plugin\":\"加载插件\",\"full page(P)\":\"全页模式(P)\",\"Loading danmaku\":\"加载弹幕\",\"Creating player\":\"创建播放器\",\"full screen(F)\":\"全屏模式(F)\",\"danmaku toggle(D)\":\"弹幕开关(D)\",\"Input danmaku here\":\"在这里输入弹幕\",\"Loading danmaku frame\":\"加载弹幕框架\",\"danmaku input(Enter)\":\"弹幕输入框(回车)\",\"Failed to change to fullscreen mode\":\"无法切换到全屏模式\",\"loading_core\":\"加载核心\",\"loading_plugin\":\"加载插件\",\"loading_danmakuFrame\":\"加载弹幕框架\",\"creating_player\":\"创建播放器\",\"loading_danmaku\":\"加载弹幕\",\"loading_video\":\"加载视频\"}}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}