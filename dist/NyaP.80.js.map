{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../lib/Object2HTML/Object2HTML.js","../lib/danmaku-frame/lib/ResizeSensor.js","../lib/danmaku-frame/src/danmaku-frame.js","../lib/danmaku-text/lib/Mat/Mat.js","../lib/danmaku-text/lib/setImmediate/setImmediate.js","../lib/danmaku-text/src/danmaku-text.js","../lib/danmaku-text/src/text2d.js","../lib/danmaku-text/src/text3d.js","../lib/danmaku-text/src/textCanvas.js","../lib/danmaku-text/src/textModuleTemplate.js","../node_modules/core-js/modules/_a-function.js","../node_modules/core-js/modules/_add-to-unscopables.js","../node_modules/core-js/modules/_advance-string-index.js","../node_modules/core-js/modules/_an-instance.js","../node_modules/core-js/modules/_an-object.js","../node_modules/core-js/modules/_array-copy-within.js","../node_modules/core-js/modules/_array-fill.js","../node_modules/core-js/modules/_array-includes.js","../node_modules/core-js/modules/_array-methods.js","../node_modules/core-js/modules/_array-species-constructor.js","../node_modules/core-js/modules/_array-species-create.js","../node_modules/core-js/modules/_classof.js","../node_modules/core-js/modules/_cof.js","../node_modules/core-js/modules/_core.js","../node_modules/core-js/modules/_create-property.js","../node_modules/core-js/modules/_ctx.js","../node_modules/core-js/modules/_defined.js","../node_modules/core-js/modules/_descriptors.js","../node_modules/core-js/modules/_dom-create.js","../node_modules/core-js/modules/_enum-bug-keys.js","../node_modules/core-js/modules/_enum-keys.js","../node_modules/core-js/modules/_export.js","../node_modules/core-js/modules/_fails-is-regexp.js","../node_modules/core-js/modules/_fails.js","../node_modules/core-js/modules/_fix-re-wks.js","../node_modules/core-js/modules/_flags.js","../node_modules/core-js/modules/_for-of.js","../node_modules/core-js/modules/_global.js","../node_modules/core-js/modules/_has.js","../node_modules/core-js/modules/_hide.js","../node_modules/core-js/modules/_html.js","../node_modules/core-js/modules/_ie8-dom-define.js","../node_modules/core-js/modules/_inherit-if-required.js","../node_modules/core-js/modules/_invoke.js","../node_modules/core-js/modules/_iobject.js","../node_modules/core-js/modules/_is-array-iter.js","../node_modules/core-js/modules/_is-array.js","../node_modules/core-js/modules/_is-integer.js","../node_modules/core-js/modules/_is-object.js","../node_modules/core-js/modules/_is-regexp.js","../node_modules/core-js/modules/_iter-call.js","../node_modules/core-js/modules/_iter-create.js","../node_modules/core-js/modules/_iter-define.js","../node_modules/core-js/modules/_iter-detect.js","../node_modules/core-js/modules/_iter-step.js","../node_modules/core-js/modules/_iterators.js","../node_modules/core-js/modules/_library.js","../node_modules/core-js/modules/_meta.js","../node_modules/core-js/modules/_microtask.js","../node_modules/core-js/modules/_new-promise-capability.js","../node_modules/core-js/modules/_object-assign.js","../node_modules/core-js/modules/_object-create.js","../node_modules/core-js/modules/_object-dp.js","../node_modules/core-js/modules/_object-dps.js","../node_modules/core-js/modules/_object-gopd.js","../node_modules/core-js/modules/_object-gopn-ext.js","../node_modules/core-js/modules/_object-gopn.js","../node_modules/core-js/modules/_object-gops.js","../node_modules/core-js/modules/_object-gpo.js","../node_modules/core-js/modules/_object-keys-internal.js","../node_modules/core-js/modules/_object-keys.js","../node_modules/core-js/modules/_object-pie.js","../node_modules/core-js/modules/_perform.js","../node_modules/core-js/modules/_promise-resolve.js","../node_modules/core-js/modules/_property-desc.js","../node_modules/core-js/modules/_redefine-all.js","../node_modules/core-js/modules/_redefine.js","../node_modules/core-js/modules/_regexp-exec-abstract.js","../node_modules/core-js/modules/_regexp-exec.js","../node_modules/core-js/modules/_set-proto.js","../node_modules/core-js/modules/_set-species.js","../node_modules/core-js/modules/_set-to-string-tag.js","../node_modules/core-js/modules/_shared-key.js","../node_modules/core-js/modules/_shared.js","../node_modules/core-js/modules/_species-constructor.js","../node_modules/core-js/modules/_string-at.js","../node_modules/core-js/modules/_string-context.js","../node_modules/core-js/modules/_string-repeat.js","../node_modules/core-js/modules/_string-trim.js","../node_modules/core-js/modules/_string-ws.js","../node_modules/core-js/modules/_task.js","../node_modules/core-js/modules/_to-absolute-index.js","../node_modules/core-js/modules/_to-index.js","../node_modules/core-js/modules/_to-integer.js","../node_modules/core-js/modules/_to-iobject.js","../node_modules/core-js/modules/_to-length.js","../node_modules/core-js/modules/_to-object.js","../node_modules/core-js/modules/_to-primitive.js","../node_modules/core-js/modules/_typed-array.js","../node_modules/core-js/modules/_typed-buffer.js","../node_modules/core-js/modules/_typed.js","../node_modules/core-js/modules/_uid.js","../node_modules/core-js/modules/_user-agent.js","../node_modules/core-js/modules/_wks-define.js","../node_modules/core-js/modules/_wks-ext.js","../node_modules/core-js/modules/_wks.js","../node_modules/core-js/modules/core.get-iterator-method.js","../node_modules/core-js/modules/es6.array.fill.js","../node_modules/core-js/modules/es6.array.from.js","../node_modules/core-js/modules/es6.array.iterator.js","../node_modules/core-js/modules/es6.function.name.js","../node_modules/core-js/modules/es6.number.constructor.js","../node_modules/core-js/modules/es6.number.is-integer.js","../node_modules/core-js/modules/es6.object.assign.js","../node_modules/core-js/modules/es6.promise.js","../node_modules/core-js/modules/es6.regexp.exec.js","../node_modules/core-js/modules/es6.regexp.flags.js","../node_modules/core-js/modules/es6.regexp.match.js","../node_modules/core-js/modules/es6.regexp.replace.js","../node_modules/core-js/modules/es6.regexp.split.js","../node_modules/core-js/modules/es6.regexp.to-string.js","../node_modules/core-js/modules/es6.string.iterator.js","../node_modules/core-js/modules/es6.string.repeat.js","../node_modules/core-js/modules/es6.string.starts-with.js","../node_modules/core-js/modules/es6.symbol.js","../node_modules/core-js/modules/es6.typed.float32-array.js","../node_modules/core-js/modules/es7.symbol.async-iterator.js","../node_modules/core-js/modules/web.dom.iterable.js","../node_modules/process/browser.js","../node_modules/timers-browserify/main.js","NyaP.js","NyaPCore.js","danmaku.js","i18n.js"],"names":[],"mappings":"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Ef;;;;;IAKM,kB;;;AACL,8BAAY,KAAZ,EAAkB;AAAA;;AACjB,SAAK,KAAL,GAAW,KAAX;AACA;;;;2BACK,CAAE;;;2BACF,CAAE;;;4BACD,CAAE;;;4BACF,CAAE;;;4BACF,CAAE;;;6BACD,CAAE;;;6BACF,CAAE;;;6BACF,CAAE;;;8BACD,CAAE;;;iCACC,CAAE;;;uCACI,CAAE;;;;;;eAGN,kB;;;;ACtBf;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphepRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxtpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3EA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AASA;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,CAAC,GAAC,WAAK,CAAb,C,CAGA;;AACA,IAAM,WAAW,GAAC;AACjB,EAAA,oBAAoB,EAAC,IADJ;AACS;AAC1B,EAAA,aAAa,EAAC,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,EAA2C,KAA3C,CAFG;AAE+C;AAChE,EAAA,YAAY,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAHI;AAGM;AACvB,EAAA,YAAY,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,CAJI,CAOlB;;AAPkB,CAAlB;;IAQM,I;;;;;AACL,gBAAY,GAAZ,EAAgB;AAAA;;AAAA;;AACf,8EAAM,MAAM,CAAC,MAAP,CAAc,EAAd,EAAiB,WAAjB,EAA6B,GAA7B,CAAN;AACA,IAAA,GAAG,GAAC,MAAK,GAAT;;AACA,QAAM,EAAE,wDAAR;AAAA,QACC,CAAC,GAAC,MAAK,CADR;AAAA,QAEC,KAAK,GAAC,MAAK,KAFZ;;AAGA,QAAM,KAAK,GAAC,MAAK,KAAL,GAAW;AACtB,MAAA,IAAI,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,sGAAP,CADiB;AAEtB,MAAA,UAAU,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,obACZ,oJADK,CAFW;AAItB,MAAA,aAAa,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,wUAAP,CAJQ;AAKtB,MAAA,YAAY,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,kXAAP,CALS;AAMtB,MAAA,UAAU,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,6OAAP,CANW;AAOtB,MAAA,QAAQ,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,0GACT,0NADE,CAPa;AAStB,MAAA,IAAI,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,mtBAAP,CATiB;AAUtB,MAAA,MAAM,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,2IAAP,CAVe;AAWtB,MAAA,YAAY,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,2JAAP,CAXS;AAYtB,MAAA,YAAY,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,6JAAP,CAZS;AAatB,MAAA,YAAY,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,oDAAP,CAbS;AActB,MAAA,YAAY,EAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,qDAAP;AAdS,KAAvB;AAgBA,IAAA,MAAM,CAAC,MAAP,CAAc,KAAd,EAAoB,GAAG,CAAC,KAAxB;;AACA,aAAS,IAAT,CAAc,IAAd,EAAmB,KAAnB,EAAiC;AAAA,UAAR,IAAQ,uEAAH,EAAG;AAChC,UAAM,GAAG,GAAC,KAAK,CAAC,IAAD,CAAf;AACA,aAAO,0BAAI;AAAC,QAAA,CAAC,EAAC,MAAH;AAAU,QAAA,KAAK,EAAL,KAAV;AAAgB,QAAA,IAAI,EAAJ,IAAhB;AAAqB,QAAA,IAAI,EAAC;AAAC,UAAA,EAAE,sBAAc,IAAd,CAAH;AACpC,UAAA,SAAS,wBAAgB,GAAG,CAAC,CAAD,CAAnB,oBAAgC,GAAG,CAAC,CAAD,CAAnC,wBAAmD,IAAnD,kBAA6D,GAAG,CAAC,CAAD,CAAhE;AAD2B;AAA1B,OAAJ,CAAP;AAEA;;AAED,QAAI,KAAK,GAAC,EAAE,CAAC,WAAH,CAAe,CAAC,CAAC,iBAAD,CAAD,GAAqB,MAApC,CAAV;;AACA,IAAA,EAAE,CAAC,CAAH,CAAK,MAAL,GAAY,0BAAI;AACf,MAAA,CAAC,EAAC,KADa;AACP,MAAA,IAAI,EAAC;AAAC,QAAA,KAAK,EAAC,MAAP;AAAc,QAAA,EAAE,EAAC,MAAjB;AAAwB,QAAA,QAAQ,EAAC;AAAjC,OADE;AACkC,MAAA,KAAK,EAAC,CACtD,EAAE,CAAC,UADmD,EAEtD;AAAC,QAAA,CAAC,EAAC,KAAH;AAAS,QAAA,IAAI,EAAC;AAAC,UAAA,EAAE,EAAC;AAAJ,SAAd;AAA8B,QAAA,KAAK,EAAC,CACnC;AAAC,UAAA,CAAC,EAAC,KAAH;AAAS,UAAA,IAAI,EAAC;AAAC,YAAA,EAAE,EAAC;AAAJ,WAAd;AAA6B,UAAA,KAAK,EAAC,CAClC;AAAC,YAAA,CAAC,EAAC,MAAH;AAAU,YAAA,IAAI,EAAC;AAAC,cAAA,EAAE,EAAC;AAAJ,aAAf;AAAmC,YAAA,KAAK,EAAC,CACxC,IAAI,CAAC,MAAD,EAAQ;AAAC,cAAA,KAAK,EAAC,eAAA,CAAC;AAAA,uBAAE,EAAE,CAAC,UAAH,EAAF;AAAA;AAAR,aAAR,EAAmC;AAAC,cAAA,KAAK,EAAC,CAAC,CAAC,MAAD;AAAR,aAAnC,CADoC;AAAzC,WADkC,EAIlC;AAAC,YAAA,CAAC,EAAC,MAAH;AAAU,YAAA,IAAI,EAAC;AAAC,cAAA,EAAE,EAAC;AAAJ,aAAf;AAAqC,YAAA,KAAK,EAAC,CAC1C;AAAC,cAAA,CAAC,EAAC,KAAH;AAAS,cAAA,IAAI,EAAC;AAAC,gBAAA,EAAE,EAAC;AAAJ,eAAd;AAAmC,cAAA,KAAK,EAAC,CACxC;AAAC,gBAAA,CAAC,EAAC,MAAH;AAAU,gBAAA,KAAK,EAAC,CACf;AAAC,kBAAA,CAAC,EAAC,QAAH;AAAY,kBAAA,IAAI,EAAC;AAAC,oBAAA,EAAE,EAAC,UAAJ;AAAe,oBAAA,GAAG,EAAC;AAAnB;AAAjB,iBADe;AAAhB,eADwC,EAIxC;AAAC,gBAAA,CAAC,EAAC,MAAH;AAAU,gBAAA,IAAI,EAAC;AAAC,kBAAA,EAAE,EAAC;AAAJ,iBAAf;AAA2B,gBAAA,KAAK,EAAC,CAChC;AAAC,kBAAA,CAAC,EAAC,MAAH;AAAU,kBAAA,IAAI,EAAC;AAAC,oBAAA,EAAE,EAAC;AAAJ,mBAAf;AAAmC,kBAAA,KAAK,EAAC,CAAC,OAAD;AAAzC,iBADgC,EAEhC,GAFgC,EAGhC;AAAC,kBAAA,CAAC,EAAC,MAAH;AAAU,kBAAA,IAAI,EAAC;AAAC,oBAAA,EAAE,EAAC;AAAJ,mBAAf;AAAiC,kBAAA,KAAK,EAAC,CAAC,OAAD;AAAvC,iBAHgC;AAAjC,eAJwC;AAAzC,aAD0C,EAW1C;AAAC,cAAA,CAAC,EAAC,KAAH;AAAS,cAAA,IAAI,EAAC;AAAC,gBAAA,EAAE,EAAC;AAAJ,eAAd;AAAyC,cAAA,KAAK,EAAC,CAC9C;AAAC,gBAAA,CAAC,EAAC,MAAH;AAAU,gBAAA,IAAI,EAAC;AAAC,kBAAA,EAAE,EAAC;AAAJ,iBAAf;AAAoC,gBAAA,KAAK,EAAC,CACzC;AAAC,kBAAA,CAAC,EAAC,KAAH;AAAS,kBAAA,IAAI,EAAC;AAAC,oBAAA,EAAE,EAAC;AAAJ,mBAAd;AAA0C,kBAAA,KAAK,EAAC,CAC/C;AAAC,oBAAA,CAAC,EAAC,KAAH;AAAS,oBAAA,IAAI,EAAC;AAAC,sBAAA,EAAE,EAAC;AAAJ;AAAd,mBAD+C,EAE/C;AAAC,oBAAA,CAAC,EAAC,OAAH;AAAW,oBAAA,IAAI,EAAC;AAAC,sBAAA,EAAE,EAAC,eAAJ;AAAoB,sBAAA,WAAW,EAAC,CAAC,CAAC,WAAD,CAAjC;AAA+C,sBAAA,SAAS,EAAC;AAAzD;AAAhB,mBAF+C,EAG/C;AAAC,oBAAA,CAAC,EAAC,MAAH;AAAU,oBAAA,IAAI,EAAC;AAAC,sBAAA,EAAE,EAAC;AAAJ;AAAf,mBAH+C,EAI/C;AAAC,oBAAA,CAAC,EAAC,MAAH;AAAU,oBAAA,IAAI,EAAC;AAAC,sBAAA,EAAE,EAAC;AAAJ;AAAf,mBAJ+C;AAAhD,iBADyC,EAOzC,IAAI,CAAC,cAAD,CAPqC;AAA1C,eAD8C,EAU9C;AAAC,gBAAA,CAAC,EAAC,OAAH;AAAW,gBAAA,IAAI,EAAC;AAAC,kBAAA,EAAE,EAAC,eAAJ;AAAoB,kBAAA,WAAW,EAAC,CAAC,CAAC,oBAAD;AAAjC;AAAhB,eAV8C,EAW9C;AAAC,gBAAA,CAAC,EAAC,MAAH;AAAU,gBAAA,IAAI,EAAC;AAAC,kBAAA,EAAE,EAAC,gBAAJ;AAAqB,kBAAA,SAAS,EAAC,CAAC,CAAC,MAAD;AAAhC;AAAf,eAX8C;AAA/C,aAX0C;AAA3C,WAJkC,EA6BlC;AAAC,YAAA,CAAC,EAAC,MAAH;AAAU,YAAA,IAAI,EAAC;AAAC,cAAA,EAAE,EAAC;AAAJ,aAAf;AAAoC,YAAA,KAAK,EAAC,CACzC,IAAI,CAAC,YAAD,EAAc;AAAC,cAAA,KAAK,EAAC,eAAA,CAAC;AAAA,uBAAE,EAAE,CAAC,YAAH,EAAF;AAAA;AAAR,aAAd,EAA2C;AAAC,cAAA,KAAK,EAAC,CAAC,CAAC,sBAAD;AAAR,aAA3C,CADqC,EAEzC,IAAI,CAAC,eAAD,EAAiB;AAAC,cAAA,KAAK,EAAC,eAAA,CAAC;AAAA,uBAAE,EAAE,CAAC,OAAH,CAAW,MAAX,EAAF;AAAA;AAAR,aAAjB,EAAgD;AAAC,cAAA,KAAK,EAAC,CAAC,CAAC,mBAAD,CAAR;AAA8B,cAAA,KAAK,EAAC;AAApC,aAAhD,CAFqC,EAGzC,IAAI,CAAC,QAAD,EAAU,EAAV,EAAa;AAAC,cAAA,KAAK,YAAI,CAAC,CAAC,QAAD,CAAL,eAAoB,KAAK,CAAC,KAAN,GAAY,CAAC,CAAC,OAAD,CAAb,GAAuB,CAAC,KAAK,CAAC,MAAN,GAAa,GAAb,GAAiB,CAAlB,IAAqB,GAAhE,qCAAoF,CAAC,CAAC,UAAD,CAArF;AAAN,aAAb,CAHqC,EAIzC,IAAI,CAAC,MAAD,EAAQ;AAAC,cAAA,KAAK,EAAC,eAAA,CAAC,EAAE;AAAC,gBAAA,KAAK,CAAC,IAAN,GAAW,CAAC,KAAK,CAAC,IAAlB;AAAwB;AAAnC,aAAR,EAA6C;AAAC,cAAA,KAAK,EAAC,CAAC,CAAC,MAAD,CAAD,GAAU;AAAjB,aAA7C,CAJqC,EAKzC;AAAC,cAAA,CAAC,EAAC,MAAH;AAAU,cAAA,IAAI,EAAC;AAAC,gBAAA,EAAE,EAAC;AAAJ,eAAf;AAAkC,cAAA,KAAK,EAAC,CACvC,IAAI,CAAC,YAAD,EAAc;AAAC,gBAAA,KAAK,EAAC,eAAA,CAAC;AAAA,yBAAE,EAAE,CAAC,UAAH,CAAc,YAAd,CAAF;AAAA;AAAR,eAAd,EAAqD;AAAC,gBAAA,KAAK,EAAC,CAAC,CAAC,gBAAD;AAAR,eAArD,CADmC,EAEvC,IAAI,CAAC,UAAD,EAAY;AAAC,gBAAA,KAAK,EAAC,eAAA,CAAC;AAAA,yBAAE,EAAE,CAAC,UAAH,CAAc,UAAd,CAAF;AAAA;AAAR,eAAZ,EAAiD;AAAC,gBAAA,KAAK,EAAC,CAAC,CAAC,cAAD;AAAR,eAAjD,CAFmC;AAAxC,aALyC;AAA1C,WA7BkC;AAAnC,SADmC;AAApC,OAFsD;AADxC,KAAJ,CAAZ,CA9Be,CA8Ef;;AACA,IAAA,EAAE,CAAC,UAAH,CAAc,WAAd,CAA0B,0BAAI;AAC7B,MAAA,CAAC,EAAC,KAD2B;AACrB,MAAA,IAAI,EAAC;AAAC,QAAA,EAAE,EAAC;AAAJ;AADgB,KAAJ,CAA1B,EA/Ee,CAmFf;;AACA,IAAA,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,CAAH,CAAK,MAApB;AAEA,IAAA,MAAM,CAAC,MAAP,CAAc,EAAE,CAAC,CAAjB,EAAmB;AAClB,MAAA,SAAS,EAAC,IAAI,MAAJ,CAAW,EAAX,EAAc,MAAd,EAAqB,CAAC,CAAC,OAAvB;AADQ,KAAnB;;AAIA,QAAG,MAAK,eAAR,EAAwB;AACvB;AACA,MAAA,GAAG,CAAC,YAAJ,IAAkB,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAAyB,UAAC,CAAD,EAAG,GAAH,EAAS;AACnD,YAAI,CAAC,GAAC,0BAAI;AAAC,UAAA,CAAC,EAAC,MAAH;AAAU,UAAA,IAAI,EAAC;AAAC,YAAA,KAAK,sBAAc,KAAG,GAAG,GAAC,CAArB,QAAN;AAAkC,YAAA,KAAK,EAAC;AAAxC,WAAf;AAA0D,UAAA,IAAI,EAAC;AAAC,YAAA,IAAI,EAAC;AAAN,WAA/D;AAAwE,UAAA,KAAK,EAAC,CAAC,GAAD;AAA9E,SAAJ,CAAN;AACA,QAAA,CAAC,CAAC,gBAAF,CAAmB,WAAnB,CAA+B,CAA/B;AACA,OAHiB,CAAlB,CAFuB,CAOvB;;AACA,MAAA,GAAG,CAAC,aAAJ,IAAmB,GAAG,CAAC,aAAJ,CAAkB,OAAlB,CAA0B,UAAA,CAAC,EAAE;AAC/C,YAAI,CAAC,GAAC,0BAAI;AAAC,UAAA,CAAC,EAAC,MAAH;AAAU,UAAA,IAAI,EAAC;AAAC,YAAA,KAAK,8BAAsB,CAAtB,MAAN;AAAiC,YAAA,KAAK,EAAC;AAAvC,WAAf;AAAyD,UAAA,IAAI,EAAC;AAAC,YAAA,KAAK,EAAC;AAAP;AAA9D,SAAJ,CAAN;AACA,QAAA,CAAC,CAAC,iBAAF,CAAoB,WAApB,CAAgC,CAAhC;AACA,OAHkB,CAAnB,CARuB,CAavB;;AACA,MAAA,GAAG,CAAC,YAAJ,IAAkB,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAAyB,UAAA,CAAC,EAAE;AAC7C,QAAA,CAAC,CAAC,gBAAF,CAAmB,WAAnB,CAA+B,IAAI,sBAAe,CAAf,EAAnC;AACA,OAFiB,CAAlB;AAGA,MAAA,EAAE,CAAC,WAAH,CAAe,CAAC,CAAC,gBAAjB;AACA,KAlBD,MAkBK;AACJ,WAAI,IAAI,CAAR,IAAa,CAAb,EAAe;AACd,YAAG,CAAC,CAAC,KAAF,CAAQ,UAAR,CAAH,EAAuB;AACtB,UAAA,CAAC,CAAC,CAAD,CAAD,CAAK,UAAL,CAAgB,WAAhB,CAA4B,CAAC,CAAC,CAAD,CAA7B;AACA;AACD;AACD,KAlHc,CAqHf;;;AACA,IAAA,UAAU,CAAC,YAAI;AAAC;AACf,MAAA,CAAC,CAAC,OAAF,CAAU,YAAV,GAAuB,IAAI,qBAAJ,CAAiB,CAAC,CAAC,OAAnB,EAA2B;AAAA,eAAI,EAAE,CAAC,eAAH,EAAJ;AAAA,OAA3B,CAAvB;AACA,MAAA,EAAE,CAAC,eAAH;AACA,KAHS,EAGR,CAHQ,CAAV;AAIA,IAAA,EAAE,CAAC,CAAH,CAAK,eAAL,GAAqB,CAAC,CAAC,QAAF,CAAW,UAAX,CAAsB,IAAtB,CAArB,CA1He,CA4Hf;;AACA,QAAM,MAAM,GAAC;AACZ,MAAA,IAAI,EAAC;AACJ,QAAA,OAAO,EAAC,iBAAA,CAAC;AAAA,iBAAE,EAAE,CAAC,gBAAH,CAAoB,CAApB,CAAF;AAAA;AADL,OADO;AAIZ,MAAA,QAAQ,EAAC;AACR,0FAAiF,qFAAA,CAAC,EAAE;AACnF,cAAG,EAAE,CAAC,CAAH,CAAK,UAAL,IAAiB,YAAjB,IAAiC,CAAC,MAAK,YAAL,EAArC,EACC,EAAE,CAAC,UAAH,CAAc,QAAd;AACD;AAJO,OAJG;AAUZ,MAAA,UAAU,EAAC;AACV;;;AAGA,QAAA,OAAO,EAAC,iBAAA,CAAC;AAAA,iBAAE,EAAE,CAAC,WAAH,CAAe,MAAf,EAAsB,IAAtB,CAAF;AAAA,SAJC;AAKV,yBAAgB,sBAAA,CAAC,EAAE;AAClB,UAAA,EAAE,CAAC,WAAH,CAAe,MAAf,EAAsB,KAAtB;AACA,SAPS;AAQV,QAAA,UAAU,EAAC,oBAAC,CAAD,EAAK;AACf,cAAG,IAAI,CAAC,GAAL,KAAW,EAAE,CAAC,CAAH,CAAK,cAAhB,GAAgC,EAAnC,EAAsC;;AACtC,UAAA,EAAE,CAAC,YAAH,CAAgB,0BAAW,KAAK,CAAC,WAAjB,EAA6B,KAAK,CAAC,QAAnC,CAAhB;;AACA,UAAA,EAAE,CAAC,YAAH;AACA,UAAA,EAAE,CAAC,CAAH,CAAK,cAAL,GAAoB,IAAI,CAAC,GAAL,EAApB;AACA,SAbS;AAcV,QAAA,cAAc,EAAC,wBAAA,CAAC,EAAE;AACjB,UAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAqB,0BAAW,KAAK,CAAC,QAAjB,EAA0B,KAAK,CAAC,QAAhC,CAArB;AACA,SAhBS;AAiBV,QAAA,YAAY,EAAC,sBAAA,CAAC,EAAE;AACf,UAAA,EAAE,CAAC,CAAH,CAAK,SAAL,CAAe,KAAf,CAAqB,UAAG,CAAC,CAAC,QAAD,CAAJ,cAAkB,CAAC,KAAK,CAAC,MAAN,GAAa,GAAd,EAAmB,OAAnB,CAA2B,CAA3B,CAAlB,mBAAsD,KAAK,CAAC,KAAN,GAAa,MAAI,CAAC,CAAC,OAAD,CAAL,GAAe,GAA5B,GAAiC,EAAvF,CAArB,EAAiH,IAAjH;;AACA,kCAAS,CAAC,CAAC,aAAX,EAAyB;AAAC,0CAAsB,KAAK,CAAC,MAAN,GAAa,EAAb,GAAgB,IAAI,CAAC,EAA3C,QAAD;AAAoD,YAAA,KAAK,yBAAiB,KAAK,CAAC,KAAN,GAAY,EAAZ,GAAe,EAAhC;AAAzD,WAAzB;AACA,UAAA,CAAC,CAAC,gBAAF,CAAmB,YAAnB,CAAgC,OAAhC,YAA2C,CAAC,CAAC,QAAD,CAA5C,eAA2D,KAAK,CAAC,KAAN,GAAY,CAAC,CAAC,OAAD,CAAb,GAAwB,CAAC,KAAK,CAAC,MAAN,GAAa,GAAb,GAAiB,CAAlB,IAAqB,GAAxG,qCAA6H,CAAC,CAAC,UAAD,CAA9H;AACA,SArBS;AAsBV,QAAA,QAAQ,EAAC,kBAAA,CAAC;AAAA,iBAAE,EAAE,CAAC,YAAH,EAAF;AAAA,SAtBA;AAuBV,QAAA,WAAW,EAAC,qBAAA,CAAC;AAAA,iBAAE,EAAE,CAAC,WAAH,CAAe,MAAf,EAAsB,CAAC,CAAC,KAAxB,CAAF;AAAA,SAvBH;AAwBV,QAAA,KAAK,EAAC,eAAA,CAAC;AAAA,iBAAE,EAAE,CAAC,UAAH,EAAF;AAAA,SAxBG;AAyBV,QAAA,WAAW,EAAC,qBAAA,CAAC;AAAA,iBAAE,CAAC,CAAC,cAAF,EAAF;AAAA;AAzBH,OAVC;AAqCZ,MAAA,iBAAiB,EAAC;AACjB,QAAA,KAAK,EAAC,eAAA,CAAC;AAAA,iBAAE,EAAE,CAAC,UAAH,EAAF;AAAA,SADU;AAEjB,QAAA,WAAW,EAAC,qBAAA,CAAC;AAAA,iBAAE,CAAC,CAAC,cAAF,EAAF;AAAA;AAFI,OArCN;AAyCZ,MAAA,QAAQ,EAAC;AACR,2BAAkB,wBAAA,CAAC,EAAE;AACpB,cAAI,CAAC,GAAC,CAAC,CAAC,MAAR;AAAA,cACC,GAAG,GAAC,uBAAQ,CAAC,CAAC,CAAC,OAAF,GAAU,CAAC,CAAC,GAAb,KAAmB,CAAC,CAAC,WAAF,GAAc,IAAE,CAAC,CAAC,GAArC,CAAR,EAAkD,CAAlD,EAAoD,CAApD,CADL;;AAEA,cAAG,CAAC,CAAC,IAAF,KAAS,WAAZ,EAAwB;AACvB,YAAA,EAAE,CAAC,CAAH,CAAK,SAAL,GAAe,CAAC,CAAC,OAAjB;AAAyB,YAAA,EAAE,CAAC,YAAH;;AACzB,YAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAqB,0BAAW,GAAG,GAAC,KAAK,CAAC,QAArB,EAA8B,KAAK,CAAC,QAApC,CAArB;AACA,WAHD,MAGM,IAAG,CAAC,CAAC,IAAF,KAAS,OAAZ,EAAoB;AACzB,YAAA,KAAK,CAAC,WAAN,GAAkB,GAAG,GAAC,KAAK,CAAC,QAA5B;AACA;AACD,SAVO;AAWR,QAAA,QAAQ,EAAC,kBAAA,CAAC,EAAE;AACX,UAAA,EAAE,CAAC,CAAH,CAAK,SAAL,GAAe,SAAf;AAAyB,UAAA,EAAE,CAAC,YAAH;;AACzB,UAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAqB,0BAAW,KAAK,CAAC,QAAjB,EAA0B,KAAK,CAAC,QAAhC,CAArB;AACA;AAdO,OAzCG;AAyDZ,MAAA,oBAAoB,EAAC;AACpB,QAAA,KAAK,EAAC,eAAA,CAAC,EAAE;AAAC,cAAG,CAAC,CAAC,MAAF,CAAS,OAAT,KAAmB,OAAtB,EAA8B,YAAY,CAAC,UAAA,CAAC;AAAA,mBAAE,EAAE,CAAC,CAAH,CAAK,aAAL,CAAmB,KAAnB,EAAF;AAAA,WAAF,CAAZ;AAA4C;AADhE,OAzDT;AA4DZ,MAAA,aAAa,EAAC;AACb,wBAAe,qBAAA,CAAC,EAAE;AACjB,cAAI,CAAC,GAAC,CAAC,CAAC,MAAR;AAAA,cAAe,CAAC,GAAC,EAAE,CAAC,OAAH,CAAW,YAAX,CAAwB,CAAC,CAAC,KAA1B,CAAjB;;AACA,cAAG,CAAH,EAAK;AAAC;AACL,YAAA,CAAC,CAAC,KAAF,CAAQ,eAAR,cAA4B,CAA5B;AACA,YAAA,EAAE,CAAC,CAAH,CAAK,YAAL,GAAkB,CAAlB;AACA,WAHD,MAGK;AACJ,YAAA,EAAE,CAAC,CAAH,CAAK,YAAL,GAAkB,SAAlB;AACA,YAAA,CAAC,GAAC,EAAE,CAAC,OAAH,CAAW,YAAX,CAAwB,EAAE,CAAC,GAAH,CAAO,mBAA/B,CAAF;AACA,YAAA,CAAC,CAAC,KAAF,CAAQ,eAAR,GAAwB,CAAC,cAAK,CAAL,IAAS,EAAlC;AACA;AACD;AAXY,OA5DF;AAyEZ,MAAA,gBAAgB,EAAC;AAChB,QAAA,KAAK,EAAC,eAAA,CAAC;AAAA,iBAAE,KAAK,CAAC,KAAN,GAAY,CAAC,KAAK,CAAC,KAArB;AAAA,SADS;AAEhB,QAAA,KAAK,EAAC,eAAA,CAAC,EAAE;AACR,UAAA,CAAC,CAAC,cAAF;AACA,cAAG,CAAC,CAAC,SAAF,KAAc,CAAjB,EAAmB;AACnB,cAAI,KAAJ;AACA,cAAG,CAAC,CAAC,MAAF,GAAS,EAAT,IAAe,CAAC,CAAC,MAAF,GAAS,CAAC,EAA5B,EAA+B,KAAK,GAAC,CAAC,CAAC,CAAC,MAAH,GAAU,EAAhB,CAA/B,KACI;AAAC,YAAA,KAAK,GAAC,CAAC,CAAC,MAAR;AAAgB;AACrB,cAAG,CAAC,CAAC,QAAL,EAAc,KAAK,GAAC,KAAK,GAAC,CAAN,GAAQ,EAAR,GAAW,CAAC,EAAlB;AACd,UAAA,KAAK,CAAC,MAAN,GAAa,uBAAQ,KAAK,CAAC,MAAN,GAAc,KAAK,GAAC,GAA5B,EAAiC,CAAjC,EAAmC,CAAnC,CAAb;AACA;AAVe,OAzEL;AAqFZ,MAAA,aAAa,EAAC;AACb,QAAA,OAAO,EAAC,iBAAA,CAAC,EAAE;AAAC,cAAG,CAAC,CAAC,GAAF,KAAQ,OAAX,EAAmB;AAAC,YAAA,EAAE,CAAC,IAAH;AAAW,WAA/B,MAAoC,IAAG,CAAC,CAAC,GAAF,KAAQ,QAAX,EAAoB;AAAC,YAAA,EAAE,CAAC,YAAH,CAAgB,KAAhB;AAAwB;AAAC;AADjF,OArFF;AAwFZ,MAAA,cAAc,EAAC;AACd,QAAA,KAAK,EAAC,eAAA,CAAC;AAAA,iBAAE,EAAE,CAAC,IAAH,EAAF;AAAA;AADO,OAxFH;AA2FZ,MAAA,gBAAgB,EAAC;AAChB,QAAA,KAAK,EAAC,eAAA,CAAC,EAAE;AACR,cAAI,CAAC,GAAC,CAAC,CAAC,MAAR;;AACA,cAAG,CAAC,CAAC,EAAF,CAAK,UAAL,CAAgB,uBAAhB,CAAH,EAA4C;AAC3C,gBAAI,CAAC,GAAC,IAAE,CAAC,CAAC,EAAF,CAAK,KAAL,CAAW,KAAX,EAAkB,CAAlB,CAAR;AACA,gBAAG,EAAE,CAAC,CAAH,CAAK,WAAL,KAAmB,SAAtB,EACC,CAAC,gCAAyB,EAAE,CAAC,CAAH,CAAK,WAA9B,EAAD,CAA8C,SAA9C,CAAwD,MAAxD,CAA+D,QAA/D;AACD,YAAA,CAAC,gCAAyB,CAAzB,EAAD,CAA+B,SAA/B,CAAyC,GAAzC,CAA6C,QAA7C;AACA,YAAA,EAAE,CAAC,CAAH,CAAK,WAAL,GAAiB,CAAjB;AACA;AACD;AAVe,OA3FL;AAuGZ,MAAA,gBAAgB,EAAC;AAChB,QAAA,KAAK,EAAC,eAAA,CAAC,EAAE;AACR,cAAI,CAAC,GAAC,CAAC,CAAC,MAAR;AACA,cAAG,CAAC,CAAC,CAAC,IAAN,EAAW;AACX,iCAAQ,CAAC,CAAC,gBAAF,CAAmB,UAA3B,EAAuC,OAAvC,CAA+C,UAAA,EAAE,EAAE;AAClD,gBAAG,EAAE,CAAC,CAAH,CAAK,WAAL,KAAmB,EAAE,CAAC,IAAzB,EAA8B,EAAE,CAAC,SAAH,CAAa,MAAb,CAAoB,QAApB;AAC9B,WAFD;AAGA,UAAA,CAAC,CAAC,SAAF,CAAY,GAAZ,CAAgB,QAAhB;AACA,UAAA,EAAE,CAAC,CAAH,CAAK,WAAL,GAAiB,CAAC,CAAC,IAAnB;AACA;AATe,OAvGL;AAkHZ,MAAA,iBAAiB,EAAC;AACjB,QAAA,KAAK,EAAC,eAAA,CAAC,EAAE;AACR,cAAG,CAAC,CAAC,MAAF,CAAS,KAAZ,EAAkB;AACjB,YAAA,CAAC,CAAC,aAAF,CAAgB,KAAhB,GAAsB,CAAC,CAAC,MAAF,CAAS,KAA/B;AACA,YAAA,CAAC,CAAC,aAAF,CAAgB,aAAhB,CAA8B,IAAI,KAAJ,CAAU,QAAV,CAA9B;AACA;AACD;AANgB,OAlHN;AA0HZ,MAAA,EAAE,EAAC;AACF,QAAA,kBAAkB,EAAC,4BAAA,IAAI;AAAA,iBAAE,EAAE,CAAC,WAAH,CAAe,eAAf,EAA+B,IAA/B,CAAF;AAAA,SADrB;AAC4D;AAC9D,QAAA,gBAAgB,EAAC,0BAAA,IAAI,EAAE;AACtB,WAAC,UAAD,EAAY,YAAZ,EAA0B,OAA1B,CAAkC,UAAA,CAAC,EAAE;AACpC,YAAA,EAAE,CAAC,WAAH,CAAe,CAAf,EAAiB,IAAI,KAAG,CAAxB;AACA,WAFD;AAGA;AANC;AA1HS,KAAb;;AAmIA,SAAI,IAAI,KAAR,IAAiB,CAAjB,EAAmB;AAAC;AACnB,UAAI,IAAI,GAAC,MAAM,CAAC,KAAD,CAAf;AACA,MAAA,IAAI,IAAE,yBAAU,CAAC,CAAC,KAAD,CAAX,EAAmB,IAAnB,CAAN;AACA;;AAED,QAAG,EAAE,CAAC,eAAN,EAAsB;AACrB,MAAA,MAAM,CAAC,SAAP,CAAiB,GAAG,CAAC,kBAArB,KACG,CAAC,CAAC,0BAAwB,GAAG,CAAC,kBAA7B,CAAD,CAAkD,KAAlD,EADH,CADqB,CAEwC;;AAC5D,aAAO,GAAG,CAAC,kBAAX,KAAkC,QAAnC,IACG,uBAAQ,CAAC,CAAC,gBAAF,CAAmB,UAA3B,EAAuC,OAAvC,CAA+C,UAAA,EAAE,EAAE;AAAC,YAAG,EAAE,CAAC,IAAH,KAAU,GAAG,CAAC,kBAAjB,EAAoC,EAAE,CAAC,KAAH;AAAW,OAAnG,CADH;AAEA;;AAED,QAAG,GAAG,CAAC,WAAJ,YAA2B,WAA9B,EACC,GAAG,CAAC,WAAJ,CAAgB,WAAhB,CAA4B,EAAE,CAAC,MAA/B;;AAED,IAAA,KAAK,CAAC,MAAN,CAAa,MAAb;;AA/Qe;AAgRf;;;;gCACW,I,EAAK,I,EAAK;AACrB,WAAK,CAAL,qBAAoB,IAApB,GAA4B,SAA5B,CAAsC,IAAI,GAAC,KAAD,GAAO,QAAjD,EAA2D,aAA3D;AACA;;;mCAC0B;AAAA;;AAAA,UAAd,CAAc,uEAAZ,IAAY;AAAA,UAAP,CAAO,uEAAL,IAAK;AAC1B,MAAA,qBAAqB,CAAC,YAAI;AACzB,YAAG,CAAC,KAAG,IAAP,EAAY;AACX,UAAA,MAAI,CAAC,CAAL,CAAO,YAAP,CAAoB,SAApB,GAA8B,CAA9B;AACA;;AACD,YAAG,CAAC,KAAG,IAAP,EAAY;AACX,UAAA,MAAI,CAAC,CAAL,CAAO,UAAP,CAAkB,SAAlB,GAA4B,CAA5B;AACA;AACD,OAPoB,CAArB;AAQA;;;qCACgB,C,EAAE;AAAC;AACnB,UAAG,CAAC,CAAC,MAAF,CAAS,OAAT,KAAmB,OAAtB,EAA8B;AAC9B,UAAM,CAAC,GAAC,KAAK,KAAb;AAAA,UAAmB,GAAG,GAAC,CAAC,CAAC,QAAzB;AAAA,UAAkC,GAAG,GAAC,CAAC,CAAC,MAAxC,CAFkB,CAGlB;;AACA,cAAO,CAAC,CAAC,GAAT;AACC,aAAK,GAAL;AAAS;AACR,gBAAG,GAAH,EAAO;AACP,iBAAK,UAAL;AAAkB;AAClB;;AACD,aAAK,YAAL;AAAkB;AAAC;AAClB,YAAA,CAAC,CAAC,WAAF,IAAgB,KAAG,GAAG,GAAC,CAAD,GAAG,CAAT,CAAhB;AAA6B;AAC7B;;AACD,aAAK,WAAL;AAAiB;AAAC;AACjB,YAAA,CAAC,CAAC,WAAF,IAAgB,OAAK,GAAG,GAAC,CAAD,GAAG,CAAX,CAAhB;AAA+B;AAC/B;;AACD,aAAK,SAAL;AAAe;AAAC;AACf,YAAA,CAAC,CAAC,MAAF,GAAS,uBAAQ,CAAC,CAAC,MAAF,GAAU,QAAM,GAAG,GAAC,CAAD,GAAG,CAAZ,CAAlB,EAAkC,CAAlC,EAAoC,CAApC,CAAT;AAAgD;AAChD;;AACD,aAAK,WAAL;AAAiB;AAAC;AACjB,YAAA,CAAC,CAAC,MAAF,GAAS,uBAAQ,CAAC,CAAC,MAAF,GAAU,QAAM,GAAG,GAAC,CAAD,GAAG,CAAZ,CAAlB,EAAkC,CAAlC,EAAoC,CAApC,CAAT;AAAgD;AAChD;;AACD,aAAK,GAAL;AAAS;AAAC;AACT,gBAAG,GAAH,EAAO;AACP,iBAAK,UAAL,CAAgB,UAAhB;AAA4B;AAC5B;;AACD,aAAK,GAAL;AAAS;AAAC;AACT,iBAAK,UAAL,CAAgB,YAAhB;AAA8B;AAC9B;;AACD,aAAK,GAAL;AAAS;AAAC;AACT,gBAAG,GAAH,EAAO;AACP,iBAAK,eAAL,IAAsB,KAAK,OAAL,CAAa,MAAb,EAAtB;AAA4C;AAC5C;;AACD,aAAK,GAAL;AAAS;AAAC;AACT,gBAAG,GAAH,EAAO;AACP,iBAAK,KAAL,CAAW,KAAX,GAAiB,CAAC,KAAK,KAAL,CAAW,KAA7B;AAAmC;AACnC;;AACD,aAAK,GAAL;AAAS;AAAC;AACT,iBAAK,KAAL,CAAW,IAAX,GAAgB,CAAC,KAAK,KAAL,CAAW,IAA5B;AAAiC;AACjC;;AACD,aAAK,OAAL;AAAa;AAAC;AACb,gBAAG,GAAH,EAAO;AACP,iBAAK,eAAL,IAAsB,KAAK,YAAL,EAAtB;AAA0C;AAC1C;;AACD,aAAK,QAAL;AAAc;AAAC;AACd,gBAAG,KAAK,CAAL,CAAO,UAAP,KAAoB,UAAvB,EAAkC;AACjC,mBAAK,UAAL,CAAgB,QAAhB;AAA0B;AAC1B;;AACD;AACA;;AACD;AAAQ;AA7CT;;AA+CA,MAAA,CAAC,CAAC,cAAF;AACA;;;mCAC0D;AAAA,UAA9C,IAA8C,uEAAzC,CAAC,KAAK,CAAL,CAAO,mBAAP,CAA2B,YAAa;AAC1D,UAAI,CAAC,GAAC,KAAK,CAAX;AACA,MAAA,CAAC,CAAC,mBAAF,CAAsB,KAAtB,CAA4B,OAA5B,GAAoC,IAAI,GAAC,MAAD,GAAQ,EAAhD;;AACA,WAAK,WAAL,CAAiB,YAAjB,EAA8B,IAA9B;;AACA,MAAA,YAAY,CAAC,YAAI;AAAC,QAAA,IAAI,GAAC,CAAC,CAAC,aAAF,CAAgB,KAAhB,EAAD,GAAyB,CAAC,CAAC,IAAF,CAAO,KAAP,EAA7B;AAA6C,OAAnD,CAAZ;AACA;;;sCACgB;AAChB,UAAM,CAAC,GAAC,KAAK,CAAL,CAAO,QAAf;AACA,MAAA,CAAC,CAAC,KAAF,GAAQ,CAAC,CAAC,WAAV;AACA,MAAA,CAAC,CAAC,MAAF,GAAS,CAAC,CAAC,YAAX;AACA,WAAK,YAAL;AACA,WAAK,IAAL,CAAU,iBAAV;AACA;;;2BACK;AAAA;;AACL,UAAI,KAAK,GAAC,KAAK,CAAL,CAAO,YAAP,IAAqB,KAAK,GAAL,CAAS,mBAAxC;AAAA,UACC,IAAI,GAAC,KAAK,CAAL,CAAO,aAAP,CAAqB,KAD3B;AAAA,UAEC,IAAI,GAAC,KAAK,CAAL,CAAO,WAFb;AAAA,UAGC,IAAI,GAAC,KAAK,CAAL,CAAO,WAHb;AAAA,UAIC,IAAI,GAAC,KAAK,YAAL,CAAkB,IAJxB;AAAA,UAKC,CAAC,GAAC;AAAC,QAAA,KAAK,EAAL,KAAD;AAAO,QAAA,IAAI,EAAJ,IAAP;AAAY,QAAA,IAAI,EAAJ,IAAZ;AAAiB,QAAA,IAAI,EAAJ,IAAjB;AAAsB,QAAA,IAAI,EAAJ;AAAtB,OALH;AAOA,UAAI,CAAC,GAAC,KAAK,OAAL,CAAa,IAAb,CAAkB,CAAlB,EAAoB,UAAC,OAAD,EAAW;AACpC,YAAG,OAAO,IAAE,OAAO,CAAC,CAAR,KAAY,MAAxB,EACC,MAAI,CAAC,CAAL,CAAO,aAAP,CAAqB,KAArB,GAA2B,EAA3B;AACD,QAAA,OAAO,CAAC,SAAR,GAAkB,IAAlB;;AACA,QAAA,MAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,OAAvB,EAA+B,IAA/B;;AACA,YAAG,MAAI,CAAC,GAAL,CAAS,oBAAZ,EAAiC;AAAC,UAAA,MAAI,CAAC,YAAL,CAAkB,KAAlB;AAA0B;AAC5D,OANK,CAAN;;AAQA,UAAG,CAAC,CAAJ,EAAM;AACL,aAAK,YAAL,CAAkB,KAAlB;AACA;AACA;AACD;;;sCACgB;AAChB,UAAM,GAAG,GAAC,KAAK,CAAL,CAAO,eAAjB;AAAA,UACE,CAAC,GAAC,KAAK,CAAL,CAAO,QADX;AAAA,UAEE,CAAC,GAAC,CAAC,CAAC,KAFN;AAAA,UAGE,CAAC,GAAC,CAAC,CAAC,MAHN;AAAA,UAIE,CAAC,GAAC,KAAK,KAJT;AAAA,UAKE,CAAC,GAAC,CAAC,CAAC,QALN;AAAA,UAME,EAAE,GAAC,CAAC,CAAC,WANP;AAAA,UAOE,GAAG,GAAC,CAAC,CAAC,GAPR;AAAA,UAQE,GAAG,GAAC,CAAC,GAAC,IAAE,GARV;AASA,UAAI,CAAJ;AACA,MAAA,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAkB,CAAlB,EAAoB,CAApB;AACA,MAAA,GAAG,CAAC,OAAJ,GAAc,OAAd,CAZgB,CAahB;;AACA,MAAA,GAAG,CAAC,SAAJ;AACA,MAAA,GAAG,CAAC,WAAJ,GAAgB,MAAhB;AACA,MAAA,GAAG,CAAC,SAAJ,GAAc,CAAd;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,EAAhB;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,GAAC,GAAf,EAAoB,EAApB;AACA,MAAA,GAAG,CAAC,MAAJ,GAnBgB,CAoBhB;;AACA,MAAA,GAAG,CAAC,SAAJ;AACA,MAAA,GAAG,CAAC,WAAJ,GAAkB,SAAlB;AACA,MAAA,GAAG,CAAC,SAAJ,GAAgB,CAAhB;AACA,UAAI,EAAE,GAAG,CAAC,CAAC,QAAX;;AACA,WAAK,CAAC,GAAG,EAAE,CAAC,MAAZ,EAAmB,CAAC,EAApB,GAAyB;AACxB,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,GAAC,EAAE,CAAC,KAAH,CAAS,CAAT,IAAc,CAAd,GAAkB,GAAjC,EAAsC,EAAtC;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,GAAC,EAAE,CAAC,GAAH,CAAO,CAAP,IAAY,CAAZ,GAAgB,GAA/B,EAAoC,EAApC;AACA;;AACD,MAAA,GAAG,CAAC,MAAJ,GA7BgB,CA8BhB;;AACA,MAAA,GAAG,CAAC,SAAJ;AACA,MAAA,GAAG,CAAC,WAAJ,GAAgB,MAAhB;AACA,MAAA,GAAG,CAAC,SAAJ,GAAgB,CAAhB;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAe,EAAf;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,GAAC,GAAG,GAAC,EAAJ,GAAO,CAAtB,EAAwB,EAAxB;AACA,MAAA,GAAG,CAAC,MAAJ,GApCgB,CAqChB;;AACA,MAAA,GAAG,CAAC,SAAJ;AACA,MAAA,GAAG,CAAC,WAAJ,GAAkB,sBAAlB;AACA,MAAA,GAAG,CAAC,SAAJ,GAAgB,CAAhB;AACA,MAAA,EAAE,GAAG,CAAC,CAAC,MAAP;;AACA,WAAK,CAAC,GAAG,EAAE,CAAC,MAAZ,EAAmB,CAAC,EAApB,GAAyB;AACxB,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,GAAC,EAAE,CAAC,KAAH,CAAS,CAAT,IAAc,CAAd,GAAkB,GAAjC,EAAsC,EAAtC;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,GAAC,EAAE,CAAC,GAAH,CAAO,CAAP,IAAY,CAAZ,GAAgB,GAA/B,EAAoC,EAApC;AACA;;AACD,MAAA,GAAG,CAAC,MAAJ,GA9CgB,CA+ChB;;AACA,UAAG,KAAK,CAAL,CAAO,SAAV,EAAoB;AACnB,QAAA,GAAG,CAAC,SAAJ;AACA,QAAA,GAAG,CAAC,WAAJ,GAAgB,iBAAhB;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,GAAC,GAAG,GAAC,EAAJ,GAAO,CAAtB,EAAwB,EAAxB;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,uBAAQ,KAAK,CAAL,CAAO,SAAf,EAAyB,GAAzB,EAA6B,GAAG,GAAC,GAAjC,CAAX,EAAiD,EAAjD;AACA,QAAA,GAAG,CAAC,MAAJ;AACA;;AACD,WAAK,CAAL,CAAO,eAAP,GAAuB,KAAvB;AACA;;;mCACa;AAAA;;AACb,UAAG,KAAK,CAAL,CAAO,eAAV,EAA0B;AAC1B,WAAK,CAAL,CAAO,eAAP,GAAuB,IAAvB;AACA,MAAA,qBAAqB,CAAC;AAAA,eAAI,MAAI,CAAC,eAAL,EAAJ;AAAA,OAAD,CAArB;AACA;;;wBACG,I,EAAgB;AAAA,UAAX,IAAW,uEAAN,KAAM;AAAC;AACpB,UAAI,GAAG,GAAC,IAAI,MAAJ,CAAW,IAAX,EAAgB,IAAhB,EAAqB,KAAK,CAAL,CAAO,OAA5B,CAAR;AACA,MAAA,qBAAqB,CAAC;AAAA,eAAI,GAAG,CAAC,IAAJ,EAAJ;AAAA,OAAD,CAArB;AACA;;;;EAvbiB,uB;;IA0bb,M;;;AACL,kBAAY,IAAZ,EAAiB,IAAjB,EAAsB,UAAtB,EAAiC;AAAA;;AAAA;;AAChC,SAAK,KAAL,GAAW,KAAX;AACA,QAAI,GAAG,GAAC,KAAK,GAAL,GAAS,0BAAI;AAAC,MAAA,CAAC,EAAC,KAAH;AAAS,MAAA,IAAI,EAAC;AAAC,QAAA,KAAK,qBAAa,IAAb;AAAN;AAAd,KAAJ,CAAjB;AACA,IAAA,GAAG,CAAC,gBAAJ,CAAqB,OAArB,EAA6B;AAAA,aAAI,MAAI,CAAC,MAAL,EAAJ;AAAA,KAA7B;AACA,SAAK,UAAL,GAAgB,UAAhB;AACA,SAAK,OAAL,CAAa,IAAb;AACA;;;;;;;;;;;;;;gBACU,I,EAAK;AAAA;;AACf,UAAG,KAAK,OAAR,EAAgB,YAAY,CAAC,KAAK,OAAN,CAAZ;AAChB,WAAK,OAAL,GAAa,UAAU,CAAC;AAAA,eAAI,MAAI,CAAC,MAAL,EAAJ;AAAA,OAAD,EAAmB,IAAI,IAAE,IAAI,CAAC,GAAL,CAAS,CAAC,KAAK,KAAL,GAAW,KAAK,KAAL,CAAW,MAAtB,GAA6B,CAA9B,IAAiC,GAAjC,GAAqC,IAA9C,EAAmD,IAAnD,CAAzB,CAAvB;AACA,K;;;4BACO,I,EAAK;AACZ,WAAK,GAAL,CAAS,SAAT,GAAmB,EAAnB;AACA,UAAI,CAAC,GAAC,0BAAI,IAAJ,CAAN;AACA,MAAA,CAAC,IAAE,KAAK,GAAL,CAAS,WAAT,CAAqB,CAArB,CAAH;AACA,UAAG,IAAI,YAAY,WAAnB,EAA+B,IAAI,GAAC,IAAI,CAAC,WAAV;AAC/B,UAAI,KAAK,GAAC,MAAM,CAAC,IAAD,CAAN,CAAa,KAAb,CAAmB,SAAnB,CAAV;AACA,WAAK,IAAL,GAAU,IAAV;AACA,WAAK,KAAL,GAAW,KAAX;AACA;;;0BACK,I,EAAK,I,EAAK;AACf,WAAK,OAAL,CAAa,IAAb;AACA,WAAK,UAAL,CAAgB,IAAhB;AACA,UAAG,CAAC,KAAK,KAAT,EAAe,KAAK,IAAL;AACf;;;2BACK;AAAA;;AACL,UAAG,KAAK,KAAR,EAAc;AACd,WAAK,GAAL,CAAS,KAAT,CAAe,OAAf,GAAuB,CAAvB;;AACA,UAAG,KAAK,UAAL,IAAmB,KAAK,UAAL,KAAkB,KAAK,GAAL,CAAS,UAAjD,EAA4D;AAC3D,aAAK,UAAL,CAAgB,WAAhB,CAA4B,KAAK,GAAjC;AACA;;AACD,WAAK,GAAL,CAAS,UAAT,IAAqB,UAAU,CAAC,YAAI;AACnC,QAAA,MAAI,CAAC,KAAL,GAAW,IAAX;AACA,QAAA,MAAI,CAAC,GAAL,CAAS,KAAT,CAAe,OAAf,GAAuB,CAAvB;AACA,OAH8B,EAG7B,CAH6B,CAA/B;AAIA,WAAK,UAAL;AACA;;;6BACO;AAAA;;AACP,UAAG,CAAC,KAAK,KAAT,EAAe;AACf,WAAK,KAAL,GAAW,KAAX;AACA,WAAK,GAAL,CAAS,KAAT,CAAe,OAAf,GAAuB,CAAvB;;AACA,UAAG,KAAK,OAAR,EAAgB;AACf,QAAA,YAAY,CAAC,KAAK,OAAN,CAAZ;AACA,aAAK,OAAL,GAAa,CAAb;AACA;;AACD,MAAA,UAAU,CAAC,YAAI;AACd,QAAA,MAAI,CAAC,GAAL,CAAS,UAAT,IAAqB,MAAI,CAAC,GAAL,CAAS,UAAT,CAAoB,WAApB,CAAgC,MAAI,CAAC,GAArC,CAArB;AACA,OAFS,EAER,GAFQ,CAAV;AAGA;;;;;;AAIF,MAAM,CAAC,IAAP,GAAY,IAAZ;;;;;AC9gBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,CAAC,GAAC,WAAK,CAAb,C,CAEA;;AACA,IAAM,eAAe,GAAC;AACrB;AACA,EAAA,KAAK,EAAC,KAFe;AAGrB,EAAA,MAAM,EAAC,CAHc;AAIrB,EAAA,IAAI,EAAC,KAJgB;AAKrB;AACA,EAAA,aAAa,EAAC,IANO;AAOrB,EAAA,aAAa,EAAC,CAAC,aAAD,CAPO;AAQrB,EAAA,gBAAgB,EAAC;AAChB,IAAA,WAAW,EAAC;AACX,MAAA,YAAY,EAAC,EADF;AAEX,MAAA,OAAO,EAAC;AAFG;AADI,GARI;AAcrB;AACA,EAAA,mBAAmB,EAAC,IAfC;AAeI;AACzB,EAAA,kBAAkB,EAAC,CAhBE;AAgBA;AACrB,EAAA,kBAAkB,EAAC,EAjBE;AAkBrB,EAAA,WAAW,EAAC,qBAAC,CAAD,EAAG,QAAH,EAAc;AAAC,IAAA,QAAQ,CAAC,KAAD,CAAR;AAAiB,GAlBvB;AAkBwB;AAC7C;AACA,EAAA,MAAM,EAAC,gBAAC,IAAD,EAAM,OAAN,EAAc,QAAd;AAAA,WAAyB,QAAQ,CAAC,IAAD,EAAM,OAAN,CAAjC;AAAA;AApBc,CAAtB;;IAwBM,gB;;;AACL,8BAAa;AAAA;;AACZ,SAAK,OAAL,GAAa,EAAb;AACA;;;;yBACI,C,EAAS;AAAA,wCAAJ,GAAI;AAAJ,QAAA,GAAI;AAAA;;AACb,WAAK,QAAL,cAAc,CAAd,SAAmB,GAAnB;;AACA,WAAK,YAAL,cAAkB,CAAlB,SAAuB,GAAvB;AACA;;;6BACQ,C,EAAS;AACjB,UAAG,CAAC,IAAI,KAAK,OAAb,EAAqB;AACpB,YAAM,EAAE,GAAC,KAAK,OAAL,CAAa,CAAb,CAAT;;AACA,YAAG;AAAA,6CAHS,GAGT;AAHS,YAAA,GAGT;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACF,iCAAa,EAAb,8HAAgB;AAAA,kBAAR,CAAQ;AACf,kBAAG,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAa,GAAb,MAAoB,KAAvB,EAA6B;AAC7B;AAHC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIF,SAJD,CAIC,OAAM,CAAN,EAAQ;AACR,UAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACA;AACD;AACD;;;uCACwB;AACxB,WAAK,EAAL;AACA;;;uBACE,C,EAAE,M,EAAiB;AAAA,UAAV,GAAU,uEAAN,KAAM;AACrB,UAAG,EAAE,MAAM,YAAY,QAApB,CAAH,EAAiC;AACjC,UAAG,EAAE,CAAC,IAAI,KAAK,OAAZ,CAAH,EAAwB,KAAK,OAAL,CAAa,CAAb,IAAgB,EAAhB;AACxB,UAAG,GAAH,EACC,KAAK,OAAL,CAAa,CAAb,EAAgB,OAAhB,CAAwB,MAAxB,EADD,KAGC,KAAK,OAAL,CAAa,CAAb,EAAgB,IAAhB,CAAqB,MAArB;AACD;;;gCACW,C,EAAE,M,EAAO;AACpB,UAAG,EAAE,CAAC,IAAI,KAAK,OAAZ,CAAH,EAAwB;;AACxB,UAAG,SAAS,CAAC,MAAV,KAAmB,CAAtB,EAAwB;AAAC,eAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AAAuB;AAAQ;;AACxD,UAAI,GAAJ;AACA,UAAG,GAAG,GAAE,KAAK,OAAL,CAAa,CAAb,EAAgB,OAAhB,CAAwB,MAAxB,CAAD,IAAmC,CAA1C,EAA4C,KAAK,OAAL,CAAa,CAAb,EAAgB,MAAhB,CAAuB,GAAvB,EAA2B,CAA3B;AAC5C,UAAG,KAAK,OAAL,CAAa,CAAb,EAAgB,MAAhB,KAAyB,CAA5B,EAA8B,OAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AAC9B;;;iCACY,I,EAAY,CAAE,C,CAAA;;;;;;;IAGtB,a;;;;;AACL,yBAAY,GAAZ,EAAgB;AAAA;;AAAA;;AACf;AACA,IAAA,GAAG,GAAC,MAAK,GAAL,GAAS,MAAM,CAAC,MAAP,CAAc,EAAd,EAAiB,eAAjB,EAAiC,GAAjC,CAAb;AACA,QAAM,CAAC,GAAC,MAAK,CAAL,GAAO;AAAC,MAAA,QAAQ,EAAR,QAAD;AAAU,MAAA,MAAM,EAAN,MAAV;AAAiB,MAAA,EAAE;AAAnB,KAAf,CAHe,CAG0B;;AACzC,UAAK,OAAL,GAAa,EAAb;AACA,UAAK,KAAL,GAAW,EAAX;AACA,UAAK,IAAL,GAAU,UAAV;AACA,UAAK,CAAL,GAAO;AAAC;AACP,MAAA,KAAK,EAAC,0BAAI;AAAC,QAAA,CAAC,EAAC,OAAH;AAAW,QAAA,IAAI,EAAC;AAAC,UAAA,EAAE,EAAC;AAAJ;AAAhB,OAAJ,CADA;AAEN,MAAA,UAAU,EAAC;AAFL,KAAP;AAKA,UAAK,UAAL,GAAgB,0BACf;AAAC,MAAA,CAAC,EAAC,KAAH;AAAS,MAAA,IAAI,EAAC;AAAC,QAAA,EAAE,EAAC;AAAJ,OAAd;AAAiC,MAAA,KAAK,EAAC,CACtC,MAAK,KADiC,EAEtC;AACA;AAAC,QAAA,CAAC,EAAC,KAAH;AAAS,QAAA,IAAI,EAAC;AAAC,UAAA,EAAE,EAAC;AAAJ,SAAd;AAAmC,QAAA,KAAK,EAAC,CACxC;AAAC,UAAA,CAAC,EAAC,KAAH;AAAS,UAAA,IAAI,EAAC;AAAC,YAAA,EAAE,EAAC;AAAJ,WAAd;AAAmC,UAAA,KAAK,EAAC,CAAC,aAAD;AAAzC,SADwC,EAExC;AAAC,UAAA,CAAC,EAAC,KAAH;AAAS,UAAA,IAAI,EAAC;AAAC,YAAA,EAAE,EAAC;AAAJ;AAAd,SAFwC;AAAzC,OAHsC;AAAvC,KADe,CAAhB;;AAUA,UAAK,WAAL,CAAiB,MAAK,UAAtB;;AAGA,QAAI,KAAK,GAAC,MAAK,WAAL,CAAiB,CAAC,CAAC,cAAD,CAAD,GAAkB,MAAnC,CAAV;;AAGA,QAAG,MAAK,eAAR,EAAwB;AACvB,YAAK,gBAAL,GAAsB,0BAAI;AAAC,QAAA,CAAC,EAAC,KAAH;AAAS,QAAA,IAAI,EAAC;AAAC,UAAA,EAAE,EAAC;AAAJ;AAAd,OAAJ,CAAtB;;AACA,UAAI,MAAM,GAAC,MAAK,WAAL,CAAiB,CAAC,CAAC,uBAAD,CAAD,GAA2B,MAA5C,CAAX;;AACA,YAAK,OAAL,GAAa,IAAI,gBAAJ,uDAAb;;AACA,YAAK,UAAL,CAAgB,YAAhB,CAA6B,MAAK,gBAAlC,EAAmD,CAAC,CAAC,aAArD;;AACA,YAAK,WAAL,CAAiB,MAAK,gBAAtB;;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,MAAd;AACA;;AACD,UAAK,CAAL,CAAO,oBAAP,GAA4B,WAAW,CAAC,YAAI;AAC3C,MAAA,CAAC,CAAC,aAAF,CAAgB,KAAhB,CAAsB,SAAtB,GAAgC,eAAa,IAAI,CAAC,CAAC,EAAF,EAAK,EAAL,CAAjB,GAA0B,KAA1B,GAAgC,IAAI,CAAC,CAAC,EAAF,EAAK,EAAL,CAApC,GAA6C,aAA7C,GAA2D,IAAI,CAAC,CAAC,EAAF,EAAK,EAAL,CAA/D,GAAwE,MAAxG;AACA,KAFsC,EAErC,EAFqC,CAAvC,CApCe,CAwCf;;AACA,IAAA,UAAU,CAAC,UAAA,CAAC,EAAE;AACb,OAAC,OAAD,EAAS,QAAT,EAAkB,MAAlB,EAA0B,OAA1B,CAAkC,UAAA,CAAC,EAAE;AAAC;AACpC,QAAA,GAAG,CAAC,CAAD,CAAH,KAAS,SAAV,KAAuB,MAAK,KAAL,CAAW,CAAX,IAAc,GAAG,CAAC,CAAD,CAAxC;AACA,OAFD;AAGA,KAJS,EAIR,CAJQ,CAAV,CAzCe,CA+Cf;;AACA;AACC;AACA,UAAI,QAAQ,GAAC,MAAM,CAAC,wBAAP,CAAgC,gBAAgB,CAAC,SAAjD,EAA2D,MAA3D,CAAb;AACA,MAAA,MAAM,CAAC,cAAP,CAAsB,MAAK,KAA3B,EAAiC,MAAjC,EAAwC;AACvC,QAAA,GAAG,EAAC,QAAQ,CAAC,GAD0B;AAEvC,QAAA,GAAG,EAAC,aAAS,IAAT,EAAc;AACjB,cAAG,IAAI,KAAG,KAAK,IAAf,EAAoB;AACpB,eAAK,aAAL,CAAmB,MAAM,CAAC,MAAP,CAAc,IAAI,KAAJ,CAAU,aAAV,CAAd,EAAuC;AAAC,YAAA,KAAK,EAAC;AAAP,WAAvC,CAAnB;AACA,UAAA,QAAQ,CAAC,GAAT,CAAa,IAAb,CAAkB,IAAlB,EAAuB,IAAvB;AACA;AANsC,OAAxC;AAQA;AACD,IAAA,SAAS,CAAC,MAAK,KAAN,EAAY;AACpB,MAAA,cAAc,EAAC,wBAAA,CAAC,EAAE;AACjB,QAAA,aAAa,CAAC,MAAK,CAAL,CAAO,oBAAR,CAAb;AACA,YAAG,CAAC,CAAC,aAAF,CAAgB,UAAnB,EAA8B;AAC7B,UAAA,CAAC,CAAC,aAAF,CAAgB,UAAhB,CAA2B,WAA3B,CAAuC,CAAC,CAAC,aAAzC;AACD,OALmB;AAMpB,MAAA,KAAK,EAAC,eAAA,CAAC,EAAE;AACR,QAAA,aAAa,CAAC,MAAK,CAAL,CAAO,oBAAR,CAAb;AACA,QAAA,aAAa,CAAC,KAAd,CAAoB,SAApB,GAA8B,EAA9B;AACA,QAAA,aAAa,CAAC,SAAd,GAAwB,WAAxB;AACA;AAVmB,KAAZ,CAAT,CA5De,CAyEf;;AACA,UAAK,EAAL,CAAQ,aAAR,EAAsB,UAAA,GAAG,EAAE;AAC1B,YAAK,KAAL,CAAW,GAAX,GAAe,GAAf;AACA,aAAO,KAAP,CAF0B,CAEb;AACb,KAHD;;AAIA,QAAG,GAAG,CAAC,GAAP,EAAW,MAAK,GAAL,GAAS,GAAG,CAAC,GAAb;;AAEX,UAAK,EAAL,CAAQ,UAAR,EAAmB,YAAI;AACtB,YAAK,KAAL,CAAW,UAAX,GAAsB,IAAtB;;AACA,MAAA,KAAK,CAAC,MAAN,CAAa,MAAb,EAFsB,CAGtB;;AACA,KAJD;;AAKA,QAAG,KAAK,CAAC,OAAN,CAAc,GAAG,CAAC,OAAlB,CAAH,EAA8B;AAAC;AAC9B,UAAI,KAAK,GAAC,MAAK,WAAL,CAAiB,CAAC,CAAC,gBAAD,CAAD,GAAoB,MAArC,CAAV;;AACA,UAAI,UAAU,GAAC,EAAf;AAF6B;AAAA;AAAA;;AAAA;AAG7B,8BAAe,GAAG,CAAC,OAAnB,mIAA2B;AAAA,cAAnB,GAAmB;AAC1B,UAAA,UAAU,CAAC,IAAX,CAAgB,MAAK,UAAL,CAAgB,GAAhB,CAAhB;AACA;AAL4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM7B,MAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,IAAxB,CAA6B,YAAI;AAChC,QAAA,KAAK,CAAC,MAAN,CAAa,MAAb;;AACA,cAAK,IAAL,CAAU,UAAV;AACA,OAHD,EAGG,KAHH,CAGS,UAAA,CAAC,EAAE;AACX,QAAA,OAAO,CAAC,KAAR,CAAc,CAAd;;AACA,cAAK,IAAL,CAAU,kBAAV,EAA6B,CAA7B;AACA,OAND;AAOA;AACA;;AACD,UAAK,IAAL,CAAU,UAAV;;AApGe;AAqGf;;;;iCACmC;AAAA,UAAzB,MAAyB,uEAAlB,KAAK,KAAL,CAAW,MAAO;AACnC,WAAK,KAAL,CAAW,MAAM,GAAC,MAAD,GAAQ,OAAzB;AACA;;;gCACW,I,EAAK;AAChB,UAAI,CAAC,GAAC,0BAAI;AAAC,QAAA,CAAC,EAAC,KAAH;AAAS,QAAA,KAAK,EAAC,CAAC,IAAD;AAAf,OAAJ,CAAN;AACA,WAAK,CAAL,CAAO,YAAP,CAAoB,WAApB,CAAgC,CAAhC;AACA,aAAO,CAAP;AACA;;;gCACW,G,EAAI;AACf,UAAM,CAAC,GAAC,KAAK,CAAb;AACA,UAAG,GAAG,CAAC,EAAJ,IAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAL,CAAb,EAAsB,CAAC,CAAC,GAAG,CAAC,EAAL,CAAD,GAAU,GAAV;AACtB,MAAA,OAAO,CAAC,GAAG,CAAC,gBAAJ,CAAqB,GAArB,CAAD,CAAP,CAAmC,OAAnC,CAA2C,UAAA,CAAC,EAAE;AAC7C,YAAG,CAAC,CAAC,EAAF,IAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAH,CAAX,EAAkB,CAAC,CAAC,CAAC,CAAC,EAAH,CAAD,GAAQ,CAAR;AAClB,OAFD;AAGA;;;iCACwB;AAAA,UAAd,IAAc,uEAAT,QAAS;AACxB,UAAG,IAAI,KAAG,QAAP,IAAmB,KAAK,CAAL,CAAO,UAAP,KAAoB,IAA1C,EAA+C;;AAC/C,UAAG,KAAK,CAAL,CAAO,UAAP,KAAoB,UAAvB,EAAkC;AACjC,aAAK,MAAL,CAAY,KAAZ,CAAkB,QAAlB,GAA2B,EAA3B;AACA,OAFD,MAEM,IAAG,KAAK,CAAL,CAAO,UAAP,KAAoB,YAAvB,EAAoC;AACzC,QAAA,cAAc;AACd;;AACD,UAAG,IAAI,KAAG,QAAP,IAAmB,KAAK,CAAL,CAAO,UAAP,KAAoB,IAA1C,EAA+C,IAAI,GAAC,QAAL,CAPvB,CAOqC;;AAC7D,cAAO,IAAP;AACC,aAAK,UAAL;AAAgB;AACf,iBAAK,MAAL,CAAY,KAAZ,CAAkB,QAAlB,GAA2B,OAA3B;AACA,iBAAK,MAAL,CAAY,YAAZ,CAAyB,YAAzB,EAAsC,UAAtC;AACA;AACA;;AACD,aAAK,YAAL;AAAkB;AACjB,iBAAK,MAAL,CAAY,YAAZ,CAAyB,YAAzB,EAAsC,YAAtC;AACA,YAAA,iBAAiB,CAAC,KAAK,MAAN,CAAjB;AACA;AACA;;AACD;AAAQ;AACP,iBAAK,MAAL,CAAY,YAAZ,CAAyB,YAAzB,EAAsC,QAAtC;AACA;AAbF;;AAeA,WAAK,CAAL,CAAO,UAAP,GAAkB,IAAlB;AACA,WAAK,IAAL,CAAU,kBAAV,EAA6B,IAA7B;AACA;;;mCACa;AACb,UAAM,CAAC,GAAC,QAAR;AACA,aAAO,CAAC,CAAC,CAAC,uBAAF,IACJ,CAAC,CAAC,mBADE,IAEJ,CAAC,CAAC,oBAFE,IAGJ,CAAC,CAAC,iBAHC,KAIH,KAAK,MAJT;AAKA;;;+BACU,G,EAAI;AAAA;;AAAC;AACf,UAAI,CAAC,GAAC,KAAK,CAAC,GAAD,CAAL,CACL,IADK,CACA,UAAA,GAAG;AAAA,eAAE,GAAG,CAAC,IAAJ,EAAF;AAAA,OADH,EAEL,IAFK,CAEA,UAAA,MAAM,EAAE;AACb;;AACA,QAAA,MAAM,GAAC,MAAM,CAAC,IAAP,EAAP;AACA,YAAI,MAAM,GAAC,IAAI,CAAC,MAAD,CAAf;AACA,YAAI,OAAO,MAAM,CAAC,IAAd,KAAqB,QAAtB,IAAiC,CAAC,MAAM,CAAC,IAA5C,EACC,MAAM,IAAI,SAAJ,CAAc,qBAAd,CAAN;AACD,YAAG,MAAI,CAAC,OAAL,CAAa,MAAM,CAAC,IAApB,CAAH,EACC,uCAAgC,MAAM,CAAC,IAAvC;AACD,QAAA,MAAI,CAAC,OAAL,CAAa,MAAM,CAAC,IAApB,IAA0B,MAA1B;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,cAAV,EAAyB,MAAM,CAAC,IAAhC;;AACA,eAAO,MAAM,CAAC,IAAd;AACA,OAdK,CAAN;AAeA,MAAA,CAAC,CAAC,KAAF,CAAQ,UAAA,CAAC,EAAE;AACV,QAAA,OAAO,CAAC,KAAR,CAAc,oBAAd,EAAmC,CAAnC;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,oBAAV,EAA+B,CAA/B;AACA,OAHD;AAIA,aAAO,CAAP;AACA;;;wBACiB;AAAC,aAAO,KAAK,OAAL,CAAa,YAApB;AAAkC;;;wBACzC;AAAC,aAAO,KAAK,CAAL,CAAO,MAAd;AAAsB;;;wBACxB;AAAC,aAAO,KAAK,CAAL,CAAO,KAAd;AAAqB;;;wBACxB;AAAC,aAAO,KAAK,KAAL,CAAW,GAAlB;AAAuB,K;sBACzB,C,EAAE;AAAA;;AACT,MAAA,CAAC,GAAC,CAAC,CAAC,IAAF,EAAF;AACA,UAAG,CAAC,KAAK,KAAL,CAAW,UAAf,EACC,KAAK,EAAL,CAAQ,UAAR,EAAmB,YAAI;AACtB,QAAA,MAAI,CAAC,GAAL,GAAS,CAAT;AACA,OAFD,EADD,KAII;AACH,aAAK,IAAL,CAAU,aAAV,EAAwB,CAAxB;AACA;AACD;;;wBACgB;AAAC,aAAO,KAAK,YAAL,CAAkB,OAAlB,CAA0B,WAAjC;AAA8C;;;wBACjD;AAAC,aAAO,CAAC,KAAK,KAAL,CAAW,UAAZ,EAAuB,KAAK,KAAL,CAAW,WAAlC,CAAP;AAAuD;;;wBAClD;AAAC,aAAO,KAAK,GAAL,CAAS,aAAT,IAAwB,IAA/B;AAAqC;;;;EA9LhC,gB,GAkM5B;;;;;AAEA,SAAS,SAAT,CAAmB,MAAnB,EAA0B,MAA1B,EAAiC;AAChC,MAAG,CAAC,KAAK,CAAC,OAAN,CAAc,MAAd,CAAJ,EAA0B,MAAM,GAAC,CAAC,MAAD,CAAP;;AADM,6BAExB,CAFwB;AAG/B,IAAA,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAe,OAAf,CAAuB,UAAS,EAAT,EAAY;AAClC,MAAA,MAAM,CAAC,OAAP,CAAe,UAAS,CAAT,EAAW;AACzB,QAAA,CAAC,CAAC,gBAAF,CAAmB,EAAnB,EAAsB,MAAM,CAAC,CAAD,CAA5B;AACA,OAFD;AAGA,KAJD;AAH+B;;AAEhC,OAAI,IAAI,CAAR,IAAa,MAAb;AAAA,UAAQ,CAAR;AAAA;AAMA;;AACD,SAAS,iBAAT,CAA2B,CAA3B,EAA8B;AAC7B,MAAG;AACF,KAAC,CAAC,CAAC,iBAAF,IACD,CAAC,CAAC,mBADD,IAED,CAAC,CAAC,oBAFD,IAGD,CAAC,CAAC,uBAHF,EAIC,IAJD,CAIM,CAJN;AAKA,GAND,CAMC,OAAM,CAAN,EAAQ;AACR,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACA,IAAA,KAAK,CAAC,CAAC,CAAC,qCAAD,CAAF,CAAL;AACA;AACD;;AACD,SAAS,cAAT,GAA0B;AACzB,MAAM,CAAC,GAAC,QAAR;AACA,GAAC,CAAC,CAAC,cAAF,IACD,CAAC,CAAC,gBADD,IAED,CAAC,CAAC,mBAFD,IAGD,CAAC,CAAC,sBAHF,EAG0B,IAH1B,CAG+B,CAH/B;AAIA;;AACD,SAAS,YAAT,GAAwB;AACvB,MAAM,CAAC,GAAC,QAAR;AACA,SAAO,CAAC,EAAE,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,aAAlB,IAAmC,CAAC,CAAC,kBAArC,IAA2D,CAAC,CAAC,mBAA/D,CAAR;AACA;;AACD,SAAS,UAAT,CAAoB,GAApB,EAAwB,KAAxB,EAA8B;AAC7B,MAAG,KAAK,IAAE,SAAV,EAAoB,KAAK,GAAC,GAAN;AACpB,MAAI,CAAJ;AAAA,MAAM,CAAC,GAAC,GAAG,GAAC,CAAZ;AAAA,MAAc,CAAC,GAAE,CAAC,GAAC,IAAH,GAAS,CAAzB;AACA,MAAG,KAAK,IAAE,IAAV,EAAe,CAAC,GAAC,CAAC,GAAC,IAAJ;AACf,EAAA,CAAC,GAAC,CAAC,OAAO,CAAE,CAAC,GAAC,EAAH,GAAO,CAAR,CAAR,EAAmB,OAAO,CAAC,CAAC,GAAC,EAAH,CAA1B,CAAF;AACC,EAAA,KAAK,IAAE,IAAR,IAAe,CAAC,CAAC,OAAF,CAAU,CAAV,CAAf;AACA,SAAO,CAAC,CAAC,IAAF,CAAO,GAAP,CAAP;AACA;;AACD,SAAS,OAAT,CAAiB,CAAjB,EAAmB;AAAC;AACnB,SAAO,CAAC,GAAC,CAAF,IAAK,CAAL,eAAY,CAAZ,CAAP;AACA;;AACD,SAAS,QAAT,CAAkB,GAAlB,EAAsB,GAAtB,EAA0B;AAAC;AAC1B,OAAI,IAAI,CAAR,IAAa,GAAb;AACC,IAAA,GAAG,CAAC,YAAJ,CAAiB,CAAjB,EAAmB,GAAG,CAAC,CAAD,CAAtB;AADD;AAEA;;AACD,SAAS,OAAT,CAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B;AAAC;AAC7B,SAAO,GAAG,GAAC,GAAJ,GAAQ,GAAR,GAAa,GAAG,GAAC,GAAJ,GAAQ,GAAR,GAAY,GAAhC;AACA;;AACD,SAAS,IAAT,CAAc,GAAd,EAAmB,GAAnB,EAAwB;AACvB,SAAQ,GAAG,GAAC,IAAI,CAAC,MAAL,MAAe,GAAG,GAAC,GAAnB,CAAJ,GAA4B,GAA7B,GAAkC,CAAzC;AACA;;AACD,SAAS,OAAT,CAAiB,GAAjB,EAAqB;AACpB,MAAG,GAAG,YAAY,KAAlB,EAAwB,OAAO,GAAG,CAAC,KAAJ,EAAP;AACxB,MAAG,GAAG,CAAC,MAAJ,KAAa,SAAhB,EACC,OAAO,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,GAA3B,CAAP;AACD,4BAAW,GAAX;AACA,C,CAED;;;AACA,IAAG,CAAC,MAAM,CAAC,SAAP,CAAiB,UAArB,EACA,MAAM,CAAC,SAAP,CAAiB,UAAjB,GAA8B,UAAS,YAAT,EAAkC;AAAA,MAAX,QAAW,uEAAF,CAAE;AAC/D,SAAO,KAAK,MAAL,CAAY,QAAZ,EAAsB,YAAY,CAAC,MAAnC,MAA+C,YAAtD;AACA,CAFD,C,CAGA;;AACA,IAAG,CAAC,MAAM,CAAC,MAAX,EACA,MAAM,CAAC,MAAP,GAAgB,UAAS,MAAT,EAAiB,OAAjB,EAA0B;AACzC;;AACA,MAAG,MAAM,IAAE,IAAX,EAAgB,MAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN;AAChB,MAAI,EAAE,GAAG,MAAM,CAAC,MAAD,CAAf;;AACA,OAAI,IAAI,KAAK,GAAC,CAAd,EAAgB,KAAK,GAAC,SAAS,CAAC,MAAhC,EAAuC,KAAK,EAA5C,EAA+C;AAC9C,QAAI,UAAU,GAAC,SAAS,CAAC,KAAD,CAAxB;;AACA,QAAG,UAAU,IAAE,IAAf,EAAoB;AACnB,WAAI,IAAI,OAAR,IAAmB,UAAnB,EAA+B;AAC9B,YAAG,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,UAArC,EAAgD,OAAhD,CAAH,EAA4D;AAC3D,UAAA,EAAE,CAAC,OAAD,CAAF,GAAY,UAAU,CAAC,OAAD,CAAtB;AACA;AACD;AACD;AACD;;AACD,SAAO,EAAP;AACA,CAfD,C,CAgBA;;AACA,IAAG,CAAC,KAAK,CAAC,IAAV,EACA,KAAK,CAAC,IAAN,GAAW,UAAS,CAAT,EAAW,IAAX,EAAgB;AAC1B,MAAG,EAAE,CAAC,YAAY,KAAf,CAAH,EAAyB,CAAC,GAAC,OAAO,CAAC,CAAD,CAAT;AACzB,MAAI,CAAC,GAAC,IAAI,KAAJ,CAAU,CAAC,CAAC,MAAZ,CAAN;;AACA,OAAI,IAAI,CAAC,GAAC,CAAC,CAAC,MAAZ,EAAmB,CAAC,EAApB;AAAwB,IAAA,CAAC,CAAC,CAAD,CAAD,GAAK,IAAI,GAAC,IAAI,CAAC,CAAC,CAAC,CAAD,CAAF,EAAM,CAAN,CAAL,GAAc,CAAC,CAAC,CAAD,CAAxB;AAAxB;;AACA,SAAO,CAAP;AACA,CALD,C,CAMA;;AACA,IAAG,CAAC,MAAM,CAAC,SAAX,EACA,MAAM,CAAC,SAAP,GAAiB,UAAS,CAAT,EAAW;AAC1B,SAAO,CAAC,CAAC,GAAC,CAAH,MAAQ,CAAf;AACD,CAFD;eAIe,a;;;;ACnXf;;;;AAIA;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;;;;;;;;;AACA,0BAAe,0BAAf,EAA4B,gCAA5B,E,CAAgD;;AAEhD,IAAM,UAAU,GAAC,kBAAjB;AACA,IAAM,WAAW,GAAC,CAAC,OAAD,EAAS,MAAT,EAAgB,MAAhB,EAAuB,MAAvB,EAA8B,MAA9B,CAAlB;;IACM,O;;;AACL,mBAAY,IAAZ,EAAiB;AAAA;;AAAA;;AAChB,SAAK,IAAL,GAAU,IAAV;AACA,SAAK,YAAL,GAAkB,IAAI,0BAAJ,CAAiB,IAAI,CAAC,gBAAtB,CAAlB;;AACA,QAAG,IAAI,CAAC,GAAL,CAAS,aAAT,YAAkC,KAArC,EAA2C;AAC1C,MAAA,IAAI,CAAC,GAAL,CAAS,aAAT,CAAuB,OAAvB,CAA+B,UAAA,CAAC,EAAE;AACjC,QAAA,KAAI,CAAC,UAAL,CAAgB,CAAhB;;AACA,QAAA,KAAI,CAAC,YAAL,CAAkB,MAAlB,CAAyB,CAAzB;AACA,OAHD;AAIA;;AACD,SAAK,YAAL,CAAkB,QAAlB,CAA2B,IAAI,CAAC,KAAhC;AACA;;;;+BACU,I,EAAK;AACf,aAAO,KAAK,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,EAAkC,KAAK,IAAL,CAAU,GAAV,CAAc,gBAAd,CAA+B,IAA/B,CAAlC,CAAP;AACA;;;yBACI,G,EAAI;AACR,aAAO,KAAK,YAAL,CAAkB,IAAlB,CAAuB,GAAvB,CAAP;AACA;;;6BACQ,I,EAAK;AACb,WAAK,YAAL,CAAkB,QAAlB,CAA2B,IAA3B;AACA;;;2BACM,G,EAAI;AACV,WAAK,YAAL,CAAkB,MAAlB,CAAyB,GAAzB;AACA;;;6BACO;AACP,WAAK,YAAL,CAAkB,MAAlB;AACA,WAAK,IAAL,CAAU,IAAV,CAAe,oBAAf,EAAoC,IAApC,EAAyC,KAAK,MAAL,CAAY,IAAZ,EAAkB,OAA3D;AACA;;;8BACQ;AAAC,WAAK,YAAL,CAAkB,MAAlB;AAA4B;;;2BAC/B,I,EAAK,I,EAAK;AAChB,UAAG,OAAO,IAAP,KAAc,SAAd,IAA2B,IAAI,IAAE,SAApC,EAA8C;AAAC;AAC9C,QAAA,IAAI,GAAE,IAAI,IAAE,SAAP,GAAkB,IAAlB,GAAuB,CAAC,KAAK,YAAL,CAAkB,OAA/C;AACA,aAAK,YAAL,CAAkB,IAAI,GAAC,QAAD,GAAU,SAAhC;AACA,aAAK,IAAL,CAAU,IAAV,CAAe,oBAAf,EAAoC,IAApC;AACA;AACA;;AACD,UAAG;AACF,YAAG,IAAI,IAAE,SAAT,EAAmB,IAAI,GAAC,CAAC,KAAK,MAAL,CAAY,IAAZ,EAAkB,OAAxB;AACnB,aAAK,YAAL,CAAkB,IAAI,GAAC,QAAD,GAAU,SAAhC,EAA2C,IAA3C;AACA,aAAK,IAAL,CAAU,IAAV,CAAe,qBAAf,EAAqC,IAArC,EAA0C,KAAK,MAAL,CAAY,IAAZ,EAAkB,OAA5D;AACA,OAJD,CAIC,OAAM,CAAN,EAAQ;AACR,QAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACA,eAAO,KAAP;AACA;;AACD,aAAO,IAAP;AACA;;;uBACE,C,EAAE,C,EAAE;AACN,aAAO,KAAK,MAAL,CAAY,aAAZ,EAA2B,SAA3B,CAAqC,CAArC,EAAuC,CAAvC,CAAP;AACA;;;2BACM,I,EAAK;AACX,aAAO,KAAK,YAAL,CAAkB,OAAlB,CAA0B,IAA1B,CAAP;AACA;;;yBACI,G,EAAI,Q,EAAS;AACjB,4BAAa,WAAb;AAAI,YAAI,CAAC,GAAI,WAAJ,IAAL;AACH,YAAI,CAAC,IAAI,GAAN,KAAa,KAAhB,EAAsB,OAAO,KAAP;AADvB;;AAEA,UAAG,CAAC,GAAG,CAAC,IAAJ,IAAU,EAAX,EAAe,KAAf,CAAqB,OAArB,CAAH,EAAiC,OAAO,KAAP;AACjC,MAAA,GAAG,CAAC,KAAJ,GAAU,KAAK,YAAL,CAAkB,GAAG,CAAC,KAAtB,CAAV;;AACA,UAAG,GAAG,CAAC,KAAP,EAAa;AACZ,QAAA,GAAG,CAAC,KAAJ,GAAU,GAAG,CAAC,KAAJ,CAAU,OAAV,CAAkB,KAAlB,EAAwB,YAAI;AACrC,iBAAO,UAAU,CAAC,uBAAS,KAAG,IAAI,CAAC,MAAL,EAAJ,GAAmB,CAA3B,EAA6B,CAA7B,EAA+B,EAA/B,CAAD,CAAjB;AACA,SAFS,CAAV;AAGA,OAJD,MAIK;AACJ,QAAA,GAAG,CAAC,KAAJ,GAAU,IAAV;AACA;;AACD,UAAG,KAAK,IAAL,CAAU,GAAV,CAAc,WAAd,YAAqC,QAAxC,EAAiD;AAChD,aAAK,IAAL,CAAU,GAAV,CAAc,WAAd,CAA0B,GAA1B,EAA8B,QAAQ,IAAG,YAAI,CAAE,CAA/C;AACA,eAAO,IAAP;AACA;;AACD,aAAO,KAAP;AACA;;;iCACY,E,EAAG;AACf,UAAG,OAAO,EAAP,KAAc,QAAjB,EAA0B,OAAO,KAAP;AAC1B,aAAO,CAAC,EAAE,GAAC,EAAE,CAAC,KAAH,CAAS,6BAAT,CAAJ,IAA6C,EAAE,CAAC,CAAD,CAA/C,GAAmD,KAA1D;AACA;;;;;;eAGa,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFf;;;;AAIA,IAAM,IAAI,GAAC;AACV,EAAA,IAAI,EAAC,IADK;AAEV,EAAA,KAAK,EAAC,EAFI;AAGV,EAAA,CAAC,EAAC,WAAC,GAAD,EAAe;AAChB,QAAI,CAAC,GAAE,IAAI,CAAC,IAAL,IAAW,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,IAAhB,EAAsB,GAAtB,CAAZ,IAAyC,GAA/C;;AADgB,sCAAP,IAAO;AAAP,MAAA,IAAO;AAAA;;AAEhB,IAAA,IAAI,CAAC,MAAL,IAAa,IAAI,CAAC,OAAL,CAAa,UAAC,GAAD,EAAK,GAAL,EAAW;AAAC,MAAA,CAAC,GAAC,CAAC,CAAC,OAAF,YAAc,GAAd,GAAoB,GAApB,CAAF;AAA2B,KAApD,CAAb;AACA,WAAO,CAAP;AACA;AAPS,CAAX;;AAWA,IAAI,CAAC,KAAL,CAAW,OAAX,IAAoB;AACnB,UAAO,IADY;AAEnB,UAAO,IAFY;AAGnB,UAAO,IAHY;AAInB,WAAQ,IAJW;AAKnB,WAAQ,IALW;AAMnB,YAAS,IANU;AAOnB,cAAW,IAPQ;AAQnB,cAAW,IARQ;AASnB,eAAY,OATO;AAUnB,kBAAe,MAVI;AAWnB,mBAAgB,MAXG;AAYnB,oBAAiB,MAZE;AAanB,kBAAe,SAbI;AAcnB,qBAAkB,MAdC;AAenB,qBAAkB,OAfC;AAgBnB,oBAAiB,SAhBE;AAiBnB,uBAAoB,SAjBD;AAkBnB,wBAAqB,SAlBF;AAmBnB,2BAAwB,QAnBL;AAoBnB,0BAAuB,WApBJ;AAqBnB,yCAAsC,WArBnB,CA0BpB;;AA1BoB,CAApB;;AA4BA,IAAG,CAAC,SAAS,CAAC,SAAd,EAAwB;AACvB,EAAA,SAAS,CAAC,SAAV,GAAoB,CAAC,SAAS,CAAC,QAAV,IAAoB,SAAS,CAAC,eAA/B,CAApB;AACA;;8BAEmB,SAAS,CAAC,S;;AAA9B,yCAAyC;AAArC,MAAI,IAAI,WAAR;;AACH,MAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAH,EAAoB;AACnB,IAAA,IAAI,CAAC,IAAL,GAAU,IAAV;AACA;AACA;;AACD,MAAI,IAAI,GAAC,IAAI,CAAC,KAAL,CAAW,MAAX,EAAmB,CAAnB,CAAT;;AACA,OAAI,IAAI,GAAR,IAAe,IAAI,CAAC,KAApB,EAA0B;AACzB,QAAG,GAAG,CAAC,UAAJ,CAAe,IAAf,CAAH,EAAwB;AACvB,MAAA,IAAI,CAAC,IAAL,GAAU,GAAV;AACA;AACA;AACD;;AACD,MAAG,IAAI,CAAC,IAAR,EAAa;AACb;;AACD,OAAO,CAAC,KAAR,CAAc,cAAY,IAAI,CAAC,IAA/B","file":"NyaP.80.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nfunction _Obj(t){return (typeof t == 'object');}\r\n\r\nfunction Object2HTML(obj,func){\r\n\tlet ele,o,e;\r\n\tif(typeof obj==='string' ||typeof obj==='number')ele=document.createTextNode(obj);//text node\r\n\telse if(obj instanceof Node)ele=obj;\r\n\telse if(obj===null || typeof obj !=='object' || '_' in obj === false || typeof obj._ !== 'string' || obj._=='')return;//if it dont have a _ prop to specify a tag\r\n\tele||(ele=document.createElement(obj._));\r\n\t//attributes\r\n\tif(_Obj(obj.attr))for(o in obj.attr)ele.setAttribute(o,obj.attr[o]);\r\n\t//properties\r\n\tif(_Obj(obj.prop))for(o in obj.prop)ele[o]=obj.prop[o];\r\n\t//events\r\n\tif(_Obj(obj.event))for(o in obj.event)ele.addEventListener(o,obj.event[o]);\r\n\t//childNodes\r\n\tif(_Obj(obj.child)&&obj.child.length>0)\r\n\t\tobj.child.forEach(o=>{\r\n\t\t\te=Object2HTML(o,func);\r\n\t\t\t(e instanceof Node)&&ele.appendChild(e);\r\n\t\t});\r\n\tfunc&&func(ele);\r\n\treturn ele;\r\n}\r\n\r\nexport default Object2HTML;\r\nexport {Object2HTML}","/**\r\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\r\n * directory of this distribution and at\r\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\r\n */\r\n;\r\n(function (root, factory) {\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(factory);\r\n    } else if (typeof exports === \"object\") {\r\n        module.exports = factory();\r\n    } else {\r\n        root.ResizeSensor = factory();\r\n    }\r\n}(this, function () {\r\n\r\n    // Make sure it does not throw in a SSR (Server Side Rendering) situation\r\n    if (typeof window === \"undefined\") {\r\n        return null;\r\n    }\r\n    // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\r\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\r\n    // would generate too many unnecessary events.\r\n    var requestAnimationFrame = window.requestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        function (fn) {\r\n            return window.setTimeout(fn, 20);\r\n        };\r\n\r\n    /**\r\n     * Iterate over each of the provided element(s).\r\n     *\r\n     * @param {HTMLElement|HTMLElement[]} elements\r\n     * @param {Function}                  callback\r\n     */\r\n    function forEachElement(elements, callback){\r\n        var elementsType = Object.prototype.toString.call(elements);\r\n        var isCollectionTyped = ('[object Array]' === elementsType\r\n            || ('[object NodeList]' === elementsType)\r\n            || ('[object HTMLCollection]' === elementsType)\r\n            || ('[object Object]' === elementsType)\r\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\r\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\r\n        );\r\n        var i = 0, j = elements.length;\r\n        if (isCollectionTyped) {\r\n            for (; i < j; i++) {\r\n                callback(elements[i]);\r\n            }\r\n        } else {\r\n            callback(elements);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Class for dimension change detection.\r\n     *\r\n     * @param {Element|Element[]|Elements|jQuery} element\r\n     * @param {Function} callback\r\n     *\r\n     * @constructor\r\n     */\r\n    var ResizeSensor = function(element, callback) {\r\n        /**\r\n         *\r\n         * @constructor\r\n         */\r\n        function EventQueue() {\r\n            var q = [];\r\n            this.add = function(ev) {\r\n                q.push(ev);\r\n            };\r\n\r\n            var i, j;\r\n            this.call = function() {\r\n                for (i = 0, j = q.length; i < j; i++) {\r\n                    q[i].call();\r\n                }\r\n            };\r\n\r\n            this.remove = function(ev) {\r\n                var newQueue = [];\r\n                for(i = 0, j = q.length; i < j; i++) {\r\n                    if(q[i] !== ev) newQueue.push(q[i]);\r\n                }\r\n                q = newQueue;\r\n            }\r\n\r\n            this.length = function() {\r\n                return q.length;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {String}      prop\r\n         * @returns {String|Number}\r\n         */\r\n        function getComputedStyle(element, prop) {\r\n            if (element.currentStyle) {\r\n                return element.currentStyle[prop];\r\n            }\r\n            if (window.getComputedStyle) {\r\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\r\n            }\r\n\r\n            return element.style[prop];\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function}    resized\r\n         */\r\n        function attachResizeEvent(element, resized) {\r\n            if (element.resizedAttached) {\r\n                element.resizedAttached.add(resized);\r\n                return;\r\n            }\r\n\r\n            element.resizedAttached = new EventQueue();\r\n            element.resizedAttached.add(resized);\r\n\r\n            element.resizeSensor = document.createElement('div');\r\n            element.resizeSensor.className = 'resize-sensor';\r\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\r\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\r\n\r\n            element.resizeSensor.style.cssText = style;\r\n            element.resizeSensor.innerHTML =\r\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\r\n                    '<div style=\"' + styleChild + '\"></div>' +\r\n                '</div>' +\r\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\r\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\r\n                '</div>';\r\n            element.appendChild(element.resizeSensor);\r\n\r\n            if (getComputedStyle(element, 'position') == 'static') {\r\n                element.style.position = 'relative';\r\n            }\r\n\r\n            var expand = element.resizeSensor.childNodes[0];\r\n            var expandChild = expand.childNodes[0];\r\n            var shrink = element.resizeSensor.childNodes[1];\r\n            var dirty, rafId, newWidth, newHeight;\r\n            var lastWidth = element.offsetWidth;\r\n            var lastHeight = element.offsetHeight;\r\n\r\n            var reset = function() {\r\n                expandChild.style.width = '100000px';\r\n                expandChild.style.height = '100000px';\r\n\r\n                expand.scrollLeft = 100000;\r\n                expand.scrollTop = 100000;\r\n\r\n                shrink.scrollLeft = 100000;\r\n                shrink.scrollTop = 100000;\r\n            };\r\n\r\n            reset();\r\n\r\n            var onResized = function() {\r\n                rafId = 0;\r\n\r\n                if (!dirty) return;\r\n\r\n                lastWidth = newWidth;\r\n                lastHeight = newHeight;\r\n\r\n                if (element.resizedAttached) {\r\n                    element.resizedAttached.call();\r\n                }\r\n            };\r\n\r\n            var onScroll = function() {\r\n                newWidth = element.offsetWidth;\r\n                newHeight = element.offsetHeight;\r\n                dirty = newWidth != lastWidth || newHeight != lastHeight;\r\n\r\n                if (dirty && !rafId) {\r\n                    rafId = requestAnimationFrame(onResized);\r\n                }\r\n\r\n                reset();\r\n            };\r\n\r\n            var addEvent = function(el, name, cb) {\r\n                if (el.attachEvent) {\r\n                    el.attachEvent('on' + name, cb);\r\n                } else {\r\n                    el.addEventListener(name, cb);\r\n                }\r\n            };\r\n\r\n            addEvent(expand, 'scroll', onScroll);\r\n            addEvent(shrink, 'scroll', onScroll);\r\n        }\r\n\r\n        forEachElement(element, function(elem){\r\n            attachResizeEvent(elem, callback);\r\n        });\r\n\r\n        this.detach = function(ev) {\r\n            ResizeSensor.detach(element, ev);\r\n        };\r\n    };\r\n\r\n    ResizeSensor.detach = function(element, ev) {\r\n        forEachElement(element, function(elem){\r\n            if(elem.resizedAttached && typeof ev == \"function\"){\r\n                elem.resizedAttached.remove(ev);\r\n                if(elem.resizedAttached.length()) return;\r\n            }\r\n            if (elem.resizeSensor) {\r\n                if (elem.contains(elem.resizeSensor)) {\r\n                    elem.removeChild(elem.resizeSensor);\r\n                }\r\n                delete elem.resizeSensor;\r\n                delete elem.resizedAttached;\r\n            }\r\n        });\r\n    };\r\n\r\n    return ResizeSensor;\r\n\r\n}));","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\nimport ResizeSensor from '../lib/ResizeSensor.js';\r\nclass DanmakuFrame{\r\n\tconstructor(container){\r\n\t\tconst F=this;\r\n\t\tF.container=container||document.createElement('div');\r\n\t\tF.rate=1;\r\n\t\tF.timeBase=F.width=F.height=F.fps=0;\r\n\t\tF.fpsTmp=0;\r\n\t\tF.fpsRec=F.fps||60;\r\n\t\tF.media=null;\r\n\t\tF.working=false;\r\n\t\tF.enabled=true;\r\n\t\tF.modules={};//constructed module list\r\n\t\t//F.moduleList=[];\r\n\t\tconst style=document.createElement(\"style\");\r\n\t\tdocument.head.appendChild(style);\r\n\t\tF.styleSheet=style.sheet;\r\n\t\t\r\n\r\n\t\tsetTimeout(()=>{//container size sensor\r\n\t\t\tF.container.ResizeSensor=new ResizeSensor(F.container,()=>{\r\n\t\t\t\tF.resize();\r\n\t\t\t});\r\n\t\t\tF.resize();\r\n\t\t},0);\r\n\t\tsetInterval(()=>{\r\n\t\t\tF.fpsRec=F.fpsTmp;\r\n\t\t\tF.fpsTmp=0;\r\n\t\t},1000);\r\n\t\tF.draw=F.draw.bind(F);\r\n\t}\r\n\tenable(name){\r\n\t\tif(!name){\r\n\t\t\tthis.enabled=true;\r\n\t\t\tif(this.media){\r\n\t\t\t\tthis.media.paused||this.start();\r\n\t\t\t}else{\r\n\t\t\t\tthis.start();\r\n\t\t\t}\r\n\t\t\tthis.container.hidden=false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet module=this.modules[name]||this.initModule(name);\r\n\t\tif(!module)return false;\r\n\t\tmodule.enabled=true;\r\n\t\tmodule.enable&&module.enable();\r\n\t\treturn true;\r\n\t}\r\n\tdisable(name){\r\n\t\tif(!name){\r\n\t\t\tthis.pause();\r\n\t\t\tthis.moduleFunction('clear');\r\n\t\t\tthis.enabled=false;\r\n\t\t\tthis.container.hidden=true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet module=this.modules[name];\r\n\t\tif(!module)return false;\r\n\t\tmodule.enabled=false;\r\n\t\tmodule.disable&&module.disable();\r\n\t\treturn true;\r\n\t}\r\n\taddStyle(s){\r\n\t\tif(typeof s === 'string')s=[s];\r\n\t\tif(s instanceof Array === false)return;\r\n\t\ts.forEach(r=>this.styleSheet.insertRule(r,this.styleSheet.cssRules.length));\r\n\t}\r\n\tinitModule(name,arg){\r\n\t\tif(this.modules[name]){\r\n\t\t\tconsole.warn(`The module [${name}] has already inited.`);\r\n\t\t\treturn this.modules[name];\r\n\t\t}\r\n\t\tlet mod=DanmakuFrame.availableModules[name];\r\n\t\tif(!mod)throw('Module ['+name+'] does not exist.');\r\n\t\tlet module=new mod(this,arg);\r\n\t\tif(module instanceof DanmakuFrameModule === false)\r\n\t\t\tthrow('Constructor of '+name+' is not extended from DanmakuFrameModule');\r\n\t\tthis.modules[name]=module;\r\n\t\tconsole.debug(`Mod Inited: ${name}`);\r\n\t\treturn module;\r\n\t}\r\n\tset time(t){//current media time (ms)\r\n\t\tthis.media||(this.timeBase=Date.now()-t);\r\n\t\tthis.moduleFunction('time',t);//let all mods know when the time be set\r\n\t}\r\n\tget time(){\r\n\t\treturn this.media?(this.media.currentTime*1000)|0:(Date.now()-this.timeBase);\r\n\t}\r\n\tdraw(force){\r\n\t\tif(!this.working)return;\r\n\t\tthis.fpsTmp++;\r\n\t\tthis.moduleFunction('draw',force);\r\n\t\tif(this.fps===0){\r\n\t\t\trequestAnimationFrame(()=>this.draw());\r\n\t\t}else{\r\n\t\t\tsetTimeout(this.draw,1000/this.fps);\r\n\t\t}\r\n\t}\r\n\tload(...danmakuObj){\r\n\t\tthis.moduleFunction('load',...danmakuObj);\r\n\t}\r\n\tloadList(danmakuArray){\r\n\t\tthis.moduleFunction('loadList',danmakuArray);\r\n\t}\r\n\tunload(danmakuObj){\r\n\t\tthis.moduleFunction('unload',danmakuObj);\r\n\t}\r\n\tstart(){\r\n\t\tif(this.working||!this.enabled)return;\r\n\t\tthis.working=true;\r\n\t\tthis.moduleFunction('start');\r\n\t\tthis.draw(true);\r\n\t}\r\n\tpause(){\r\n\t\tif(!this.enabled)return;\r\n\t\tthis.working=false;\r\n\t\tthis.moduleFunction('pause');\r\n\t}\r\n\tresize(){\r\n\t\tthis.width=this.container.offsetWidth;\r\n\t\tthis.height=this.container.offsetHeight;\r\n\t\tthis.moduleFunction('resize');\r\n\t}\r\n\tmoduleFunction(name,...arg){\r\n\t\tlet m;\r\n\t\tfor(let n in this.modules){\r\n\t\t\tm=this.modules[n];\r\n\t\t\tif(m.enabled&&m[name])m[name](...arg);\r\n\t\t}\r\n\t}\r\n\tsetMedia(media){\r\n\t\tconst F=this;\r\n\t\tF.media=media;\r\n\t\taddEvents(media,{\r\n\t\t\tplaying:()=>F.start(),\r\n\t\t\t'pause,stalled,seeking,waiting':()=>F.pause(),\r\n\t\t\tratechange:()=>{\r\n\t\t\t\tF.rate=F.media.playbackRate;\r\n\t\t\t\tF.moduleFunction('rate',F.rate);\r\n\t\t\t},\r\n\t\t});\r\n\t\tF.moduleFunction('media',media);\r\n\t}\r\n\tstatic addModule(name,module){\r\n\t\tif(name in this.availableModules){\r\n\t\t\tconsole.warn('The module \"'+name+'\" has already been added.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.availableModules[name]=module;\r\n\t} \r\n}\r\n\r\nDanmakuFrame.availableModules={};\r\n\r\nclass DanmakuFrameModule{\r\n\tconstructor(frame){\r\n\t\tthis.frame=frame;\r\n\t\tthis.enabled=false;\r\n\t}\r\n}\r\nfunction addEvents(target,events={}){\r\n\tfor(let e in events)e.split(/\\,/g).forEach(e2=>target.addEventListener(e2,events[e]));\r\n}\r\n\r\nexport {DanmakuFrame,DanmakuFrameModule,ResizeSensor}","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\n(function(f){\r\n\tif (typeof define === \"function\" && define.amd) {\r\n\t    define(f);\r\n\t}else if (typeof exports === \"object\") {\r\n\t    module.exports = f();\r\n\t}else {\r\n\t    (0,eval)('this').Mat = f();\r\n\t}\r\n})(function(){\r\nconst global= (0,eval)('this');\r\nconst TypedArray=global.Float32Array&&global.Float32Array.prototype;\r\n\r\nfunction createClass(Constructor){\r\n\tclass Matrix{\r\n\t\tconstructor(l,c,fill=0){\r\n\t\t\tthis.array=new Constructor(l*c);\r\n\t\t\tObject.defineProperty(this.array,'row',{value:l});\r\n\t\t\tObject.defineProperty(this.array,'column',{value:c});\r\n\t\t\tif(arguments.length==3){\r\n\t\t\t\tif(Matrix._instanceofTypedArray&&(fill===0)){}\r\n\t\t\t\telse if(typeof fill === 'number'){\r\n\t\t\t\t\tthis.fill(fill);\r\n\t\t\t\t}else if(fill.length){\r\n\t\t\t\t\tthis.set(fill);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tget length(){return this.array.length;}\r\n\t\tget row(){return this.array.row;}\r\n\t\tget column(){return this.array.column;}\r\n\t\tleftMultiply(m){\r\n\t\t\treturn this.set(Matrix.multiply(m,this,new Matrix(m.row,this.column)));\r\n\t\t}\r\n\t\trightMultiply(m){\r\n\t\t\treturn this.set(Matrix.multiply(this,m,new Matrix(this.row,m,column)));\r\n\t\t}\r\n\t\tfill(n){\r\n\t\t\targuments.length||(n=0);\r\n\t\t\tfor(let i=this.length;i--;)this.array[i]=n;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tset(arr,offset){\r\n\t\t\toffset||(offset=0);\r\n\t\t\t(arr instanceof Matrix)&&(arr=arr.array);\r\n\t\t\tfor(let i=(arr.length+offset)<=this.length?arr.length:(this.length-offset);i--;)\r\n\t\t\t\tthis.array[offset+i]=arr[i];\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tput(m,row,column){\r\n\t\t\tMatrix.put(this,m,row||0,column||0);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\trotate2d(t){\r\n\t\t\treturn this.set(Matrix.rotate2d(this,t,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\ttranslate2d(x,y){\r\n\t\t\treturn this.set(Matrix.translate2d(this,x,y,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\tscale2d(x,y){\r\n\t\t\treturn this.set(Matrix.scale2d(this,x,y,Matrix.Matrixes.T3));\r\n\t\t}\r\n\t\trotate3d(tx,ty,tz){\r\n\t\t\treturn this.set(Matrix.rotate3d(this,tx,ty,tz,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\tscale3d(x,y,z){\r\n\t\t\treturn this.set(Matrix.scale3d(this,x,y,z,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\ttranslate3d(x,y,z){\r\n\t\t\treturn this.set(Matrix.translate3d(this,x,y,z,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateX(t){\r\n\t\t\treturn this.set(Matrix.rotateX(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateY(t){\r\n\t\t\treturn this.set(Matrix.rotateY(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\trotateZ(t){\r\n\t\t\treturn this.set(Matrix.rotateZ(this,t,Matrix.Matrixes.T4));\r\n\t\t}\r\n\t\tclone(){\r\n\t\t\treturn new Matrix(this.row,this.column,this);\r\n\t\t}\r\n\t\ttoString(){\r\n\t\t\tif(this.length === 0)return '';\r\n\t\t\tfor(var i=0,lines=[],tmp=[];i<this.length;i++){\r\n\t\t\t\tif(i && (i%this.column === 0)){\r\n\t\t\t\t\tlines.push(tmp.join('\\t'));\r\n\t\t\t\t\ttmp.length=0;\r\n\t\t\t\t}\r\n\t\t\t\ttmp.push(this.array[i]||0);\r\n\t\t\t}\r\n\t\t\tlines.push(tmp.join('\t'));\r\n\t\t\treturn lines.join('\\n');\r\n\t\t}\r\n\r\n\t\t//static methods\r\n\t\tstatic Identity(n){//return a new Identity Matrix\r\n\t\t\tlet m=new Matrix(n,n,0);\r\n\t\t\tfor(let i=n;i--;)m.array[i*n+i]=1;\r\n\t\t\treturn m;\r\n\t\t}\r\n\t\tstatic Perspective(fovy,aspect,znear,zfar,result){\r\n\t\t\tvar y1=znear*Math.tan(fovy*Math.PI/360.0),\r\n\t\t\t\tx1=y1*aspect,\r\n\t\t\t\tm=result||new Matrix(4,4,0),\r\n\t\t\t\tarr=m.array;\r\n\r\n\t\t\tarr[0]=2*znear/(x1+x1);\r\n\t\t\tarr[5]=2*znear/(y1+y1);\r\n\t\t\tarr[10]=-(zfar+znear)/(zfar-znear);\r\n\t\t\tarr[14]=-2*zfar*znear/(zfar-znear);\r\n\t\t\tarr[11]=-1;\r\n\t\t    if(result)arr[1]=arr[2]=arr[3]=arr[4]=arr[6]=arr[7]=arr[8]=arr[9]=arr[12]=arr[13]=arr[15]=0;\r\n\t\t    return m;\r\n\t\t}\r\n\t\tstatic multiply(a,b,result){\r\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\r\n\t\t\tlet row=a.row,column=Math.min(a.column,b.column),r=result||new Matrix(row,column),c,i,ind;\r\n\t\t\tfor(let l=row;l--;){\r\n\t\t\t\tfor(c=column;c--;){\r\n\t\t\t\t\tr.array[ind=(l*r.column+c)]=0;\r\n\t\t\t\t\tfor(i=a.column;i--;){\r\n\t\t\t\t\t\tr.array[ind]+=(a.array[l*a.column+i]*b.array[c+i*b.column]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic multiplyString(a,b,array,ignoreZero=true){//work out the equation for every elements,only for debug and only works with Array matrixes\r\n\t\t\tif(a.column!==b.row)throw('wrong matrix');\r\n\t\t\tvar r=array||new Matrix(a.row,b.column),l,c,i,ind;\r\n\t\t\tfor(l=a.row;l--;){\r\n\t\t\t\tfor(c=b.column;c--;){\r\n\t\t\t\t\tr.array[ind=(l*b.column+c)]='';\r\n\t\t\t\t\tfor(i=0;i<a.column;i++){\r\n\t\t\t\t\t\tif(ignoreZero && (a.array[l*a.column+i]==0 ||b.array[c+i*b.column]==0))continue;\r\n\t\t\t\t\t\tr.array[ind]+=(((i&&r.array[ind])?'+':'')+'('+a.array[l*a.column+i]+')*('+b.array[c+i*b.column])+')';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic add(a,b,result){\r\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\r\n\t\t\tlet r=result||new Matrix(a.row,b.column);\r\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]+b.array[i];\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic minus(a,b,result){\r\n\t\t\tif(a.column!==b.column || a.row!==b.row)throw('wrong matrix');\r\n\t\t\tlet r=result||new Matrix(a.row,b.column);\r\n\t\t\tfor(let i=a.length;i--;)r.array[i]=a.array[i]-b.array[i];\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\tstatic rotate2d(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotate2d;\r\n\t\t\tMr.array[0]=Mr.array[4]=Math.cos(t);\r\n\t\t\tMr.array[1]=-(Mr.array[3]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic scale2d(m,x,y,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.scale2d;\r\n\t\t\tMr.array[0]=x;\r\n\t\t\tMr.array[4]=y;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic translate2d(m,x,y,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.translate2d;\r\n\t\t\tMr.array[2]=x;\r\n\t\t\tMr.array[5]=y;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(3,3));\r\n\t\t}\r\n\t\tstatic rotate3d(m,tx,ty,tz,result){\r\n\t\t\tconst Xc=Math.cos(tx),Xs=Math.sin(tx),\r\n\t\t\t\tYc=Math.cos(ty),Ys=Math.sin(ty),\r\n\t\t\t\tZc=Math.cos(tz),Zs=Math.sin(tz),\r\n\t\t\t\tMr=Matrix.Matrixes.rotate3d;\r\n\t\t\tMr.array[0]=Zc*Yc;\r\n\t\t\tMr.array[1]=Zc*Ys*Xs-Zs*Xc;\r\n\t\t\tMr.array[2]=Zc*Ys*Xc+Zs*Xs;\r\n\t\t\tMr.array[4]=Zs*Yc;\r\n\t\t\tMr.array[5]=Zs*Ys*Xs+Zc*Xc;\r\n\t\t\tMr.array[6]=Zs*Ys*Xc-Zc*Xs;\r\n\t\t\tMr.array[8]=-Ys;\r\n\t\t\tMr.array[9]=Yc*Xs;\r\n\t\t\tMr.array[10]=Yc*Xc;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateX(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateX;\r\n\t\t\tMr.array[10]=Mr.array[5]=Math.cos(t);\r\n\t\t\tMr.array[6]=-(Mr.array[9]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateY(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateY;\r\n\t\t\tMr.array[10]=Mr.array[0]=Math.cos(t);\r\n\t\t\tMr.array[8]=-(Mr.array[2]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic rotateZ(m,t,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.rotateZ;\r\n\t\t\tMr.array[5]=Mr.array[0]=Math.cos(t);\r\n\t\t\tMr.array[1]=-(Mr.array[4]=Math.sin(t));\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic scale3d(m,x,y,z,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.scale3d;\r\n\t\t\tMr.array[0]=x;\r\n\t\t\tMr.array[5]=y;\r\n\t\t\tMr.array[10]=z;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic translate3d(m,x,y,z,result){\r\n\t\t\tconst Mr=Matrix.Matrixes.translate3d;\r\n\t\t\tMr.array[12]=x;\r\n\t\t\tMr.array[13]=y;\r\n\t\t\tMr.array[14]=z;\r\n\t\t\treturn Matrix.multiply(Mr,m,result||new Matrix(4,4));\r\n\t\t}\r\n\t\tstatic put(m,sub,row,column){\r\n\t\t\tlet c,ind,i;\r\n\t\t\trow||(row=0);\r\n\t\t\tcolumn||(column=0);\r\n\t\t\tfor(let l=sub.row;l--;){\r\n\t\t\t\tif(l+row>=m.row)continue;\r\n\t\t\t\tfor(c=sub.column;c--;){\r\n\t\t\t\t\tif(c+column>=m.column)continue;\r\n\t\t\t\t\tm.array[(l+row)*m.column+c+column]=sub.array[l*sub.column+c];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tstatic createClass(Constructor){\r\n\t\t\treturn createClass(Constructor);\r\n\t\t}\r\n\t}\r\n\r\n\tvar testArray=new Constructor(1);\r\n\tObject.defineProperty(Matrix,'_instanceofTypedArray',{value:!!(TypedArray&&TypedArray.isPrototypeOf(testArray))});\r\n\ttestArray=null;\r\n\r\n\tMatrix.Matrixes={//do not modify these matrixes manually and dont use them\r\n\t\tI2:Matrix.Identity(2),\r\n\t\tI3:Matrix.Identity(3),\r\n\t\tI4:Matrix.Identity(4),\r\n\t\tT3:new Matrix(3,3,0),\r\n\t\tT4:new Matrix(4,4,0),\r\n\t\trotate2d:Matrix.Identity(3),\r\n\t\ttranslate2d:Matrix.Identity(3),\r\n\t\tscale2d:Matrix.Identity(3),\r\n\t\ttranslate3d:Matrix.Identity(4),\r\n\t\trotate3d:Matrix.Identity(4),\r\n\t\trotateX:Matrix.Identity(4),\r\n\t\trotateY:Matrix.Identity(4),\r\n\t\trotateZ:Matrix.Identity(4),\r\n\t\tscale3d:Matrix.Identity(4),\r\n\t}\r\n\treturn Matrix;\r\n}\r\nreturn createClass(global.Float32Array?Float32Array:Array);\r\n});\r\n","(function (global, undefined) {\r\n    \"use strict\";\r\n\r\n    if (global.setImmediate) {\r\n        return;\r\n    }\r\n\r\n    var nextHandle = 1; // Spec says greater than zero\r\n    var tasksByHandle = {};\r\n    var currentlyRunningATask = false;\r\n    var doc = global.document;\r\n    var registerImmediate;\r\n\r\n    function setImmediate(callback) {\r\n      // Callback can either be a function or a string\r\n      if (typeof callback !== \"function\") {\r\n        callback = new Function(\"\" + callback);\r\n      }\r\n      // Copy function arguments\r\n      var args = new Array(arguments.length - 1);\r\n      for (var i = 0; i < args.length; i++) {\r\n          args[i] = arguments[i + 1];\r\n      }\r\n      // Store and register the task\r\n      var task = { callback: callback, args: args };\r\n      tasksByHandle[nextHandle] = task;\r\n      registerImmediate(nextHandle);\r\n      return nextHandle++;\r\n    }\r\n\r\n    function clearImmediate(handle) {\r\n        delete tasksByHandle[handle];\r\n    }\r\n\r\n    function run(task) {\r\n        var callback = task.callback;\r\n        var args = task.args;\r\n        switch (args.length) {\r\n        case 0:\r\n            callback();\r\n            break;\r\n        case 1:\r\n            callback(args[0]);\r\n            break;\r\n        case 2:\r\n            callback(args[0], args[1]);\r\n            break;\r\n        case 3:\r\n            callback(args[0], args[1], args[2]);\r\n            break;\r\n        default:\r\n            callback.apply(undefined, args);\r\n            break;\r\n        }\r\n    }\r\n\r\n    function runIfPresent(handle) {\r\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\r\n        // So if we're currently running a task, we'll need to delay this invocation.\r\n        if (currentlyRunningATask) {\r\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\r\n            // \"too much recursion\" error.\r\n            setTimeout(runIfPresent, 0, handle);\r\n        } else {\r\n            var task = tasksByHandle[handle];\r\n            if (task) {\r\n                currentlyRunningATask = true;\r\n                try {\r\n                    run(task);\r\n                } finally {\r\n                    clearImmediate(handle);\r\n                    currentlyRunningATask = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function installNextTickImplementation() {\r\n        registerImmediate = function(handle) {\r\n            process.nextTick(function () { runIfPresent(handle); });\r\n        };\r\n    }\r\n\r\n    function canUsePostMessage() {\r\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\r\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\r\n        if (global.postMessage && !global.importScripts) {\r\n            var postMessageIsAsynchronous = true;\r\n            var oldOnMessage = global.onmessage;\r\n            global.onmessage = function() {\r\n                postMessageIsAsynchronous = false;\r\n            };\r\n            global.postMessage(\"\", \"*\");\r\n            global.onmessage = oldOnMessage;\r\n            return postMessageIsAsynchronous;\r\n        }\r\n    }\r\n\r\n    function installPostMessageImplementation() {\r\n        // Installs an event handler on `global` for the `message` event: see\r\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\r\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\r\n\r\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\r\n        var onGlobalMessage = function(event) {\r\n            if (event.source === global &&\r\n                typeof event.data === \"string\" &&\r\n                event.data.indexOf(messagePrefix) === 0) {\r\n                runIfPresent(+event.data.slice(messagePrefix.length));\r\n            }\r\n        };\r\n\r\n        if (global.addEventListener) {\r\n            global.addEventListener(\"message\", onGlobalMessage, false);\r\n        } else {\r\n            global.attachEvent(\"onmessage\", onGlobalMessage);\r\n        }\r\n\r\n        registerImmediate = function(handle) {\r\n            global.postMessage(messagePrefix + handle, \"*\");\r\n        };\r\n    }\r\n\r\n    function installMessageChannelImplementation() {\r\n        var channel = new MessageChannel();\r\n        channel.port1.onmessage = function(event) {\r\n            var handle = event.data;\r\n            runIfPresent(handle);\r\n        };\r\n\r\n        registerImmediate = function(handle) {\r\n            channel.port2.postMessage(handle);\r\n        };\r\n    }\r\n\r\n    function installReadyStateChangeImplementation() {\r\n        var html = doc.documentElement;\r\n        registerImmediate = function(handle) {\r\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n            var script = doc.createElement(\"script\");\r\n            script.onreadystatechange = function () {\r\n                runIfPresent(handle);\r\n                script.onreadystatechange = null;\r\n                html.removeChild(script);\r\n                script = null;\r\n            };\r\n            html.appendChild(script);\r\n        };\r\n    }\r\n\r\n    function installSetTimeoutImplementation() {\r\n        registerImmediate = function(handle) {\r\n            setTimeout(runIfPresent, 0, handle);\r\n        };\r\n    }\r\n\r\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\r\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\r\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\r\n\r\n    // Don't get fooled by e.g. browserify environments.\r\n    if ({}.toString.call(global.process) === \"[object process]\") {\r\n        // For Node.js before 0.9\r\n        installNextTickImplementation();\r\n\r\n    } else if (canUsePostMessage()) {\r\n        // For non-IE10 modern browsers\r\n        installPostMessageImplementation();\r\n\r\n    } else if (global.MessageChannel) {\r\n        // For web workers, where supported\r\n        installMessageChannelImplementation();\r\n\r\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\r\n        // For IE 6–8\r\n        installReadyStateChangeImplementation();\r\n\r\n    } else {\r\n        // For older browsers\r\n        installSetTimeoutImplementation();\r\n    }\r\n\r\n    attachTo.setImmediate = setImmediate;\r\n    attachTo.clearImmediate = clearImmediate;\r\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n\r\ndanmaku-frame text2d mod\r\n*/\r\n'use strict';\r\n\r\nimport '../lib/setImmediate/setImmediate.js'\r\nimport Text2d from './text2d.js'\r\nimport Text3d from './text3d.js'\r\nimport TextCanvas from './textCanvas.js'\r\n\r\n\r\n\r\n/*\r\ndanmaku obj struct\r\n{\r\n\t_:'text',\r\n\ttime:(number)msec time,\r\n\ttext:(string),\r\n\tstyle:(object)to be combined whit default style,\r\n\tmode:(number)\r\n}\r\n\r\ndanmaku mode\r\n\t0:right\r\n\t1:left\r\n\t2:bottom\r\n\t3:top\r\n*/\r\n\r\nfunction init(DanmakuFrame,DanmakuFrameModule){\r\n\tconst defProp=Object.defineProperty;\r\n\tconst requestIdleCallback=window.requestIdleCallback||setImmediate;\r\n\tlet useImageBitmap=false;\r\n\r\n\tclass TextDanmaku extends DanmakuFrameModule{\r\n\t\tconstructor(frame,arg={}){\r\n\t\t\tsuper(frame);\r\n\t\t\tconst D=this;\r\n\t\t\tD.list=[];//danmaku object array\r\n\t\t\tD.indexMark=0;//to record the index of last danmaku in the list\r\n\t\t\tD.tunnel=new tunnelManager();\r\n\t\t\tD.paused=true;\r\n\t\t\tD.randomText=`danmaku_text_${(Math.random()*999999)|0}`;\r\n\t\t\t\r\n\t\t\t//opt time record\r\n\t\t\tD.cacheCleanTime=0;\r\n\t\t\tD.danmakuMoveTime=0;\r\n\t\t\tD.danmakuCheckTime=0;\r\n\t\t\tD.danmakuCheckSwitch=true;\r\n\t\t\tD.defaultStyle={//these styles can be overwrote by the 'font' property of danmaku object\r\n\t\t\t\tfontStyle: null,\r\n\t\t\t\tfontWeight: 300,\r\n\t\t\t\tfontVariant: null,\r\n\t\t\t\tcolor: \"#fff\",\r\n\t\t\t\tfontSize: 24,\r\n\t\t\t\tfontFamily: \"Arial\",\r\n\t\t\t\tstrokeWidth: 1,//outline width\r\n\t\t\t\tstrokeColor: \"#888\",\r\n\t\t\t\tshadowBlur: 5,\r\n\t\t\t\ttextAlign:'start',//left right center start end\r\n\t\t\t\tshadowColor: \"#000\",\r\n\t\t\t\tshadowOffsetX:0,\r\n\t\t\t\tshadowOffsetY:0,\r\n\t\t\t\tfill:true,//if the text should be filled\r\n\t\t\t};\r\n\t\t\tD.options={\r\n\t\t\t\tallowLines:false,//allow multi-line danmaku\r\n\t\t\t\tscreenLimit:0,//the most number of danmaku on the screen\r\n\t\t\t\tclearWhenTimeReset:true,//clear danmaku on screen when the time is reset\r\n\t\t\t\tspeed:6.5,\r\n\t\t\t\tautoShiftRenderingMode:true,//auto shift to a low load mode\r\n\t\t\t}\r\n\r\n\t\t\tif(arg.defaultStyle)\r\n\t\t\t\tObject.assign(this.defaultStyle,arg.defaultStyle);\r\n\t\t\tif(arg.options)\r\n\t\t\t\tObject.assign(this.options,arg.options);\r\n\t\t\t\r\n\t\t\tframe.addStyle(`.${D.randomText}_fullfill{top:0;left:0;width:100%;height:100%;position:absolute;}`);\r\n\r\n\t\t\tdefProp(D,'rendererMode',{configurable:true});\r\n\t\t\tdefProp(D,'activeRendererMode',{configurable:true,value:null});\r\n\t\t\tconst con=D.container=document.createElement('div');\r\n\t\t\tcon.classList.add(`${D.randomText}_fullfill`);\r\n\t\t\tframe.container.appendChild(con);\r\n\r\n\t\t\t//init modes\r\n\t\t\tD.text2d=new Text2d(D);\r\n\t\t\tD.text3d=new Text3d(D);\r\n\t\t\tD.textCanvas=new TextCanvas(D);\r\n\t\t\t\r\n\t\t\tD.textCanvasContainer.hidden=D.canvas.hidden=D.canvas3d.hidden=true;\r\n\t\t\tD.modes={\r\n\t\t\t\t1:D.textCanvas,\r\n\t\t\t\t2:D.text2d,\r\n\t\t\t\t3:D.text3d,\r\n\t\t\t};\r\n\t\t\tD.GraphCache=[];//text graph cache\r\n\t\t\tD.DanmakuText=[];\r\n\t\t\tD.renderingDanmakuManager=new renderingDanmakuManager(D);\r\n\r\n\t\t\taddEvents(document,{\r\n\t\t\t\tvisibilitychange:e=>{\r\n\t\t\t\t\tD.danmakuCheckSwitch=!document.hidden;\r\n\t\t\t\t\tif(!document.hidden)D.recheckIndexMark();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tD._checkNewDanmaku=D._checkNewDanmaku.bind(D);\r\n\t\t\tD._cleanCache=D._cleanCache.bind(D);\r\n\t\t\tsetInterval(D._cleanCache,5000);//set an interval for cache cleaning\r\n\t\t\t\r\n\t\t\tD.setRendererMode(1);\r\n\t\t}\r\n\t\tsetRendererMode(n){\r\n\t\t\tconst D=this;\r\n\t\t\tif(D.rendererMode===n || !(n in D.modes) || !D.modes[n].supported)return false;\r\n\t\t\tD.activeRendererMode&&D.activeRendererMode.disable();\r\n\t\t\tdefProp(D,'activeRendererMode',{value:D.modes[n]});\r\n\t\t\tdefProp(D,'rendererMode',{value:n});\r\n\t\t\tD.activeRendererMode.resize();\r\n\t\t\tD.activeRendererMode.enable();\r\n\t\t\tconsole.log('rendererMode:',D.rendererMode);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tmedia(media){\r\n\t\t\tconst D=this;\r\n\t\t\taddEvents(media,{\r\n\t\t\t\tseeked:()=>{\r\n\t\t\t\t\tD.time();\r\n\t\t\t\t\tD._clearScreen(true);\r\n\t\t\t\t},\r\n\t\t\t\tseeking:()=>D.pause(),\r\n\t\t\t});\r\n\t\t}\r\n\t\tstart(){\r\n\t\t\tthis.paused=false;\r\n\t\t\t//this.recheckIndexMark();\r\n\t\t\tthis.activeRendererMode.start();\r\n\t\t}\r\n\t\tpause(){\r\n\t\t\tthis.paused=true;\r\n\t\t\tthis.activeRendererMode.pause();\r\n\t\t}\r\n\t\tload(d,autoAddToScreen){\r\n\t\t\tif(!d || d._!=='text'){return false;}\r\n\t\t\tif(typeof d.text !== 'string'){\r\n\t\t\t\tconsole.error('wrong danmaku object:',d);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tlet t=d.time,ind,arr=this.list;\r\n\t\t\tind=dichotomy(arr,d.time,0,arr.length-1,false)\r\n\t\t\tarr.splice(ind,0,d);\r\n\t\t\tif(ind<this.indexMark)this.indexMark++;\r\n\t\t\t//round d.style.fontSize to prevent Iifinity loop in tunnel\r\n\t\t\tif(typeof d.style!=='object')d.style={};\r\n\t\t\td.style.fontSize=d.style.fontSize?((d.style.fontSize+0.5)|0):this.defaultStyle.fontSize;\r\n\t\t\tif(isNaN(d.style.fontSize)|| d.style.fontSize===Infinity || d.style.fontSize===0)d.style.fontSize=this.defaultStyle.fontSize;\r\n\t\t\tif(typeof d.mode !== 'number')d.mode=0;\r\n\t\t\tif(autoAddToScreen){\r\n\t\t\t\tconsole.log(ind,this.indexMark)\r\n\t\t\t}\r\n\t\t\tif(autoAddToScreen&&(ind<this.indexMark))this._addNewDanmaku(d);\r\n\t\t\treturn d;\r\n\t\t}\r\n\t\tloadList(danmakuArray){\r\n\t\t\tdanmakuArray.forEach(d=>this.load(d));\r\n\t\t}\r\n\t\tunload(d){\r\n\t\t\tif(!d || d._!=='text')return false;\r\n\t\t\tconst D=this,i=D.list.indexOf(d);\r\n\t\t\tif(i<0)return false;\r\n\t\t\tD.list.splice(i,1);\r\n\t\t\tif(i<D.indexMark)D.indexMark--;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t_checkNewDanmaku(force){\r\n\t\t\tif(this.paused&&!force)return;\r\n\t\t\tlet D=this,d,time=D.frame.time;\r\n\t\t\tif(D.danmakuCheckTime===time || !D.danmakuCheckSwitch)return;\r\n\t\t\tif(D.list.length)\r\n\t\t\tfor(;(D.indexMark<D.list.length)&&(d=D.list[D.indexMark])&&(d.time<=time);D.indexMark++){//add new danmaku\r\n\t\t\t\tif(D.options.screenLimit>0 && D.DanmakuText.length>=D.options.screenLimit){continue;}//continue if the number of danmaku on screen has up to limit or doc is not visible\r\n\t\t\t\tD._addNewDanmaku(d);\r\n\t\t\t}\r\n\t\t\tD.danmakuCheckTime=time;\r\n\t\t}\r\n\t\t_addNewDanmaku(d){\r\n\t\t\tconst D=this,cHeight=D.height,cWidth=D.width;\r\n\t\t\tlet t=D.GraphCache.length?D.GraphCache.shift():new TextGraph();\r\n\t\t\tt.danmaku=d;\r\n\t\t\tt.drawn=false;\r\n\t\t\tt.text=D.options.allowLines?d.text:d.text.replace(/\\n/g,' ');\r\n\t\t\tt.time=d.time;\r\n\t\t\tt.font=Object.create(D.defaultStyle);\r\n\t\t\tObject.assign(t.font,d.style);\r\n\t\t\tif(!t.font.lineHeight)t.font.lineHeight=(t.font.fontSize+2)||1;\r\n\t\t\tif(d.style.color){\r\n\t\t\t\tif(t.font.color && t.font.color[0]!=='#'){\r\n\t\t\t\t\tt.font.color='#'+d.style.color;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(d.mode>1)t.font.textAlign='center';\r\n\t\t\tt.prepare(D.rendererMode===3?false:true);\r\n\t\t\t//find tunnel number\r\n\t\t\tconst tnum=D.tunnel.getTunnel(t,cHeight);\r\n\t\t\t//calc margin\r\n\t\t\tlet margin=(tnum<0?0:tnum)%cHeight;\r\n\t\t\tswitch(d.mode){\r\n\t\t\t\tcase 0:case 1:case 3:{\r\n\t\t\t\t\tt.style.y=margin;break;\r\n\t\t\t\t}\r\n\t\t\t\tcase 2:{\r\n\t\t\t\t\tt.style.y=cHeight-margin-t.style.height-1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tswitch(d.mode){\r\n\t\t\t\tcase 0:{t.style.x=cWidth;break;}\r\n\t\t\t\tcase 1:{t.style.x=-t.style.width;break;}\r\n\t\t\t\tcase 2:case 3:{t.style.x=(cWidth-t.style.width)/2;}\r\n\t\t\t}\r\n\t\t\tD.renderingDanmakuManager.add(t);\r\n\t\t\tD.activeRendererMode.newDanmaku(t);\r\n\t\t}\r\n\t\t_calcSideDanmakuPosition(t,T=this.frame.time){\r\n\t\t\tlet R=!t.danmaku.mode,style=t.style;\r\n\t\t\treturn (R?this.frame.width:(-style.width))\r\n\t\t\t\t\t+(R?-1:1)*this.frame.rate*(style.width+1024)*(T-t.time)*this.options.speed/60000;\r\n\t\t}\r\n\t\t_calcDanmakusPosition(force){\r\n\t\t\tlet D=this,T=D.frame.time;\r\n\t\t\tif(D.paused&&!force)return;\r\n\t\t\tconst cWidth=D.width,rate=D.frame.rate;\r\n\t\t\tlet R,i,t,style,X;\r\n\t\t\tD.danmakuMoveTime=T;\r\n\t\t\tfor(i=D.DanmakuText.length;i--;){\r\n\t\t\t\tt=D.DanmakuText[i];\r\n\t\t\t\tif(t.time>T){\r\n\t\t\t\t\tD.removeText(t);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tstyle=t.style;\r\n\r\n\t\t\t\tswitch(t.danmaku.mode){\r\n\t\t\t\t\tcase 0:case 1:{\r\n\t\t\t\t\t\tR=!t.danmaku.mode;\r\n\t\t\t\t\t\tstyle.x=X=D._calcSideDanmakuPosition(t,T);\r\n\t\t\t\t\t\tif(t.tunnelNumber>=0 && ((R&&(X+style.width)+10<cWidth) || (!R&&X>10)) ){\r\n\t\t\t\t\t\t\tD.tunnel.removeMark(t);\r\n\t\t\t\t\t\t}else if( (R&&(X<-style.width-20)) || (!R&&(X>cWidth+style.width+20)) ){//go out the canvas\r\n\t\t\t\t\t\t\tD.removeText(t);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase 2:case 3:{\r\n\t\t\t\t\t\tif((T-t.time)>D.options.speed*1000/rate){\r\n\t\t\t\t\t\t\tD.removeText(t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t_cleanCache(force){//clean text object cache\r\n\t\t\tconst D=this,now=Date.now();\r\n\t\t\tif(D.GraphCache.length>30 || force){//save 20 cached danmaku\r\n\t\t\t\tfor(let ti = 0;ti<D.GraphCache.length;ti++){\r\n\t\t\t\t\tif(force || (now-D.GraphCache[ti].removeTime) > 10000){//delete cache which has not used for 10s\r\n\t\t\t\t\t\tD.activeRendererMode.deleteTextObject(D.GraphCache[ti]);\r\n\t\t\t\t\t\tD.GraphCache.splice(ti,1);\r\n\t\t\t\t\t}else{break;}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tdraw(force){\r\n\t\t\tif((!force&&this.paused)||!this.enabled)return;\r\n\t\t\tthis._calcDanmakusPosition(force);\r\n\t\t\tthis.activeRendererMode.draw(force);\r\n\t\t\trequestAnimationFrame(()=>{this._checkNewDanmaku(force)});\r\n\t\t}\r\n\t\tremoveText(t){//remove the danmaku from screen\r\n\t\t\tthis.renderingDanmakuManager.remove(t);\r\n\t\t\tthis.tunnel.removeMark(t);\r\n\t\t\tt._bitmap=t.danmaku=null;\r\n\t\t\tt.removeTime=Date.now();\r\n\t\t\tthis.GraphCache.push(t);\r\n\t\t\tthis.activeRendererMode.remove(t);\r\n\t\t}\r\n\t\tresize(){\r\n\t\t\tif(this.activeRendererMode)this.activeRendererMode.resize();\r\n\t\t\tthis.draw(true);\r\n\t\t}\r\n\t\t_clearScreen(forceFull){\r\n\t\t\tthis.activeRendererMode&&this.activeRendererMode.clear(forceFull);\r\n\t\t}\r\n\t\tclear(){//clear danmaku on the screen\r\n\t\t\tfor(let i=this.DanmakuText.length,T;i--;){\r\n\t\t\t\tT=this.DanmakuText[i];\r\n\t\t\t\tif(T.danmaku)this.removeText(T);\r\n\t\t\t}\r\n\t\t\tthis.tunnel.reset();\r\n\t\t\tthis._clearScreen(true);\r\n\t\t}\r\n\t\trecheckIndexMark(t=this.frame.time){\r\n\t\t\tthis.indexMark=dichotomy(this.list,t,0,this.list.length-1,true);\r\n\t\t}\r\n\t\trate(r){\r\n\t\t\tif(this.activeRendererMode)this.activeRendererMode.rate(r);\r\n\t\t}\r\n\t\ttime(t=this.frame.time){//reset time,you should invoke it when the media has seeked to another time\r\n\t\t\tthis.recheckIndexMark(t);\r\n\t\t\tif(this.options.clearWhenTimeReset){this.clear();}\r\n\t\t\telse{this.resetTimeOfDanmakuOnScreen();}\r\n\t\t}\r\n\t\tresetTimeOfDanmakuOnScreen(cTime){\r\n\t\t\t//cause the position of the danmaku is based on time\r\n\t\t\t//and if you don't want these danmaku on the screen to disappear after seeking,their time should be reset\r\n\t\t\tif(cTime===undefined)cTime=this.frame.time;\r\n\t\t\tthis.DanmakuText.forEach(t=>{\r\n\t\t\t\tif(!t.danmaku)return;\r\n\t\t\t\tt.time=cTime-(this.danmakuMoveTime-t.time);\r\n\t\t\t});\r\n\t\t}\r\n\t\tdanmakuAt(x,y){//return a list of danmaku which covers this position\r\n\t\t\tconst list=[];\r\n\t\t\tif(!this.enabled)return list;\r\n\t\t\tthis.DanmakuText.forEach(t=>{\r\n\t\t\t\tif(!t.danmaku)return;\r\n\t\t\t\tif(t.style.x<=x && t.style.x+t.style.width>=x && t.style.y<=y && t.style.y+t.style.height>=y)\r\n\t\t\t\t\tlist.push(t.danmaku);\r\n\t\t\t});\r\n\t\t\treturn list;\r\n\t\t}\r\n\t\tenable(){//enable the plugin\r\n\t\t\tthis.textCanvasContainer.hidden=false;\r\n\t\t\tif(this.frame.working)this.start();\r\n\t\t}\r\n\t\tdisable(){//disable the plugin\r\n\t\t\tthis.textCanvasContainer.hidden=true;\r\n\t\t\tthis.pause();\r\n\t\t\tthis.clear();\r\n\t\t}\r\n\t\tset useImageBitmap(v){\r\n\t\t\tuseImageBitmap=(typeof createImageBitmap ==='function')?v:false;\r\n\t\t}\r\n\t\tget useImageBitmap(){return useImageBitmap;}\r\n\t\tget width(){return this.frame.width;}\r\n\t\tget height(){return this.frame.height;}\r\n\t}\r\n\r\n\r\n\tclass TextGraph{//code copied from CanvasObjLibrary\r\n\t\tconstructor(text=''){\r\n\t\t\tconst G=this;\r\n\t\t\tG._fontString='';\r\n\t\t\tG._renderList=null;\r\n\t\t\tG.style={};\r\n\t\t\tG.font={};\r\n\t\t\tG.text=text;\r\n\t\t\tG._renderToCache=G._renderToCache.bind(G);\r\n\t\t\tdefProp(G,'_cache',{configurable:true});\r\n\t\t}\r\n\t\tprepare(async=false){//prepare text details\r\n\t\t\tconst G=this;\r\n\t\t\tif(!G._cache){\r\n\t\t\t\tdefProp(G,'_cache',{value:document.createElement(\"canvas\")});\r\n\t\t\t}\r\n\t\t\tlet ta=[];\r\n\t\t\t(G.font.fontStyle)&&ta.push(G.font.fontStyle);\r\n\t\t\t(G.font.fontVariant)&&ta.push(G.font.fontVariant);\r\n\t\t\t(G.font.fontWeight)&&ta.push(G.font.fontWeight);\r\n\t\t\tta.push(`${G.font.fontSize}px`);\r\n\t\t\t(G.font.fontFamily)&&ta.push(G.font.fontFamily);\r\n\t\t\tG._fontString = ta.join(' ');\r\n\r\n\t\t\tconst imgobj = G._cache,ct = (imgobj.ctx2d||(imgobj.ctx2d=imgobj.getContext(\"2d\")));\r\n\t\t\tct.font = G._fontString;\r\n\t\t\tG._renderList = G.text.split(/\\n/g);\r\n\t\t\tG.estimatePadding=Math.max(\r\n\t\t\t\tG.font.shadowBlur+5+Math.max(Math.abs(G.font.shadowOffsetY),Math.abs(G.font.shadowOffsetX)),\r\n\t\t\t\tG.font.strokeWidth+3\r\n\t\t\t);\r\n\t\t\tlet w = 0,tw,lh=(typeof G.font.lineHeight ==='number')?G.font.lineHeight:G.font.fontSize;\r\n\t\t\tfor (let i = G._renderList.length; i -- ;) {\r\n\t\t\t\ttw = ct.measureText(G._renderList[i]).width;\r\n\t\t\t\t(tw>w)&&(w=tw);//max\r\n\t\t\t}\r\n\t\t\timgobj.width = (G.style.width = w) + G.estimatePadding*2;\r\n\t\t\timgobj.height = (G.style.height = G._renderList.length * lh)+ ((lh<G.font.fontSize)?G.font.fontSize*2:0) + G.estimatePadding*2;\r\n\r\n\t\t\tct.translate(G.estimatePadding, G.estimatePadding);\r\n\t\t\tif(async){\r\n\t\t\t\trequestIdleCallback(G._renderToCache);\r\n\t\t\t}else{\r\n\t\t\t\tG._renderToCache();\r\n\t\t\t}\r\n\t\t}\r\n\t\t_renderToCache(){\r\n\t\t\tconst G=this;\r\n\t\t\tif(!G.danmaku)return;\r\n\t\t\tG.render(G._cache.ctx2d);\r\n\t\t\tif(useImageBitmap){//use ImageBitmap\r\n\t\t\t\tif(G._bitmap){\r\n\t\t\t\t\tG._bitmap.close();\r\n\t\t\t\t\tG._bitmap=null;\r\n\t\t\t\t}\r\n\t\t\t\tcreateImageBitmap(G._cache).then(bitmap=>{\r\n\t\t\t\t\tG._bitmap=bitmap;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\trender(ct){//render text\r\n\t\t\tconst G=this;\r\n\t\t\tif(!G._renderList)return;\r\n\t\t\tct.save();\r\n\t\t\tif(G.danmaku.highlight){\r\n\t\t\t\tct.fillStyle='rgba(255,255,255,0.3)';\r\n\t\t\t\tct.beginPath();\r\n\t\t\t\tct.rect(0,0,G.style.width,G.style.height);\r\n\t\t\t\tct.fill();\r\n\t\t\t}\r\n\t\t\tct.font=G._fontString;//set font\r\n\t\t\tct.textBaseline = 'middle';\r\n\t\t\tct.lineWidth = G.font.strokeWidth;\r\n\t\t\tct.fillStyle = G.font.color;\r\n\t\t\tct.strokeStyle = G.font.strokeColor;\r\n\t\t\tct.shadowBlur = G.font.shadowBlur;\r\n\t\t\tct.shadowColor= G.font.shadowColor;\r\n\t\t\tct.shadowOffsetX = G.font.shadowOffsetX;\r\n\t\t\tct.shadowOffsetY = G.font.shadowOffsetY;\r\n\t\t\tct.textAlign = G.font.textAlign;\r\n\t\t\tlet lh=(typeof G.font.lineHeight ==='number')?G.font.lineHeight:G.font.fontSize,\r\n\t\t\t\tx;\r\n\t\t\tswitch(G.font.textAlign){\r\n\t\t\t\tcase 'left':case 'start':{\r\n\t\t\t\t\tx=0;break;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'center':{\r\n\t\t\t\t\tx=G.style.width/2;break;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'right':case 'end':{\r\n\t\t\t\t\tx=G.style.width;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (let i = G._renderList.length;i--;) {\r\n\t\t\t\tG.font.strokeWidth&&ct.strokeText(G._renderList[i],x,lh*(i+0.5));\r\n\t\t\t\tG.font.fill&&ct.fillText(G._renderList[i],x, lh*(i+0.5));\r\n\t\t\t}\r\n\t\t\tct.restore();\r\n\t\t}\r\n\t}\r\n\r\n\tclass tunnelManager{\r\n\t\tconstructor(){\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\treset(){\r\n\t\t\tthis.right={};\r\n\t\t\tthis.left={};\r\n\t\t\tthis.bottom={};\r\n\t\t\tthis.top={};\r\n\t\t}\r\n\t\tgetTunnel(tobj,cHeight){//get the tunnel index that can contain the danmaku of the sizes\r\n\t\t\tlet tunnel=this.tunnel(tobj.danmaku.mode),\r\n\t\t\t\tsize=tobj.style.height,\r\n\t\t\t\tti=0,\r\n\t\t\t\ttnum=-1;\r\n\t\t\tif(typeof size !=='number' || size<=0){\r\n\t\t\t\tconsole.error('Incorrect size:'+size);\r\n\t\t\t\tsize=24;\r\n\t\t\t}\r\n\t\t\tif(size>cHeight)return 0;\r\n\r\n\t\t\twhile(tnum<0){\r\n\t\t\t\tfor(let t=ti+size-1;ti<=t;){\r\n\t\t\t\t\tif(tunnel[ti]){//used\r\n\t\t\t\t\t\tti+=tunnel[ti].tunnelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}else if((ti!==0)&&(ti%(cHeight-1))===0){//new page\r\n\t\t\t\t\t\tti++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}else if(ti===t){//get\r\n\t\t\t\t\t\ttnum=ti-size+1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttobj.tunnelNumber=tnum;\r\n\t\t\ttobj.tunnelHeight=(((tobj.style.y+size)>cHeight)?1:size);\r\n\t\t\tthis.addMark(tobj);\r\n\t\t\treturn tnum;\r\n\t\t}\r\n\t\taddMark(tobj){\r\n\t\t\tlet t=this.tunnel(tobj.danmaku.mode);\r\n\t\t\tif(!t[tobj.tunnelNumber])t[tobj.tunnelNumber]=tobj;\r\n\t\t}\r\n\t\tremoveMark(tobj){\r\n\t\t\tlet t,tun=tobj.tunnelNumber;\r\n\t\t\tif(tun>=0&&(t=this.tunnel(tobj.danmaku.mode))[tun]===tobj){\r\n\t\t\t\tdelete t[tun];\r\n\t\t\t\ttobj.tunnelNumber=-1;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttunnel(id){\r\n\t\t\treturn this[tunnels[id]];\r\n\t\t}\r\n\t}\r\n\r\n\tconst tunnels=['right','left','bottom','top'];\r\n\r\n\tclass renderingDanmakuManager{\r\n\t\tconstructor(dText){\r\n\t\t\tthis.dText=dText;\r\n\t\t\tthis.totalArea=0;\r\n\t\t\tthis.limitArea=Infinity;\r\n\t\t\tif(dText.text2d.supported)this.timer=setInterval(()=>this.rendererModeCheck(),1500);\r\n\t\t}\r\n\t\tadd(t){\r\n\t\t\tthis.dText.DanmakuText.push(t);\r\n\t\t\tthis.totalArea+=t._cache.width*t._cache.height;\r\n\t\t}\r\n\t\tremove(t){\r\n\t\t\tlet ind=this.dText.DanmakuText.indexOf(t);\r\n\t\t\tif(ind>=0){\r\n\t\t\t\tthis.dText.DanmakuText.splice(ind,1);\r\n\t\t\t\tthis.totalArea-=t._cache.width*t._cache.height;\r\n\t\t\t}\r\n\t\t}\r\n\t\trendererModeCheck(){\r\n\t\t\tlet D=this.dText;\r\n\t\t\tif(!this.dText.options.autoShiftRenderingMode || D.paused)return;\r\n\t\t\tif(D.frame.fpsRec<(D.frame.fps||60)*0.95){\r\n\t\t\t\t(this.limitArea>this.totalArea)&&(this.limitArea=this.totalArea);\r\n\t\t\t}else{\r\n\t\t\t\t(this.limitArea<this.totalArea)&&(this.limitArea=this.totalArea);\r\n\t\t\t}\r\n\t\t\tif(D.rendererMode==1 && this.totalArea>this.limitArea){\r\n\t\t\t\tD.text2d.supported&&D.setRendererMode(2);\r\n\t\t\t}else if(D.rendererMode==2&& this.totalArea<this.limitArea*0.5){\r\n\t\t\t\tD.textCanvas.supported&&D.setRendererMode(1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction dichotomy(arr,t,start,end,position=false){\r\n\t\tif(arr.length===0)return 0;\r\n\t\tlet m=start,s=start,e=end;\r\n\t\twhile(start <= end){//dichotomy\r\n\t\t\tm=(start+end)>>1;\r\n\t\t\tif(t<=arr[m].time)end=m-1;\r\n\t\t\telse{start=m+1;}\r\n\t\t}\r\n\t\tif(position){//find to top\r\n\t\t\twhile(start>0 && (arr[start-1].time===t)){\r\n\t\t\t\tstart--;\r\n\t\t\t}\r\n\t\t}else{//find to end\r\n\t\t\twhile(start<=e && (arr[start].time===t)){\r\n\t\t\t\tstart++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn start;\r\n\t}\r\n\r\n\tDanmakuFrame.addModule('TextDanmaku',TextDanmaku);\r\n};\r\n\r\nfunction addEvents(target,events={}){\r\n\tfor(let e in events)e.split(/\\,/g).forEach(e2=>target.addEventListener(e2,events[e]));\r\n}\r\nfunction limitIn(num,min,max){//limit the number in a range\r\n\treturn num<min?min:(num>max?max:num);\r\n}\r\nfunction emptyFunc(){}\r\nexport default init;","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass Text2d extends Template{\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.supported=false;\r\n\t\tdText.canvas=document.createElement('canvas');//the canvas\r\n\t\tdText.context2d=dText.canvas.getContext('2d');//the canvas contex\r\n\t\tif(!dText.context2d){\r\n\t\t\tconsole.warn('text 2d not supported');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdText.canvas.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tdText.canvas.id=`${dText.randomText}_text2d`;\r\n\t\tdText.container.appendChild(dText.canvas);\r\n\t\tthis.supported=true;\r\n\t}\r\n\tdraw(force){\r\n\t\tlet ctx=this.dText.context2d,\r\n\t\t\tcW=ctx.canvas.width,\r\n\t\t\tdT=this.dText.DanmakuText,\r\n\t\t\ti=dT.length,\r\n\t\t\tt,\r\n\t\t\tleft,\r\n\t\t\tright,\r\n\t\t\tvW;\r\n\t\tconst bitmap=this.dText.useImageBitmap;\r\n\t\tctx.globalCompositeOperation='destination-over';\r\n\t\tthis.clear(force);\r\n\t\tfor(;i--;){\r\n\t\t\t(t=dT[i]).drawn||(t.drawn=true);\r\n\t\t\tleft=t.style.x-t.estimatePadding;\r\n\t\t\tright=left+t._cache.width;\r\n\t\t\tif(left>cW || right<0)continue;\r\n\t\t\tif(!bitmap && cW>=t._cache.width){//danmaku that smaller than canvas width\r\n\t\t\t\tctx.drawImage(t._bitmap||t._cache, left, t.style.y-t.estimatePadding);\r\n\t\t\t}else{\r\n\t\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0)\r\n\t\t\t\tctx.drawImage(t._bitmap||t._cache,\r\n\t\t\t\t\t(left<0)?-left:0,0,\r\n\t\t\t\t\t\t\tvW,t._cache.height,\r\n\t\t\t\t\t(left<0)?0:left,t.style.y-t.estimatePadding,\r\n\t\t\t\t\t\t\tvW,t._cache.height);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tclear(force){\r\n\t\tconst D=this.dText;\r\n\t\tif(force||this._evaluateIfFullClearMode()){\r\n\t\t\tD.context2d.clearRect(0,0,D.canvas.width,D.canvas.height);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\r\n\t\t\tt=D.DanmakuText[i];\r\n\t\t\tif(t.drawn)\r\n\t\t\t\tD.context2d.clearRect(t.style.x-t.estimatePadding,t.style.y-t.estimatePadding,t._cache.width,t._cache.height);\r\n\t\t}\r\n\t}\r\n\t_evaluateIfFullClearMode(){\r\n\t\tif(this.dText.DanmakuText.length>3)return true;\r\n\t\tlet l=this.dText.GraphCache[this.dText.GraphCache.length-1];\r\n\t\tif(l&&l.drawn){\r\n\t\t\tl.drawn=false;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tresize(){\r\n\t\tlet D=this.dText,C=D.canvas;\r\n\t\tC.width=D.width;\r\n\t\tC.height=D.height;\r\n\t}\r\n\tenable(){\r\n\t\tthis.draw();\r\n\t\tthis.dText.useImageBitmap=!(this.dText.canvas.hidden=false);\r\n\t}\r\n\tdisable(){\r\n\t\tthis.dText.canvas.hidden=true;\r\n\t\tthis.clear(true);\r\n\t}\r\n}\r\n\r\nexport default Text2d;","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Mat from '../lib/Mat/Mat.js'\r\nimport Template from './textModuleTemplate.js';\r\nconst requestIdleCallback=window.requestIdleCallback||setImmediate;\r\n\r\nclass Text3d extends Template{\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.supported=false;\r\n\t\tlet c3d=this.c3d=dText.canvas3d=document.createElement('canvas');\r\n\t\tc3d.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tc3d.id=`${dText.randomText}_text3d`;\r\n\t\tdText.context3d=c3d.getContext('webgl')||c3d.getContext('experimental-webgl');//the canvas3d context\r\n\r\n\t\tif(!dText.context3d){\r\n\t\t\tconsole.warn('text 3d not supported');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdText.container.appendChild(c3d);\r\n\t\tconst gl=this.gl=dText.context3d,canvas=c3d;\r\n\t\t//init webgl\r\n\r\n\t\t//shader\r\n\t\tvar shaders={\r\n\t\t\tdanmakuFrag:[gl.FRAGMENT_SHADER,`\r\n\t\t\t\t#pragma optimize(on)\r\n\t\t\t\tprecision lowp float;\r\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\r\n\t\t\t\tuniform sampler2D uSampler;\r\n\t\t\t\tvoid main(void) {\r\n\t\t\t\t\tvec4 co=texture2D(uSampler,vDanmakuTexCoord);\r\n\t\t\t\t\tif(co.a == 0.0)discard;\r\n\t\t\t\t\tgl_FragColor = co;\r\n\t\t\t\t}`\r\n\t\t\t],\r\n\t\t\tdanmakuVert:[gl.VERTEX_SHADER,`\r\n\t\t\t\t#pragma optimize(on)\r\n\t\t\t\tattribute vec2 aVertexPosition;\r\n\t\t\t\tattribute vec2 aDanmakuTexCoord;\r\n\t\t\t\tuniform mat4 u2dCoordinate;\r\n\t\t\t\tvarying lowp vec2 vDanmakuTexCoord;\r\n\t\t\t\tvoid main(void) {\r\n\t\t\t\t\tgl_Position = u2dCoordinate * vec4(aVertexPosition,0,1);\r\n\t\t\t\t\tvDanmakuTexCoord = aDanmakuTexCoord;\r\n\t\t\t\t}`\r\n\t\t\t],\r\n\t\t}\r\n\t\tfunction shader(name){\r\n\t\t\tvar s=gl.createShader(shaders[name][0]);\r\n\t\t\tgl.shaderSource(s,shaders[name][1]);\r\n\t\t\tgl.compileShader(s);\r\n\t\t\tif (!gl.getShaderParameter(s,gl.COMPILE_STATUS))\r\n\t\t\t\tthrow(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(s));\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\tvar fragmentShader = shader(\"danmakuFrag\");\r\n\t\tvar vertexShader = shader(\"danmakuVert\");\r\n\t\tvar shaderProgram = this.shaderProgram = gl.createProgram();\r\n\t\tgl.attachShader(shaderProgram,vertexShader);\r\n\t\tgl.attachShader(shaderProgram,fragmentShader);\r\n\t\tgl.linkProgram(shaderProgram);\r\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n\t\t\tconsole.error(\"Unable to initialize the shader program.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tgl.useProgram(shaderProgram);\r\n\r\n\t\t//scene\r\n\t\tgl.clearColor(0, 0, 0, 0.0);\r\n\t\tgl.enable(gl.BLEND);\r\n\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA ,gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\t\tthis.maxTexSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n\r\n\t\tthis.uSampler=gl.getUniformLocation(shaderProgram,\"uSampler\");\r\n\t\tthis.u2dCoord=gl.getUniformLocation(shaderProgram,\"u2dCoordinate\");\r\n\t\tthis.aVertexPosition=gl.getAttribLocation(shaderProgram,\"aVertexPosition\");\r\n\t\tthis.atextureCoord=gl.getAttribLocation(shaderProgram,\"aDanmakuTexCoord\");\r\n\r\n\t\tgl.enableVertexAttribArray(this.aVertexPosition);\r\n\t\tgl.enableVertexAttribArray(this.atextureCoord);\r\n\r\n\t\tthis.commonTexCoordBuffer=gl.createBuffer();\r\n\t\tthis.commonVertCoordBuffer=gl.createBuffer();\r\n\r\n\t\tgl.activeTexture(gl.TEXTURE0);\r\n\t\tgl.uniform1i(this.uSampler,0);\r\n\r\n\t\tthis.supported=true;\r\n\t}\r\n\tdraw(force){\r\n\t\tconst gl=this.gl,l=this.dText.DanmakuText.length;\r\n\t\tlet cW=this.c3d.width,left,right,vW;\r\n\t\tfor(let i=0,t;i<l;i++){\r\n\t\t\tt=this.dText.DanmakuText[i];\r\n\t\t\tif(!t || !t.glDanmaku)continue;\r\n\t\t\tleft=t.style.x-t.estimatePadding;\r\n\t\t\tright=left+t._cache.width,\r\n\t\t\tvW=t._cache.width+(left<0?left:0)-(right>cW?right-cW:0);\r\n\t\t\tif(left>cW || right<0)continue;\r\n\r\n\t\t\t//vert\r\n\t\t\tt.vertCoord[0]=t.vertCoord[4]=(left<0)?0:left;\r\n\t\t\tt.vertCoord[2]=t.vertCoord[6]=t.vertCoord[0]+vW;\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonVertCoordBuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,t.vertCoord,gl.DYNAMIC_DRAW);\r\n\t\t\tgl.vertexAttribPointer(this.aVertexPosition,2,gl.FLOAT,false,0,0);\r\n\r\n\t\t\t//tex\r\n\t\t\tcommonTextureCoord[0]=commonTextureCoord[4]=(left<0)?-left/t._cache.width:0;\r\n\t\t\tcommonTextureCoord[2]=commonTextureCoord[6]=commonTextureCoord[0]+vW/t._cache.width;\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER,this.commonTexCoordBuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,commonTextureCoord,gl.DYNAMIC_DRAW);\r\n\t\t\tgl.vertexAttribPointer(this.atextureCoord,2,gl.FLOAT,false,0,0);\r\n\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,t.texture);\r\n\r\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP,0,4);\r\n\t\t}\r\n\t\tgl.flush();\r\n\t}\r\n\tclear(){\r\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n\t}\r\n\tdeleteTextObject(t){\r\n\t\tconst gl=this.gl;\r\n\t\tif(t.texture)gl.deleteTexture(t.texture);\r\n\t}\r\n\tresize(w,h){\r\n\t\tconst gl=this.gl,C=this.c3d;\r\n\t\tC.width=this.dText.width;\r\n\t\tC.height=this.dText.height;\r\n\t\tgl.viewport(0,0,C.width,C.height);\r\n\t\tgl.uniformMatrix4fv(this.u2dCoord,false,(Mat.Identity(4).translate3d(-1,1,0).scale3d(2/C.width,-2/C.height,0)).array);\r\n\t}\r\n\tenable(){\r\n\t\tthis.dText.DanmakuText.forEach(t=>{\r\n\t\t\tthis.newDanmaku(t,false);\r\n\t\t});\r\n\t\tthis.dText.useImageBitmap=this.c3d.hidden=false;\r\n\t\trequestAnimationFrame(()=>this.draw());\r\n\t}\r\n\tdisable(){\r\n\t\tthis.clear();\r\n\t\tthis.c3d.hidden=true;\r\n\t}\r\n\tnewDanmaku(t,async=true){\r\n\t\tconst gl=this.gl;\r\n\t\tt.glDanmaku=false;\r\n\t\tif(t._cache.height>this.maxTexSize || t._cache.width>this.maxTexSize){//ignore too large danmaku image\r\n\t\t\tconsole.warn('Ignore a danmaku width too large size',t.danmaku);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet tex;\r\n\t\tif(!(tex=t.texture)){\r\n\t\t\ttex=t.texture=gl.createTexture();\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);\r\n\t\t}\r\n\t\tif(async){\r\n\t\t\trequestIdleCallback(()=>{\r\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D,tex);\r\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\r\n\t\t\t\tt.glDanmaku=true;\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,t._cache);\r\n\t\t\tt.glDanmaku=true;\r\n\t\t}\r\n\r\n\t\t//vert\r\n\t\tlet y=t.style.y-t.estimatePadding;\r\n\t\tt.vertCoord=new Float32Array([\r\n\t\t\t0,y,\r\n\t\t\t0,y,\r\n\t\t\t0,y+t._cache.height,\r\n\t\t\t0,y+t._cache.height,\r\n\t\t]);\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst commonTextureCoord=new Float32Array([\r\n\t0.0,  0.0,//↖\r\n\t1.0,  0.0,//↗\r\n\t0.0,  1.0,//↙\r\n\t1.0,  1.0,//↘\r\n]);\r\n\r\n\r\nexport default Text3d;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nimport Template from './textModuleTemplate.js';\r\n\r\nclass TextCanvas extends Template{\r\n\tconstructor(dText){\r\n\t\tsuper(dText);\r\n\t\tthis.supported=dText.text2d.supported;\r\n\t\tif(!this.supported)return;\r\n\t\tdText.frame.addStyle([`#${dText.randomText}_textCanvasContainer canvas{will-change:transform;top:0;left:0;position:absolute;}`,\r\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer.moving canvas{transition:transform 500s linear;}`,\r\n\t\t\t\t\t\t\t\t`#${dText.randomText}_textCanvasContainer{will-change:transform;pointer-events:none;overflow:hidden;}`]);\r\n\r\n\t\tthis.container=dText.textCanvasContainer=document.createElement('div');//for text canvas\r\n\t\tthis.container.classList.add(`${dText.randomText}_fullfill`);\r\n\t\tthis.container.id=`${dText.randomText}_textCanvasContainer`;\r\n\t\tdText.container.appendChild(this.container);\r\n\t}\r\n\t_toggle(s){\r\n\t\tlet D=this.dText,T=D.frame.time;\r\n\t\tthis.container.classList[s?'add':'remove']('moving');\r\n\t\tfor(let i=D.DanmakuText.length,t;i--;){\r\n\t\t\tif((t=D.DanmakuText[i]).danmaku.mode>=2)continue;\r\n\t\t\tif(s){requestAnimationFrame(()=>this._move(t));}\r\n\t\t\telse{this._move(t,T);}\r\n\t\t}\r\n\t}\r\n\tpause(){\r\n\t\tthis._toggle(false);\r\n\t}\r\n\tstart(){\r\n\t\tthis._toggle(true);\r\n\t}\r\n\trate(){\r\n\t\tthis.resetPos();\r\n\t}\r\n\t_move(t,T){\r\n\t\tif(!t.danmaku)return;\r\n\t\tif(T===undefined)T=this.dText.frame.time+500000;\r\n\t\tt._cache.style.transform=`translate3d(${(((this.dText._calcSideDanmakuPosition(t,T)-t.estimatePadding)*10)|0)/10}px,${t.style.y-t.estimatePadding}px,0)`;\r\n\t}\r\n\tresetPos(){\r\n\t\tthis.pause();\r\n\t\tthis.dText.paused||requestAnimationFrame(()=>this.start());\r\n\t}\r\n\tresize(){\r\n\t\tthis.resetPos();\r\n\t}\r\n\tremove(t){\r\n\t\tt._cache.parentNode&&this.container.removeChild(t._cache);\r\n\t}\r\n\tenable(){\r\n\t\trequestAnimationFrame(()=>{\r\n\t\t\tthis.dText.DanmakuText.forEach(t=>this.newDanmaku(t));\r\n\t\t});\r\n\t\tthis.container.hidden=false;\r\n\t}\r\n\tdisable(){\r\n\t\tthis.container.hidden=true;\r\n\t\tthis.container.innerHTML='';\r\n\t}\r\n\tnewDanmaku(t){\r\n\t\tt._cache.style.transform=`translate3d(${t.style.x-t.estimatePadding}px,${t.style.y-t.estimatePadding}px,0)`;\r\n\t\tthis.container.appendChild(t._cache);\r\n\t\tt.danmaku.mode<2&&!this.dText.paused&&requestAnimationFrame(()=>this._move(t));\r\n\t}\r\n}\r\n\r\n\r\nexport default TextCanvas;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n\r\n*/\r\nclass textModuleTemplate{\r\n\tconstructor(dText){\r\n\t\tthis.dText=dText;\r\n\t}\r\n\tdraw(){}\r\n\trate(){}\r\n\tpause(){}\r\n\tstart(){}\r\n\tclear(){}\r\n\tresize(){}\r\n\tremove(){}\r\n\tenable(){}\r\n\tdisable(){}\r\n\tnewDanmaku(){}\r\n\tdeleteTextObject(){}\r\n}\r\n\r\nexport default textModuleTemplate;\r\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","'use strict';\nvar at = require('./_string-at')(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var core = module.exports = { version: '2.6.2' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = false;\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","'use strict';\n\nvar classof = require('./_classof');\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n","'use strict';\n\nvar regexpFlags = require('./_flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar regexpExec = require('./_regexp-exec');\nrequire('./_export')({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\n\n// eslint-disable-next-line no-empty\nvar SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                    (rx.multiline ? 'm' : '') +\n                    (rx.unicode ? 'u' : '') +\n                    (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? 0xffffffff : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_wks-define')('asyncIterator');\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\nimport {i18n} from './i18n.js';\r\nimport O2H from '../lib/Object2HTML/Object2HTML.js'\r\nimport {NyaPlayerCore,\r\n\t\taddEvents,\r\n\t\trequestFullscreen,\r\n\t\texitFullscreen,\r\n\t\tformatTime,\r\n\t\tsetAttrs,\r\n\t\tpadTime,\r\n\t\tlimitIn,\r\n\t\ttoArray} from './NyaPCore.js';\r\nimport ResizeSensor from '../lib/danmaku-frame/lib/ResizeSensor.js';\r\n\r\nconst _=i18n._;\r\n\r\n\r\n//NyaP options\r\nconst NyaPOptions={\r\n\tautoHideDanmakuInput:true,//hide danmakuinput after danmaku sending\r\n\tdanmakuColors:['fff','6cf','ff0','f00','0f0','00f','f0f','000'],//colors in the danmaku style pannel\r\n\tdanmakuModes:[0,3,2,1],//0:right\t1:left\t2:bottom\t3:top\r\n\tdanmakuSizes:[20,24,36],\r\n}\r\n\r\n//normal player\r\nclass NyaP extends NyaPlayerCore{\r\n\tconstructor(opt){\r\n\t\tsuper(Object.assign({},NyaPOptions,opt));\r\n\t\topt=this.opt;\r\n\t\tconst NP=this,\r\n\t\t\t$=this.$,\r\n\t\t\tvideo=this.video;\r\n\t\tconst icons=this.icons={\r\n\t\t\tplay:[30,30,'<path d=\"m10.063,8.856l9.873,6.143l-9.873,6.143v-12.287z\" stroke-width=\"3\" stroke-linejoin=\"round\"/>'],\r\n\t\t\taddDanmaku:[30,30,'<path style=\"fill-opacity:0!important;\" stroke-width=\"1.4\" d=\"m21.004,8.995c-0.513,-0.513 -1.135,-0.770 -1.864,-0.770l-8.281,0c-0.729,0 -1.350,0.256 -1.864,0.770c-0.513,0.513 -0.770,1.135 -0.770,1.864l0,8.281c0,0.721 0.256,1.341 0.770,1.858c0.513,0.517 1.135,0.776 1.864,0.776l8.281,0c0.729,0 1.350,-0.258 1.864,-0.776c0.513,-0.517 0.770,-1.136 0.770,-1.858l0,-8.281c0,-0.729 -0.257,-1.350 -0.770,-1.864z\" stroke-linejoin=\"round\"/>'\r\n\t\t\t\t\t\t\t\t+'<path d=\"m12.142,14.031l1.888,0l0,-1.888l1.937,0l0,1.888l1.888,0l0,1.937l-1.888,0l0,1.888l-1.937,0l0,-1.888l-1.888,0l0,-1.937z\" stroke-width=\"1\"/>'],\r\n\t\t\tdanmakuToggle:[30,30,'<path d=\"m8.569,10.455l0,0c0,-0.767 0.659,-1.389 1.473,-1.389l0.669,0l0,0l3.215,0l6.028,0c0.390,0 0.765,0.146 1.041,0.406c0.276,0.260 0.431,0.613 0.431,0.982l0,3.473l0,0l0,2.083l0,0c0,0.767 -0.659,1.389 -1.473,1.389l-6.028,0l-4.200,3.532l0.985,-3.532l-0.669,0c-0.813,0 -1.473,-0.621 -1.473,-1.389l0,0l0,-2.083l0,0l0,-3.473z\"/>'],\r\n\t\t\tdanmakuStyle:[30,30,'<path style=\"fill-opacity:1!important\" d=\"m21.781,9.872l-1.500,-1.530c-0.378,-0.385 -0.997,-0.391 -1.384,-0.012l-0.959,0.941l2.870,2.926l0.960,-0.940c0.385,-0.379 0.392,-0.998 0.013,-1.383zm-12.134,7.532l2.871,2.926l7.593,-7.448l-2.872,-2.927l-7.591,7.449l0.000,0.000zm-1.158,2.571l-0.549,1.974l1.984,-0.511l1.843,-0.474l-2.769,-2.824l-0.509,1.835z\" stroke-width=\"0\"/>'],\r\n\t\t\tfullScreen:[30,30,'<path stroke-linejoin=\"round\" d=\"m11.166,9.761l-5.237,5.239l5.237,5.238l1.905,-1.905l-3.333,-3.333l3.332,-3.333l-1.904,-1.906zm7.665,0l-1.903,1.905l3.332,3.333l-3.332,3.332l1.903,1.905l5.238,-5.238l-5.238,-5.237z\" stroke-width=\"1.3\" />'],\r\n\t\t\tfullPage:[30,30,'<rect stroke-linejoin=\"round\" height=\"11.169\" width=\"17.655\" y=\"9.415\" x=\"6.172\" stroke-width=\"1.5\"/>'\r\n\t\t\t\t\t\t\t  +'<path stroke-linejoin=\"round\" d=\"m12.361,11.394l-3.604,3.605l3.605,3.605l1.311,-1.311l-2.294,-2.294l2.293,-2.294l-1.311,-1.311zm5.275,0l-1.310,1.311l2.293,2.294l-2.293,2.293l1.310,1.311l3.605,-3.605l-3.605,-3.605z\"/>'],\r\n\t\t\tloop:[30,30,'<path stroke-linejoin=\"round\" stroke-width=\"1\" d=\"m20.945,15.282c-0.204,-0.245 -0.504,-0.387 -0.823,-0.387c-0.583,0 -1.079,0.398 -1.205,0.969c-0.400,1.799 -2.027,3.106 -3.870,3.106c-2.188,0 -3.969,-1.780 -3.969,-3.969c0,-2.189 1.781,-3.969 3.969,-3.969c0.720,0 1.412,0.192 2.024,0.561l-0.334,0.338c-0.098,0.100 -0.127,0.250 -0.073,0.380c0.055,0.130 0.183,0.213 0.324,0.212l2.176,0.001c0.255,-0.002 0.467,-0.231 0.466,-0.482l-0.008,-2.183c-0.000,-0.144 -0.085,-0.272 -0.217,-0.325c-0.131,-0.052 -0.280,-0.022 -0.379,0.077l-0.329,0.334c-1.058,-0.765 -2.340,-1.182 -3.649,-1.182c-3.438,0 -6.236,2.797 -6.236,6.236c0,3.438 2.797,6.236 6.236,6.236c2.993,0 5.569,-2.133 6.126,-5.072c0.059,-0.314 -0.022,-0.635 -0.227,-0.882z\"/>'],\r\n\t\t\tvolume:[30,30,'<ellipse id=\"volume_circle\" style=\"fill-opacity:.6!important\" ry=\"6\" rx=\"6\" cy=\"15\" cx=\"15\" stroke-dasharray=\"38 90\" stroke-width=\"1.8\"/>'],\r\n\t\t\tdanmakuMode0:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m14.981,17.821l-7.937,-2.821l7.937,-2.821l0,1.409l7.975,0l0,2.821l-7.975,0l0,1.409l0,0.002z\"/>'],\r\n\t\t\tdanmakuMode1:[30,30,'<path style=\"fill-opacity:1!important\" stroke-width=\"0\" d=\"m15.019,12.178l7.937,2.821l-7.937,2.821l0,-1.409l-7.975,0l0,-2.821l7.975,0l0,-1.409l0,-0.002z\"/>'],\r\n\t\t\tdanmakuMode3:[30,30,'<path stroke-width=\"3\" d=\"m7.972,7.486l14.054,0\"/>'],\r\n\t\t\tdanmakuMode2:[30,30,'<path stroke-width=\"3\" d=\"m7.972,22.513l14.054,0\"/>'],\r\n\t\t}\r\n\t\tObject.assign(icons,opt.icons);\r\n\t\tfunction icon(name,event,attr={}){\r\n\t\t\tconst ico=icons[name];\r\n\t\t\treturn O2H({_:'span',event,attr,prop:{id:`icon_span_${name}`,\r\n\t\t\t\tinnerHTML:`<svg height=${ico[1]} width=${ico[0]} id=\"icon_${name}\"\">${ico[2]}</svg>`}});\r\n\t\t}\r\n\t\t\r\n\t\tlet _licp=NP.loadingInfo(_('Creating player')+' -- ');\r\n\t\tNP._.player=O2H({\r\n\t\t\t_:'div',attr:{class:'NyaP',id:'NyaP',tabindex:0},child:[\r\n\t\t\t\tNP.videoFrame,\r\n\t\t\t\t{_:'div',attr:{id:'controls'},child:[\r\n\t\t\t\t\t{_:'div',attr:{id:'control'},child:[\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_left'},child:[\r\n\t\t\t\t\t\t\ticon('play',{click:e=>NP.playToggle()},{title:_('play')}),\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_center'},child:[\r\n\t\t\t\t\t\t\t{_:'div',prop:{id:'progress_info'},child:[\r\n\t\t\t\t\t\t\t\t{_:'span',child:[\r\n\t\t\t\t\t\t\t\t\t{_:'canvas',prop:{id:'progress',pad:10}},\r\n\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'time'},child:[\r\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'current_time'},child:['00:00']},\r\n\t\t\t\t\t\t\t\t\t'/',\r\n\t\t\t\t\t\t\t\t\t{_:'span',prop:{id:'total_time'},child:['00:00']},\r\n\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t{_:'div',prop:{id:'danmaku_input_frame'},child:[\r\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'danmaku_style'},child:[\r\n\t\t\t\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_style_pannel'},child:[\r\n\t\t\t\t\t\t\t\t\t\t{_:'div',attr:{id:'danmaku_color_box'}},\r\n\t\t\t\t\t\t\t\t\t\t{_:'input',attr:{id:'danmaku_color',placeholder:_('hex color'),maxlength:\"6\"}},\r\n\t\t\t\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_mode_box'}},\r\n\t\t\t\t\t\t\t\t\t\t{_:'span',attr:{id:'danmaku_size_box'}},\r\n\t\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t\t\ticon('danmakuStyle'),\r\n\t\t\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t\t\t{_:'input',attr:{id:'danmaku_input',placeholder:_('Input danmaku here')}},\r\n\t\t\t\t\t\t\t\t{_:'span',prop:{id:'danmaku_submit',innerHTML:_('Send')}},\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t\t{_:'span',attr:{id:'control_right'},child:[\r\n\t\t\t\t\t\t\ticon('addDanmaku',{click:e=>NP.danmakuInput()},{title:_('danmaku input(Enter)')}),\r\n\t\t\t\t\t\t\ticon('danmakuToggle',{click:e=>NP.Danmaku.toggle()},{title:_('danmaku toggle(D)'),class:'active_icon'}),\r\n\t\t\t\t\t\t\ticon('volume',{},{title:`${_('volume')}:(${video.muted?_('muted'):(video.volume*100|0)+'%'})([shift]+↑↓)(${_('wheeling')})`}),\r\n\t\t\t\t\t\t\ticon('loop',{click:e=>{video.loop=!video.loop;}},{title:_('loop')+'(L)'}),\r\n\t\t\t\t\t\t\t{_:'span',prop:{id:'player_mode'},child:[\r\n\t\t\t\t\t\t\t\ticon('fullScreen',{click:e=>NP.playerMode('fullScreen')},{title:_('full screen(F)')}),\r\n\t\t\t\t\t\t\t\ticon('fullPage',{click:e=>NP.playerMode('fullPage')},{title:_('full page(P)')})\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t]}\r\n\t\t\t\t]},\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t//msg box\r\n\t\tNP.videoFrame.appendChild(O2H({\r\n\t\t\t_:'div',attr:{id:'msg_box'}\r\n\t\t}));\r\n\r\n\t\t//add elements with id to $ prop\r\n\t\tNP.collectEles(NP._.player);\r\n\r\n\t\tObject.assign(NP._,{\r\n\t\t\tvolumeBox:new MsgBox('','info',$.msg_box),\r\n\t\t});\r\n\r\n\t\tif(this._danmakuEnabled){\r\n\t\t\t//danmaku sizes\r\n\t\t\topt.danmakuSizes&&opt.danmakuSizes.forEach((s,ind)=>{\r\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`font-size:${12+ind*3}px;`,title:s},prop:{size:s},child:['A']});\r\n\t\t\t\t$.danmaku_size_box.appendChild(e);\r\n\t\t\t});\r\n\r\n\t\t\t//danmaku colors\r\n\t\t\topt.danmakuColors&&opt.danmakuColors.forEach(c=>{\r\n\t\t\t\tlet e=O2H({_:'span',attr:{style:`background-color:#${c};`,title:c},prop:{color:c}});\r\n\t\t\t\t$.danmaku_color_box.appendChild(e);\r\n\t\t\t});\r\n\r\n\t\t\t//danmaku modes\r\n\t\t\topt.danmakuModes&&opt.danmakuModes.forEach(m=>{\r\n\t\t\t\t$.danmaku_mode_box.appendChild(icon(`danmakuMode${m}`));\r\n\t\t\t});\r\n\t\t\tNP.collectEles($.danmaku_mode_box);\r\n\t\t}else{\r\n\t\t\tfor(let i in $){\r\n\t\t\t\tif(i.match(/danmaku/i)){\r\n\t\t\t\t\t$[i].parentNode.removeChild($[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t//progress\r\n\t\tsetTimeout(()=>{//ResizeSensor\r\n\t\t\t$.control.ResizeSensor=new ResizeSensor($.control,()=>NP.refreshProgress());\r\n\t\t\tNP.refreshProgress();\r\n\t\t},0);\r\n\t\tNP._.progressContext=$.progress.getContext('2d');\r\n\r\n\t\t//events\r\n\t\tconst events={\r\n\t\t\tNyaP:{\r\n\t\t\t\tkeydown:e=>NP._playerKeyHandle(e),\r\n\t\t\t},\r\n\t\t\tdocument:{\r\n\t\t\t\t'fullscreenchange,mozfullscreenchange,webkitfullscreenchange,msfullscreenchange':e=>{\r\n\t\t\t\t\tif(NP._.playerMode=='fullScreen' && !this.isFullscreen())\r\n\t\t\t\t\t\tNP.playerMode('normal');\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmain_video:{\r\n\t\t\t\t/*'play,playing,stalled,pause,seeking,seeked':e=>{\r\n\t\t\t\t\tconsole.log(e.type)\r\n\t\t\t\t},*/\r\n\t\t\t\tplaying:e=>NP._iconActive('play',true),\r\n\t\t\t\t'pause,stalled':e=>{\r\n\t\t\t\t\tNP._iconActive('play',false);\r\n\t\t\t\t},\r\n\t\t\t\ttimeupdate:(e)=>{\r\n\t\t\t\t\tif(Date.now()-NP._.lastTimeUpdate <30)return;\r\n\t\t\t\t\tNP._setTimeInfo(formatTime(video.currentTime,video.duration));\r\n\t\t\t\t\tNP.drawProgress();\r\n\t\t\t\t\tNP._.lastTimeUpdate=Date.now();\r\n\t\t\t\t},\r\n\t\t\t\tloadedmetadata:e=>{\r\n\t\t\t\t\tNP._setTimeInfo(null,formatTime(video.duration,video.duration));\r\n\t\t\t\t},\r\n\t\t\t\tvolumechange:e=>{\r\n\t\t\t\t\tNP._.volumeBox.renew(`${_('volume')}:${(video.volume*100).toFixed(0)}%`+`${video.muted?('('+_('muted')+')'):''}`,3000);\r\n\t\t\t\t\tsetAttrs($.volume_circle,{'stroke-dasharray':`${video.volume*12*Math.PI} 90`,style:`fill-opacity:${video.muted?.2:.6}!important`});\r\n\t\t\t\t\t$.icon_span_volume.setAttribute('title',`${_('volume')}:(${video.muted?_('muted'):((video.volume*100|0)+'%')})([shift]+↑↓)(${_('wheeling')})`);\r\n\t\t\t\t},\r\n\t\t\t\tprogress:e=>NP.drawProgress(),\r\n\t\t\t\t_loopChange:e=>NP._iconActive('loop',e.value),\r\n\t\t\t\tclick:e=>NP.playToggle(),\r\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\r\n\t\t\t},\r\n\t\t\tdanmaku_container:{\r\n\t\t\t\tclick:e=>NP.playToggle(),\r\n\t\t\t\tcontextmenu:e=>e.preventDefault(),\r\n\t\t\t},\r\n\t\t\tprogress:{\r\n\t\t\t\t'mousemove,click':e=>{\r\n\t\t\t\t\tlet t=e.target,\r\n\t\t\t\t\t\tpre=limitIn((e.offsetX-t.pad)/(t.offsetWidth-2*t.pad),0,1);\r\n\t\t\t\t\tif(e.type==='mousemove'){\r\n\t\t\t\t\t\tNP._.progressX=e.offsetX;NP.drawProgress();\r\n\t\t\t\t\t\tNP._setTimeInfo(null,formatTime(pre*video.duration,video.duration));\t\r\n\t\t\t\t\t}else if(e.type==='click'){\r\n\t\t\t\t\t\tvideo.currentTime=pre*video.duration;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tmouseout:e=>{\r\n\t\t\t\t\tNP._.progressX=undefined;NP.drawProgress();\r\n\t\t\t\t\tNP._setTimeInfo(null,formatTime(video.duration,video.duration));\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tdanmaku_style_pannel:{\r\n\t\t\t\tclick:e=>{if(e.target.tagName!=='INPUT')setImmediate(a=>NP.$.danmaku_input.focus())},\r\n\t\t\t},\r\n\t\t\tdanmaku_color:{\r\n\t\t\t\t'input,change':e=>{\r\n\t\t\t\t\tlet i=e.target,c=NP.Danmaku.isVaildColor(i.value);\r\n\t\t\t\t\tif(c){//match valid hex color code\r\n\t\t\t\t\t\ti.style.backgroundColor=`#${c}`;\r\n\t\t\t\t\t\tNP._.danmakuColor=c;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tNP._.danmakuColor=undefined;\r\n\t\t\t\t\t\tc=NP.Danmaku.isVaildColor(NP.opt.defaultDanmakuColor);\r\n\t\t\t\t\t\ti.style.backgroundColor=c?`#${c}`:'';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\ticon_span_volume:{\r\n\t\t\t\tclick:e=>video.muted=!video.muted,\r\n\t\t\t\twheel:e=>{\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tif(e.deltaMode!==0)return;\r\n\t\t\t\t\tlet delta;\r\n\t\t\t\t\tif(e.deltaY>10 || e.deltaY<-10)delta=-e.deltaY/10;\r\n\t\t\t\t\telse{delta=e.deltaY;}\r\n\t\t\t\t\tif(e.shiftKey)delta=delta>0?10:-10;\r\n\t\t\t\t\tvideo.volume=limitIn(video.volume+(delta/100),0,1);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_input:{\r\n\t\t\t\tkeydown:e=>{if(e.key==='Enter'){NP.send();}else if(e.key==='Escape'){NP.danmakuInput(false);}}\r\n\t\t\t},\r\n\t\t\tdanmaku_submit:{\r\n\t\t\t\tclick:e=>NP.send(),\r\n\t\t\t},\r\n\t\t\tdanmaku_mode_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tlet t=e.target;\r\n\t\t\t\t\tif(t.id.startsWith('icon_span_danmakuMode')){\r\n\t\t\t\t\t\tlet m=1*t.id.match(/\\d$/)[0];\r\n\t\t\t\t\t\tif(NP._.danmakuMode!==undefined)\r\n\t\t\t\t\t\t\t$[`icon_span_danmakuMode${NP._.danmakuMode}`].classList.remove('active');\r\n\t\t\t\t\t\t$[`icon_span_danmakuMode${m}`].classList.add('active');\r\n\t\t\t\t\t\tNP._.danmakuMode=m;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_size_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tlet t=e.target;\r\n\t\t\t\t\tif(!t.size)return;\r\n\t\t\t\t\ttoArray($.danmaku_size_box.childNodes).forEach(sp=>{\r\n\t\t\t\t\t\tif(NP._.danmakuSize===sp.size)sp.classList.remove('active');\r\n\t\t\t\t\t});\r\n\t\t\t\t\tt.classList.add('active');\r\n\t\t\t\t\tNP._.danmakuSize=t.size;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdanmaku_color_box:{\r\n\t\t\t\tclick:e=>{\r\n\t\t\t\t\tif(e.target.color){\r\n\t\t\t\t\t\t$.danmaku_color.value=e.target.color;\r\n\t\t\t\t\t\t$.danmaku_color.dispatchEvent(new Event('change'));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tNP:{\r\n\t\t\t\tdanmakuFrameToggle:bool=>NP._iconActive('danmakuToggle',bool),//listen danmakuToggle event to change button style\r\n\t\t\t\tplayerModeChange:mode=>{\r\n\t\t\t\t\t['fullPage','fullScreen'].forEach(m=>{\r\n\t\t\t\t\t\tNP._iconActive(m,mode===m);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t}\r\n\t\tfor(let eleid in $){//add events to elements\r\n\t\t\tlet eves=events[eleid];\r\n\t\t\teves&&addEvents($[eleid],eves);\r\n\t\t}\r\n\r\n\t\tif(NP._danmakuEnabled){\r\n\t\t\tNumber.isInteger(opt.defaultDanmakuMode)\r\n\t\t\t\t&&$['icon_span_danmakuMode'+opt.defaultDanmakuMode].click();//init to default danmaku mode\r\n\t\t\t(typeof opt.defaultDanmakuSize === 'number')\r\n\t\t\t\t&&toArray($.danmaku_size_box.childNodes).forEach(sp=>{if(sp.size===opt.defaultDanmakuSize)sp.click()});\r\n\t\t}\r\n\t\t\r\n\t\tif(opt.playerFrame instanceof HTMLElement)\r\n\t\t\topt.playerFrame.appendChild(NP.player);\r\n\r\n\t\t_licp.append('done');\r\n\t}\r\n\t_iconActive(name,bool){\r\n\t\tthis.$[`icon_span_${name}`].classList[bool?'add':'remove']('active_icon');\r\n\t}\r\n\t_setTimeInfo(a=null,b=null){\r\n\t\trequestAnimationFrame(()=>{\r\n\t\t\tif(a!==null){\r\n\t\t\t\tthis.$.current_time.innerHTML=a;\r\n\t\t\t}\r\n\t\t\tif(b!==null){\r\n\t\t\t\tthis.$.total_time.innerHTML=b;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t_playerKeyHandle(e){//hot keys\r\n\t\tif(e.target.tagName==='INPUT')return;\r\n\t\tconst V=this.video,_SH=e.shiftKey,_RE=e.repeat;\r\n\t\t//to prevent default,use break.otherwise,use return.\r\n\t\tswitch(e.key){\r\n\t\t\tcase ' ':{\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis.playToggle();break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowRight':{//seek to after time\r\n\t\t\t\tV.currentTime+=(3*(_SH?2:1));break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowLeft':{//seek to before time\r\n\t\t\t\tV.currentTime-=(1.5*(_SH?2:1));break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowUp':{//volume up\r\n\t\t\t\tV.volume=limitIn(V.volume+(0.03*(_SH?2:1)),0,1);break;\r\n\t\t\t}\r\n\t\t\tcase 'ArrowDown':{//volume down\r\n\t\t\t\tV.volume=limitIn(V.volume-(0.03*(_SH?2:1)),0,1);break;\r\n\t\t\t}\r\n\t\t\tcase 'p':{//full page\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis.playerMode('fullPage');break;\r\n\t\t\t}\r\n\t\t\tcase 'f':{//fullscreen\r\n\t\t\t\tthis.playerMode('fullScreen');break;\r\n\t\t\t}\r\n\t\t\tcase 'd':{//danmaku toggle\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis._danmakuEnabled&&this.Danmaku.toggle();break;\r\n\t\t\t}\r\n\t\t\tcase 'm':{//mute\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis.video.muted=!this.video.muted;break;\r\n\t\t\t}\r\n\t\t\tcase 'l':{//loop\r\n\t\t\t\tthis.video.loop=!this.video.loop;break;\r\n\t\t\t}\r\n\t\t\tcase 'Enter':{//danmaku input toggle\r\n\t\t\t\tif(_RE)return;\r\n\t\t\t\tthis._danmakuEnabled&&this.danmakuInput();break;\r\n\t\t\t}\r\n\t\t\tcase 'Escape':{//exit full page mode\r\n\t\t\t\tif(this._.playerMode==='fullPage'){\r\n\t\t\t\t\tthis.playerMode('normal');break;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdefault:return;\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t}\r\n\tdanmakuInput(bool=!this.$.danmaku_input_frame.offsetHeight){\r\n\t\tlet $=this.$;\r\n\t\t$.danmaku_input_frame.style.display=bool?'flex':'';\r\n\t\tthis._iconActive('addDanmaku',bool);\r\n\t\tsetImmediate(()=>{bool?$.danmaku_input.focus():$.NyaP.focus();});\r\n\t}\r\n\trefreshProgress(){\r\n\t\tconst c=this.$.progress;\r\n\t\tc.width=c.offsetWidth;\r\n\t\tc.height=c.offsetHeight;\r\n\t\tthis.drawProgress();\r\n\t\tthis.emit('progressRefresh');\r\n\t}\r\n\tsend(){\r\n\t\tlet color=this._.danmakuColor||this.opt.defaultDanmakuColor,\r\n\t\t\ttext=this.$.danmaku_input.value,\r\n\t\t\tsize=this._.danmakuSize,\r\n\t\t\tmode=this._.danmakuMode,\r\n\t\t\ttime=this.danmakuFrame.time,\r\n\t\t\td={color,text,size,mode,time};\r\n\r\n\t\tlet S=this.Danmaku.send(d,(danmaku)=>{\r\n\t\t\tif(danmaku&&danmaku._==='text')\r\n\t\t\t\tthis.$.danmaku_input.value='';\r\n\t\t\tdanmaku.highlight=true;\r\n\t\t\tthis.danmakuFrame.load(danmaku,true);\r\n\t\t\tif(this.opt.autoHideDanmakuInput){this.danmakuInput(false);}\r\n\t\t});\r\n\r\n\t\tif(!S){\r\n\t\t\tthis.danmakuInput(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t_progressDrawer(){\r\n\t\tconst ctx=this._.progressContext,\r\n\t\t\t\tc=this.$.progress,\r\n\t\t\t\tw=c.width,\r\n\t\t\t\th=c.height,\r\n\t\t\t\tv=this.video,\r\n\t\t\t\td=v.duration,\r\n\t\t\t\tcT=v.currentTime,\r\n\t\t\t\tpad=c.pad,\r\n\t\t\t\tlen=w-2*pad;\r\n\t\tlet i;\r\n\t\tctx.clearRect(0,0,w,h);\r\n\t\tctx.lineCap = \"round\";\r\n\t\t//background\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle='#eee';\r\n\t\tctx.lineWidth=7;\r\n\t\tctx.moveTo(pad, 15);\r\n\t\tctx.lineTo(pad+len, 15);\r\n\t\tctx.stroke();\r\n\t\t//buffered\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = '#C0BBBB';\r\n\t\tctx.lineWidth = 2;\r\n\t\tlet tr = v.buffered;\r\n\t\tfor (i = tr.length;i--;) {\r\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 18);\r\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 18);\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\t//progress\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle='#6cf';\r\n\t\tctx.lineWidth = 5;\r\n\t\tctx.moveTo(pad,15);\r\n\t\tctx.lineTo(pad+len*cT/d,15);\r\n\t\tctx.stroke();\r\n\t\t//already played\r\n\t\tctx.beginPath();\r\n\t\tctx.strokeStyle = 'rgba(255,255,255,.3)';\r\n\t\tctx.lineWidth = 5;\r\n\t\ttr = v.played;\r\n\t\tfor (i = tr.length;i--;) {\r\n\t\t\tctx.moveTo(pad+tr.start(i) / d * len, 15);\r\n\t\t\tctx.lineTo(pad+tr.end(i) / d * len, 15);\r\n\t\t}\r\n\t\tctx.stroke();\r\n\t\t//mouse\r\n\t\tif(this._.progressX){\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.strokeStyle='rgba(0,0,0,.05)';\r\n\t\t\tctx.moveTo(pad+len*cT/d,15);\r\n\t\t\tctx.lineTo(limitIn(this._.progressX,pad,pad+len),15);\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t\tthis._.drawingProgress=false;\r\n\t}\r\n\tdrawProgress(){\r\n\t\tif(this._.drawingProgress)return;\r\n\t\tthis._.drawingProgress=true;\r\n\t\trequestAnimationFrame(()=>this._progressDrawer());\r\n\t}\r\n\tmsg(text,type='tip'){//type:tip|info|error\r\n\t\tlet msg=new MsgBox(text,type,this.$.msg_box);\r\n\t\trequestAnimationFrame(()=>msg.show());\r\n\t}\r\n}\r\n\r\nclass MsgBox{\r\n\tconstructor(text,type,parentNode){\r\n\t\tthis.using=false;\r\n\t\tlet msg=this.msg=O2H({_:'div',attr:{class:`msg_type_${type}`}});\r\n\t\tmsg.addEventListener('click',()=>this.remove());\r\n\t\tthis.parentNode=parentNode;\r\n\t\tthis.setText(text);\r\n\t}\r\n\tsetTimeout(time){\r\n\t\tif(this.timeout)clearTimeout(this.timeout);\r\n\t\tthis.timeout=setTimeout(()=>this.remove(),time||Math.max((this.texts?this.texts.length:0)*0.6*1000,5000));\r\n\t}\r\n\tsetText(text){\r\n\t\tthis.msg.innerHTML='';\r\n\t\tlet e=O2H(text);\r\n\t\te&&this.msg.appendChild(e);\r\n\t\tif(text instanceof HTMLElement)text=text.textContent;\r\n\t\tlet texts=String(text).match(/\\w+|\\S/g);\r\n\t\tthis.text=text;\r\n\t\tthis.texts=texts;\r\n\t}\r\n\trenew(text,time){\r\n\t\tthis.setText(text);\r\n\t\tthis.setTimeout(time);\r\n\t\tif(!this.using)this.show();\r\n\t}\r\n\tshow(){\r\n\t\tif(this.using)return;\r\n\t\tthis.msg.style.opacity=0;\r\n\t\tif(this.parentNode && this.parentNode!==this.msg.parentNode){\r\n\t\t\tthis.parentNode.appendChild(this.msg);\r\n\t\t}\r\n\t\tthis.msg.parentNode&&setTimeout(()=>{\r\n\t\t\tthis.using=true;\r\n\t\t\tthis.msg.style.opacity=1;\r\n\t\t},0);\r\n\t\tthis.setTimeout();\r\n\t}\r\n\tremove(){\r\n\t\tif(!this.using)return;\r\n\t\tthis.using=false;\r\n\t\tthis.msg.style.opacity=0;\r\n\t\tif(this.timeout){\r\n\t\t\tclearTimeout(this.timeout);\r\n\t\t\tthis.timeout=0;\r\n\t\t}\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.msg.parentNode&&this.msg.parentNode.removeChild(this.msg);\r\n\t\t},600);\r\n\t}\r\n}\r\n\r\n\r\nwindow.NyaP=NyaP;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\n\r\nimport {i18n} from './i18n.js';\r\nimport Danmaku from './danmaku.js';\r\nimport O2H from '../lib/Object2HTML/Object2HTML.js'\r\n\r\nconst _=i18n._;\r\n\r\n//default options\r\nconst NyaPCoreOptions={\r\n\t//for video\r\n\tmuted:false,\r\n\tvolume:1,\r\n\tloop:false,\r\n\t//for danmaku\r\n\tenableDanmaku:true,\r\n\tdanmakuModule:['TextDanmaku'],\r\n\tdanmakuModuleArg:{\r\n\t\tTextDanmaku:{\r\n\t\t\tdefaultStyle:{},\r\n\t\t\toptions:{},\r\n\t\t}\r\n\t},\r\n\t//for sending danmaku\r\n\tdefaultDanmakuColor:null,//a hex color(without #),when the color inputed is invalid,this color will be applied\r\n\tdefaultDanmakuMode:0,//right\r\n\tdefaultDanmakuSize:24,\r\n\tdanmakuSend:(d,callback)=>{callback(false);},//the func for sending danmaku\r\n\t//for player\r\n\tsource:(name,address,callback)=>callback(name,address),\r\n}\r\n\r\n\r\nclass NyaPEventEmitter{\r\n\tconstructor(){\r\n\t\tthis._events={};\r\n\t}\r\n\temit(e,...arg){\r\n\t\tthis._resolve(e,...arg);\r\n\t\tthis.globalHandle(e,...arg);\r\n\t}\r\n\t_resolve(e,...arg){\r\n\t\tif(e in this._events){\r\n\t\t\tconst hs=this._events[e];\r\n\t\t\ttry{\r\n\t\t\t\tfor(let h of hs){\r\n\t\t\t\t\tif(h.apply(this,arg)===false)return;\r\n\t\t\t\t}\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\taddEventListener(...args){\r\n\t\tthis.on(...args);\r\n\t}\r\n\ton(e,handle,top=false){\r\n\t\tif(!(handle instanceof Function))return;\r\n\t\tif(!(e in this._events))this._events[e]=[];\r\n\t\tif(top)\r\n\t\t\tthis._events[e].unshift(handle);\r\n\t\telse\r\n\t\t\tthis._events[e].push(handle);\r\n\t}\r\n\tremoveEvent(e,handle){\r\n\t\tif(!(e in this._events))return;\r\n\t\tif(arguments.length===1){delete this._events[e];return;}\r\n\t\tlet ind;\r\n\t\tif(ind=(this._events[e].indexOf(handle))>=0)this._events[e].splice(ind,1);\r\n\t\tif(this._events[e].length===0)delete this._events[e];\r\n\t}\r\n\tglobalHandle(name,...arg){}//所有事件会触发这个函数\r\n}\r\n\r\nclass NyaPlayerCore extends NyaPEventEmitter{\r\n\tconstructor(opt){\r\n\t\tsuper();\r\n\t\topt=this.opt=Object.assign({},NyaPCoreOptions,opt);\r\n\t\tconst $=this.$={document,window,NP:this};//for save elements that has an id\r\n\t\tthis.plugins={};\r\n\t\tthis.stats={};\r\n\t\tthis.i18n=i18n;\r\n\t\tthis._={//for private variables\r\n\t\t\tvideo:O2H({_:'video',attr:{id:'main_video'}}),\r\n\t\t\tplayerMode:'normal',\r\n\t\t};\r\n\r\n\t\tthis.videoFrame=O2H(\r\n\t\t\t{_:'div',attr:{id:'video_frame'},child:[\r\n\t\t\t\tthis.video,\r\n\t\t\t\t//this.container,\r\n\t\t\t\t{_:'div',attr:{id:'loading_frame'},child:[\r\n\t\t\t\t\t{_:'div',attr:{id:'loading_anime'},child:['(๑•́ ω •̀๑)']},\r\n\t\t\t\t\t{_:'div',attr:{id:'loading_info'}},\r\n\t\t\t\t]}\r\n\t\t\t]}\r\n\t\t);\r\n\t\tthis.collectEles(this.videoFrame);\r\n\r\n\r\n\t\tlet _lilc=this.loadingInfo(_('Loading core')+' -- ');\r\n\r\n\r\n\t\tif(this._danmakuEnabled){\r\n\t\t\tthis.danmakuContainer=O2H({_:'div',prop:{id:'danmaku_container'}});\r\n\t\t\tlet _lildf=this.loadingInfo(_('Loading danmaku frame')+' -- ');\r\n\t\t\tthis.Danmaku=new Danmaku(this);\r\n\t\t\tthis.videoFrame.insertBefore(this.danmakuContainer,$.loading_frame);\r\n\t\t\tthis.collectEles(this.danmakuContainer);\r\n\t\t\t_lildf.append('done');\r\n\t\t}\r\n\t\tthis._.loadingAnimeInterval=setInterval(()=>{\r\n\t\t\t$.loading_anime.style.transform=\"translate(\"+rand(-20,20)+\"px,\"+rand(-20,20)+\"px) rotate(\"+rand(-10,10)+\"deg)\";\r\n\t\t},80);\r\n\r\n\t\t//options\r\n\t\tsetTimeout(a=>{\r\n\t\t\t['muted','volume','loop'].forEach(o=>{//dont change the order\r\n\t\t\t\t(opt[o]!==undefined)&&(this.video[o]=opt[o]);\r\n\t\t\t})\r\n\t\t},0)\r\n\r\n\t\t//define events\r\n\t\t{\r\n\t\t\t//video:_loopChange\r\n\t\t\tlet LoopDesc=Object.getOwnPropertyDescriptor(HTMLMediaElement.prototype,'loop');\r\n\t\t\tObject.defineProperty(this.video,'loop',{\r\n\t\t\t\tget:LoopDesc.get,\r\n\t\t\t\tset:function(bool){\r\n\t\t\t\t\tif(bool===this.loop)return;\r\n\t\t\t\t\tthis.dispatchEvent(Object.assign(new Event('_loopChange'),{value:bool}));\r\n\t\t\t\t\tLoopDesc.set.call(this,bool);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\taddEvents(this.video,{\r\n\t\t\tloadedmetadata:e=>{\r\n\t\t\t\tclearInterval(this._.loadingAnimeInterval);\r\n\t\t\t\tif($.loading_frame.parentNode)//remove loading animation\r\n\t\t\t\t\t$.loading_frame.parentNode.removeChild($.loading_frame);\r\n\t\t\t},\r\n\t\t\terror:e=>{\r\n\t\t\t\tclearInterval(this._.loadingAnimeInterval);\r\n\t\t\t\tloading_anime.style.transform=\"\";\r\n\t\t\t\tloading_anime.innerHTML='(๑• . •๑)';\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t//define default video src handle\r\n\t\tthis.on('setVideoSrc',src=>{\r\n\t\t\tthis.video.src=src;\r\n\t\t\treturn false;//stop the event\r\n\t\t});\r\n\t\tif(opt.src)this.src=opt.src;\r\n\r\n\t\tthis.on('coreLoad',()=>{\r\n\t\t\tthis.stats.coreLoaded=true;\r\n\t\t\t_lilc.append('done');\r\n\t\t\t//this.loadingInfo(_('Core loaded'));\r\n\t\t});\r\n\t\tif(Array.isArray(opt.plugins)){//load plugins,opt.plugins is a list of url for plugins\r\n\t\t\tlet _lilp=this.loadingInfo(_('Loading plugin')+' -- ');\r\n\t\t\tlet pluginList=[];\r\n\t\t\tfor(let url of opt.plugins){\r\n\t\t\t\tpluginList.push(this.loadPlugin(url));\r\n\t\t\t}\r\n\t\t\tPromise.all(pluginList).then(()=>{\r\n\t\t\t\t_lilp.append('done');\r\n\t\t\t\tthis.emit('coreLoad');\r\n\t\t\t}).catch(e=>{\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t\tthis.emit('coreLoadingError',e);\r\n\t\t\t})\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.emit('coreLoad');\r\n\t}\r\n\tplayToggle(Switch=this.video.paused){\r\n\t\tthis.video[Switch?'play':'pause']();\r\n\t}\r\n\tloadingInfo(text){\r\n\t\tlet d=O2H({_:'div',child:[text]});\r\n\t\tthis.$.loading_info.appendChild(d);\r\n\t\treturn d;\r\n\t}\r\n\tcollectEles(ele){\r\n\t\tconst $=this.$;\r\n\t\tif(ele.id&&!$[ele.id])$[ele.id]=ele;\r\n\t\ttoArray(ele.querySelectorAll('*')).forEach(e=>{\r\n\t\t\tif(e.id&&!$[e.id])$[e.id]=e;\r\n\t\t});\r\n\t}\r\n\tplayerMode(mode='normal'){\r\n\t\tif(mode==='normal' && this._.playerMode===mode)return;\r\n\t\tif(this._.playerMode==='fullPage'){\r\n\t\t\tthis.player.style.position='';\r\n\t\t}else if(this._.playerMode==='fullScreen'){\r\n\t\t\texitFullscreen();\r\n\t\t}\r\n\t\tif(mode!=='normal' && this._.playerMode===mode)mode='normal';//back to normal mode\r\n\t\tswitch(mode){\r\n\t\t\tcase 'fullPage':{\r\n\t\t\t\tthis.player.style.position='fixed';\r\n\t\t\t\tthis.player.setAttribute('playerMode','fullPage');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'fullScreen':{\r\n\t\t\t\tthis.player.setAttribute('playerMode','fullScreen');\r\n\t\t\t\trequestFullscreen(this.player);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:{\r\n\t\t\t\tthis.player.setAttribute('playerMode','normal');\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._.playerMode=mode;\r\n\t\tthis.emit('playerModeChange',mode);\r\n\t}\r\n\tisFullscreen(){\r\n\t\tconst d=document;\r\n\t\treturn (d.webkitFullscreenElement\r\n\t\t\t\t||d.msFullscreenElement\r\n\t\t\t\t||d.mozFullScreenElement\r\n\t\t\t\t||d.fullscreenElement)\r\n\t\t\t\t==this.player;\r\n\t}\r\n\tloadPlugin(url){//load a js plugin for NyaP\r\n\t\tlet p=fetch(url)\r\n\t\t.then(res=>res.text())\r\n\t\t.then(script=>{\r\n\t\t\t'use strict';\r\n\t\t\tscript=script.trim();\r\n\t\t\tlet plugin=eval(script);\r\n\t\t\tif((typeof plugin.name!=='string')||!plugin.name)\r\n\t\t\t\tthrow(new TypeError('Invalid plugin name'));\r\n\t\t\tif(this.plugins[plugin.name])\r\n\t\t\t\tthrow(`Plugin already loaded: ${plugin.name}`);\r\n\t\t\tthis.plugins[plugin.name]=plugin;\r\n\t\t\tplugin.init(this);\r\n\t\t\tthis.emit('pluginLoaded',plugin.name);\r\n\t\t\treturn plugin.name;\r\n\t\t});\r\n\t\tp.catch(e=>{\r\n\t\t\tconsole.error('pluginLoadingError',e);\r\n\t\t\tthis.emit('pluginLoadingError',e);\r\n\t\t});\r\n\t\treturn p;\r\n\t}\r\n\tget danmakuFrame(){return this.Danmaku.danmakuFrame;}\r\n\tget player(){return this._.player;}\r\n\tget video(){return this._.video;}\r\n\tget src(){return this.video.src;}\r\n\tset src(s){\r\n\t\ts=s.trim();\r\n\t\tif(!this.stats.coreLoaded)\r\n\t\t\tthis.on('coreLoad',()=>{\r\n\t\t\t\tthis.src=s;\r\n\t\t\t});\r\n\t\telse{\r\n\t\t\tthis.emit('setVideoSrc',s);\r\n\t\t}\r\n\t}\r\n\tget TextDanmaku(){return this.danmakuFrame.modules.TextDanmaku;}\r\n\tget videoSize(){return [this.video.videoWidth,this.video.videoHeight];}\r\n\tget _danmakuEnabled(){return this.opt.enableDanmaku==true;}\r\n}\r\n\r\n\r\n//other functions\r\n\r\nfunction addEvents(target,events){\r\n\tif(!Array.isArray(target))target=[target];\r\n\tfor(let e in events)\r\n\t\te.split(/\\,/g).forEach(function(e2){\r\n\t\t\ttarget.forEach(function(t){\r\n\t\t\t\tt.addEventListener(e2,events[e])\r\n\t\t\t});\r\n\t\t});\r\n}\r\nfunction requestFullscreen(d) {\r\n\ttry{\r\n\t\t(d.requestFullscreen||\r\n\t\td.msRequestFullscreen||\r\n\t\td.mozRequestFullScreen||\r\n\t\td.webkitRequestFullscreen)\r\n\t\t.call(d);\r\n\t}catch(e){\r\n\t\tconsole.error(e)\r\n\t\talert(_('Failed to change to fullscreen mode'));\r\n\t}\r\n}\r\nfunction exitFullscreen() {\r\n\tconst d=document;\r\n\t(d.exitFullscreen||\r\n\td.msExitFullscreen||\r\n\td.mozCancelFullScreen||\r\n\td.webkitCancelFullScreen).call(d);\r\n}\r\nfunction isFullscreen() {\r\n\tconst d=document;\r\n\treturn !!(d.fullscreen || d.mozFullScreen || d.webkitIsFullScreen || d.msFullscreenElement);\r\n}\r\nfunction formatTime(sec,total){\r\n\tif(total==undefined)total=sec;\r\n\tlet r,s=sec|0,h=(s/3600)|0;\r\n\tif(total>=3600)s=s%3600;\r\n\tr=[padTime((s/60)|0),padTime(s%60)];\r\n\t(total>=3600)&&r.unshift(h);\r\n\treturn r.join(':');\r\n}\r\nfunction padTime(n){//pad number to 2 chars\r\n\treturn n>9&&n||`0${n}`;\r\n}\r\nfunction setAttrs(ele,obj){//set multi attrs to a Element\r\n\tfor(let a in obj)\r\n\t\tele.setAttribute(a,obj[a])\r\n}\r\nfunction limitIn(num,min,max){//limit the number in a range\r\n\treturn num<min?min:(num>max?max:num);\r\n}\r\nfunction rand(min, max) {\r\n\treturn (min+Math.random()*(max-min)+0.5)|0;\r\n}\r\nfunction toArray(obj){\r\n\tif(obj instanceof Array)return obj.slice();\r\n\tif(obj.length!==undefined)\r\n\t\treturn Array.prototype.slice.call(obj);\r\n\treturn [...obj];\r\n}\r\n\r\n//Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\nif(!String.prototype.startsWith)\r\nString.prototype.startsWith = function(searchString, position=0){\r\n\treturn this.substr(position, searchString.length) === searchString;\r\n};\r\n//Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\nif(!Object.assign)\r\nObject.assign = function(target, varArgs) {\r\n\t'use strict';\r\n\tif(target==null)throw new TypeError('Cannot convert undefined or null to object');\r\n\tvar to = Object(target);\r\n\tfor(var index=1;index<arguments.length;index++){\r\n\t\tvar nextSource=arguments[index];\r\n\t\tif(nextSource!=null){\r\n\t\t\tfor(var nextKey in nextSource) {\r\n\t\t\t\tif(Object.prototype.hasOwnProperty.call(nextSource,nextKey)){\r\n\t\t\t\t\tto[nextKey]=nextSource[nextKey];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn to;\r\n};\r\n//Polyfill Array.from\r\nif(!Array.from)\r\nArray.from=function(a,func){\r\n\tif(!(a instanceof Array))a=toArray(a);\r\n\tvar r=new Array(a.length);\r\n\tfor(var i=a.length;i--;)r[i]=func?func(a[i],i):a[i];\r\n\treturn r;\r\n};\r\n//Polyfill Number.isInteger\r\nif(!Number.isInteger)\r\nNumber.isInteger=function(v){\r\n  return (v|0)===v;\r\n};\r\n\r\nexport default NyaPlayerCore;\r\nexport {\r\n\tNyaPlayerCore,\r\n\taddEvents,\r\n\trequestFullscreen,\r\n\texitFullscreen,\r\n\tisFullscreen,\r\n\tformatTime,\r\n\trand,\r\n\tpadTime,\r\n\tsetAttrs,\r\n\tlimitIn,\r\n\ttoArray,\r\n}\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\n'use strict';\r\nimport {DanmakuFrame,DanmakuFrameModule} from '../lib/danmaku-frame/src/danmaku-frame.js'\r\nimport addTextDanmaku from '../lib/danmaku-text/src/danmaku-text.js'\r\nimport {limitIn} from './NyaPCore.js';\r\naddTextDanmaku(DanmakuFrame,DanmakuFrameModule);//init TextDanmaku mod\r\n\r\nconst colorChars='0123456789abcdef';\r\nconst danmakuProp=['color','text','size','mode','time'];\r\nclass Danmaku{\r\n\tconstructor(core){\r\n\t\tthis.core=core;\r\n\t\tthis.danmakuFrame=new DanmakuFrame(core.danmakuContainer);\r\n\t\tif(core.opt.danmakuModule instanceof Array){\r\n\t\t\tcore.opt.danmakuModule.forEach(m=>{\r\n\t\t\t\tthis.initModule(m);\r\n\t\t\t\tthis.danmakuFrame.enable(m);\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.danmakuFrame.setMedia(core.video);\r\n\t}\r\n\tinitModule(name){\r\n\t\treturn this.danmakuFrame.initModule(name,this.core.opt.danmakuModuleArg[name]);\r\n\t}\r\n\tload(obj){\r\n\t\treturn this.danmakuFrame.load(obj);\r\n\t}\r\n\tloadList(list){\r\n\t\tthis.danmakuFrame.loadList(list);\r\n\t}\r\n\tremove(obj){\r\n\t\tthis.danmakuFrame.unload(obj);\r\n\t}\r\n\tenable(){\r\n\t\tthis.danmakuFrame.enable();\r\n\t\tthis.core.emit('danmakuFrameToggle',name,this.module(name).enabled);\r\n\t}\r\n\tdisable(){this.danmakuFrame.enable();}\r\n\ttoggle(name,bool){\r\n\t\tif(typeof name==='boolean' || name==undefined){//frame switch mode\r\n\t\t\tbool=(name!=undefined)?name:!this.danmakuFrame.enabled;\r\n\t\t\tthis.danmakuFrame[bool?'enable':'disable']();\r\n\t\t\tthis.core.emit('danmakuFrameToggle',bool);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tif(bool==undefined)bool=!this.module(name).enabled;\r\n\t\t\tthis.danmakuFrame[bool?'enable':'disable'](name);\r\n\t\t\tthis.core.emit('danmakuModuleToggle',name,this.module(name).enabled);\r\n\t\t}catch(e){\r\n\t\t\tconsole.error(e);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tat(x,y){\r\n\t\treturn this.module('TextDanmaku').danmakuAt(x,y);\r\n\t}\r\n\tmodule(name){\r\n\t\treturn this.danmakuFrame.modules[name];\r\n\t}\r\n\tsend(obj,callback){\r\n\t\tfor(let i of danmakuProp)\r\n\t\t\tif((i in obj)===false)return false;\r\n\t\tif((obj.text||'').match(/^\\s*$/))return false;\r\n\t\tobj.color=this.isVaildColor(obj.color);\r\n\t\tif(obj.color){\r\n\t\t\tobj.color=obj.color.replace(/\\$/g,()=>{\r\n\t\t\t\treturn colorChars[limitIn((16*Math.random())|0,0,15)];\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tobj.color=null;\r\n\t\t}\r\n\t\tif(this.core.opt.danmakuSend instanceof Function){\r\n\t\t\tthis.core.opt.danmakuSend(obj,callback||(()=>{}));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tisVaildColor(co){\r\n\t\tif(typeof co !== 'string')return false;\r\n\t\treturn (co=co.match(/^\\#?(([\\da-f\\$]{3}){1,2})$/i))?co[1]:false;\r\n\t}\r\n}\r\n\r\nexport default Danmaku;\r\n","/*\r\nCopyright luojia@luojia.me\r\nLGPL license\r\n*/\r\nconst i18n={\r\n\tlang:null,\r\n\tlangs:{},\r\n\t_:(str,...args)=>{\r\n\t\tlet s=(i18n.lang&&i18n.langs[i18n.lang][str])||str;\r\n\t\targs.length&&args.forEach((arg,ind)=>{s=s.replace(`$${ind}`,arg)});\r\n\t\treturn s;\r\n\t}\r\n};\r\n\r\n\r\ni18n.langs['zh-CN']={\r\n\t'play':'播放',\r\n\t'Send':'发送',\r\n\t'loop':'循环',\r\n\t'pause':'暂停',\r\n\t'muted':'静音',\r\n\t'volume':'音量',\r\n\t'settings':'设置',\r\n\t'wheeling':'滚轮',\r\n\t'hex color':'Hex颜色',\r\n\t'Loading core':'加载核心',\r\n\t'Loading video':'加载视频',\r\n\t'Loading plugin':'加载插件',\r\n\t'full page(P)':'全页模式(P)',\r\n\t'Loading danmaku':'加载弹幕',\r\n\t'Creating player':'创建播放器',\r\n\t'full screen(F)':'全屏模式(F)',\r\n\t'danmaku toggle(D)':'弹幕开关(D)',\r\n\t'Input danmaku here':'在这里输入弹幕',\r\n\t'Loading danmaku frame':'加载弹幕框架',\r\n\t'danmaku input(Enter)':'弹幕输入框(回车)',\r\n\t'Failed to change to fullscreen mode':'无法切换到全屏模式',\r\n}\r\n\r\n\r\n\r\n//automatically select a language\r\n\r\nif(!navigator.languages){\r\n\tnavigator.languages=[navigator.language||navigator.browserLanguage];\r\n}\r\n\r\nfor(let lang of [...navigator.languages]){\r\n\tif(i18n.langs[lang]){\r\n\t\ti18n.lang=lang;\r\n\t\tbreak;\r\n\t}\r\n\tlet code=lang.match(/^\\w+/)[0];\r\n\tfor(let cod in i18n.langs){\r\n\t\tif(cod.startsWith(code)){\r\n\t\t\ti18n.lang=cod;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif(i18n.lang)break;\r\n}\r\nconsole.debug('Language:'+i18n.lang)\r\n\r\nexport {i18n};"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}